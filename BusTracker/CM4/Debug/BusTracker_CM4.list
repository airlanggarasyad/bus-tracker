
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a318  0800a318  0001a318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a924  0800a924  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a92c  0800a92c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  0800ab14  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800ab14  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125b5  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002686  00000000  00000000  000327bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00034e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5a7  00000000  00000000  00037300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf8  00000000  00000000  000548a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b488a  00000000  00000000  0006749f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011bd29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  0011bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a300 	.word	0x0800a300

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800a300 	.word	0x0800a300

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001108:	f000 b9ac 	b.w	8001464 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83e 	bl	8001194 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4628      	mov	r0, r5
 800112c:	4621      	mov	r1, r4
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	f7ff fcab 	bl	8000a8c <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__aeabi_d2ulz+0x34>)
 800115c:	2200      	movs	r2, #0
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff fa21 	bl	80005a8 <__aeabi_dmul>
 8001166:	f7ff fcf7 	bl	8000b58 <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f9a2 	bl	80004b4 <__aeabi_ui2d>
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff fa18 	bl	80005a8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7ff f85a 	bl	8000238 <__aeabi_dsub>
 8001184:	f7ff fce8 	bl	8000b58 <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <__udivmoddi4>:
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001198:	9e08      	ldr	r6, [sp, #32]
 800119a:	460d      	mov	r5, r1
 800119c:	4604      	mov	r4, r0
 800119e:	4688      	mov	r8, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14d      	bne.n	8001240 <__udivmoddi4+0xac>
 80011a4:	428a      	cmp	r2, r1
 80011a6:	4694      	mov	ip, r2
 80011a8:	d968      	bls.n	800127c <__udivmoddi4+0xe8>
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b152      	cbz	r2, 80011c6 <__udivmoddi4+0x32>
 80011b0:	fa01 f302 	lsl.w	r3, r1, r2
 80011b4:	f1c2 0120 	rsb	r1, r2, #32
 80011b8:	fa20 f101 	lsr.w	r1, r0, r1
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	ea41 0803 	orr.w	r8, r1, r3
 80011c4:	4094      	lsls	r4, r2
 80011c6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ca:	0c21      	lsrs	r1, r4, #16
 80011cc:	fbb8 fef5 	udiv	lr, r8, r5
 80011d0:	fa1f f78c 	uxth.w	r7, ip
 80011d4:	fb05 831e 	mls	r3, r5, lr, r8
 80011d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011dc:	fb0e f107 	mul.w	r1, lr, r7
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x68>
 80011e4:	eb1c 0303 	adds.w	r3, ip, r3
 80011e8:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80011ec:	f080 811e 	bcs.w	800142c <__udivmoddi4+0x298>
 80011f0:	4299      	cmp	r1, r3
 80011f2:	f240 811b 	bls.w	800142c <__udivmoddi4+0x298>
 80011f6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fa:	4463      	add	r3, ip
 80011fc:	1a5b      	subs	r3, r3, r1
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	fbb3 f0f5 	udiv	r0, r3, r5
 8001204:	fb05 3310 	mls	r3, r5, r0, r3
 8001208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120c:	fb00 f707 	mul.w	r7, r0, r7
 8001210:	42a7      	cmp	r7, r4
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x96>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800121c:	f080 8108 	bcs.w	8001430 <__udivmoddi4+0x29c>
 8001220:	42a7      	cmp	r7, r4
 8001222:	f240 8105 	bls.w	8001430 <__udivmoddi4+0x29c>
 8001226:	4464      	add	r4, ip
 8001228:	3802      	subs	r0, #2
 800122a:	1be4      	subs	r4, r4, r7
 800122c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001230:	2100      	movs	r1, #0
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa8>
 8001234:	40d4      	lsrs	r4, r2
 8001236:	2300      	movs	r3, #0
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	428b      	cmp	r3, r1
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0xc2>
 8001244:	2e00      	cmp	r6, #0
 8001246:	f000 80ee 	beq.w	8001426 <__udivmoddi4+0x292>
 800124a:	2100      	movs	r1, #0
 800124c:	e9c6 0500 	strd	r0, r5, [r6]
 8001250:	4608      	mov	r0, r1
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	fab3 f183 	clz	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	d14a      	bne.n	80012f4 <__udivmoddi4+0x160>
 800125e:	42ab      	cmp	r3, r5
 8001260:	d302      	bcc.n	8001268 <__udivmoddi4+0xd4>
 8001262:	4282      	cmp	r2, r0
 8001264:	f200 80f9 	bhi.w	800145a <__udivmoddi4+0x2c6>
 8001268:	1a84      	subs	r4, r0, r2
 800126a:	eb65 0303 	sbc.w	r3, r5, r3
 800126e:	2001      	movs	r0, #1
 8001270:	4698      	mov	r8, r3
 8001272:	2e00      	cmp	r6, #0
 8001274:	d0e2      	beq.n	800123c <__udivmoddi4+0xa8>
 8001276:	e9c6 4800 	strd	r4, r8, [r6]
 800127a:	e7df      	b.n	800123c <__udivmoddi4+0xa8>
 800127c:	b902      	cbnz	r2, 8001280 <__udivmoddi4+0xec>
 800127e:	deff      	udf	#255	; 0xff
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8091 	bne.w	80013ac <__udivmoddi4+0x218>
 800128a:	eba1 050c 	sub.w	r5, r1, ip
 800128e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001292:	fa1f fe8c 	uxth.w	lr, ip
 8001296:	2101      	movs	r1, #1
 8001298:	fbb5 f3f7 	udiv	r3, r5, r7
 800129c:	fb07 5013 	mls	r0, r7, r3, r5
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012a6:	fb0e f003 	mul.w	r0, lr, r3
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x12c>
 80012ae:	eb1c 0505 	adds.w	r5, ip, r5
 80012b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x12a>
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	f200 80cb 	bhi.w	8001454 <__udivmoddi4+0x2c0>
 80012be:	4643      	mov	r3, r8
 80012c0:	1a2d      	subs	r5, r5, r0
 80012c2:	b2a4      	uxth	r4, r4
 80012c4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012c8:	fb07 5510 	mls	r5, r7, r0, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb0e fe00 	mul.w	lr, lr, r0
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0x156>
 80012d8:	eb1c 0404 	adds.w	r4, ip, r4
 80012dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x154>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f200 80bb 	bhi.w	800145e <__udivmoddi4+0x2ca>
 80012e8:	4628      	mov	r0, r5
 80012ea:	eba4 040e 	sub.w	r4, r4, lr
 80012ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x9e>
 80012f4:	f1c1 0720 	rsb	r7, r1, #32
 80012f8:	408b      	lsls	r3, r1
 80012fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa20 f407 	lsr.w	r4, r0, r7
 8001306:	fa05 f301 	lsl.w	r3, r5, r1
 800130a:	431c      	orrs	r4, r3
 800130c:	40fd      	lsrs	r5, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fa00 f301 	lsl.w	r3, r0, r1
 8001316:	fbb5 f8f9 	udiv	r8, r5, r9
 800131a:	0c20      	lsrs	r0, r4, #16
 800131c:	fa1f fe8c 	uxth.w	lr, ip
 8001320:	fb09 5518 	mls	r5, r9, r8, r5
 8001324:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	42a8      	cmp	r0, r5
 800132e:	fa02 f201 	lsl.w	r2, r2, r1
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b8>
 8001334:	eb1c 0505 	adds.w	r5, ip, r5
 8001338:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2bc>
 8001340:	42a8      	cmp	r0, r5
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2bc>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	4465      	add	r5, ip
 800134c:	1a2d      	subs	r5, r5, r0
 800134e:	b2a4      	uxth	r4, r4
 8001350:	fbb5 f0f9 	udiv	r0, r5, r9
 8001354:	fb09 5510 	mls	r5, r9, r0, r5
 8001358:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800135c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001360:	45ae      	cmp	lr, r5
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x1e2>
 8001364:	eb1c 0505 	adds.w	r5, ip, r5
 8001368:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800136c:	d26c      	bcs.n	8001448 <__udivmoddi4+0x2b4>
 800136e:	45ae      	cmp	lr, r5
 8001370:	d96a      	bls.n	8001448 <__udivmoddi4+0x2b4>
 8001372:	3802      	subs	r0, #2
 8001374:	4465      	add	r5, ip
 8001376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800137a:	fba0 9402 	umull	r9, r4, r0, r2
 800137e:	eba5 050e 	sub.w	r5, r5, lr
 8001382:	42a5      	cmp	r5, r4
 8001384:	46c8      	mov	r8, r9
 8001386:	46a6      	mov	lr, r4
 8001388:	d356      	bcc.n	8001438 <__udivmoddi4+0x2a4>
 800138a:	d053      	beq.n	8001434 <__udivmoddi4+0x2a0>
 800138c:	b15e      	cbz	r6, 80013a6 <__udivmoddi4+0x212>
 800138e:	ebb3 0208 	subs.w	r2, r3, r8
 8001392:	eb65 050e 	sbc.w	r5, r5, lr
 8001396:	fa05 f707 	lsl.w	r7, r5, r7
 800139a:	fa22 f301 	lsr.w	r3, r2, r1
 800139e:	40cd      	lsrs	r5, r1
 80013a0:	431f      	orrs	r7, r3
 80013a2:	e9c6 7500 	strd	r7, r5, [r6]
 80013a6:	2100      	movs	r1, #0
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	f1c2 0320 	rsb	r3, r2, #32
 80013b0:	fa20 f103 	lsr.w	r1, r0, r3
 80013b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b8:	fa25 f303 	lsr.w	r3, r5, r3
 80013bc:	4095      	lsls	r5, r2
 80013be:	430d      	orrs	r5, r1
 80013c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013cc:	fb07 3011 	mls	r0, r7, r1, r3
 80013d0:	0c2b      	lsrs	r3, r5, #16
 80013d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013d6:	fb01 f00e 	mul.w	r0, r1, lr
 80013da:	4298      	cmp	r0, r3
 80013dc:	fa04 f402 	lsl.w	r4, r4, r2
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x260>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013ea:	d22f      	bcs.n	800144c <__udivmoddi4+0x2b8>
 80013ec:	4298      	cmp	r0, r3
 80013ee:	d92d      	bls.n	800144c <__udivmoddi4+0x2b8>
 80013f0:	3902      	subs	r1, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013fc:	fb07 3310 	mls	r3, r7, r0, r3
 8001400:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001404:	fb00 f30e 	mul.w	r3, r0, lr
 8001408:	42ab      	cmp	r3, r5
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x28a>
 800140c:	eb1c 0505 	adds.w	r5, ip, r5
 8001410:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001414:	d216      	bcs.n	8001444 <__udivmoddi4+0x2b0>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d914      	bls.n	8001444 <__udivmoddi4+0x2b0>
 800141a:	3802      	subs	r0, #2
 800141c:	4465      	add	r5, ip
 800141e:	1aed      	subs	r5, r5, r3
 8001420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001424:	e738      	b.n	8001298 <__udivmoddi4+0x104>
 8001426:	4631      	mov	r1, r6
 8001428:	4630      	mov	r0, r6
 800142a:	e707      	b.n	800123c <__udivmoddi4+0xa8>
 800142c:	4686      	mov	lr, r0
 800142e:	e6e5      	b.n	80011fc <__udivmoddi4+0x68>
 8001430:	4618      	mov	r0, r3
 8001432:	e6fa      	b.n	800122a <__udivmoddi4+0x96>
 8001434:	454b      	cmp	r3, r9
 8001436:	d2a9      	bcs.n	800138c <__udivmoddi4+0x1f8>
 8001438:	ebb9 0802 	subs.w	r8, r9, r2
 800143c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001440:	3801      	subs	r0, #1
 8001442:	e7a3      	b.n	800138c <__udivmoddi4+0x1f8>
 8001444:	4640      	mov	r0, r8
 8001446:	e7ea      	b.n	800141e <__udivmoddi4+0x28a>
 8001448:	4620      	mov	r0, r4
 800144a:	e794      	b.n	8001376 <__udivmoddi4+0x1e2>
 800144c:	4641      	mov	r1, r8
 800144e:	e7d1      	b.n	80013f4 <__udivmoddi4+0x260>
 8001450:	46d0      	mov	r8, sl
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b8>
 8001454:	3b02      	subs	r3, #2
 8001456:	4465      	add	r5, ip
 8001458:	e732      	b.n	80012c0 <__udivmoddi4+0x12c>
 800145a:	4608      	mov	r0, r1
 800145c:	e709      	b.n	8001272 <__udivmoddi4+0xde>
 800145e:	4464      	add	r4, ip
 8001460:	3802      	subs	r0, #2
 8001462:	e742      	b.n	80012ea <__udivmoddi4+0x156>

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f023 0218 	bic.w	r2, r3, #24
 8001488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d4:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 80014d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f000 fc33 	bl	8001d44 <HAL_Init>

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f87f 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f000 f961 	bl	80017a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014e6:	f000 f913 	bl	8001710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014ea:	f000 f8d3 	bl	8001694 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  struct GPS_Data_t teseoData;
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f001 fc84 	bl	8002dfc <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 80014f4:	2374      	movs	r3, #116	; 0x74
 80014f6:	b299      	uxth	r1, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	2202      	movs	r2, #2
 80014fc:	4833      	ldr	r0, [pc, #204]	; (80015cc <main+0xfc>)
 80014fe:	f001 f883 	bl	8002608 <HAL_I2C_IsDeviceReady>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if (ret != HAL_OK) {
 8001508:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <main+0x4e>
		  sprintf((char*)buff, "Device is not ready \r\n");
 8001510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001514:	492e      	ldr	r1, [pc, #184]	; (80015d0 <main+0x100>)
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fc76 	bl	8005e08 <siprintf>
 800151c:	e018      	b.n	8001550 <main+0x80>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 800151e:	2374      	movs	r3, #116	; 0x74
 8001520:	b299      	uxth	r1, r3
 8001522:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	4826      	ldr	r0, [pc, #152]	; (80015cc <main+0xfc>)
 8001532:	f000 ff73 	bl	800241c <HAL_I2C_Master_Receive>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

		  if (ret != HAL_OK) {
 800153c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <main+0x80>
			  sprintf((char*)buff, "Error Rx \r\n");
 8001544:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <main+0x104>)
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fc5c 	bl	8005e08 <siprintf>
		  }
	  }

	  teseoData = Parse_NMEA(receivedData);
 8001550:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001554:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8001558:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f97a 	bl	8001858 <Parse_NMEA>

	  char data[64];
	  sprintf(data, "Time: %.3f Lat: %.6f Lon:%.6f\r\n", teseoData.time, teseoData.latitude, teseoData.longitude);
 8001564:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001568:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffc2 	bl	80004f8 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
 8001578:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800157c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffb8 	bl	80004f8 <__aeabi_f2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001590:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffae 	bl	80004f8 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	1d38      	adds	r0, r7, #4
 80015a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a6:	e9cd 4500 	strd	r4, r5, [sp]
 80015aa:	4642      	mov	r2, r8
 80015ac:	464b      	mov	r3, r9
 80015ae:	490a      	ldr	r1, [pc, #40]	; (80015d8 <main+0x108>)
 80015b0:	f004 fc2a 	bl	8005e08 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof data, HAL_MAX_DELAY);
 80015b4:	1d39      	adds	r1, r7, #4
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	2240      	movs	r2, #64	; 0x40
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <main+0x10c>)
 80015be:	f002 ffc6 	bl	800454e <HAL_UART_Transmit>
	  HAL_Delay(500);
 80015c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c6:	f000 fc33 	bl	8001e30 <HAL_Delay>
  {
 80015ca:	e793      	b.n	80014f4 <main+0x24>
 80015cc:	200001fc 	.word	0x200001fc
 80015d0:	0800a318 	.word	0x0800a318
 80015d4:	0800a330 	.word	0x0800a330
 80015d8:	0800a33c 	.word	0x0800a33c
 80015dc:	20000248 	.word	0x20000248

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09a      	sub	sp, #104	; 0x68
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2248      	movs	r2, #72	; 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fd96 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001606:	f001 fbd1 	bl	8002dac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ff32 	bl	8001474 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <SystemClock_Config+0xb0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <SystemClock_Config+0xb0>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <SystemClock_Config+0xb0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800162c:	2324      	movs	r3, #36	; 0x24
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001630:	2381      	movs	r3, #129	; 0x81
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001638:	2300      	movs	r3, #0
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fe99 	bl	8003380 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001654:	f000 f99c 	bl	8001990 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001658:	236f      	movs	r3, #111	; 0x6f
 800165a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fa1d 	bl	8003ab8 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001684:	f000 f984 	bl	8001990 <Error_Handler>
  }
}
 8001688:	bf00      	nop
 800168a:	3768      	adds	r7, #104	; 0x68
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	58000400 	.word	0x58000400

08001694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x74>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <MX_I2C1_Init+0x78>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a0:	f640 6214 	movw	r2, #3604	; 0xe14
 80016a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_I2C1_Init+0x74>)
 80016d2:	f000 fe13 	bl	80022fc <HAL_I2C_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016dc:	f000 f958 	bl	8001990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <MX_I2C1_Init+0x74>)
 80016e4:	f001 facc 	bl	8002c80 <HAL_I2CEx_ConfigAnalogFilter>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80016ee:	f000 f94f 	bl	8001990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_I2C1_Init+0x74>)
 80016f6:	f001 fb0d 	bl	8002d14 <HAL_I2CEx_ConfigDigitalFilter>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001700:	f000 f946 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200001fc 	.word	0x200001fc
 800170c:	40005400 	.word	0x40005400

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <MX_USART2_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800175a:	f002 fea8 	bl	80044ae <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f000 f914 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800176c:	f003 fbe6 	bl	8004f3c <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f000 f90b 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800177e:	f003 fc1b 	bl	8004fb8 <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f000 f902 	bl	8001990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_USART2_UART_Init+0x90>)
 800178e:	f003 fb9d 	bl	8004ecc <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f000 f8fa 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000248 	.word	0x20000248
 80017a4:	40004400 	.word	0x40004400

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fe76 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2004      	movs	r0, #4
 80017b4:	f7ff fe73 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff fe70 	bl	800149e <LL_AHB2_GRP1_EnableClock>

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <DDM_To_DD>:

/* USER CODE BEGIN 4 */
float DDM_To_DD(float ddm) {
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    float degree = floor(ddm/100);
 80017cc:	4920      	ldr	r1, [pc, #128]	; (8001850 <DDM_To_DD+0x8c>)
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fbf4 	bl	8000fbc <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe8e 	bl	80004f8 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f008 fd0c 	bl	800a200 <floor>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9d2 	bl	8000b98 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]
    float minute = ddm - ((degree * 100));
 80017f8:	4915      	ldr	r1, [pc, #84]	; (8001850 <DDM_To_DD+0x8c>)
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff fb2a 	bl	8000e54 <__aeabi_fmul>
 8001800:	4603      	mov	r3, r0
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fa1b 	bl	8000c40 <__aeabi_fsub>
 800180a:	4603      	mov	r3, r0
 800180c:	613b      	str	r3, [r7, #16]

    float dd = degree + minute / 60.0;
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7fe fe72 	bl	80004f8 <__aeabi_f2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	6938      	ldr	r0, [r7, #16]
 800181a:	f7fe fe6d 	bl	80004f8 <__aeabi_f2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <DDM_To_DD+0x90>)
 8001824:	f7fe ffea 	bl	80007fc <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4620      	mov	r0, r4
 800182e:	4629      	mov	r1, r5
 8001830:	f7fe fd04 	bl	800023c <__adddf3>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f9ac 	bl	8000b98 <__aeabi_d2f>
 8001840:	4603      	mov	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]

    return dd;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	42c80000 	.word	0x42c80000
 8001854:	404e0000 	.word	0x404e0000

08001858 <Parse_NMEA>:

struct GPS_Data_t Parse_NMEA(uint8_t* receivedData) {
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800185e:	af02      	add	r7, sp, #8
 8001860:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001864:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8001868:	6018      	str	r0, [r3, #0]
 800186a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800186e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001872:	6019      	str	r1, [r3, #0]
	char *desiredNMEA = "GPGGA";
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <Parse_NMEA+0x130>)
 8001876:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
	char filteredMessage[512];
	char *ptr;

	struct GPS_Data_t data;

	strcpy(stringData, (char*)receivedData);
 800187a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800187e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001882:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	4610      	mov	r0, r2
 800188a:	f004 fb4c 	bl	8005f26 <strcpy>
	ptr = strstr(stringData, desiredNMEA);
 800188e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001892:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fb4d 	bl	8005f36 <strstr>
 800189c:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618

	int position = ptr - stringData;
 80018a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80018a4:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	int i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

	while(stringData[position] != '\n') {
 80018b4:	e01a      	b.n	80018ec <Parse_NMEA+0x94>
		filteredMessage[i] = stringData[position];
 80018b6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80018ba:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80018be:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80018c2:	4413      	add	r3, r2
 80018c4:	7819      	ldrb	r1, [r3, #0]
 80018c6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80018ca:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 80018ce:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80018d2:	4413      	add	r3, r2
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
		i++;
 80018d8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
		position++;
 80018e2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80018e6:	3301      	adds	r3, #1
 80018e8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	while(stringData[position] != '\n') {
 80018ec:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80018f0:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80018f4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b0a      	cmp	r3, #10
 80018fe:	d1da      	bne.n	80018b6 <Parse_NMEA+0x5e>
	}

	sscanf(filteredMessage, "GPGGA,%f,%f,S,%f,E,", &data.time, &data.latitude, &data.longitude);
 8001900:	f107 010c 	add.w	r1, r7, #12
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	f103 0208 	add.w	r2, r3, #8
 800190c:	f107 0018 	add.w	r0, r7, #24
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	3304      	adds	r3, #4
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	460b      	mov	r3, r1
 800191a:	491c      	ldr	r1, [pc, #112]	; (800198c <Parse_NMEA+0x134>)
 800191c:	f004 fa94 	bl	8005e48 <siscanf>

	data.longitude = DDM_To_DD(data.longitude);
 8001920:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001924:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff4a 	bl	80017c4 <DDM_To_DD>
 8001930:	4602      	mov	r2, r0
 8001932:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001936:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 800193a:	605a      	str	r2, [r3, #4]
	data.latitude = -1 * DDM_To_DD(data.latitude);
 800193c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001940:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff3c 	bl	80017c4 <DDM_To_DD>
 800194c:	4603      	mov	r3, r0
 800194e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001952:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001956:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 800195a:	601a      	str	r2, [r3, #0]

	return data;
 800195c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001960:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800196a:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 800196e:	460b      	mov	r3, r1
 8001970:	ca07      	ldmia	r2, {r0, r1, r2}
 8001972:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001976:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800197a:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f507 67c5 	add.w	r7, r7, #1576	; 0x628
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	0800a35c 	.word	0x0800a35c
 800198c:	0800a364 	.word	0x0800a364

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>

0800199a <LL_AHB2_GRP1_EnableClock>:
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4313      	orrs	r3, r2
 80019e0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4013      	ands	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b096      	sub	sp, #88	; 0x58
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2238      	movs	r2, #56	; 0x38
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fb79 	bl	8005120 <memset>
  if(hi2c->Instance==I2C1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <HAL_I2C_MspInit+0x84>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d125      	bne.n	8001a84 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a3c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a40:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fbf6 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a52:	f7ff ff9d 	bl	8001990 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff ff9f 	bl	800199a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a74:	4619      	mov	r1, r3
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <HAL_I2C_MspInit+0x88>)
 8001a78:	f000 fae0 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a80:	f7ff ffa3 	bl	80019ca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3758      	adds	r7, #88	; 0x58
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	48000400 	.word	0x48000400

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	; 0x58
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2238      	movs	r2, #56	; 0x38
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fb33 	bl	8005120 <memset>
  if(huart->Instance==USART2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d126      	bne.n	8001b12 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001acc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fbb0 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ade:	f7ff ff57 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ae6:	f7ff ff70 	bl	80019ca <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff ff55 	bl	800199a <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001af0:	230c      	movs	r3, #12
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b00:	2307      	movs	r3, #7
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f000 fa95 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3758      	adds	r7, #88	; 0x58
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40004400 	.word	0x40004400

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b66:	f000 f947 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
	return 1;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b86:	f003 faa1 	bl	80050cc <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
	}

return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
	}
	return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c48:	605a      	str	r2, [r3, #4]
	return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <_isatty>:

int _isatty(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
	return 0;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f003 fa0a 	bl	80050cc <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20008000 	.word	0x20008000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	200002d8 	.word	0x200002d8
 8001cec:	200002f0 	.word	0x200002f0

08001cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf4:	f7ff fbb8 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	; (8001d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <LoopForever+0xe>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <LoopForever+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d1e:	f003 f9db 	bl	80050d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d22:	f7ff fbd5 	bl	80014d0 <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   r0, =_estack
 8001d28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d34:	0800a934 	.word	0x0800a934
  ldr r2, =_sbss
 8001d38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d3c:	200002f0 	.word	0x200002f0

08001d40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f000 f942 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d54:	f002 f892 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_Init+0x3c>)
 8001d5c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f810 	bl	8001d84 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e001      	b.n	8001d74 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d70:	f7ff fe43 	bl	80019fa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d024      	beq.n	8001de2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d98:	f002 f870 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_InitTick+0x6c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 f936 	bl	8002022 <HAL_SYSTICK_Config>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	d809      	bhi.n	8001dd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dca:	f000 f910 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_InitTick+0x70>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e004      	b.n	8001de6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000008 	.word	0x20000008
 8001e18:	200002dc 	.word	0x200002dc

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	200002dc 	.word	0x200002dc

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffe0 	bl	8001e1c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb8:	f7ff ff90 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff49 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff60 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff92 	bl	8001f30 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff61 	bl	8001edc <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffb2 	bl	8001f94 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e140      	b.n	80022ce <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8132 	beq.w	80022c8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d005      	beq.n	800207c <HAL_GPIO_Init+0x40>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d130      	bne.n	80020de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b2:	2201      	movs	r2, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0201 	and.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d017      	beq.n	800211a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d123      	bne.n	800216e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	6939      	ldr	r1, [r7, #16]
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808c 	beq.w	80022c8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021b0:	4a4e      	ldr	r2, [pc, #312]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	2207      	movs	r2, #7
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021da:	d00d      	beq.n	80021f8 <HAL_GPIO_Init+0x1bc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a44      	ldr	r2, [pc, #272]	; (80022f0 <HAL_GPIO_Init+0x2b4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <HAL_GPIO_Init+0x1b8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <HAL_GPIO_Init+0x2b8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_GPIO_Init+0x1b4>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e004      	b.n	80021fa <HAL_GPIO_Init+0x1be>
 80021f0:	2307      	movs	r3, #7
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x1be>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_GPIO_Init+0x1be>
 80021f8:	2300      	movs	r3, #0
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	4093      	lsls	r3, r2
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220a:	4938      	ldr	r1, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002218:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223c:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 800226e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002272:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f aeb7 	bne.w	800204c <HAL_GPIO_Init+0x10>
  }
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	48000400 	.word	0x48000400
 80022f4:	48000800 	.word	0x48000800
 80022f8:	58000800 	.word	0x58000800

080022fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e081      	b.n	8002412 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fb70 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800234c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	e006      	b.n	8002384 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002382:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d104      	bne.n	8002396 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002394:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69d9      	ldr	r1, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 80db 	bne.w	80025f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2C_Master_Receive+0x30>
 8002448:	2302      	movs	r3, #2
 800244a:	e0d4      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002454:	f7ff fce2 	bl	8001e1c <HAL_GetTick>
 8002458:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f9f8 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0bf      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2222      	movs	r2, #34	; 0x22
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	; 0xff
 80024a6:	d90e      	bls.n	80024c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	8979      	ldrh	r1, [r7, #10]
 80024b6:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fbae 	bl	8002c20 <I2C_TransferConfig>
 80024c4:	e06d      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_I2C_Master_Receive+0x1e4>)
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fb9d 	bl	8002c20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024e6:	e05c      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa31 	bl	8002954 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e07c      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d034      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x186>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d130      	bne.n	80025a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f986 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e04d      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d90e      	bls.n	8002582 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	22ff      	movs	r2, #255	; 0xff
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fb50 	bl	8002c20 <I2C_TransferConfig>
 8002580:	e00f      	b.n	80025a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	2300      	movs	r3, #0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fb3f 	bl	8002c20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d19d      	bne.n	80024e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f993 	bl	80028dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2220      	movs	r2, #32
 80025c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_I2C_Master_Receive+0x1e8>)
 80025d4:	400b      	ands	r3, r1
 80025d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	80002400 	.word	0x80002400
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	460b      	mov	r3, r1
 8002616:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	f040 80f1 	bne.w	800280c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002638:	d101      	bne.n	800263e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	e0e7      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2C_IsDeviceReady+0x44>
 8002648:	2302      	movs	r3, #2
 800264a:	e0e0      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_I2C_IsDeviceReady+0x72>
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002678:	e004      	b.n	8002684 <HAL_I2C_IsDeviceReady+0x7c>
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002680:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800268a:	f7ff fbc7 	bl	8001e1c <HAL_GetTick>
 800268e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b20      	cmp	r3, #32
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026bc:	e034      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c4:	d01a      	beq.n	80026fc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7ff fba9 	bl	8001e1c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <HAL_I2C_IsDeviceReady+0xd4>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10f      	bne.n	80026fc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e088      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b20      	cmp	r3, #32
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002728:	7ffb      	ldrb	r3, [r7, #31]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_I2C_IsDeviceReady+0x12c>
 800272e:	7fbb      	ldrb	r3, [r7, #30]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0c4      	beq.n	80026be <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b10      	cmp	r3, #16
 8002740:	d01a      	beq.n	8002778 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2120      	movs	r1, #32
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f885 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e058      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2220      	movs	r2, #32
 8002762:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e04a      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f86a 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03d      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2210      	movs	r2, #16
 8002798:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2220      	movs	r2, #32
 80027a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d118      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2120      	movs	r1, #32
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f849 	bl	800285c <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e01c      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	f63f af3b 	bhi.w	8002662 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d103      	bne.n	8002834 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d007      	beq.n	8002852 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	619a      	str	r2, [r3, #24]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286c:	e022      	b.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002874:	d01e      	beq.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff fad1 	bl	8001e1c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d113      	bne.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00f      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d0cd      	beq.n	800286e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e8:	e028      	b.n	800293c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f8aa 	bl	8002a48 <I2C_IsErrorOccurred>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e026      	b.n	800294c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff fa8d 	bl	8001e1c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d113      	bne.n	800293c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e007      	b.n	800294c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	d1cf      	bne.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002960:	e064      	b.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f86e 	bl	8002a48 <I2C_IsErrorOccurred>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e062      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b20      	cmp	r3, #32
 8002982:	d138      	bne.n	80029f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d105      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e04e      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d107      	bne.n	80029bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2210      	movs	r2, #16
 80029b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2204      	movs	r2, #4
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
 80029ba:	e002      	b.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2220      	movs	r2, #32
 80029c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80029d6:	400b      	ands	r3, r1
 80029d8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e022      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff fa11 	bl	8001e1c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10f      	bne.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d193      	bne.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	fe00e800 	.word	0xfe00e800

08002a48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d075      	beq.n	8002b60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2210      	movs	r2, #16
 8002a7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7c:	e056      	b.n	8002b2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a84:	d052      	beq.n	8002b2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7ff f9c9 	bl	8001e1c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_IsErrorOccurred+0x54>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d147      	bne.n	8002b2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abe:	d12e      	bne.n	8002b1e <I2C_IsErrorOccurred+0xd6>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac6:	d02a      	beq.n	8002b1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d027      	beq.n	8002b1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002adc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ade:	f7ff f99d 	bl	8001e1c <HAL_GetTick>
 8002ae2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e01b      	b.n	8002b1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ae6:	f7ff f999 	bl	8001e1c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b19      	cmp	r3, #25
 8002af2:	d914      	bls.n	8002b1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d1dc      	bne.n	8002ae6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d003      	beq.n	8002b42 <I2C_IsErrorOccurred+0xfa>
 8002b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d09d      	beq.n	8002a7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01c      	beq.n	8002c10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff fe1d 	bl	8002816 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <I2C_IsErrorOccurred+0x1d4>)
 8002be8:	400b      	ands	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c38:	7a7b      	ldrb	r3, [r7, #9]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c40:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	0d5b      	lsrs	r3, r3, #21
 8002c5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <I2C_TransferConfig+0x5c>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	03ff63ff 	.word	0x03ff63ff

08002c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d138      	bne.n	8002d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e032      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d139      	bne.n	8002d9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e033      	b.n	8002da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	58000400 	.word	0x58000400

08002dc8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <LL_PWR_EnableBootC2+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <LL_PWR_EnableBootC2+0x18>)
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	58000400 	.word	0x58000400

08002de4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	58000400 	.word	0x58000400

08002dfc <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002e04:	f7ff ffe0 	bl	8002dc8 <LL_PWR_EnableBootC2>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d101      	bne.n	8002e26 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	58000400 	.word	0x58000400

08002e34 <LL_RCC_HSE_EnableTcxo>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_HSE_DisableTcxo>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d101      	bne.n	8002e84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_HSE_Enable>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_HSE_Disable>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_HSE_IsReady>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ed8:	d101      	bne.n	8002ede <LL_RCC_HSE_IsReady+0x18>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_RCC_HSE_IsReady+0x1a>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_HSI_Enable>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_HSI_Disable>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_HSI_IsReady>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d101      	bne.n	8002f38 <LL_RCC_HSI_IsReady+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_RCC_HSI_IsReady+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d101      	bne.n	8002f82 <LL_RCC_LSE_IsReady+0x18>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_RCC_LSE_IsReady+0x1a>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d101      	bne.n	8002fe4 <LL_RCC_LSI_IsReady+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_RCC_LSI_IsReady+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6013      	str	r3, [r2, #0]
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d101      	bne.n	800303c <LL_RCC_MSI_IsReady+0x16>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <LL_RCC_MSI_IsReady+0x18>
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d101      	bne.n	800305c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800312e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003154:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003158:	f023 020f 	bic.w	r2, r3, #15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d101      	bne.n	800326c <LL_RCC_PLL_IsReady+0x18>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <LL_RCC_PLL_IsReady+0x1a>
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0303 	and.w	r3, r3, #3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d101      	bne.n	80032e8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003306:	d101      	bne.n	800330c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d101      	bne.n	8003330 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800334c:	d101      	bne.n	8003352 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800336e:	d101      	bne.n	8003374 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e38b      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	f7ff fea6 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003396:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003398:	f7ff ff8f 	bl	80032ba <LL_RCC_PLL_GetMainSource>
 800339c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80c9 	beq.w	800353e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x3e>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d17b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d178      	bne.n	80034b0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033be:	f7ff fe32 	bl	8003026 <LL_RCC_MSI_IsReady>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x54>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e36a      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x72>
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	e006      	b.n	8003400 <HAL_RCC_OscConfig+0x80>
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003400:	4293      	cmp	r3, r2
 8003402:	d222      	bcs.n	800344a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd6f 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e348      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fe26 	bl	8003094 <LL_RCC_MSI_SetCalibTrimming>
 8003448:	e021      	b.n	800348e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fe0d 	bl	8003094 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd34 	bl	8003eec <RCC_SetFlashLatencyFromMSIRange>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e30d      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800348e:	f000 fcf5 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003492:	4603      	mov	r3, r0
 8003494:	4aa1      	ldr	r2, [pc, #644]	; (800371c <HAL_RCC_OscConfig+0x39c>)
 8003496:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003498:	4ba1      	ldr	r3, [pc, #644]	; (8003720 <HAL_RCC_OscConfig+0x3a0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fc71 	bl	8001d84 <HAL_InitTick>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d047      	beq.n	800353c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	e2fc      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02c      	beq.n	8003512 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034b8:	f7ff fd99 	bl	8002fee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fcae 	bl	8001e1c <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c4:	f7fe fcaa 	bl	8001e1c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2e9      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80034d6:	f7ff fda6 	bl	8003026 <LL_RCC_MSI_IsReady>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f1      	beq.n	80034c4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fdc2 	bl	8003094 <LL_RCC_MSI_SetCalibTrimming>
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003512:	f7ff fd7a 	bl	800300a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003516:	f7fe fc81 	bl	8001e1c <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800351e:	f7fe fc7d 	bl	8001e1c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e2bc      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003530:	f7ff fd79 	bl	8003026 <LL_RCC_MSI_IsReady>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f1      	bne.n	800351e <HAL_RCC_OscConfig+0x19e>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800353c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d05f      	beq.n	800360a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d005      	beq.n	800355c <HAL_RCC_OscConfig+0x1dc>
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d10d      	bne.n	8003572 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d10a      	bne.n	8003572 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	f7ff fcb3 	bl	8002ec6 <LL_RCC_HSE_IsReady>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d050      	beq.n	8003608 <HAL_RCC_OscConfig+0x288>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d14c      	bne.n	8003608 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e29b      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0x218>
 8003592:	f7ff fc7c 	bl	8002e8e <LL_RCC_HSE_Enable>
 8003596:	e00d      	b.n	80035b4 <HAL_RCC_OscConfig+0x234>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80035a0:	d104      	bne.n	80035ac <HAL_RCC_OscConfig+0x22c>
 80035a2:	f7ff fc47 	bl	8002e34 <LL_RCC_HSE_EnableTcxo>
 80035a6:	f7ff fc72 	bl	8002e8e <LL_RCC_HSE_Enable>
 80035aa:	e003      	b.n	80035b4 <HAL_RCC_OscConfig+0x234>
 80035ac:	f7ff fc7d 	bl	8002eaa <LL_RCC_HSE_Disable>
 80035b0:	f7ff fc4e 	bl	8002e50 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fc2e 	bl	8001e1c <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fc2a 	bl	8001e1c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e269      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80035d6:	f7ff fc76 	bl	8002ec6 <LL_RCC_HSE_IsReady>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f1      	beq.n	80035c4 <HAL_RCC_OscConfig+0x244>
 80035e0:	e013      	b.n	800360a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fc1b 	bl	8001e1c <HAL_GetTick>
 80035e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ea:	f7fe fc17 	bl	8001e1c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e256      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80035fc:	f7ff fc63 	bl	8002ec6 <LL_RCC_HSE_IsReady>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f1      	bne.n	80035ea <HAL_RCC_OscConfig+0x26a>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d04b      	beq.n	80036ae <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x2a8>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d113      	bne.n	800364a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d110      	bne.n	800364a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	f7ff fc7a 	bl	8002f20 <LL_RCC_HSI_IsReady>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x2be>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e235      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fc7d 	bl	8002f42 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003648:	e031      	b.n	80036ae <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003652:	f7ff fc49 	bl	8002ee8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe fbe1 	bl	8001e1c <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe fbdd 	bl	8001e1c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e21c      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003670:	f7ff fc56 	bl	8002f20 <LL_RCC_HSI_IsReady>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fc5f 	bl	8002f42 <LL_RCC_HSI_SetCalibTrimming>
 8003684:	e013      	b.n	80036ae <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	f7ff fc3d 	bl	8002f04 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fbc7 	bl	8001e1c <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003692:	f7fe fbc3 	bl	8001e1c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e202      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80036a4:	f7ff fc3c 	bl	8002f20 <LL_RCC_HSI_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f1      	bne.n	8003692 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d06f      	beq.n	800379a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d057      	beq.n	8003772 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d036      	beq.n	8003748 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1db      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d018      	beq.n	800372e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80036fc:	f7ff fc56 	bl	8002fac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003700:	f7fe fb8c 	bl	8001e1c <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003706:	e00d      	b.n	8003724 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe fb88 	bl	8001e1c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b11      	cmp	r3, #17
 8003714:	d906      	bls.n	8003724 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1c7      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000
 8003720:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8003724:	f7ff fc52 	bl	8002fcc <LL_RCC_LSI_IsReady>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ec      	bne.n	8003708 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	f023 0210 	bic.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003748:	f7ff fc20 	bl	8002f8c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fe fb66 	bl	8001e1c <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe fb62 	bl	8001e1c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b11      	cmp	r3, #17
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1a1      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003766:	f7ff fc31 	bl	8002fcc <LL_RCC_LSI_IsReady>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f1      	beq.n	8003754 <HAL_RCC_OscConfig+0x3d4>
 8003770:	e013      	b.n	800379a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	f7ff fc1b 	bl	8002fac <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe fb51 	bl	8001e1c <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377e:	f7fe fb4d 	bl	8001e1c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b11      	cmp	r3, #17
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e18c      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003790:	f7ff fc1c 	bl	8002fcc <LL_RCC_LSI_IsReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f1      	bne.n	800377e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80d8 	beq.w	8003958 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037a8:	f7ff fb32 	bl	8002e10 <LL_PWR_IsEnabledBkUpAccess>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d113      	bne.n	80037da <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80037b2:	f7ff fafb 	bl	8002dac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fe fb31 	bl	8001e1c <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fe fb2d 	bl	8001e1c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e16c      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80037d0:	f7ff fb1e 	bl	8002e10 <LL_PWR_IsEnabledBkUpAccess>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f1      	beq.n	80037be <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d07b      	beq.n	80038da <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b85      	cmp	r3, #133	; 0x85
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fb09 	bl	8001e1c <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800380c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fe fafb 	bl	8001e1c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e138      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003838:	f7ff fb97 	bl	8002f6a <LL_RCC_LSE_IsReady>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ef      	beq.n	8003822 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b81      	cmp	r3, #129	; 0x81
 8003848:	d003      	beq.n	8003852 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b85      	cmp	r3, #133	; 0x85
 8003850:	d121      	bne.n	8003896 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe fae3 	bl	8001e1c <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe fad5 	bl	8001e1c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e112      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ec      	beq.n	800386e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003894:	e060      	b.n	8003958 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe fac1 	bl	8001e1c <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fab3 	bl	8001e1c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0f0      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ec      	bne.n	80038b2 <HAL_RCC_OscConfig+0x532>
 80038d8:	e03e      	b.n	8003958 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fe fa9f 	bl	8001e1c <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fa91 	bl	8001e1c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0ce      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ec      	bne.n	80038f6 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fe fa7e 	bl	8001e1c <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fe fa70 	bl	8001e1c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0ad      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800394e:	f7ff fb0c 	bl	8002f6a <LL_RCC_LSE_IsReady>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ef      	bne.n	8003938 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a3 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d076      	beq.n	8003a56 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2b02      	cmp	r3, #2
 800396e:	d14b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003970:	f7ff fc62 	bl	8003238 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe fa52 	bl	8001e1c <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fa4e 	bl	8001e1c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b0a      	cmp	r3, #10
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e08d      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800398e:	f7ff fc61 	bl	8003254 <LL_RCC_PLL_IsReady>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f1      	bne.n	800397c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <HAL_RCC_OscConfig+0x734>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b0:	0212      	lsls	r2, r2, #8
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039c4:	430a      	orrs	r2, r1
 80039c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ce:	f7ff fc25 	bl	800321c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe fa1b 	bl	8001e1c <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fa17 	bl	8001e1c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b0a      	cmp	r3, #10
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e056      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80039fc:	f7ff fc2a 	bl	8003254 <LL_RCC_PLL_IsReady>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f1      	beq.n	80039ea <HAL_RCC_OscConfig+0x66a>
 8003a06:	e04f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a08:	f7ff fc16 	bl	8003238 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a26:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fe f9f4 	bl	8001e1c <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fe f9f0 	bl	8001e1c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b0a      	cmp	r3, #10
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e02f      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a4a:	f7ff fc03 	bl	8003254 <LL_RCC_PLL_IsReady>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f1      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6b8>
 8003a54:	e028      	b.n	8003aa8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e023      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10e      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	11c1808c 	.word	0x11c1808c

08003ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e12c      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003acc:	4b98      	ldr	r3, [pc, #608]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d91b      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b95      	ldr	r3, [pc, #596]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0207 	bic.w	r2, r3, #7
 8003ae2:	4993      	ldr	r1, [pc, #588]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aea:	f7fe f997 	bl	8001e1c <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003af2:	f7fe f993 	bl	8001e1c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e110      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b04:	4b8a      	ldr	r3, [pc, #552]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d1ef      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fae8 	bl	80030f8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b28:	f7fe f978 	bl	8001e1c <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b30:	f7fe f974 	bl	8001e1c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0f1      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b42:	f7ff fbc5 	bl	80032d0 <LL_RCC_IsActiveFlag_HPRE>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f1      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d016      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fade 	bl	800311e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b62:	f7fe f95b 	bl	8001e1c <HAL_GetTick>
 8003b66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b6a:	f7fe f957 	bl	8001e1c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0d4      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b7c:	f7ff fbb9 	bl	80032f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f1      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fad6 	bl	8003148 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe f93e 	bl	8001e1c <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ba4:	f7fe f93a 	bl	8001e1c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0b7      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bb6:	f7ff fbae 	bl	8003316 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f1      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff facf 	bl	8003174 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bd6:	f7fe f921 	bl	8001e1c <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bde:	f7fe f91d 	bl	8001e1c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e09a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bf0:	f7ff fba3 	bl	800333a <LL_RCC_IsActiveFlag_PPRE1>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f1      	beq.n	8003bde <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d017      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fac4 	bl	800319a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c12:	f7fe f903 	bl	8001e1c <HAL_GetTick>
 8003c16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c1a:	f7fe f8ff 	bl	8001e1c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e07c      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c2c:	f7ff fb96 	bl	800335c <LL_RCC_IsActiveFlag_PPRE2>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f1      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d043      	beq.n	8003cca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c4a:	f7ff f93c 	bl	8002ec6 <LL_RCC_HSE_IsReady>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11e      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e066      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c60:	f7ff faf8 	bl	8003254 <LL_RCC_PLL_IsReady>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d113      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e05b      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c76:	f7ff f9d6 	bl	8003026 <LL_RCC_MSI_IsReady>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e050      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c84:	f7ff f94c 	bl	8002f20 <LL_RCC_HSI_IsReady>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e049      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fa10 	bl	80030bc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fe f8be 	bl	8001e1c <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fe f8ba 	bl	8001e1c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e035      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	f7ff fa12 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d1ec      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d21b      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 0207 	bic.w	r2, r3, #7
 8003ce0:	4913      	ldr	r1, [pc, #76]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce8:	f7fe f898 	bl	8001e1c <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cf0:	f7fe f894 	bl	8001e1c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e011      	b.n	8003d26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x278>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1ef      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d10:	f000 f8b4 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <HAL_RCC_ClockConfig+0x27c>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <HAL_RCC_ClockConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f830 	bl	8001d84 <HAL_InitTick>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	58004000 	.word	0x58004000
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004

08003d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	f7ff f9ca 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003d4e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d50:	f7ff fab3 	bl	80032ba <LL_RCC_PLL_GetMainSource>
 8003d54:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x2c>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d139      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d136      	bne.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d68:	f7ff f96d 	bl	8003046 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_RCC_GetSysClockFreq+0x62>
 8003d72:	f7ff f968 	bl	8003046 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x4e>
 8003d7c:	f7ff f973 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003d80:	4603      	mov	r3, r0
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	e005      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x5a>
 8003d8a:	f7ff f977 	bl	800307c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4a36      	ldr	r2, [pc, #216]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x8c>
 8003d9e:	f7ff f952 	bl	8003046 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_GetSysClockFreq+0x7a>
 8003da8:	f7ff f95d 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003dac:	4603      	mov	r3, r0
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	e005      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x86>
 8003db6:	f7ff f961 	bl	800307c <LL_RCC_MSI_GetRangeAfterStandby>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d115      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dd4:	e012      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00c      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d109      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003de8:	f7ff f840 	bl	8002e6c <LL_RCC_HSE_IsEnabledDiv2>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x138>)
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e001      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003dfa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dfc:	f7ff f971 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d12f      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e06:	f7ff fa58 	bl	80032ba <LL_RCC_PLL_GetMainSource>
 8003e0a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d003      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0xde>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0xe4>
 8003e18:	e00d      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e1c:	60fb      	str	r3, [r7, #12]
        break;
 8003e1e:	e00d      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e20:	f7ff f824 	bl	8002e6c <LL_RCC_HSE_IsEnabledDiv2>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e2c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e2e:	e005      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e32:	60fb      	str	r3, [r7, #12]
        break;
 8003e34:	e002      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e3c:	f7ff fa1b 	bl	8003276 <LL_RCC_PLL_GetN>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	fb03 f402 	mul.w	r4, r3, r2
 8003e48:	f7ff fa2c 	bl	80032a4 <LL_RCC_PLL_GetDivider>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	3301      	adds	r3, #1
 8003e52:	fbb4 f4f3 	udiv	r4, r4, r3
 8003e56:	f7ff fa1a 	bl	800328e <LL_RCC_PLL_GetR>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	0f5b      	lsrs	r3, r3, #29
 8003e5e:	3301      	adds	r3, #1
 8003e60:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e64:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e66:	697b      	ldr	r3, [r7, #20]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd90      	pop	{r4, r7, pc}
 8003e70:	0800a400 	.word	0x0800a400
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	01e84800 	.word	0x01e84800

08003e7c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e7c:	b598      	push	{r3, r4, r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e80:	f7ff ff5c 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003e84:	4604      	mov	r4, r0
 8003e86:	f7ff f99b 	bl	80031c0 <LL_RCC_GetAHBPrescaler>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd98      	pop	{r3, r4, r7, pc}
 8003ea0:	0800a3a0 	.word	0x0800a3a0

08003ea4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b598      	push	{r3, r4, r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ea8:	f7ff ffe8 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003eac:	4604      	mov	r4, r0
 8003eae:	f7ff f99f 	bl	80031f0 <LL_RCC_GetAPB1Prescaler>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd98      	pop	{r3, r4, r7, pc}
 8003ec4:	0800a3e0 	.word	0x0800a3e0

08003ec8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec8:	b598      	push	{r3, r4, r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ecc:	f7ff ffd6 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	f7ff f998 	bl	8003206 <LL_RCC_GetAPB2Prescaler>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	0adb      	lsrs	r3, r3, #11
 8003eda:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd98      	pop	{r3, r4, r7, pc}
 8003ee8:	0800a3e0 	.word	0x0800a3e0

08003eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f02:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f04:	f7ff f967 	bl	80031d6 <LL_RCC_GetAHB3Prescaler>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0c9c      	lsrs	r4, r3, #18
 8003f28:	f7fe ff5c 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 f80b 	bl	8003f4c <RCC_SetFlashLatency>
 8003f36:	4603      	mov	r3, r0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd90      	pop	{r4, r7, pc}
 8003f40:	0800a400 	.word	0x0800a400
 8003f44:	0800a3a0 	.word	0x0800a3a0
 8003f48:	431bde83 	.word	0x431bde83

08003f4c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	; 0x38
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003f56:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <RCC_SetFlashLatency+0xf4>)
 8003f58:	f107 0320 	add.w	r3, r7, #32
 8003f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f60:	6018      	str	r0, [r3, #0]
 8003f62:	3304      	adds	r3, #4
 8003f64:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003f66:	4a37      	ldr	r2, [pc, #220]	; (8004044 <RCC_SetFlashLatency+0xf8>)
 8003f68:	f107 0318 	add.w	r3, r7, #24
 8003f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f70:	6018      	str	r0, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003f76:	4a34      	ldr	r2, [pc, #208]	; (8004048 <RCC_SetFlashLatency+0xfc>)
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d11b      	bne.n	8003fc6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
 8003f92:	e014      	b.n	8003fbe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	3338      	adds	r3, #56	; 0x38
 8003f9a:	443b      	add	r3, r7
 8003f9c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d807      	bhi.n	8003fb8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	443b      	add	r3, r7
 8003fb0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fb6:	e021      	b.n	8003ffc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	3301      	adds	r3, #1
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d9e7      	bls.n	8003f94 <RCC_SetFlashLatency+0x48>
 8003fc4:	e01a      	b.n	8003ffc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fca:	e014      	b.n	8003ff6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	3338      	adds	r3, #56	; 0x38
 8003fd2:	443b      	add	r3, r7
 8003fd4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d807      	bhi.n	8003ff0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	3338      	adds	r3, #56	; 0x38
 8003fe6:	443b      	add	r3, r7
 8003fe8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fee:	e005      	b.n	8003ffc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d9e7      	bls.n	8003fcc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <RCC_SetFlashLatency+0x100>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 0207 	bic.w	r2, r3, #7
 8004004:	4911      	ldr	r1, [pc, #68]	; (800404c <RCC_SetFlashLatency+0x100>)
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800400c:	f7fd ff06 	bl	8001e1c <HAL_GetTick>
 8004010:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004012:	e008      	b.n	8004026 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004014:	f7fd ff02 	bl	8001e1c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e007      	b.n	8004036 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <RCC_SetFlashLatency+0x100>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004030:	429a      	cmp	r2, r3
 8004032:	d1ef      	bne.n	8004014 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3738      	adds	r7, #56	; 0x38
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	0800a378 	.word	0x0800a378
 8004044:	0800a380 	.word	0x0800a380
 8004048:	0800a388 	.word	0x0800a388
 800404c:	58004000 	.word	0x58004000

08004050 <LL_RCC_LSE_IsReady>:
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d101      	bne.n	8004068 <LL_RCC_LSE_IsReady+0x18>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_RCC_LSE_IsReady+0x1a>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <LL_RCC_SetUSARTClockSource>:
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_SetI2SClockSource>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_SetLPUARTClockSource>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_SetI2CClockSource>:
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800410e:	43db      	mvns	r3, r3
 8004110:	401a      	ands	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800411a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <LL_RCC_SetLPTIMClockSource>:
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	43db      	mvns	r3, r3
 8004146:	401a      	ands	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_RCC_SetRNGClockSource>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <LL_RCC_SetADCClockSource>:
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800419e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_SetRTCClockSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <LL_RCC_GetRTCClockSource>:
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <LL_RCC_ForceBackupDomainReset>:
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
	...

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004244:	2300      	movs	r3, #0
 8004246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004248:	2300      	movs	r3, #0
 800424a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d058      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004258:	f7fe fda8 	bl	8002dac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425c:	f7fd fdde 	bl	8001e1c <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fd fdda 	bl	8001e1c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	74fb      	strb	r3, [r7, #19]
        break;
 8004276:	e006      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004278:	4b7b      	ldr	r3, [pc, #492]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d1ee      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d13c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800428c:	f7ff ffa7 	bl	80041de <LL_RCC_GetRTCClockSource>
 8004290:	4602      	mov	r2, r0
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	429a      	cmp	r2, r3
 8004298:	d00f      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	f7ff ffa5 	bl	80041f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ac:	f7ff ffb3 	bl	8004216 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d014      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fdaa 	bl	8001e1c <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80042ca:	e00b      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fd fda6 	bl	8001e1c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d902      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	74fb      	strb	r3, [r7, #19]
            break;
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80042e4:	f7ff feb4 	bl	8004050 <LL_RCC_LSE_IsReady>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d1ee      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff5b 	bl	80041b4 <LL_RCC_SetRTCClockSource>
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
 8004304:	e001      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fea9 	bl	8004072 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe9e 	bl	8004072 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fec0 	bl	80040cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fee6 	bl	800412e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fedb 	bl	800412e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fed0 	bl	800412e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fea9 	bl	80040f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fe9e 	bl	80040f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe93 	bl	80040f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fe5e 	bl	80040a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d107      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fea5 	bl	8004160 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fea3 	bl	800418a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444c:	d107      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800445e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	58000400 	.word	0x58000400

0800446c <LL_RCC_GetUSARTClockSource>:
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	401a      	ands	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4313      	orrs	r3, r2
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <LL_RCC_GetLPUARTClockSource>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4013      	ands	r3, r2
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e042      	b.n	8004546 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fade 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8c3 	bl	800467c <UART_SetConfig>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e022      	b.n	8004546 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb2b 	bl	8004b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fbb1 	bl	8004ca6 <UART_CheckIdleState>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	af02      	add	r7, sp, #8
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004564:	2b20      	cmp	r3, #32
 8004566:	f040 8083 	bne.w	8004670 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_UART_Transmit+0x28>
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07b      	b.n	8004672 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_UART_Transmit+0x3a>
 8004584:	2302      	movs	r3, #2
 8004586:	e074      	b.n	8004672 <HAL_UART_Transmit+0x124>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2221      	movs	r2, #33	; 0x21
 800459c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a0:	f7fd fc3c 	bl	8001e1c <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045be:	d108      	bne.n	80045d2 <HAL_UART_Transmit+0x84>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e003      	b.n	80045da <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80045e2:	e02c      	b.n	800463e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fba4 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e039      	b.n	8004672 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3302      	adds	r3, #2
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e007      	b.n	800462c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1cc      	bne.n	80045e4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2140      	movs	r1, #64	; 0x40
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fb71 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e006      	b.n	8004672 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b08c      	sub	sp, #48	; 0x30
 8004682:	af00      	add	r7, sp, #0
 8004684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	431a      	orrs	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	431a      	orrs	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b94      	ldr	r3, [pc, #592]	; (80048fc <UART_SetConfig+0x280>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a89      	ldr	r2, [pc, #548]	; (8004900 <UART_SetConfig+0x284>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e4:	4313      	orrs	r3, r2
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	f023 010f 	bic.w	r1, r3, #15
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7a      	ldr	r2, [pc, #488]	; (8004904 <UART_SetConfig+0x288>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d127      	bne.n	8004770 <UART_SetConfig+0xf4>
 8004720:	2003      	movs	r0, #3
 8004722:	f7ff fea3 	bl	800446c <LL_RCC_GetUSARTClockSource>
 8004726:	4603      	mov	r3, r0
 8004728:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800472c:	2b03      	cmp	r3, #3
 800472e:	d81b      	bhi.n	8004768 <UART_SetConfig+0xec>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0xbc>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004749 	.word	0x08004749
 800473c:	08004759 	.word	0x08004759
 8004740:	08004751 	.word	0x08004751
 8004744:	08004761 	.word	0x08004761
 8004748:	2301      	movs	r3, #1
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e080      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004750:	2302      	movs	r3, #2
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004756:	e07c      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475e:	e078      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004766:	e074      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476e:	e070      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a64      	ldr	r2, [pc, #400]	; (8004908 <UART_SetConfig+0x28c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d138      	bne.n	80047ec <UART_SetConfig+0x170>
 800477a:	200c      	movs	r0, #12
 800477c:	f7ff fe76 	bl	800446c <LL_RCC_GetUSARTClockSource>
 8004780:	4603      	mov	r3, r0
 8004782:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d82c      	bhi.n	80047e4 <UART_SetConfig+0x168>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x114>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080047e5 	.word	0x080047e5
 8004798:	080047e5 	.word	0x080047e5
 800479c:	080047e5 	.word	0x080047e5
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047e5 	.word	0x080047e5
 80047a8:	080047e5 	.word	0x080047e5
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	080047e5 	.word	0x080047e5
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047dd 	.word	0x080047dd
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ca:	e042      	b.n	8004852 <UART_SetConfig+0x1d6>
 80047cc:	2302      	movs	r3, #2
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e03e      	b.n	8004852 <UART_SetConfig+0x1d6>
 80047d4:	2304      	movs	r3, #4
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047da:	e03a      	b.n	8004852 <UART_SetConfig+0x1d6>
 80047dc:	2308      	movs	r3, #8
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e036      	b.n	8004852 <UART_SetConfig+0x1d6>
 80047e4:	2310      	movs	r3, #16
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e032      	b.n	8004852 <UART_SetConfig+0x1d6>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a43      	ldr	r2, [pc, #268]	; (8004900 <UART_SetConfig+0x284>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d12a      	bne.n	800484c <UART_SetConfig+0x1d0>
 80047f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80047fa:	f7ff fe49 	bl	8004490 <LL_RCC_GetLPUARTClockSource>
 80047fe:	4603      	mov	r3, r0
 8004800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004804:	d01a      	beq.n	800483c <UART_SetConfig+0x1c0>
 8004806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800480a:	d81b      	bhi.n	8004844 <UART_SetConfig+0x1c8>
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004810:	d00c      	beq.n	800482c <UART_SetConfig+0x1b0>
 8004812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004816:	d815      	bhi.n	8004844 <UART_SetConfig+0x1c8>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <UART_SetConfig+0x1a8>
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d008      	beq.n	8004834 <UART_SetConfig+0x1b8>
 8004822:	e00f      	b.n	8004844 <UART_SetConfig+0x1c8>
 8004824:	2300      	movs	r3, #0
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482a:	e012      	b.n	8004852 <UART_SetConfig+0x1d6>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004832:	e00e      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483a:	e00a      	b.n	8004852 <UART_SetConfig+0x1d6>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004842:	e006      	b.n	8004852 <UART_SetConfig+0x1d6>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e002      	b.n	8004852 <UART_SetConfig+0x1d6>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <UART_SetConfig+0x284>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80a4 	bne.w	80049a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800485e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004862:	2b08      	cmp	r3, #8
 8004864:	d823      	bhi.n	80048ae <UART_SetConfig+0x232>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x1f0>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	080048af 	.word	0x080048af
 8004874:	08004899 	.word	0x08004899
 8004878:	080048af 	.word	0x080048af
 800487c:	0800489f 	.word	0x0800489f
 8004880:	080048af 	.word	0x080048af
 8004884:	080048af 	.word	0x080048af
 8004888:	080048af 	.word	0x080048af
 800488c:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7ff fb08 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004896:	e010      	b.n	80048ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <UART_SetConfig+0x290>)
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800489c:	e00d      	b.n	80048ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7ff fa4d 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048a4:	e009      	b.n	80048ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048ac:	e005      	b.n	80048ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8137 	beq.w	8004b30 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <UART_SetConfig+0x294>)
 80048c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d305      	bcc.n	80048f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048f8:	e11a      	b.n	8004b30 <UART_SetConfig+0x4b4>
 80048fa:	bf00      	nop
 80048fc:	cfff69f3 	.word	0xcfff69f3
 8004900:	40008000 	.word	0x40008000
 8004904:	40013800 	.word	0x40013800
 8004908:	40004400 	.word	0x40004400
 800490c:	00f42400 	.word	0x00f42400
 8004910:	0800a440 	.word	0x0800a440
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	2200      	movs	r2, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	4a8e      	ldr	r2, [pc, #568]	; (8004b5c <UART_SetConfig+0x4e0>)
 8004922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004926:	b29b      	uxth	r3, r3
 8004928:	2200      	movs	r2, #0
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004936:	f7fc fbdd 	bl	80010f4 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	020b      	lsls	r3, r1, #8
 800494c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004950:	0202      	lsls	r2, r0, #8
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	6849      	ldr	r1, [r1, #4]
 8004956:	0849      	lsrs	r1, r1, #1
 8004958:	2000      	movs	r0, #0
 800495a:	460c      	mov	r4, r1
 800495c:	4605      	mov	r5, r0
 800495e:	eb12 0804 	adds.w	r8, r2, r4
 8004962:	eb43 0905 	adc.w	r9, r3, r5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	469a      	mov	sl, r3
 800496e:	4693      	mov	fp, r2
 8004970:	4652      	mov	r2, sl
 8004972:	465b      	mov	r3, fp
 8004974:	4640      	mov	r0, r8
 8004976:	4649      	mov	r1, r9
 8004978:	f7fc fbbc 	bl	80010f4 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4613      	mov	r3, r2
 8004982:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498a:	d308      	bcc.n	800499e <UART_SetConfig+0x322>
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d204      	bcs.n	800499e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e0c8      	b.n	8004b30 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049a4:	e0c4      	b.n	8004b30 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ae:	d168      	bne.n	8004a82 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80049b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d828      	bhi.n	8004a0a <UART_SetConfig+0x38e>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x344>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	08004a0b 	.word	0x08004a0b
 80049d0:	080049fb 	.word	0x080049fb
 80049d4:	08004a0b 	.word	0x08004a0b
 80049d8:	08004a0b 	.word	0x08004a0b
 80049dc:	08004a0b 	.word	0x08004a0b
 80049e0:	08004a03 	.word	0x08004a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7ff fa5e 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ea:	e014      	b.n	8004a16 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7ff fa6c 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f2:	e010      	b.n	8004a16 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f4:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <UART_SetConfig+0x4e4>)
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f8:	e00d      	b.n	8004a16 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fa:	f7ff f99f 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a00:	e009      	b.n	8004a16 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a08:	e005      	b.n	8004a16 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8089 	beq.w	8004b30 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	4a4e      	ldr	r2, [pc, #312]	; (8004b5c <UART_SetConfig+0x4e0>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a30:	005a      	lsls	r2, r3, #1
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	441a      	add	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d916      	bls.n	8004a7a <UART_SetConfig+0x3fe>
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d212      	bcs.n	8004a7a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f023 030f 	bic.w	r3, r3, #15
 8004a5c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	8bfb      	ldrh	r3, [r7, #30]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	8bfa      	ldrh	r2, [r7, #30]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	e05a      	b.n	8004b30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a80:	e056      	b.n	8004b30 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d827      	bhi.n	8004ada <UART_SetConfig+0x45e>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x414>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7ff f9f6 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aba:	e014      	b.n	8004ae6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7ff fa04 	bl	8003ec8 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ac2:	e010      	b.n	8004ae6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <UART_SetConfig+0x4e4>)
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ac8:	e00d      	b.n	8004ae6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7ff f937 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ad0:	e009      	b.n	8004ae6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ad8:	e005      	b.n	8004ae6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d021      	beq.n	8004b30 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <UART_SetConfig+0x4e0>)
 8004af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	441a      	add	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d908      	bls.n	8004b2a <UART_SetConfig+0x4ae>
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d204      	bcs.n	8004b2a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e002      	b.n	8004b30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3730      	adds	r7, #48	; 0x30
 8004b54:	46bd      	mov	sp, r7
 8004b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5a:	bf00      	nop
 8004b5c:	0800a440 	.word	0x0800a440
 8004b60:	00f42400 	.word	0x00f42400

08004b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d10a      	bne.n	8004c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb6:	f7fd f8b1 	bl	8001e1c <HAL_GetTick>
 8004cba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d10e      	bne.n	8004ce8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f82f 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e025      	b.n	8004d34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d10e      	bne.n	8004d14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f819 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e00f      	b.n	8004d34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b09c      	sub	sp, #112	; 0x70
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	e0a9      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d54:	f000 80a5 	beq.w	8004ea2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d58:	f7fd f860 	bl	8001e1c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x32>
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d140      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d82:	667b      	str	r3, [r7, #100]	; 0x64
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3308      	adds	r3, #8
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	663b      	str	r3, [r7, #96]	; 0x60
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e5      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e069      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d051      	beq.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d149      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
 8004e38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e6a:	623a      	str	r2, [r7, #32]
 8004e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e010      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	f43f af46 	beq.w	8004d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3770      	adds	r7, #112	; 0x70
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e027      	b.n	8004f32 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e02d      	b.n	8004fb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f84f 	bl	8005034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e02d      	b.n	800502c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f811 	bl	8005034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005054:	e031      	b.n	80050ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005056:	2308      	movs	r3, #8
 8005058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800505a:	2308      	movs	r3, #8
 800505c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	0e5b      	lsrs	r3, r3, #25
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	0f5b      	lsrs	r3, r3, #29
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	7b3a      	ldrb	r2, [r7, #12]
 8005082:	4910      	ldr	r1, [pc, #64]	; (80050c4 <UARTEx_SetNbDataToProcess+0x90>)
 8005084:	5c8a      	ldrb	r2, [r1, r2]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800508a:	7b3a      	ldrb	r2, [r7, #12]
 800508c:	490e      	ldr	r1, [pc, #56]	; (80050c8 <UARTEx_SetNbDataToProcess+0x94>)
 800508e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005090:	fb93 f3f2 	sdiv	r3, r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	7b7a      	ldrb	r2, [r7, #13]
 80050a0:	4908      	ldr	r1, [pc, #32]	; (80050c4 <UARTEx_SetNbDataToProcess+0x90>)
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050a8:	7b7a      	ldrb	r2, [r7, #13]
 80050aa:	4907      	ldr	r1, [pc, #28]	; (80050c8 <UARTEx_SetNbDataToProcess+0x94>)
 80050ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	0800a458 	.word	0x0800a458
 80050c8:	0800a460 	.word	0x0800a460

080050cc <__errno>:
 80050cc:	4b01      	ldr	r3, [pc, #4]	; (80050d4 <__errno+0x8>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <__libc_init_array>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4d0d      	ldr	r5, [pc, #52]	; (8005110 <__libc_init_array+0x38>)
 80050dc:	4c0d      	ldr	r4, [pc, #52]	; (8005114 <__libc_init_array+0x3c>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	2600      	movs	r6, #0
 80050e4:	42a6      	cmp	r6, r4
 80050e6:	d109      	bne.n	80050fc <__libc_init_array+0x24>
 80050e8:	4d0b      	ldr	r5, [pc, #44]	; (8005118 <__libc_init_array+0x40>)
 80050ea:	4c0c      	ldr	r4, [pc, #48]	; (800511c <__libc_init_array+0x44>)
 80050ec:	f005 f908 	bl	800a300 <_init>
 80050f0:	1b64      	subs	r4, r4, r5
 80050f2:	10a4      	asrs	r4, r4, #2
 80050f4:	2600      	movs	r6, #0
 80050f6:	42a6      	cmp	r6, r4
 80050f8:	d105      	bne.n	8005106 <__libc_init_array+0x2e>
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005100:	4798      	blx	r3
 8005102:	3601      	adds	r6, #1
 8005104:	e7ee      	b.n	80050e4 <__libc_init_array+0xc>
 8005106:	f855 3b04 	ldr.w	r3, [r5], #4
 800510a:	4798      	blx	r3
 800510c:	3601      	adds	r6, #1
 800510e:	e7f2      	b.n	80050f6 <__libc_init_array+0x1e>
 8005110:	0800a92c 	.word	0x0800a92c
 8005114:	0800a92c 	.word	0x0800a92c
 8005118:	0800a92c 	.word	0x0800a92c
 800511c:	0800a930 	.word	0x0800a930

08005120 <memset>:
 8005120:	4402      	add	r2, r0
 8005122:	4603      	mov	r3, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <__cvt>:
 8005130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	461f      	mov	r7, r3
 800513a:	4614      	mov	r4, r2
 800513c:	bfb8      	it	lt
 800513e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005144:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005146:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800514a:	bfb6      	itet	lt
 800514c:	461f      	movlt	r7, r3
 800514e:	2300      	movge	r3, #0
 8005150:	232d      	movlt	r3, #45	; 0x2d
 8005152:	7013      	strb	r3, [r2, #0]
 8005154:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005156:	f023 0820 	bic.w	r8, r3, #32
 800515a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800515e:	d005      	beq.n	800516c <__cvt+0x3c>
 8005160:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005164:	d100      	bne.n	8005168 <__cvt+0x38>
 8005166:	3501      	adds	r5, #1
 8005168:	2302      	movs	r3, #2
 800516a:	e000      	b.n	800516e <__cvt+0x3e>
 800516c:	2303      	movs	r3, #3
 800516e:	aa07      	add	r2, sp, #28
 8005170:	9204      	str	r2, [sp, #16]
 8005172:	aa06      	add	r2, sp, #24
 8005174:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005178:	e9cd 3500 	strd	r3, r5, [sp]
 800517c:	4622      	mov	r2, r4
 800517e:	463b      	mov	r3, r7
 8005180:	f001 fe2a 	bl	8006dd8 <_dtoa_r>
 8005184:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005188:	4606      	mov	r6, r0
 800518a:	d102      	bne.n	8005192 <__cvt+0x62>
 800518c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	d522      	bpl.n	80051d8 <__cvt+0xa8>
 8005192:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005196:	eb06 0905 	add.w	r9, r6, r5
 800519a:	d110      	bne.n	80051be <__cvt+0x8e>
 800519c:	7833      	ldrb	r3, [r6, #0]
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	d10a      	bne.n	80051b8 <__cvt+0x88>
 80051a2:	2200      	movs	r2, #0
 80051a4:	2300      	movs	r3, #0
 80051a6:	4620      	mov	r0, r4
 80051a8:	4639      	mov	r1, r7
 80051aa:	f7fb fc65 	bl	8000a78 <__aeabi_dcmpeq>
 80051ae:	b918      	cbnz	r0, 80051b8 <__cvt+0x88>
 80051b0:	f1c5 0501 	rsb	r5, r5, #1
 80051b4:	f8ca 5000 	str.w	r5, [sl]
 80051b8:	f8da 3000 	ldr.w	r3, [sl]
 80051bc:	4499      	add	r9, r3
 80051be:	2200      	movs	r2, #0
 80051c0:	2300      	movs	r3, #0
 80051c2:	4620      	mov	r0, r4
 80051c4:	4639      	mov	r1, r7
 80051c6:	f7fb fc57 	bl	8000a78 <__aeabi_dcmpeq>
 80051ca:	b108      	cbz	r0, 80051d0 <__cvt+0xa0>
 80051cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80051d0:	2230      	movs	r2, #48	; 0x30
 80051d2:	9b07      	ldr	r3, [sp, #28]
 80051d4:	454b      	cmp	r3, r9
 80051d6:	d307      	bcc.n	80051e8 <__cvt+0xb8>
 80051d8:	9b07      	ldr	r3, [sp, #28]
 80051da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051dc:	1b9b      	subs	r3, r3, r6
 80051de:	4630      	mov	r0, r6
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	b008      	add	sp, #32
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	9107      	str	r1, [sp, #28]
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e7f0      	b.n	80051d2 <__cvt+0xa2>

080051f0 <__exponent>:
 80051f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051f2:	4603      	mov	r3, r0
 80051f4:	2900      	cmp	r1, #0
 80051f6:	bfb8      	it	lt
 80051f8:	4249      	neglt	r1, r1
 80051fa:	f803 2b02 	strb.w	r2, [r3], #2
 80051fe:	bfb4      	ite	lt
 8005200:	222d      	movlt	r2, #45	; 0x2d
 8005202:	222b      	movge	r2, #43	; 0x2b
 8005204:	2909      	cmp	r1, #9
 8005206:	7042      	strb	r2, [r0, #1]
 8005208:	dd2a      	ble.n	8005260 <__exponent+0x70>
 800520a:	f10d 0407 	add.w	r4, sp, #7
 800520e:	46a4      	mov	ip, r4
 8005210:	270a      	movs	r7, #10
 8005212:	46a6      	mov	lr, r4
 8005214:	460a      	mov	r2, r1
 8005216:	fb91 f6f7 	sdiv	r6, r1, r7
 800521a:	fb07 1516 	mls	r5, r7, r6, r1
 800521e:	3530      	adds	r5, #48	; 0x30
 8005220:	2a63      	cmp	r2, #99	; 0x63
 8005222:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005226:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800522a:	4631      	mov	r1, r6
 800522c:	dcf1      	bgt.n	8005212 <__exponent+0x22>
 800522e:	3130      	adds	r1, #48	; 0x30
 8005230:	f1ae 0502 	sub.w	r5, lr, #2
 8005234:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005238:	1c44      	adds	r4, r0, #1
 800523a:	4629      	mov	r1, r5
 800523c:	4561      	cmp	r1, ip
 800523e:	d30a      	bcc.n	8005256 <__exponent+0x66>
 8005240:	f10d 0209 	add.w	r2, sp, #9
 8005244:	eba2 020e 	sub.w	r2, r2, lr
 8005248:	4565      	cmp	r5, ip
 800524a:	bf88      	it	hi
 800524c:	2200      	movhi	r2, #0
 800524e:	4413      	add	r3, r2
 8005250:	1a18      	subs	r0, r3, r0
 8005252:	b003      	add	sp, #12
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800525a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800525e:	e7ed      	b.n	800523c <__exponent+0x4c>
 8005260:	2330      	movs	r3, #48	; 0x30
 8005262:	3130      	adds	r1, #48	; 0x30
 8005264:	7083      	strb	r3, [r0, #2]
 8005266:	70c1      	strb	r1, [r0, #3]
 8005268:	1d03      	adds	r3, r0, #4
 800526a:	e7f1      	b.n	8005250 <__exponent+0x60>

0800526c <_printf_float>:
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	b091      	sub	sp, #68	; 0x44
 8005272:	460c      	mov	r4, r1
 8005274:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005278:	4616      	mov	r6, r2
 800527a:	461f      	mov	r7, r3
 800527c:	4605      	mov	r5, r0
 800527e:	f002 feff 	bl	8008080 <_localeconv_r>
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	9309      	str	r3, [sp, #36]	; 0x24
 8005286:	4618      	mov	r0, r3
 8005288:	f7fa ff7a 	bl	8000180 <strlen>
 800528c:	2300      	movs	r3, #0
 800528e:	930e      	str	r3, [sp, #56]	; 0x38
 8005290:	f8d8 3000 	ldr.w	r3, [r8]
 8005294:	900a      	str	r0, [sp, #40]	; 0x28
 8005296:	3307      	adds	r3, #7
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	f103 0208 	add.w	r2, r3, #8
 80052a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052a4:	f8d4 b000 	ldr.w	fp, [r4]
 80052a8:	f8c8 2000 	str.w	r2, [r8]
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80052b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80052bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052c0:	4b9c      	ldr	r3, [pc, #624]	; (8005534 <_printf_float+0x2c8>)
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c6:	4640      	mov	r0, r8
 80052c8:	f7fb fc08 	bl	8000adc <__aeabi_dcmpun>
 80052cc:	bb70      	cbnz	r0, 800532c <_printf_float+0xc0>
 80052ce:	4b99      	ldr	r3, [pc, #612]	; (8005534 <_printf_float+0x2c8>)
 80052d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7fb fbe2 	bl	8000aa0 <__aeabi_dcmple>
 80052dc:	bb30      	cbnz	r0, 800532c <_printf_float+0xc0>
 80052de:	2200      	movs	r2, #0
 80052e0:	2300      	movs	r3, #0
 80052e2:	4640      	mov	r0, r8
 80052e4:	4651      	mov	r1, sl
 80052e6:	f7fb fbd1 	bl	8000a8c <__aeabi_dcmplt>
 80052ea:	b110      	cbz	r0, 80052f2 <_printf_float+0x86>
 80052ec:	232d      	movs	r3, #45	; 0x2d
 80052ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f2:	4b91      	ldr	r3, [pc, #580]	; (8005538 <_printf_float+0x2cc>)
 80052f4:	4891      	ldr	r0, [pc, #580]	; (800553c <_printf_float+0x2d0>)
 80052f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052fa:	bf94      	ite	ls
 80052fc:	4698      	movls	r8, r3
 80052fe:	4680      	movhi	r8, r0
 8005300:	2303      	movs	r3, #3
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	f02b 0304 	bic.w	r3, fp, #4
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	f04f 0a00 	mov.w	sl, #0
 800530e:	9700      	str	r7, [sp, #0]
 8005310:	4633      	mov	r3, r6
 8005312:	aa0f      	add	r2, sp, #60	; 0x3c
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f9d2 	bl	80056c0 <_printf_common>
 800531c:	3001      	adds	r0, #1
 800531e:	f040 808f 	bne.w	8005440 <_printf_float+0x1d4>
 8005322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005326:	b011      	add	sp, #68	; 0x44
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	4642      	mov	r2, r8
 800532e:	4653      	mov	r3, sl
 8005330:	4640      	mov	r0, r8
 8005332:	4651      	mov	r1, sl
 8005334:	f7fb fbd2 	bl	8000adc <__aeabi_dcmpun>
 8005338:	b140      	cbz	r0, 800534c <_printf_float+0xe0>
 800533a:	f1ba 0f00 	cmp.w	sl, #0
 800533e:	bfbc      	itt	lt
 8005340:	232d      	movlt	r3, #45	; 0x2d
 8005342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005346:	487e      	ldr	r0, [pc, #504]	; (8005540 <_printf_float+0x2d4>)
 8005348:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <_printf_float+0x2d8>)
 800534a:	e7d4      	b.n	80052f6 <_printf_float+0x8a>
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005354:	d142      	bne.n	80053dc <_printf_float+0x170>
 8005356:	2306      	movs	r3, #6
 8005358:	6063      	str	r3, [r4, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	9206      	str	r2, [sp, #24]
 800535e:	aa0e      	add	r2, sp, #56	; 0x38
 8005360:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005364:	aa0d      	add	r2, sp, #52	; 0x34
 8005366:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800536a:	9203      	str	r2, [sp, #12]
 800536c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005370:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4642      	mov	r2, r8
 800537c:	4653      	mov	r3, sl
 800537e:	4628      	mov	r0, r5
 8005380:	910b      	str	r1, [sp, #44]	; 0x2c
 8005382:	f7ff fed5 	bl	8005130 <__cvt>
 8005386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005388:	2947      	cmp	r1, #71	; 0x47
 800538a:	4680      	mov	r8, r0
 800538c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800538e:	d108      	bne.n	80053a2 <_printf_float+0x136>
 8005390:	1cc8      	adds	r0, r1, #3
 8005392:	db02      	blt.n	800539a <_printf_float+0x12e>
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	4299      	cmp	r1, r3
 8005398:	dd40      	ble.n	800541c <_printf_float+0x1b0>
 800539a:	f1a9 0902 	sub.w	r9, r9, #2
 800539e:	fa5f f989 	uxtb.w	r9, r9
 80053a2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053a6:	d81f      	bhi.n	80053e8 <_printf_float+0x17c>
 80053a8:	3901      	subs	r1, #1
 80053aa:	464a      	mov	r2, r9
 80053ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053b0:	910d      	str	r1, [sp, #52]	; 0x34
 80053b2:	f7ff ff1d 	bl	80051f0 <__exponent>
 80053b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053b8:	1813      	adds	r3, r2, r0
 80053ba:	2a01      	cmp	r2, #1
 80053bc:	4682      	mov	sl, r0
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	dc02      	bgt.n	80053c8 <_printf_float+0x15c>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	07d2      	lsls	r2, r2, #31
 80053c6:	d501      	bpl.n	80053cc <_printf_float+0x160>
 80053c8:	3301      	adds	r3, #1
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d09c      	beq.n	800530e <_printf_float+0xa2>
 80053d4:	232d      	movs	r3, #45	; 0x2d
 80053d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053da:	e798      	b.n	800530e <_printf_float+0xa2>
 80053dc:	2947      	cmp	r1, #71	; 0x47
 80053de:	d1bc      	bne.n	800535a <_printf_float+0xee>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ba      	bne.n	800535a <_printf_float+0xee>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e7b7      	b.n	8005358 <_printf_float+0xec>
 80053e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053ec:	d118      	bne.n	8005420 <_printf_float+0x1b4>
 80053ee:	2900      	cmp	r1, #0
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	dd0b      	ble.n	800540c <_printf_float+0x1a0>
 80053f4:	6121      	str	r1, [r4, #16]
 80053f6:	b913      	cbnz	r3, 80053fe <_printf_float+0x192>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	07d0      	lsls	r0, r2, #31
 80053fc:	d502      	bpl.n	8005404 <_printf_float+0x198>
 80053fe:	3301      	adds	r3, #1
 8005400:	440b      	add	r3, r1
 8005402:	6123      	str	r3, [r4, #16]
 8005404:	65a1      	str	r1, [r4, #88]	; 0x58
 8005406:	f04f 0a00 	mov.w	sl, #0
 800540a:	e7df      	b.n	80053cc <_printf_float+0x160>
 800540c:	b913      	cbnz	r3, 8005414 <_printf_float+0x1a8>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	07d2      	lsls	r2, r2, #31
 8005412:	d501      	bpl.n	8005418 <_printf_float+0x1ac>
 8005414:	3302      	adds	r3, #2
 8005416:	e7f4      	b.n	8005402 <_printf_float+0x196>
 8005418:	2301      	movs	r3, #1
 800541a:	e7f2      	b.n	8005402 <_printf_float+0x196>
 800541c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005422:	4299      	cmp	r1, r3
 8005424:	db05      	blt.n	8005432 <_printf_float+0x1c6>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	6121      	str	r1, [r4, #16]
 800542a:	07d8      	lsls	r0, r3, #31
 800542c:	d5ea      	bpl.n	8005404 <_printf_float+0x198>
 800542e:	1c4b      	adds	r3, r1, #1
 8005430:	e7e7      	b.n	8005402 <_printf_float+0x196>
 8005432:	2900      	cmp	r1, #0
 8005434:	bfd4      	ite	le
 8005436:	f1c1 0202 	rsble	r2, r1, #2
 800543a:	2201      	movgt	r2, #1
 800543c:	4413      	add	r3, r2
 800543e:	e7e0      	b.n	8005402 <_printf_float+0x196>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	055a      	lsls	r2, r3, #21
 8005444:	d407      	bmi.n	8005456 <_printf_float+0x1ea>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	4642      	mov	r2, r8
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	d12b      	bne.n	80054ac <_printf_float+0x240>
 8005454:	e765      	b.n	8005322 <_printf_float+0xb6>
 8005456:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800545a:	f240 80dc 	bls.w	8005616 <_printf_float+0x3aa>
 800545e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005462:	2200      	movs	r2, #0
 8005464:	2300      	movs	r3, #0
 8005466:	f7fb fb07 	bl	8000a78 <__aeabi_dcmpeq>
 800546a:	2800      	cmp	r0, #0
 800546c:	d033      	beq.n	80054d6 <_printf_float+0x26a>
 800546e:	4a36      	ldr	r2, [pc, #216]	; (8005548 <_printf_float+0x2dc>)
 8005470:	2301      	movs	r3, #1
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f af52 	beq.w	8005322 <_printf_float+0xb6>
 800547e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005482:	429a      	cmp	r2, r3
 8005484:	db02      	blt.n	800548c <_printf_float+0x220>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	07d8      	lsls	r0, r3, #31
 800548a:	d50f      	bpl.n	80054ac <_printf_float+0x240>
 800548c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f af43 	beq.w	8005322 <_printf_float+0xb6>
 800549c:	f04f 0800 	mov.w	r8, #0
 80054a0:	f104 091a 	add.w	r9, r4, #26
 80054a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4543      	cmp	r3, r8
 80054aa:	dc09      	bgt.n	80054c0 <_printf_float+0x254>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	f100 8101 	bmi.w	80056b6 <_printf_float+0x44a>
 80054b4:	68e0      	ldr	r0, [r4, #12]
 80054b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054b8:	4298      	cmp	r0, r3
 80054ba:	bfb8      	it	lt
 80054bc:	4618      	movlt	r0, r3
 80054be:	e732      	b.n	8005326 <_printf_float+0xba>
 80054c0:	2301      	movs	r3, #1
 80054c2:	464a      	mov	r2, r9
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af29 	beq.w	8005322 <_printf_float+0xb6>
 80054d0:	f108 0801 	add.w	r8, r8, #1
 80054d4:	e7e6      	b.n	80054a4 <_printf_float+0x238>
 80054d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dc37      	bgt.n	800554c <_printf_float+0x2e0>
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <_printf_float+0x2dc>)
 80054de:	2301      	movs	r3, #1
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	f43f af1b 	beq.w	8005322 <_printf_float+0xb6>
 80054ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054f0:	4313      	orrs	r3, r2
 80054f2:	d102      	bne.n	80054fa <_printf_float+0x28e>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	d5d8      	bpl.n	80054ac <_printf_float+0x240>
 80054fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	f43f af0c 	beq.w	8005322 <_printf_float+0xb6>
 800550a:	f04f 0900 	mov.w	r9, #0
 800550e:	f104 0a1a 	add.w	sl, r4, #26
 8005512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005514:	425b      	negs	r3, r3
 8005516:	454b      	cmp	r3, r9
 8005518:	dc01      	bgt.n	800551e <_printf_float+0x2b2>
 800551a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800551c:	e794      	b.n	8005448 <_printf_float+0x1dc>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4631      	mov	r1, r6
 8005524:	4628      	mov	r0, r5
 8005526:	47b8      	blx	r7
 8005528:	3001      	adds	r0, #1
 800552a:	f43f aefa 	beq.w	8005322 <_printf_float+0xb6>
 800552e:	f109 0901 	add.w	r9, r9, #1
 8005532:	e7ee      	b.n	8005512 <_printf_float+0x2a6>
 8005534:	7fefffff 	.word	0x7fefffff
 8005538:	0800a46c 	.word	0x0800a46c
 800553c:	0800a470 	.word	0x0800a470
 8005540:	0800a478 	.word	0x0800a478
 8005544:	0800a474 	.word	0x0800a474
 8005548:	0800a871 	.word	0x0800a871
 800554c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005550:	429a      	cmp	r2, r3
 8005552:	bfa8      	it	ge
 8005554:	461a      	movge	r2, r3
 8005556:	2a00      	cmp	r2, #0
 8005558:	4691      	mov	r9, r2
 800555a:	dc37      	bgt.n	80055cc <_printf_float+0x360>
 800555c:	f04f 0b00 	mov.w	fp, #0
 8005560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005564:	f104 021a 	add.w	r2, r4, #26
 8005568:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800556c:	ebaa 0309 	sub.w	r3, sl, r9
 8005570:	455b      	cmp	r3, fp
 8005572:	dc33      	bgt.n	80055dc <_printf_float+0x370>
 8005574:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005578:	429a      	cmp	r2, r3
 800557a:	db3b      	blt.n	80055f4 <_printf_float+0x388>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	07da      	lsls	r2, r3, #31
 8005580:	d438      	bmi.n	80055f4 <_printf_float+0x388>
 8005582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005584:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005586:	eba3 020a 	sub.w	r2, r3, sl
 800558a:	eba3 0901 	sub.w	r9, r3, r1
 800558e:	4591      	cmp	r9, r2
 8005590:	bfa8      	it	ge
 8005592:	4691      	movge	r9, r2
 8005594:	f1b9 0f00 	cmp.w	r9, #0
 8005598:	dc34      	bgt.n	8005604 <_printf_float+0x398>
 800559a:	f04f 0800 	mov.w	r8, #0
 800559e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055a2:	f104 0a1a 	add.w	sl, r4, #26
 80055a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	eba3 0309 	sub.w	r3, r3, r9
 80055b0:	4543      	cmp	r3, r8
 80055b2:	f77f af7b 	ble.w	80054ac <_printf_float+0x240>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4652      	mov	r2, sl
 80055ba:	4631      	mov	r1, r6
 80055bc:	4628      	mov	r0, r5
 80055be:	47b8      	blx	r7
 80055c0:	3001      	adds	r0, #1
 80055c2:	f43f aeae 	beq.w	8005322 <_printf_float+0xb6>
 80055c6:	f108 0801 	add.w	r8, r8, #1
 80055ca:	e7ec      	b.n	80055a6 <_printf_float+0x33a>
 80055cc:	4613      	mov	r3, r2
 80055ce:	4631      	mov	r1, r6
 80055d0:	4642      	mov	r2, r8
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	d1c0      	bne.n	800555c <_printf_float+0x2f0>
 80055da:	e6a2      	b.n	8005322 <_printf_float+0xb6>
 80055dc:	2301      	movs	r3, #1
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	f43f ae9b 	beq.w	8005322 <_printf_float+0xb6>
 80055ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055ee:	f10b 0b01 	add.w	fp, fp, #1
 80055f2:	e7b9      	b.n	8005568 <_printf_float+0x2fc>
 80055f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d1bf      	bne.n	8005582 <_printf_float+0x316>
 8005602:	e68e      	b.n	8005322 <_printf_float+0xb6>
 8005604:	464b      	mov	r3, r9
 8005606:	eb08 020a 	add.w	r2, r8, sl
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	d1c2      	bne.n	800559a <_printf_float+0x32e>
 8005614:	e685      	b.n	8005322 <_printf_float+0xb6>
 8005616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005618:	2a01      	cmp	r2, #1
 800561a:	dc01      	bgt.n	8005620 <_printf_float+0x3b4>
 800561c:	07db      	lsls	r3, r3, #31
 800561e:	d537      	bpl.n	8005690 <_printf_float+0x424>
 8005620:	2301      	movs	r3, #1
 8005622:	4642      	mov	r2, r8
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f ae79 	beq.w	8005322 <_printf_float+0xb6>
 8005630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f ae71 	beq.w	8005322 <_printf_float+0xb6>
 8005640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb fa16 	bl	8000a78 <__aeabi_dcmpeq>
 800564c:	b9d8      	cbnz	r0, 8005686 <_printf_float+0x41a>
 800564e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005650:	f108 0201 	add.w	r2, r8, #1
 8005654:	3b01      	subs	r3, #1
 8005656:	4631      	mov	r1, r6
 8005658:	4628      	mov	r0, r5
 800565a:	47b8      	blx	r7
 800565c:	3001      	adds	r0, #1
 800565e:	d10e      	bne.n	800567e <_printf_float+0x412>
 8005660:	e65f      	b.n	8005322 <_printf_float+0xb6>
 8005662:	2301      	movs	r3, #1
 8005664:	464a      	mov	r2, r9
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f ae58 	beq.w	8005322 <_printf_float+0xb6>
 8005672:	f108 0801 	add.w	r8, r8, #1
 8005676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005678:	3b01      	subs	r3, #1
 800567a:	4543      	cmp	r3, r8
 800567c:	dcf1      	bgt.n	8005662 <_printf_float+0x3f6>
 800567e:	4653      	mov	r3, sl
 8005680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005684:	e6e1      	b.n	800544a <_printf_float+0x1de>
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f104 091a 	add.w	r9, r4, #26
 800568e:	e7f2      	b.n	8005676 <_printf_float+0x40a>
 8005690:	2301      	movs	r3, #1
 8005692:	4642      	mov	r2, r8
 8005694:	e7df      	b.n	8005656 <_printf_float+0x3ea>
 8005696:	2301      	movs	r3, #1
 8005698:	464a      	mov	r2, r9
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae3e 	beq.w	8005322 <_printf_float+0xb6>
 80056a6:	f108 0801 	add.w	r8, r8, #1
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	4543      	cmp	r3, r8
 80056b2:	dcf0      	bgt.n	8005696 <_printf_float+0x42a>
 80056b4:	e6fe      	b.n	80054b4 <_printf_float+0x248>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	f104 0919 	add.w	r9, r4, #25
 80056be:	e7f4      	b.n	80056aa <_printf_float+0x43e>

080056c0 <_printf_common>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	4616      	mov	r6, r2
 80056c6:	4699      	mov	r9, r3
 80056c8:	688a      	ldr	r2, [r1, #8]
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bfb8      	it	lt
 80056d4:	4613      	movlt	r3, r2
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056dc:	4607      	mov	r7, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b10a      	cbz	r2, 80056e6 <_printf_common+0x26>
 80056e2:	3301      	adds	r3, #1
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0699      	lsls	r1, r3, #26
 80056ea:	bf42      	ittt	mi
 80056ec:	6833      	ldrmi	r3, [r6, #0]
 80056ee:	3302      	addmi	r3, #2
 80056f0:	6033      	strmi	r3, [r6, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	f015 0506 	ands.w	r5, r5, #6
 80056f8:	d106      	bne.n	8005708 <_printf_common+0x48>
 80056fa:	f104 0a19 	add.w	sl, r4, #25
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	6832      	ldr	r2, [r6, #0]
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc26      	bgt.n	8005756 <_printf_common+0x96>
 8005708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800570c:	1e13      	subs	r3, r2, #0
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	2301      	movne	r3, #1
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d42b      	bmi.n	8005770 <_printf_common+0xb0>
 8005718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d01e      	beq.n	8005764 <_printf_common+0xa4>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	68e5      	ldr	r5, [r4, #12]
 800572a:	6832      	ldr	r2, [r6, #0]
 800572c:	f003 0306 	and.w	r3, r3, #6
 8005730:	2b04      	cmp	r3, #4
 8005732:	bf08      	it	eq
 8005734:	1aad      	subeq	r5, r5, r2
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	6922      	ldr	r2, [r4, #16]
 800573a:	bf0c      	ite	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	2500      	movne	r5, #0
 8005742:	4293      	cmp	r3, r2
 8005744:	bfc4      	itt	gt
 8005746:	1a9b      	subgt	r3, r3, r2
 8005748:	18ed      	addgt	r5, r5, r3
 800574a:	2600      	movs	r6, #0
 800574c:	341a      	adds	r4, #26
 800574e:	42b5      	cmp	r5, r6
 8005750:	d11a      	bne.n	8005788 <_printf_common+0xc8>
 8005752:	2000      	movs	r0, #0
 8005754:	e008      	b.n	8005768 <_printf_common+0xa8>
 8005756:	2301      	movs	r3, #1
 8005758:	4652      	mov	r2, sl
 800575a:	4649      	mov	r1, r9
 800575c:	4638      	mov	r0, r7
 800575e:	47c0      	blx	r8
 8005760:	3001      	adds	r0, #1
 8005762:	d103      	bne.n	800576c <_printf_common+0xac>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	3501      	adds	r5, #1
 800576e:	e7c6      	b.n	80056fe <_printf_common+0x3e>
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	2030      	movs	r0, #48	; 0x30
 8005776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577a:	4422      	add	r2, r4
 800577c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005784:	3302      	adds	r3, #2
 8005786:	e7c7      	b.n	8005718 <_printf_common+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	4622      	mov	r2, r4
 800578c:	4649      	mov	r1, r9
 800578e:	4638      	mov	r0, r7
 8005790:	47c0      	blx	r8
 8005792:	3001      	adds	r0, #1
 8005794:	d0e6      	beq.n	8005764 <_printf_common+0xa4>
 8005796:	3601      	adds	r6, #1
 8005798:	e7d9      	b.n	800574e <_printf_common+0x8e>
	...

0800579c <_printf_i>:
 800579c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	7e0f      	ldrb	r7, [r1, #24]
 80057a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a4:	2f78      	cmp	r7, #120	; 0x78
 80057a6:	4691      	mov	r9, r2
 80057a8:	4680      	mov	r8, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	469a      	mov	sl, r3
 80057ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b2:	d807      	bhi.n	80057c4 <_printf_i+0x28>
 80057b4:	2f62      	cmp	r7, #98	; 0x62
 80057b6:	d80a      	bhi.n	80057ce <_printf_i+0x32>
 80057b8:	2f00      	cmp	r7, #0
 80057ba:	f000 80d8 	beq.w	800596e <_printf_i+0x1d2>
 80057be:	2f58      	cmp	r7, #88	; 0x58
 80057c0:	f000 80a3 	beq.w	800590a <_printf_i+0x16e>
 80057c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057cc:	e03a      	b.n	8005844 <_printf_i+0xa8>
 80057ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d2:	2b15      	cmp	r3, #21
 80057d4:	d8f6      	bhi.n	80057c4 <_printf_i+0x28>
 80057d6:	a101      	add	r1, pc, #4	; (adr r1, 80057dc <_printf_i+0x40>)
 80057d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005849 	.word	0x08005849
 80057e4:	080057c5 	.word	0x080057c5
 80057e8:	080057c5 	.word	0x080057c5
 80057ec:	080057c5 	.word	0x080057c5
 80057f0:	080057c5 	.word	0x080057c5
 80057f4:	08005849 	.word	0x08005849
 80057f8:	080057c5 	.word	0x080057c5
 80057fc:	080057c5 	.word	0x080057c5
 8005800:	080057c5 	.word	0x080057c5
 8005804:	080057c5 	.word	0x080057c5
 8005808:	08005955 	.word	0x08005955
 800580c:	08005879 	.word	0x08005879
 8005810:	08005937 	.word	0x08005937
 8005814:	080057c5 	.word	0x080057c5
 8005818:	080057c5 	.word	0x080057c5
 800581c:	08005977 	.word	0x08005977
 8005820:	080057c5 	.word	0x080057c5
 8005824:	08005879 	.word	0x08005879
 8005828:	080057c5 	.word	0x080057c5
 800582c:	080057c5 	.word	0x080057c5
 8005830:	0800593f 	.word	0x0800593f
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	602a      	str	r2, [r5, #0]
 800583c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005844:	2301      	movs	r3, #1
 8005846:	e0a3      	b.n	8005990 <_printf_i+0x1f4>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	6829      	ldr	r1, [r5, #0]
 800584c:	0606      	lsls	r6, r0, #24
 800584e:	f101 0304 	add.w	r3, r1, #4
 8005852:	d50a      	bpl.n	800586a <_printf_i+0xce>
 8005854:	680e      	ldr	r6, [r1, #0]
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	2e00      	cmp	r6, #0
 800585a:	da03      	bge.n	8005864 <_printf_i+0xc8>
 800585c:	232d      	movs	r3, #45	; 0x2d
 800585e:	4276      	negs	r6, r6
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005864:	485e      	ldr	r0, [pc, #376]	; (80059e0 <_printf_i+0x244>)
 8005866:	230a      	movs	r3, #10
 8005868:	e019      	b.n	800589e <_printf_i+0x102>
 800586a:	680e      	ldr	r6, [r1, #0]
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005872:	bf18      	it	ne
 8005874:	b236      	sxthne	r6, r6
 8005876:	e7ef      	b.n	8005858 <_printf_i+0xbc>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6820      	ldr	r0, [r4, #0]
 800587c:	1d19      	adds	r1, r3, #4
 800587e:	6029      	str	r1, [r5, #0]
 8005880:	0601      	lsls	r1, r0, #24
 8005882:	d501      	bpl.n	8005888 <_printf_i+0xec>
 8005884:	681e      	ldr	r6, [r3, #0]
 8005886:	e002      	b.n	800588e <_printf_i+0xf2>
 8005888:	0646      	lsls	r6, r0, #25
 800588a:	d5fb      	bpl.n	8005884 <_printf_i+0xe8>
 800588c:	881e      	ldrh	r6, [r3, #0]
 800588e:	4854      	ldr	r0, [pc, #336]	; (80059e0 <_printf_i+0x244>)
 8005890:	2f6f      	cmp	r7, #111	; 0x6f
 8005892:	bf0c      	ite	eq
 8005894:	2308      	moveq	r3, #8
 8005896:	230a      	movne	r3, #10
 8005898:	2100      	movs	r1, #0
 800589a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800589e:	6865      	ldr	r5, [r4, #4]
 80058a0:	60a5      	str	r5, [r4, #8]
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	bfa2      	ittt	ge
 80058a6:	6821      	ldrge	r1, [r4, #0]
 80058a8:	f021 0104 	bicge.w	r1, r1, #4
 80058ac:	6021      	strge	r1, [r4, #0]
 80058ae:	b90e      	cbnz	r6, 80058b4 <_printf_i+0x118>
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	d04d      	beq.n	8005950 <_printf_i+0x1b4>
 80058b4:	4615      	mov	r5, r2
 80058b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ba:	fb03 6711 	mls	r7, r3, r1, r6
 80058be:	5dc7      	ldrb	r7, [r0, r7]
 80058c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c4:	4637      	mov	r7, r6
 80058c6:	42bb      	cmp	r3, r7
 80058c8:	460e      	mov	r6, r1
 80058ca:	d9f4      	bls.n	80058b6 <_printf_i+0x11a>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d10b      	bne.n	80058e8 <_printf_i+0x14c>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	07de      	lsls	r6, r3, #31
 80058d4:	d508      	bpl.n	80058e8 <_printf_i+0x14c>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4299      	cmp	r1, r3
 80058dc:	bfde      	ittt	le
 80058de:	2330      	movle	r3, #48	; 0x30
 80058e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058e8:	1b52      	subs	r2, r2, r5
 80058ea:	6122      	str	r2, [r4, #16]
 80058ec:	f8cd a000 	str.w	sl, [sp]
 80058f0:	464b      	mov	r3, r9
 80058f2:	aa03      	add	r2, sp, #12
 80058f4:	4621      	mov	r1, r4
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff fee2 	bl	80056c0 <_printf_common>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d14c      	bne.n	800599a <_printf_i+0x1fe>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005904:	b004      	add	sp, #16
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	4835      	ldr	r0, [pc, #212]	; (80059e0 <_printf_i+0x244>)
 800590c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005910:	6829      	ldr	r1, [r5, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	f851 6b04 	ldr.w	r6, [r1], #4
 8005918:	6029      	str	r1, [r5, #0]
 800591a:	061d      	lsls	r5, r3, #24
 800591c:	d514      	bpl.n	8005948 <_printf_i+0x1ac>
 800591e:	07df      	lsls	r7, r3, #31
 8005920:	bf44      	itt	mi
 8005922:	f043 0320 	orrmi.w	r3, r3, #32
 8005926:	6023      	strmi	r3, [r4, #0]
 8005928:	b91e      	cbnz	r6, 8005932 <_printf_i+0x196>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f023 0320 	bic.w	r3, r3, #32
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	2310      	movs	r3, #16
 8005934:	e7b0      	b.n	8005898 <_printf_i+0xfc>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	f043 0320 	orr.w	r3, r3, #32
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	2378      	movs	r3, #120	; 0x78
 8005940:	4828      	ldr	r0, [pc, #160]	; (80059e4 <_printf_i+0x248>)
 8005942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005946:	e7e3      	b.n	8005910 <_printf_i+0x174>
 8005948:	0659      	lsls	r1, r3, #25
 800594a:	bf48      	it	mi
 800594c:	b2b6      	uxthmi	r6, r6
 800594e:	e7e6      	b.n	800591e <_printf_i+0x182>
 8005950:	4615      	mov	r5, r2
 8005952:	e7bb      	b.n	80058cc <_printf_i+0x130>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	6826      	ldr	r6, [r4, #0]
 8005958:	6961      	ldr	r1, [r4, #20]
 800595a:	1d18      	adds	r0, r3, #4
 800595c:	6028      	str	r0, [r5, #0]
 800595e:	0635      	lsls	r5, r6, #24
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	d501      	bpl.n	8005968 <_printf_i+0x1cc>
 8005964:	6019      	str	r1, [r3, #0]
 8005966:	e002      	b.n	800596e <_printf_i+0x1d2>
 8005968:	0670      	lsls	r0, r6, #25
 800596a:	d5fb      	bpl.n	8005964 <_printf_i+0x1c8>
 800596c:	8019      	strh	r1, [r3, #0]
 800596e:	2300      	movs	r3, #0
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	4615      	mov	r5, r2
 8005974:	e7ba      	b.n	80058ec <_printf_i+0x150>
 8005976:	682b      	ldr	r3, [r5, #0]
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	2100      	movs	r1, #0
 8005982:	4628      	mov	r0, r5
 8005984:	f7fa fc04 	bl	8000190 <memchr>
 8005988:	b108      	cbz	r0, 800598e <_printf_i+0x1f2>
 800598a:	1b40      	subs	r0, r0, r5
 800598c:	6060      	str	r0, [r4, #4]
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	2300      	movs	r3, #0
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	e7a8      	b.n	80058ec <_printf_i+0x150>
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	462a      	mov	r2, r5
 800599e:	4649      	mov	r1, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	47d0      	blx	sl
 80059a4:	3001      	adds	r0, #1
 80059a6:	d0ab      	beq.n	8005900 <_printf_i+0x164>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	079b      	lsls	r3, r3, #30
 80059ac:	d413      	bmi.n	80059d6 <_printf_i+0x23a>
 80059ae:	68e0      	ldr	r0, [r4, #12]
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	4298      	cmp	r0, r3
 80059b4:	bfb8      	it	lt
 80059b6:	4618      	movlt	r0, r3
 80059b8:	e7a4      	b.n	8005904 <_printf_i+0x168>
 80059ba:	2301      	movs	r3, #1
 80059bc:	4632      	mov	r2, r6
 80059be:	4649      	mov	r1, r9
 80059c0:	4640      	mov	r0, r8
 80059c2:	47d0      	blx	sl
 80059c4:	3001      	adds	r0, #1
 80059c6:	d09b      	beq.n	8005900 <_printf_i+0x164>
 80059c8:	3501      	adds	r5, #1
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	9903      	ldr	r1, [sp, #12]
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	42ab      	cmp	r3, r5
 80059d2:	dcf2      	bgt.n	80059ba <_printf_i+0x21e>
 80059d4:	e7eb      	b.n	80059ae <_printf_i+0x212>
 80059d6:	2500      	movs	r5, #0
 80059d8:	f104 0619 	add.w	r6, r4, #25
 80059dc:	e7f5      	b.n	80059ca <_printf_i+0x22e>
 80059de:	bf00      	nop
 80059e0:	0800a47c 	.word	0x0800a47c
 80059e4:	0800a48d 	.word	0x0800a48d

080059e8 <_scanf_float>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	b087      	sub	sp, #28
 80059ee:	4617      	mov	r7, r2
 80059f0:	9303      	str	r3, [sp, #12]
 80059f2:	688b      	ldr	r3, [r1, #8]
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059fa:	bf83      	ittte	hi
 80059fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a00:	195b      	addhi	r3, r3, r5
 8005a02:	9302      	strhi	r3, [sp, #8]
 8005a04:	2300      	movls	r3, #0
 8005a06:	bf86      	itte	hi
 8005a08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a0c:	608b      	strhi	r3, [r1, #8]
 8005a0e:	9302      	strls	r3, [sp, #8]
 8005a10:	680b      	ldr	r3, [r1, #0]
 8005a12:	468b      	mov	fp, r1
 8005a14:	2500      	movs	r5, #0
 8005a16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a22:	4680      	mov	r8, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	465e      	mov	r6, fp
 8005a28:	46aa      	mov	sl, r5
 8005a2a:	46a9      	mov	r9, r5
 8005a2c:	9501      	str	r5, [sp, #4]
 8005a2e:	68a2      	ldr	r2, [r4, #8]
 8005a30:	b152      	cbz	r2, 8005a48 <_scanf_float+0x60>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b4e      	cmp	r3, #78	; 0x4e
 8005a38:	d864      	bhi.n	8005b04 <_scanf_float+0x11c>
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d83c      	bhi.n	8005ab8 <_scanf_float+0xd0>
 8005a3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a42:	b2c8      	uxtb	r0, r1
 8005a44:	280e      	cmp	r0, #14
 8005a46:	d93a      	bls.n	8005abe <_scanf_float+0xd6>
 8005a48:	f1b9 0f00 	cmp.w	r9, #0
 8005a4c:	d003      	beq.n	8005a56 <_scanf_float+0x6e>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a5a:	f1ba 0f01 	cmp.w	sl, #1
 8005a5e:	f200 8113 	bhi.w	8005c88 <_scanf_float+0x2a0>
 8005a62:	455e      	cmp	r6, fp
 8005a64:	f200 8105 	bhi.w	8005c72 <_scanf_float+0x28a>
 8005a68:	2501      	movs	r5, #1
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	b007      	add	sp, #28
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a76:	2a0d      	cmp	r2, #13
 8005a78:	d8e6      	bhi.n	8005a48 <_scanf_float+0x60>
 8005a7a:	a101      	add	r1, pc, #4	; (adr r1, 8005a80 <_scanf_float+0x98>)
 8005a7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a80:	08005bbf 	.word	0x08005bbf
 8005a84:	08005a49 	.word	0x08005a49
 8005a88:	08005a49 	.word	0x08005a49
 8005a8c:	08005a49 	.word	0x08005a49
 8005a90:	08005c1f 	.word	0x08005c1f
 8005a94:	08005bf7 	.word	0x08005bf7
 8005a98:	08005a49 	.word	0x08005a49
 8005a9c:	08005a49 	.word	0x08005a49
 8005aa0:	08005bcd 	.word	0x08005bcd
 8005aa4:	08005a49 	.word	0x08005a49
 8005aa8:	08005a49 	.word	0x08005a49
 8005aac:	08005a49 	.word	0x08005a49
 8005ab0:	08005a49 	.word	0x08005a49
 8005ab4:	08005b85 	.word	0x08005b85
 8005ab8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005abc:	e7db      	b.n	8005a76 <_scanf_float+0x8e>
 8005abe:	290e      	cmp	r1, #14
 8005ac0:	d8c2      	bhi.n	8005a48 <_scanf_float+0x60>
 8005ac2:	a001      	add	r0, pc, #4	; (adr r0, 8005ac8 <_scanf_float+0xe0>)
 8005ac4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ac8:	08005b77 	.word	0x08005b77
 8005acc:	08005a49 	.word	0x08005a49
 8005ad0:	08005b77 	.word	0x08005b77
 8005ad4:	08005c0b 	.word	0x08005c0b
 8005ad8:	08005a49 	.word	0x08005a49
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005b61 	.word	0x08005b61
 8005ae4:	08005b61 	.word	0x08005b61
 8005ae8:	08005b61 	.word	0x08005b61
 8005aec:	08005b61 	.word	0x08005b61
 8005af0:	08005b61 	.word	0x08005b61
 8005af4:	08005b61 	.word	0x08005b61
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005b61 	.word	0x08005b61
 8005b00:	08005b61 	.word	0x08005b61
 8005b04:	2b6e      	cmp	r3, #110	; 0x6e
 8005b06:	d809      	bhi.n	8005b1c <_scanf_float+0x134>
 8005b08:	2b60      	cmp	r3, #96	; 0x60
 8005b0a:	d8b2      	bhi.n	8005a72 <_scanf_float+0x8a>
 8005b0c:	2b54      	cmp	r3, #84	; 0x54
 8005b0e:	d077      	beq.n	8005c00 <_scanf_float+0x218>
 8005b10:	2b59      	cmp	r3, #89	; 0x59
 8005b12:	d199      	bne.n	8005a48 <_scanf_float+0x60>
 8005b14:	2d07      	cmp	r5, #7
 8005b16:	d197      	bne.n	8005a48 <_scanf_float+0x60>
 8005b18:	2508      	movs	r5, #8
 8005b1a:	e029      	b.n	8005b70 <_scanf_float+0x188>
 8005b1c:	2b74      	cmp	r3, #116	; 0x74
 8005b1e:	d06f      	beq.n	8005c00 <_scanf_float+0x218>
 8005b20:	2b79      	cmp	r3, #121	; 0x79
 8005b22:	e7f6      	b.n	8005b12 <_scanf_float+0x12a>
 8005b24:	6821      	ldr	r1, [r4, #0]
 8005b26:	05c8      	lsls	r0, r1, #23
 8005b28:	d51a      	bpl.n	8005b60 <_scanf_float+0x178>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b30:	6021      	str	r1, [r4, #0]
 8005b32:	f109 0901 	add.w	r9, r9, #1
 8005b36:	b11b      	cbz	r3, 8005b40 <_scanf_float+0x158>
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	9302      	str	r3, [sp, #8]
 8005b3e:	60a2      	str	r2, [r4, #8]
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	f340 8084 	ble.w	8005c60 <_scanf_float+0x278>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	e766      	b.n	8005a2e <_scanf_float+0x46>
 8005b60:	eb1a 0f05 	cmn.w	sl, r5
 8005b64:	f47f af70 	bne.w	8005a48 <_scanf_float+0x60>
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	f806 3b01 	strb.w	r3, [r6], #1
 8005b74:	e7e4      	b.n	8005b40 <_scanf_float+0x158>
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	0610      	lsls	r0, r2, #24
 8005b7a:	f57f af65 	bpl.w	8005a48 <_scanf_float+0x60>
 8005b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b82:	e7f4      	b.n	8005b6e <_scanf_float+0x186>
 8005b84:	f1ba 0f00 	cmp.w	sl, #0
 8005b88:	d10e      	bne.n	8005ba8 <_scanf_float+0x1c0>
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	d10e      	bne.n	8005bae <_scanf_float+0x1c6>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b9a:	d108      	bne.n	8005bae <_scanf_float+0x1c6>
 8005b9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	f04f 0a01 	mov.w	sl, #1
 8005ba6:	e7e3      	b.n	8005b70 <_scanf_float+0x188>
 8005ba8:	f1ba 0f02 	cmp.w	sl, #2
 8005bac:	d055      	beq.n	8005c5a <_scanf_float+0x272>
 8005bae:	2d01      	cmp	r5, #1
 8005bb0:	d002      	beq.n	8005bb8 <_scanf_float+0x1d0>
 8005bb2:	2d04      	cmp	r5, #4
 8005bb4:	f47f af48 	bne.w	8005a48 <_scanf_float+0x60>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	b2ed      	uxtb	r5, r5
 8005bbc:	e7d8      	b.n	8005b70 <_scanf_float+0x188>
 8005bbe:	f1ba 0f01 	cmp.w	sl, #1
 8005bc2:	f47f af41 	bne.w	8005a48 <_scanf_float+0x60>
 8005bc6:	f04f 0a02 	mov.w	sl, #2
 8005bca:	e7d1      	b.n	8005b70 <_scanf_float+0x188>
 8005bcc:	b97d      	cbnz	r5, 8005bee <_scanf_float+0x206>
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	f47f af3c 	bne.w	8005a4e <_scanf_float+0x66>
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bdc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005be0:	f47f af39 	bne.w	8005a56 <_scanf_float+0x6e>
 8005be4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005be8:	6022      	str	r2, [r4, #0]
 8005bea:	2501      	movs	r5, #1
 8005bec:	e7c0      	b.n	8005b70 <_scanf_float+0x188>
 8005bee:	2d03      	cmp	r5, #3
 8005bf0:	d0e2      	beq.n	8005bb8 <_scanf_float+0x1d0>
 8005bf2:	2d05      	cmp	r5, #5
 8005bf4:	e7de      	b.n	8005bb4 <_scanf_float+0x1cc>
 8005bf6:	2d02      	cmp	r5, #2
 8005bf8:	f47f af26 	bne.w	8005a48 <_scanf_float+0x60>
 8005bfc:	2503      	movs	r5, #3
 8005bfe:	e7b7      	b.n	8005b70 <_scanf_float+0x188>
 8005c00:	2d06      	cmp	r5, #6
 8005c02:	f47f af21 	bne.w	8005a48 <_scanf_float+0x60>
 8005c06:	2507      	movs	r5, #7
 8005c08:	e7b2      	b.n	8005b70 <_scanf_float+0x188>
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	0591      	lsls	r1, r2, #22
 8005c0e:	f57f af1b 	bpl.w	8005a48 <_scanf_float+0x60>
 8005c12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c16:	6022      	str	r2, [r4, #0]
 8005c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c1c:	e7a8      	b.n	8005b70 <_scanf_float+0x188>
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c28:	d006      	beq.n	8005c38 <_scanf_float+0x250>
 8005c2a:	0550      	lsls	r0, r2, #21
 8005c2c:	f57f af0c 	bpl.w	8005a48 <_scanf_float+0x60>
 8005c30:	f1b9 0f00 	cmp.w	r9, #0
 8005c34:	f43f af0f 	beq.w	8005a56 <_scanf_float+0x6e>
 8005c38:	0591      	lsls	r1, r2, #22
 8005c3a:	bf58      	it	pl
 8005c3c:	9901      	ldrpl	r1, [sp, #4]
 8005c3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c42:	bf58      	it	pl
 8005c44:	eba9 0101 	subpl.w	r1, r9, r1
 8005c48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c4c:	bf58      	it	pl
 8005c4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	f04f 0900 	mov.w	r9, #0
 8005c58:	e78a      	b.n	8005b70 <_scanf_float+0x188>
 8005c5a:	f04f 0a03 	mov.w	sl, #3
 8005c5e:	e787      	b.n	8005b70 <_scanf_float+0x188>
 8005c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c64:	4639      	mov	r1, r7
 8005c66:	4640      	mov	r0, r8
 8005c68:	4798      	blx	r3
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f43f aedf 	beq.w	8005a2e <_scanf_float+0x46>
 8005c70:	e6ea      	b.n	8005a48 <_scanf_float+0x60>
 8005c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	4798      	blx	r3
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	e6ec      	b.n	8005a62 <_scanf_float+0x7a>
 8005c88:	1e6b      	subs	r3, r5, #1
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d825      	bhi.n	8005cda <_scanf_float+0x2f2>
 8005c8e:	2d02      	cmp	r5, #2
 8005c90:	d836      	bhi.n	8005d00 <_scanf_float+0x318>
 8005c92:	455e      	cmp	r6, fp
 8005c94:	f67f aee8 	bls.w	8005a68 <_scanf_float+0x80>
 8005c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ca0:	463a      	mov	r2, r7
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4798      	blx	r3
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	e7f1      	b.n	8005c92 <_scanf_float+0x2aa>
 8005cae:	9802      	ldr	r0, [sp, #8]
 8005cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005cb8:	9002      	str	r0, [sp, #8]
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	4798      	blx	r3
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005cca:	fa5f fa8a 	uxtb.w	sl, sl
 8005cce:	f1ba 0f02 	cmp.w	sl, #2
 8005cd2:	d1ec      	bne.n	8005cae <_scanf_float+0x2c6>
 8005cd4:	3d03      	subs	r5, #3
 8005cd6:	b2ed      	uxtb	r5, r5
 8005cd8:	1b76      	subs	r6, r6, r5
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	05da      	lsls	r2, r3, #23
 8005cde:	d52f      	bpl.n	8005d40 <_scanf_float+0x358>
 8005ce0:	055b      	lsls	r3, r3, #21
 8005ce2:	d510      	bpl.n	8005d06 <_scanf_float+0x31e>
 8005ce4:	455e      	cmp	r6, fp
 8005ce6:	f67f aebf 	bls.w	8005a68 <_scanf_float+0x80>
 8005cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cf2:	463a      	mov	r2, r7
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4798      	blx	r3
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	e7f1      	b.n	8005ce4 <_scanf_float+0x2fc>
 8005d00:	46aa      	mov	sl, r5
 8005d02:	9602      	str	r6, [sp, #8]
 8005d04:	e7df      	b.n	8005cc6 <_scanf_float+0x2de>
 8005d06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	2965      	cmp	r1, #101	; 0x65
 8005d0e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005d12:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	d00c      	beq.n	8005d34 <_scanf_float+0x34c>
 8005d1a:	2945      	cmp	r1, #69	; 0x45
 8005d1c:	d00a      	beq.n	8005d34 <_scanf_float+0x34c>
 8005d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d22:	463a      	mov	r2, r7
 8005d24:	4640      	mov	r0, r8
 8005d26:	4798      	blx	r3
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	1eb5      	subs	r5, r6, #2
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d38:	463a      	mov	r2, r7
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4798      	blx	r3
 8005d3e:	462e      	mov	r6, r5
 8005d40:	6825      	ldr	r5, [r4, #0]
 8005d42:	f015 0510 	ands.w	r5, r5, #16
 8005d46:	d155      	bne.n	8005df4 <_scanf_float+0x40c>
 8005d48:	7035      	strb	r5, [r6, #0]
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d11b      	bne.n	8005d8e <_scanf_float+0x3a6>
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	454b      	cmp	r3, r9
 8005d5a:	eba3 0209 	sub.w	r2, r3, r9
 8005d5e:	d123      	bne.n	8005da8 <_scanf_float+0x3c0>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4659      	mov	r1, fp
 8005d64:	4640      	mov	r0, r8
 8005d66:	f000 ff07 	bl	8006b78 <_strtod_r>
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	f012 0f02 	tst.w	r2, #2
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	d021      	beq.n	8005dbe <_scanf_float+0x3d6>
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	600a      	str	r2, [r1, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	e9c3 6700 	strd	r6, r7, [r3]
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60e3      	str	r3, [r4, #12]
 8005d8c:	e66d      	b.n	8005a6a <_scanf_float+0x82>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0e5      	beq.n	8005d60 <_scanf_float+0x378>
 8005d94:	9905      	ldr	r1, [sp, #20]
 8005d96:	230a      	movs	r3, #10
 8005d98:	462a      	mov	r2, r5
 8005d9a:	3101      	adds	r1, #1
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	f000 ff6d 	bl	8006c7c <_strtol_r>
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	9e05      	ldr	r6, [sp, #20]
 8005da6:	1ac2      	subs	r2, r0, r3
 8005da8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005dac:	429e      	cmp	r6, r3
 8005dae:	bf28      	it	cs
 8005db0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005db4:	4910      	ldr	r1, [pc, #64]	; (8005df8 <_scanf_float+0x410>)
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 f826 	bl	8005e08 <siprintf>
 8005dbc:	e7d0      	b.n	8005d60 <_scanf_float+0x378>
 8005dbe:	f012 0f04 	tst.w	r2, #4
 8005dc2:	f103 0204 	add.w	r2, r3, #4
 8005dc6:	d1d9      	bne.n	8005d7c <_scanf_float+0x394>
 8005dc8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005dcc:	f8cc 2000 	str.w	r2, [ip]
 8005dd0:	f8d3 8000 	ldr.w	r8, [r3]
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	f7fa fe80 	bl	8000adc <__aeabi_dcmpun>
 8005ddc:	b128      	cbz	r0, 8005dea <_scanf_float+0x402>
 8005dde:	4807      	ldr	r0, [pc, #28]	; (8005dfc <_scanf_float+0x414>)
 8005de0:	f000 f80e 	bl	8005e00 <nanf>
 8005de4:	f8c8 0000 	str.w	r0, [r8]
 8005de8:	e7cd      	b.n	8005d86 <_scanf_float+0x39e>
 8005dea:	4630      	mov	r0, r6
 8005dec:	4639      	mov	r1, r7
 8005dee:	f7fa fed3 	bl	8000b98 <__aeabi_d2f>
 8005df2:	e7f7      	b.n	8005de4 <_scanf_float+0x3fc>
 8005df4:	2500      	movs	r5, #0
 8005df6:	e638      	b.n	8005a6a <_scanf_float+0x82>
 8005df8:	0800a49e 	.word	0x0800a49e
 8005dfc:	0800a8c3 	.word	0x0800a8c3

08005e00 <nanf>:
 8005e00:	4800      	ldr	r0, [pc, #0]	; (8005e04 <nanf+0x4>)
 8005e02:	4770      	bx	lr
 8005e04:	7fc00000 	.word	0x7fc00000

08005e08 <siprintf>:
 8005e08:	b40e      	push	{r1, r2, r3}
 8005e0a:	b500      	push	{lr}
 8005e0c:	b09c      	sub	sp, #112	; 0x70
 8005e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e10:	9002      	str	r0, [sp, #8]
 8005e12:	9006      	str	r0, [sp, #24]
 8005e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e18:	4809      	ldr	r0, [pc, #36]	; (8005e40 <siprintf+0x38>)
 8005e1a:	9107      	str	r1, [sp, #28]
 8005e1c:	9104      	str	r1, [sp, #16]
 8005e1e:	4909      	ldr	r1, [pc, #36]	; (8005e44 <siprintf+0x3c>)
 8005e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	6800      	ldr	r0, [r0, #0]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	a902      	add	r1, sp, #8
 8005e2c:	f002 ff68 	bl	8008d00 <_svfiprintf_r>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	b01c      	add	sp, #112	; 0x70
 8005e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e3c:	b003      	add	sp, #12
 8005e3e:	4770      	bx	lr
 8005e40:	2000000c 	.word	0x2000000c
 8005e44:	ffff0208 	.word	0xffff0208

08005e48 <siscanf>:
 8005e48:	b40e      	push	{r1, r2, r3}
 8005e4a:	b530      	push	{r4, r5, lr}
 8005e4c:	b09c      	sub	sp, #112	; 0x70
 8005e4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005e50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005e54:	f854 5b04 	ldr.w	r5, [r4], #4
 8005e58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	9006      	str	r0, [sp, #24]
 8005e60:	f7fa f98e 	bl	8000180 <strlen>
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <siscanf+0x4c>)
 8005e66:	9003      	str	r0, [sp, #12]
 8005e68:	9007      	str	r0, [sp, #28]
 8005e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e6c:	480a      	ldr	r0, [pc, #40]	; (8005e98 <siscanf+0x50>)
 8005e6e:	9401      	str	r4, [sp, #4]
 8005e70:	2300      	movs	r3, #0
 8005e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e74:	9314      	str	r3, [sp, #80]	; 0x50
 8005e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4623      	mov	r3, r4
 8005e82:	a902      	add	r1, sp, #8
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	f003 f895 	bl	8008fb4 <__ssvfiscanf_r>
 8005e8a:	b01c      	add	sp, #112	; 0x70
 8005e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e90:	b003      	add	sp, #12
 8005e92:	4770      	bx	lr
 8005e94:	08005ebf 	.word	0x08005ebf
 8005e98:	2000000c 	.word	0x2000000c

08005e9c <__sread>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea4:	f003 fb50 	bl	8009548 <_read_r>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	bfab      	itete	ge
 8005eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eae:	89a3      	ldrhlt	r3, [r4, #12]
 8005eb0:	181b      	addge	r3, r3, r0
 8005eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eb6:	bfac      	ite	ge
 8005eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eba:	81a3      	strhlt	r3, [r4, #12]
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <__seofread>:
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	4770      	bx	lr

08005ec2 <__swrite>:
 8005ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	461f      	mov	r7, r3
 8005ec8:	898b      	ldrh	r3, [r1, #12]
 8005eca:	05db      	lsls	r3, r3, #23
 8005ecc:	4605      	mov	r5, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	d505      	bpl.n	8005ee0 <__swrite+0x1e>
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	2302      	movs	r3, #2
 8005eda:	2200      	movs	r2, #0
 8005edc:	f002 f8d4 	bl	8008088 <_lseek_r>
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	4632      	mov	r2, r6
 8005eee:	463b      	mov	r3, r7
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	f000 bec3 	b.w	8006c80 <_write_r>

08005efa <__sseek>:
 8005efa:	b510      	push	{r4, lr}
 8005efc:	460c      	mov	r4, r1
 8005efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f02:	f002 f8c1 	bl	8008088 <_lseek_r>
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	bf15      	itete	ne
 8005f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f16:	81a3      	strheq	r3, [r4, #12]
 8005f18:	bf18      	it	ne
 8005f1a:	81a3      	strhne	r3, [r4, #12]
 8005f1c:	bd10      	pop	{r4, pc}

08005f1e <__sclose>:
 8005f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f22:	f000 bebf 	b.w	8006ca4 <_close_r>

08005f26 <strcpy>:
 8005f26:	4603      	mov	r3, r0
 8005f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f2c:	f803 2b01 	strb.w	r2, [r3], #1
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d1f9      	bne.n	8005f28 <strcpy+0x2>
 8005f34:	4770      	bx	lr

08005f36 <strstr>:
 8005f36:	780a      	ldrb	r2, [r1, #0]
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	b96a      	cbnz	r2, 8005f58 <strstr+0x22>
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d109      	bne.n	8005f56 <strstr+0x20>
 8005f42:	460c      	mov	r4, r1
 8005f44:	4605      	mov	r5, r0
 8005f46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f6      	beq.n	8005f3c <strstr+0x6>
 8005f4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005f52:	429e      	cmp	r6, r3
 8005f54:	d0f7      	beq.n	8005f46 <strstr+0x10>
 8005f56:	3001      	adds	r0, #1
 8005f58:	7803      	ldrb	r3, [r0, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ef      	bne.n	8005f3e <strstr+0x8>
 8005f5e:	4618      	mov	r0, r3
 8005f60:	e7ec      	b.n	8005f3c <strstr+0x6>

08005f62 <sulp>:
 8005f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	460f      	mov	r7, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	f002 fc33 	bl	80087d4 <__ulp>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	460d      	mov	r5, r1
 8005f72:	f1b8 0f00 	cmp.w	r8, #0
 8005f76:	d011      	beq.n	8005f9c <sulp+0x3a>
 8005f78:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd0b      	ble.n	8005f9c <sulp+0x3a>
 8005f84:	051b      	lsls	r3, r3, #20
 8005f86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f90:	4622      	mov	r2, r4
 8005f92:	462b      	mov	r3, r5
 8005f94:	f7fa fb08 	bl	80005a8 <__aeabi_dmul>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	0000      	movs	r0, r0
	...

08005fa8 <_strtod_l>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	b09f      	sub	sp, #124	; 0x7c
 8005fae:	469b      	mov	fp, r3
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb4:	4b9e      	ldr	r3, [pc, #632]	; (8006230 <_strtod_l+0x288>)
 8005fb6:	9215      	str	r2, [sp, #84]	; 0x54
 8005fb8:	681f      	ldr	r7, [r3, #0]
 8005fba:	4682      	mov	sl, r0
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	460e      	mov	r6, r1
 8005fc0:	f7fa f8de 	bl	8000180 <strlen>
 8005fc4:	f04f 0800 	mov.w	r8, #0
 8005fc8:	4604      	mov	r4, r0
 8005fca:	f04f 0900 	mov.w	r9, #0
 8005fce:	9619      	str	r6, [sp, #100]	; 0x64
 8005fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	2a2b      	cmp	r2, #43	; 0x2b
 8005fd6:	d04c      	beq.n	8006072 <_strtod_l+0xca>
 8005fd8:	d83a      	bhi.n	8006050 <_strtod_l+0xa8>
 8005fda:	2a0d      	cmp	r2, #13
 8005fdc:	d833      	bhi.n	8006046 <_strtod_l+0x9e>
 8005fde:	2a08      	cmp	r2, #8
 8005fe0:	d833      	bhi.n	800604a <_strtod_l+0xa2>
 8005fe2:	2a00      	cmp	r2, #0
 8005fe4:	d03d      	beq.n	8006062 <_strtod_l+0xba>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005fec:	782b      	ldrb	r3, [r5, #0]
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	f040 80aa 	bne.w	8006148 <_strtod_l+0x1a0>
 8005ff4:	786b      	ldrb	r3, [r5, #1]
 8005ff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ffa:	2b58      	cmp	r3, #88	; 0x58
 8005ffc:	d166      	bne.n	80060cc <_strtod_l+0x124>
 8005ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	ab1a      	add	r3, sp, #104	; 0x68
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4a8b      	ldr	r2, [pc, #556]	; (8006234 <_strtod_l+0x28c>)
 8006008:	f8cd b008 	str.w	fp, [sp, #8]
 800600c:	ab1b      	add	r3, sp, #108	; 0x6c
 800600e:	a919      	add	r1, sp, #100	; 0x64
 8006010:	4650      	mov	r0, sl
 8006012:	f001 fd37 	bl	8007a84 <__gethex>
 8006016:	f010 0607 	ands.w	r6, r0, #7
 800601a:	4604      	mov	r4, r0
 800601c:	d005      	beq.n	800602a <_strtod_l+0x82>
 800601e:	2e06      	cmp	r6, #6
 8006020:	d129      	bne.n	8006076 <_strtod_l+0xce>
 8006022:	3501      	adds	r5, #1
 8006024:	2300      	movs	r3, #0
 8006026:	9519      	str	r5, [sp, #100]	; 0x64
 8006028:	930a      	str	r3, [sp, #40]	; 0x28
 800602a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 858a 	bne.w	8006b46 <_strtod_l+0xb9e>
 8006032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006034:	b1d3      	cbz	r3, 800606c <_strtod_l+0xc4>
 8006036:	4642      	mov	r2, r8
 8006038:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	b01f      	add	sp, #124	; 0x7c
 8006042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006046:	2a20      	cmp	r2, #32
 8006048:	d1cd      	bne.n	8005fe6 <_strtod_l+0x3e>
 800604a:	3301      	adds	r3, #1
 800604c:	9319      	str	r3, [sp, #100]	; 0x64
 800604e:	e7bf      	b.n	8005fd0 <_strtod_l+0x28>
 8006050:	2a2d      	cmp	r2, #45	; 0x2d
 8006052:	d1c8      	bne.n	8005fe6 <_strtod_l+0x3e>
 8006054:	2201      	movs	r2, #1
 8006056:	920a      	str	r2, [sp, #40]	; 0x28
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	9219      	str	r2, [sp, #100]	; 0x64
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1c3      	bne.n	8005fea <_strtod_l+0x42>
 8006062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006064:	9619      	str	r6, [sp, #100]	; 0x64
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 856b 	bne.w	8006b42 <_strtod_l+0xb9a>
 800606c:	4642      	mov	r2, r8
 800606e:	464b      	mov	r3, r9
 8006070:	e7e4      	b.n	800603c <_strtod_l+0x94>
 8006072:	2200      	movs	r2, #0
 8006074:	e7ef      	b.n	8006056 <_strtod_l+0xae>
 8006076:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006078:	b13a      	cbz	r2, 800608a <_strtod_l+0xe2>
 800607a:	2135      	movs	r1, #53	; 0x35
 800607c:	a81c      	add	r0, sp, #112	; 0x70
 800607e:	f002 fcad 	bl	80089dc <__copybits>
 8006082:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006084:	4650      	mov	r0, sl
 8006086:	f002 f879 	bl	800817c <_Bfree>
 800608a:	3e01      	subs	r6, #1
 800608c:	2e04      	cmp	r6, #4
 800608e:	d806      	bhi.n	800609e <_strtod_l+0xf6>
 8006090:	e8df f006 	tbb	[pc, r6]
 8006094:	1714030a 	.word	0x1714030a
 8006098:	0a          	.byte	0x0a
 8006099:	00          	.byte	0x00
 800609a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800609e:	0721      	lsls	r1, r4, #28
 80060a0:	d5c3      	bpl.n	800602a <_strtod_l+0x82>
 80060a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80060a6:	e7c0      	b.n	800602a <_strtod_l+0x82>
 80060a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80060ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80060ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80060ba:	e7f0      	b.n	800609e <_strtod_l+0xf6>
 80060bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006238 <_strtod_l+0x290>
 80060c0:	e7ed      	b.n	800609e <_strtod_l+0xf6>
 80060c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80060c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80060ca:	e7e8      	b.n	800609e <_strtod_l+0xf6>
 80060cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	9219      	str	r2, [sp, #100]	; 0x64
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b30      	cmp	r3, #48	; 0x30
 80060d6:	d0f9      	beq.n	80060cc <_strtod_l+0x124>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0a6      	beq.n	800602a <_strtod_l+0x82>
 80060dc:	2301      	movs	r3, #1
 80060de:	9307      	str	r3, [sp, #28]
 80060e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	2300      	movs	r3, #0
 80060e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80060ea:	469b      	mov	fp, r3
 80060ec:	220a      	movs	r2, #10
 80060ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80060f0:	7805      	ldrb	r5, [r0, #0]
 80060f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80060f6:	b2d9      	uxtb	r1, r3
 80060f8:	2909      	cmp	r1, #9
 80060fa:	d927      	bls.n	800614c <_strtod_l+0x1a4>
 80060fc:	4622      	mov	r2, r4
 80060fe:	4639      	mov	r1, r7
 8006100:	f003 fa82 	bl	8009608 <strncmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	d033      	beq.n	8006170 <_strtod_l+0x1c8>
 8006108:	2000      	movs	r0, #0
 800610a:	462a      	mov	r2, r5
 800610c:	465c      	mov	r4, fp
 800610e:	9004      	str	r0, [sp, #16]
 8006110:	4603      	mov	r3, r0
 8006112:	2a65      	cmp	r2, #101	; 0x65
 8006114:	d001      	beq.n	800611a <_strtod_l+0x172>
 8006116:	2a45      	cmp	r2, #69	; 0x45
 8006118:	d114      	bne.n	8006144 <_strtod_l+0x19c>
 800611a:	b91c      	cbnz	r4, 8006124 <_strtod_l+0x17c>
 800611c:	9a07      	ldr	r2, [sp, #28]
 800611e:	4302      	orrs	r2, r0
 8006120:	d09f      	beq.n	8006062 <_strtod_l+0xba>
 8006122:	2400      	movs	r4, #0
 8006124:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006126:	1c72      	adds	r2, r6, #1
 8006128:	9219      	str	r2, [sp, #100]	; 0x64
 800612a:	7872      	ldrb	r2, [r6, #1]
 800612c:	2a2b      	cmp	r2, #43	; 0x2b
 800612e:	d079      	beq.n	8006224 <_strtod_l+0x27c>
 8006130:	2a2d      	cmp	r2, #45	; 0x2d
 8006132:	f000 8083 	beq.w	800623c <_strtod_l+0x294>
 8006136:	2700      	movs	r7, #0
 8006138:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800613c:	2909      	cmp	r1, #9
 800613e:	f240 8083 	bls.w	8006248 <_strtod_l+0x2a0>
 8006142:	9619      	str	r6, [sp, #100]	; 0x64
 8006144:	2500      	movs	r5, #0
 8006146:	e09f      	b.n	8006288 <_strtod_l+0x2e0>
 8006148:	2300      	movs	r3, #0
 800614a:	e7c8      	b.n	80060de <_strtod_l+0x136>
 800614c:	f1bb 0f08 	cmp.w	fp, #8
 8006150:	bfd5      	itete	le
 8006152:	9906      	ldrle	r1, [sp, #24]
 8006154:	9905      	ldrgt	r1, [sp, #20]
 8006156:	fb02 3301 	mlale	r3, r2, r1, r3
 800615a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800615e:	f100 0001 	add.w	r0, r0, #1
 8006162:	bfd4      	ite	le
 8006164:	9306      	strle	r3, [sp, #24]
 8006166:	9305      	strgt	r3, [sp, #20]
 8006168:	f10b 0b01 	add.w	fp, fp, #1
 800616c:	9019      	str	r0, [sp, #100]	; 0x64
 800616e:	e7be      	b.n	80060ee <_strtod_l+0x146>
 8006170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006172:	191a      	adds	r2, r3, r4
 8006174:	9219      	str	r2, [sp, #100]	; 0x64
 8006176:	5d1a      	ldrb	r2, [r3, r4]
 8006178:	f1bb 0f00 	cmp.w	fp, #0
 800617c:	d036      	beq.n	80061ec <_strtod_l+0x244>
 800617e:	9004      	str	r0, [sp, #16]
 8006180:	465c      	mov	r4, fp
 8006182:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006186:	2b09      	cmp	r3, #9
 8006188:	d912      	bls.n	80061b0 <_strtod_l+0x208>
 800618a:	2301      	movs	r3, #1
 800618c:	e7c1      	b.n	8006112 <_strtod_l+0x16a>
 800618e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	9219      	str	r2, [sp, #100]	; 0x64
 8006194:	785a      	ldrb	r2, [r3, #1]
 8006196:	3001      	adds	r0, #1
 8006198:	2a30      	cmp	r2, #48	; 0x30
 800619a:	d0f8      	beq.n	800618e <_strtod_l+0x1e6>
 800619c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	f200 84d5 	bhi.w	8006b50 <_strtod_l+0xba8>
 80061a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061a8:	9004      	str	r0, [sp, #16]
 80061aa:	2000      	movs	r0, #0
 80061ac:	9308      	str	r3, [sp, #32]
 80061ae:	4604      	mov	r4, r0
 80061b0:	3a30      	subs	r2, #48	; 0x30
 80061b2:	f100 0301 	add.w	r3, r0, #1
 80061b6:	d013      	beq.n	80061e0 <_strtod_l+0x238>
 80061b8:	9904      	ldr	r1, [sp, #16]
 80061ba:	4419      	add	r1, r3
 80061bc:	9104      	str	r1, [sp, #16]
 80061be:	4623      	mov	r3, r4
 80061c0:	1905      	adds	r5, r0, r4
 80061c2:	210a      	movs	r1, #10
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	d113      	bne.n	80061f0 <_strtod_l+0x248>
 80061c8:	1823      	adds	r3, r4, r0
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	f104 0401 	add.w	r4, r4, #1
 80061d0:	4404      	add	r4, r0
 80061d2:	dc1b      	bgt.n	800620c <_strtod_l+0x264>
 80061d4:	9906      	ldr	r1, [sp, #24]
 80061d6:	230a      	movs	r3, #10
 80061d8:	fb03 2301 	mla	r3, r3, r1, r2
 80061dc:	9306      	str	r3, [sp, #24]
 80061de:	2300      	movs	r3, #0
 80061e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061e2:	1c51      	adds	r1, r2, #1
 80061e4:	9119      	str	r1, [sp, #100]	; 0x64
 80061e6:	7852      	ldrb	r2, [r2, #1]
 80061e8:	4618      	mov	r0, r3
 80061ea:	e7ca      	b.n	8006182 <_strtod_l+0x1da>
 80061ec:	4658      	mov	r0, fp
 80061ee:	e7d3      	b.n	8006198 <_strtod_l+0x1f0>
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	dc04      	bgt.n	80061fe <_strtod_l+0x256>
 80061f4:	9f06      	ldr	r7, [sp, #24]
 80061f6:	434f      	muls	r7, r1
 80061f8:	9706      	str	r7, [sp, #24]
 80061fa:	3301      	adds	r3, #1
 80061fc:	e7e2      	b.n	80061c4 <_strtod_l+0x21c>
 80061fe:	1c5f      	adds	r7, r3, #1
 8006200:	2f10      	cmp	r7, #16
 8006202:	bfde      	ittt	le
 8006204:	9f05      	ldrle	r7, [sp, #20]
 8006206:	434f      	mulle	r7, r1
 8006208:	9705      	strle	r7, [sp, #20]
 800620a:	e7f6      	b.n	80061fa <_strtod_l+0x252>
 800620c:	2c10      	cmp	r4, #16
 800620e:	bfdf      	itttt	le
 8006210:	9905      	ldrle	r1, [sp, #20]
 8006212:	230a      	movle	r3, #10
 8006214:	fb03 2301 	mlale	r3, r3, r1, r2
 8006218:	9305      	strle	r3, [sp, #20]
 800621a:	e7e0      	b.n	80061de <_strtod_l+0x236>
 800621c:	2300      	movs	r3, #0
 800621e:	9304      	str	r3, [sp, #16]
 8006220:	2301      	movs	r3, #1
 8006222:	e77b      	b.n	800611c <_strtod_l+0x174>
 8006224:	2700      	movs	r7, #0
 8006226:	1cb2      	adds	r2, r6, #2
 8006228:	9219      	str	r2, [sp, #100]	; 0x64
 800622a:	78b2      	ldrb	r2, [r6, #2]
 800622c:	e784      	b.n	8006138 <_strtod_l+0x190>
 800622e:	bf00      	nop
 8006230:	0800a6f0 	.word	0x0800a6f0
 8006234:	0800a4a4 	.word	0x0800a4a4
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	2701      	movs	r7, #1
 800623e:	e7f2      	b.n	8006226 <_strtod_l+0x27e>
 8006240:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006242:	1c51      	adds	r1, r2, #1
 8006244:	9119      	str	r1, [sp, #100]	; 0x64
 8006246:	7852      	ldrb	r2, [r2, #1]
 8006248:	2a30      	cmp	r2, #48	; 0x30
 800624a:	d0f9      	beq.n	8006240 <_strtod_l+0x298>
 800624c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006250:	2908      	cmp	r1, #8
 8006252:	f63f af77 	bhi.w	8006144 <_strtod_l+0x19c>
 8006256:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800625a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800625c:	9209      	str	r2, [sp, #36]	; 0x24
 800625e:	f04f 0e0a 	mov.w	lr, #10
 8006262:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006264:	1c51      	adds	r1, r2, #1
 8006266:	9119      	str	r1, [sp, #100]	; 0x64
 8006268:	7852      	ldrb	r2, [r2, #1]
 800626a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800626e:	2d09      	cmp	r5, #9
 8006270:	d935      	bls.n	80062de <_strtod_l+0x336>
 8006272:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006274:	1b49      	subs	r1, r1, r5
 8006276:	2908      	cmp	r1, #8
 8006278:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800627c:	dc02      	bgt.n	8006284 <_strtod_l+0x2dc>
 800627e:	4565      	cmp	r5, ip
 8006280:	bfa8      	it	ge
 8006282:	4665      	movge	r5, ip
 8006284:	b107      	cbz	r7, 8006288 <_strtod_l+0x2e0>
 8006286:	426d      	negs	r5, r5
 8006288:	2c00      	cmp	r4, #0
 800628a:	d14c      	bne.n	8006326 <_strtod_l+0x37e>
 800628c:	9907      	ldr	r1, [sp, #28]
 800628e:	4301      	orrs	r1, r0
 8006290:	f47f aecb 	bne.w	800602a <_strtod_l+0x82>
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f aee4 	bne.w	8006062 <_strtod_l+0xba>
 800629a:	2a69      	cmp	r2, #105	; 0x69
 800629c:	d026      	beq.n	80062ec <_strtod_l+0x344>
 800629e:	dc23      	bgt.n	80062e8 <_strtod_l+0x340>
 80062a0:	2a49      	cmp	r2, #73	; 0x49
 80062a2:	d023      	beq.n	80062ec <_strtod_l+0x344>
 80062a4:	2a4e      	cmp	r2, #78	; 0x4e
 80062a6:	f47f aedc 	bne.w	8006062 <_strtod_l+0xba>
 80062aa:	499d      	ldr	r1, [pc, #628]	; (8006520 <_strtod_l+0x578>)
 80062ac:	a819      	add	r0, sp, #100	; 0x64
 80062ae:	f001 fe37 	bl	8007f20 <__match>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aed5 	beq.w	8006062 <_strtod_l+0xba>
 80062b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b28      	cmp	r3, #40	; 0x28
 80062be:	d12c      	bne.n	800631a <_strtod_l+0x372>
 80062c0:	4998      	ldr	r1, [pc, #608]	; (8006524 <_strtod_l+0x57c>)
 80062c2:	aa1c      	add	r2, sp, #112	; 0x70
 80062c4:	a819      	add	r0, sp, #100	; 0x64
 80062c6:	f001 fe3f 	bl	8007f48 <__hexnan>
 80062ca:	2805      	cmp	r0, #5
 80062cc:	d125      	bne.n	800631a <_strtod_l+0x372>
 80062ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80062d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80062d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80062dc:	e6a5      	b.n	800602a <_strtod_l+0x82>
 80062de:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80062e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80062e6:	e7bc      	b.n	8006262 <_strtod_l+0x2ba>
 80062e8:	2a6e      	cmp	r2, #110	; 0x6e
 80062ea:	e7dc      	b.n	80062a6 <_strtod_l+0x2fe>
 80062ec:	498e      	ldr	r1, [pc, #568]	; (8006528 <_strtod_l+0x580>)
 80062ee:	a819      	add	r0, sp, #100	; 0x64
 80062f0:	f001 fe16 	bl	8007f20 <__match>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f43f aeb4 	beq.w	8006062 <_strtod_l+0xba>
 80062fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062fc:	498b      	ldr	r1, [pc, #556]	; (800652c <_strtod_l+0x584>)
 80062fe:	3b01      	subs	r3, #1
 8006300:	a819      	add	r0, sp, #100	; 0x64
 8006302:	9319      	str	r3, [sp, #100]	; 0x64
 8006304:	f001 fe0c 	bl	8007f20 <__match>
 8006308:	b910      	cbnz	r0, 8006310 <_strtod_l+0x368>
 800630a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800630c:	3301      	adds	r3, #1
 800630e:	9319      	str	r3, [sp, #100]	; 0x64
 8006310:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006530 <_strtod_l+0x588>
 8006314:	f04f 0800 	mov.w	r8, #0
 8006318:	e687      	b.n	800602a <_strtod_l+0x82>
 800631a:	4886      	ldr	r0, [pc, #536]	; (8006534 <_strtod_l+0x58c>)
 800631c:	f003 f926 	bl	800956c <nan>
 8006320:	4680      	mov	r8, r0
 8006322:	4689      	mov	r9, r1
 8006324:	e681      	b.n	800602a <_strtod_l+0x82>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	9806      	ldr	r0, [sp, #24]
 800632a:	1aeb      	subs	r3, r5, r3
 800632c:	f1bb 0f00 	cmp.w	fp, #0
 8006330:	bf08      	it	eq
 8006332:	46a3      	moveq	fp, r4
 8006334:	2c10      	cmp	r4, #16
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	4626      	mov	r6, r4
 800633a:	bfa8      	it	ge
 800633c:	2610      	movge	r6, #16
 800633e:	f7fa f8b9 	bl	80004b4 <__aeabi_ui2d>
 8006342:	2c09      	cmp	r4, #9
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	dd13      	ble.n	8006372 <_strtod_l+0x3ca>
 800634a:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <_strtod_l+0x590>)
 800634c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006350:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006354:	f7fa f928 	bl	80005a8 <__aeabi_dmul>
 8006358:	4680      	mov	r8, r0
 800635a:	9805      	ldr	r0, [sp, #20]
 800635c:	4689      	mov	r9, r1
 800635e:	f7fa f8a9 	bl	80004b4 <__aeabi_ui2d>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7f9 ff67 	bl	800023c <__adddf3>
 800636e:	4680      	mov	r8, r0
 8006370:	4689      	mov	r9, r1
 8006372:	2c0f      	cmp	r4, #15
 8006374:	dc36      	bgt.n	80063e4 <_strtod_l+0x43c>
 8006376:	9b07      	ldr	r3, [sp, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f43f ae56 	beq.w	800602a <_strtod_l+0x82>
 800637e:	dd22      	ble.n	80063c6 <_strtod_l+0x41e>
 8006380:	2b16      	cmp	r3, #22
 8006382:	dc09      	bgt.n	8006398 <_strtod_l+0x3f0>
 8006384:	496c      	ldr	r1, [pc, #432]	; (8006538 <_strtod_l+0x590>)
 8006386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800638a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638e:	4642      	mov	r2, r8
 8006390:	464b      	mov	r3, r9
 8006392:	f7fa f909 	bl	80005a8 <__aeabi_dmul>
 8006396:	e7c3      	b.n	8006320 <_strtod_l+0x378>
 8006398:	9a07      	ldr	r2, [sp, #28]
 800639a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800639e:	4293      	cmp	r3, r2
 80063a0:	db20      	blt.n	80063e4 <_strtod_l+0x43c>
 80063a2:	4d65      	ldr	r5, [pc, #404]	; (8006538 <_strtod_l+0x590>)
 80063a4:	f1c4 040f 	rsb	r4, r4, #15
 80063a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b4:	f7fa f8f8 	bl	80005a8 <__aeabi_dmul>
 80063b8:	9b07      	ldr	r3, [sp, #28]
 80063ba:	1b1c      	subs	r4, r3, r4
 80063bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80063c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063c4:	e7e5      	b.n	8006392 <_strtod_l+0x3ea>
 80063c6:	9b07      	ldr	r3, [sp, #28]
 80063c8:	3316      	adds	r3, #22
 80063ca:	db0b      	blt.n	80063e4 <_strtod_l+0x43c>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	1b5d      	subs	r5, r3, r5
 80063d0:	4b59      	ldr	r3, [pc, #356]	; (8006538 <_strtod_l+0x590>)
 80063d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa fa0d 	bl	80007fc <__aeabi_ddiv>
 80063e2:	e79d      	b.n	8006320 <_strtod_l+0x378>
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	1ba6      	subs	r6, r4, r6
 80063e8:	441e      	add	r6, r3
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	dd74      	ble.n	80064d8 <_strtod_l+0x530>
 80063ee:	f016 030f 	ands.w	r3, r6, #15
 80063f2:	d00a      	beq.n	800640a <_strtod_l+0x462>
 80063f4:	4950      	ldr	r1, [pc, #320]	; (8006538 <_strtod_l+0x590>)
 80063f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006402:	f7fa f8d1 	bl	80005a8 <__aeabi_dmul>
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	f036 060f 	bics.w	r6, r6, #15
 800640e:	d052      	beq.n	80064b6 <_strtod_l+0x50e>
 8006410:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006414:	dd27      	ble.n	8006466 <_strtod_l+0x4be>
 8006416:	f04f 0b00 	mov.w	fp, #0
 800641a:	f8cd b010 	str.w	fp, [sp, #16]
 800641e:	f8cd b020 	str.w	fp, [sp, #32]
 8006422:	f8cd b018 	str.w	fp, [sp, #24]
 8006426:	2322      	movs	r3, #34	; 0x22
 8006428:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006530 <_strtod_l+0x588>
 800642c:	f8ca 3000 	str.w	r3, [sl]
 8006430:	f04f 0800 	mov.w	r8, #0
 8006434:	9b08      	ldr	r3, [sp, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f43f adf7 	beq.w	800602a <_strtod_l+0x82>
 800643c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800643e:	4650      	mov	r0, sl
 8006440:	f001 fe9c 	bl	800817c <_Bfree>
 8006444:	9906      	ldr	r1, [sp, #24]
 8006446:	4650      	mov	r0, sl
 8006448:	f001 fe98 	bl	800817c <_Bfree>
 800644c:	9904      	ldr	r1, [sp, #16]
 800644e:	4650      	mov	r0, sl
 8006450:	f001 fe94 	bl	800817c <_Bfree>
 8006454:	9908      	ldr	r1, [sp, #32]
 8006456:	4650      	mov	r0, sl
 8006458:	f001 fe90 	bl	800817c <_Bfree>
 800645c:	4659      	mov	r1, fp
 800645e:	4650      	mov	r0, sl
 8006460:	f001 fe8c 	bl	800817c <_Bfree>
 8006464:	e5e1      	b.n	800602a <_strtod_l+0x82>
 8006466:	4b35      	ldr	r3, [pc, #212]	; (800653c <_strtod_l+0x594>)
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	2300      	movs	r3, #0
 800646c:	1136      	asrs	r6, r6, #4
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	461f      	mov	r7, r3
 8006474:	2e01      	cmp	r6, #1
 8006476:	dc21      	bgt.n	80064bc <_strtod_l+0x514>
 8006478:	b10b      	cbz	r3, 800647e <_strtod_l+0x4d6>
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	4b2f      	ldr	r3, [pc, #188]	; (800653c <_strtod_l+0x594>)
 8006480:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006484:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006490:	f7fa f88a 	bl	80005a8 <__aeabi_dmul>
 8006494:	4b26      	ldr	r3, [pc, #152]	; (8006530 <_strtod_l+0x588>)
 8006496:	460a      	mov	r2, r1
 8006498:	400b      	ands	r3, r1
 800649a:	4929      	ldr	r1, [pc, #164]	; (8006540 <_strtod_l+0x598>)
 800649c:	428b      	cmp	r3, r1
 800649e:	4680      	mov	r8, r0
 80064a0:	d8b9      	bhi.n	8006416 <_strtod_l+0x46e>
 80064a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064a6:	428b      	cmp	r3, r1
 80064a8:	bf86      	itte	hi
 80064aa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8006544 <_strtod_l+0x59c>
 80064ae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80064b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80064b6:	2300      	movs	r3, #0
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	e07f      	b.n	80065bc <_strtod_l+0x614>
 80064bc:	07f2      	lsls	r2, r6, #31
 80064be:	d505      	bpl.n	80064cc <_strtod_l+0x524>
 80064c0:	9b05      	ldr	r3, [sp, #20]
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f86f 	bl	80005a8 <__aeabi_dmul>
 80064ca:	2301      	movs	r3, #1
 80064cc:	9a05      	ldr	r2, [sp, #20]
 80064ce:	3208      	adds	r2, #8
 80064d0:	3701      	adds	r7, #1
 80064d2:	1076      	asrs	r6, r6, #1
 80064d4:	9205      	str	r2, [sp, #20]
 80064d6:	e7cd      	b.n	8006474 <_strtod_l+0x4cc>
 80064d8:	d0ed      	beq.n	80064b6 <_strtod_l+0x50e>
 80064da:	4276      	negs	r6, r6
 80064dc:	f016 020f 	ands.w	r2, r6, #15
 80064e0:	d00a      	beq.n	80064f8 <_strtod_l+0x550>
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <_strtod_l+0x590>)
 80064e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064e8:	4640      	mov	r0, r8
 80064ea:	4649      	mov	r1, r9
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7fa f984 	bl	80007fc <__aeabi_ddiv>
 80064f4:	4680      	mov	r8, r0
 80064f6:	4689      	mov	r9, r1
 80064f8:	1136      	asrs	r6, r6, #4
 80064fa:	d0dc      	beq.n	80064b6 <_strtod_l+0x50e>
 80064fc:	2e1f      	cmp	r6, #31
 80064fe:	dd23      	ble.n	8006548 <_strtod_l+0x5a0>
 8006500:	f04f 0b00 	mov.w	fp, #0
 8006504:	f8cd b010 	str.w	fp, [sp, #16]
 8006508:	f8cd b020 	str.w	fp, [sp, #32]
 800650c:	f8cd b018 	str.w	fp, [sp, #24]
 8006510:	2322      	movs	r3, #34	; 0x22
 8006512:	f04f 0800 	mov.w	r8, #0
 8006516:	f04f 0900 	mov.w	r9, #0
 800651a:	f8ca 3000 	str.w	r3, [sl]
 800651e:	e789      	b.n	8006434 <_strtod_l+0x48c>
 8006520:	0800a479 	.word	0x0800a479
 8006524:	0800a4b8 	.word	0x0800a4b8
 8006528:	0800a471 	.word	0x0800a471
 800652c:	0800a5fc 	.word	0x0800a5fc
 8006530:	7ff00000 	.word	0x7ff00000
 8006534:	0800a8c3 	.word	0x0800a8c3
 8006538:	0800a788 	.word	0x0800a788
 800653c:	0800a760 	.word	0x0800a760
 8006540:	7ca00000 	.word	0x7ca00000
 8006544:	7fefffff 	.word	0x7fefffff
 8006548:	f016 0310 	ands.w	r3, r6, #16
 800654c:	bf18      	it	ne
 800654e:	236a      	movne	r3, #106	; 0x6a
 8006550:	4fb1      	ldr	r7, [pc, #708]	; (8006818 <_strtod_l+0x870>)
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	4640      	mov	r0, r8
 8006556:	4649      	mov	r1, r9
 8006558:	2300      	movs	r3, #0
 800655a:	07f2      	lsls	r2, r6, #31
 800655c:	d504      	bpl.n	8006568 <_strtod_l+0x5c0>
 800655e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006562:	f7fa f821 	bl	80005a8 <__aeabi_dmul>
 8006566:	2301      	movs	r3, #1
 8006568:	1076      	asrs	r6, r6, #1
 800656a:	f107 0708 	add.w	r7, r7, #8
 800656e:	d1f4      	bne.n	800655a <_strtod_l+0x5b2>
 8006570:	b10b      	cbz	r3, 8006576 <_strtod_l+0x5ce>
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	b1c3      	cbz	r3, 80065ac <_strtod_l+0x604>
 800657a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800657e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006582:	2b00      	cmp	r3, #0
 8006584:	4649      	mov	r1, r9
 8006586:	dd11      	ble.n	80065ac <_strtod_l+0x604>
 8006588:	2b1f      	cmp	r3, #31
 800658a:	f340 8124 	ble.w	80067d6 <_strtod_l+0x82e>
 800658e:	2b34      	cmp	r3, #52	; 0x34
 8006590:	bfde      	ittt	le
 8006592:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006596:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800659a:	fa03 f202 	lslle.w	r2, r3, r2
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	bfcc      	ite	gt
 80065a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80065a8:	ea02 0901 	andle.w	r9, r2, r1
 80065ac:	2200      	movs	r2, #0
 80065ae:	2300      	movs	r3, #0
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7fa fa60 	bl	8000a78 <__aeabi_dcmpeq>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d1a1      	bne.n	8006500 <_strtod_l+0x558>
 80065bc:	9b06      	ldr	r3, [sp, #24]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	9908      	ldr	r1, [sp, #32]
 80065c2:	4623      	mov	r3, r4
 80065c4:	465a      	mov	r2, fp
 80065c6:	4650      	mov	r0, sl
 80065c8:	f001 fe40 	bl	800824c <__s2b>
 80065cc:	9008      	str	r0, [sp, #32]
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f43f af21 	beq.w	8006416 <_strtod_l+0x46e>
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	1b5d      	subs	r5, r3, r5
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb4      	ite	lt
 80065de:	462b      	movlt	r3, r5
 80065e0:	2300      	movge	r3, #0
 80065e2:	930e      	str	r3, [sp, #56]	; 0x38
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	f04f 0b00 	mov.w	fp, #0
 80065ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065ee:	9314      	str	r3, [sp, #80]	; 0x50
 80065f0:	f8cd b010 	str.w	fp, [sp, #16]
 80065f4:	9b08      	ldr	r3, [sp, #32]
 80065f6:	4650      	mov	r0, sl
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	f001 fd7f 	bl	80080fc <_Balloc>
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	2800      	cmp	r0, #0
 8006602:	f43f af10 	beq.w	8006426 <_strtod_l+0x47e>
 8006606:	9b08      	ldr	r3, [sp, #32]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	3202      	adds	r2, #2
 800660c:	f103 010c 	add.w	r1, r3, #12
 8006610:	0092      	lsls	r2, r2, #2
 8006612:	300c      	adds	r0, #12
 8006614:	f001 fd64 	bl	80080e0 <memcpy>
 8006618:	ab1c      	add	r3, sp, #112	; 0x70
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	ab1b      	add	r3, sp, #108	; 0x6c
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	4642      	mov	r2, r8
 8006622:	464b      	mov	r3, r9
 8006624:	4650      	mov	r0, sl
 8006626:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800662a:	f002 f94d 	bl	80088c8 <__d2b>
 800662e:	901a      	str	r0, [sp, #104]	; 0x68
 8006630:	2800      	cmp	r0, #0
 8006632:	f43f aef8 	beq.w	8006426 <_strtod_l+0x47e>
 8006636:	2101      	movs	r1, #1
 8006638:	4650      	mov	r0, sl
 800663a:	f001 fe9f 	bl	800837c <__i2b>
 800663e:	9004      	str	r0, [sp, #16]
 8006640:	4603      	mov	r3, r0
 8006642:	2800      	cmp	r0, #0
 8006644:	f43f aeef 	beq.w	8006426 <_strtod_l+0x47e>
 8006648:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800664a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800664c:	2d00      	cmp	r5, #0
 800664e:	bfab      	itete	ge
 8006650:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006652:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006654:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006656:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006658:	bfac      	ite	ge
 800665a:	18ee      	addge	r6, r5, r3
 800665c:	1b5c      	sublt	r4, r3, r5
 800665e:	9b05      	ldr	r3, [sp, #20]
 8006660:	1aed      	subs	r5, r5, r3
 8006662:	4415      	add	r5, r2
 8006664:	4b6d      	ldr	r3, [pc, #436]	; (800681c <_strtod_l+0x874>)
 8006666:	3d01      	subs	r5, #1
 8006668:	429d      	cmp	r5, r3
 800666a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800666e:	f280 80c4 	bge.w	80067fa <_strtod_l+0x852>
 8006672:	1b5b      	subs	r3, r3, r5
 8006674:	2b1f      	cmp	r3, #31
 8006676:	eba2 0203 	sub.w	r2, r2, r3
 800667a:	f04f 0701 	mov.w	r7, #1
 800667e:	f300 80b1 	bgt.w	80067e4 <_strtod_l+0x83c>
 8006682:	fa07 f303 	lsl.w	r3, r7, r3
 8006686:	930f      	str	r3, [sp, #60]	; 0x3c
 8006688:	2500      	movs	r5, #0
 800668a:	18b7      	adds	r7, r6, r2
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	42be      	cmp	r6, r7
 8006690:	4414      	add	r4, r2
 8006692:	441c      	add	r4, r3
 8006694:	4633      	mov	r3, r6
 8006696:	bfa8      	it	ge
 8006698:	463b      	movge	r3, r7
 800669a:	42a3      	cmp	r3, r4
 800669c:	bfa8      	it	ge
 800669e:	4623      	movge	r3, r4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfc2      	ittt	gt
 80066a4:	1aff      	subgt	r7, r7, r3
 80066a6:	1ae4      	subgt	r4, r4, r3
 80066a8:	1af6      	subgt	r6, r6, r3
 80066aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dd17      	ble.n	80066e0 <_strtod_l+0x738>
 80066b0:	9904      	ldr	r1, [sp, #16]
 80066b2:	461a      	mov	r2, r3
 80066b4:	4650      	mov	r0, sl
 80066b6:	f001 ff1f 	bl	80084f8 <__pow5mult>
 80066ba:	9004      	str	r0, [sp, #16]
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f aeb2 	beq.w	8006426 <_strtod_l+0x47e>
 80066c2:	4601      	mov	r1, r0
 80066c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066c6:	4650      	mov	r0, sl
 80066c8:	f001 fe6e 	bl	80083a8 <__multiply>
 80066cc:	9009      	str	r0, [sp, #36]	; 0x24
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f43f aea9 	beq.w	8006426 <_strtod_l+0x47e>
 80066d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066d6:	4650      	mov	r0, sl
 80066d8:	f001 fd50 	bl	800817c <_Bfree>
 80066dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066de:	931a      	str	r3, [sp, #104]	; 0x68
 80066e0:	2f00      	cmp	r7, #0
 80066e2:	f300 808e 	bgt.w	8006802 <_strtod_l+0x85a>
 80066e6:	9b07      	ldr	r3, [sp, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dd08      	ble.n	80066fe <_strtod_l+0x756>
 80066ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066ee:	9906      	ldr	r1, [sp, #24]
 80066f0:	4650      	mov	r0, sl
 80066f2:	f001 ff01 	bl	80084f8 <__pow5mult>
 80066f6:	9006      	str	r0, [sp, #24]
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f43f ae94 	beq.w	8006426 <_strtod_l+0x47e>
 80066fe:	2c00      	cmp	r4, #0
 8006700:	dd08      	ble.n	8006714 <_strtod_l+0x76c>
 8006702:	9906      	ldr	r1, [sp, #24]
 8006704:	4622      	mov	r2, r4
 8006706:	4650      	mov	r0, sl
 8006708:	f001 ff50 	bl	80085ac <__lshift>
 800670c:	9006      	str	r0, [sp, #24]
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f ae89 	beq.w	8006426 <_strtod_l+0x47e>
 8006714:	2e00      	cmp	r6, #0
 8006716:	dd08      	ble.n	800672a <_strtod_l+0x782>
 8006718:	9904      	ldr	r1, [sp, #16]
 800671a:	4632      	mov	r2, r6
 800671c:	4650      	mov	r0, sl
 800671e:	f001 ff45 	bl	80085ac <__lshift>
 8006722:	9004      	str	r0, [sp, #16]
 8006724:	2800      	cmp	r0, #0
 8006726:	f43f ae7e 	beq.w	8006426 <_strtod_l+0x47e>
 800672a:	9a06      	ldr	r2, [sp, #24]
 800672c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800672e:	4650      	mov	r0, sl
 8006730:	f001 ffc8 	bl	80086c4 <__mdiff>
 8006734:	4683      	mov	fp, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f ae75 	beq.w	8006426 <_strtod_l+0x47e>
 800673c:	2400      	movs	r4, #0
 800673e:	68c3      	ldr	r3, [r0, #12]
 8006740:	9904      	ldr	r1, [sp, #16]
 8006742:	60c4      	str	r4, [r0, #12]
 8006744:	930b      	str	r3, [sp, #44]	; 0x2c
 8006746:	f001 ffa1 	bl	800868c <__mcmp>
 800674a:	42a0      	cmp	r0, r4
 800674c:	da6c      	bge.n	8006828 <_strtod_l+0x880>
 800674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006750:	ea53 0308 	orrs.w	r3, r3, r8
 8006754:	f040 8092 	bne.w	800687c <_strtod_l+0x8d4>
 8006758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 808d 	bne.w	800687c <_strtod_l+0x8d4>
 8006762:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006766:	0d1b      	lsrs	r3, r3, #20
 8006768:	051b      	lsls	r3, r3, #20
 800676a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800676e:	f240 8085 	bls.w	800687c <_strtod_l+0x8d4>
 8006772:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006776:	b91b      	cbnz	r3, 8006780 <_strtod_l+0x7d8>
 8006778:	f8db 3010 	ldr.w	r3, [fp, #16]
 800677c:	2b01      	cmp	r3, #1
 800677e:	dd7d      	ble.n	800687c <_strtod_l+0x8d4>
 8006780:	4659      	mov	r1, fp
 8006782:	2201      	movs	r2, #1
 8006784:	4650      	mov	r0, sl
 8006786:	f001 ff11 	bl	80085ac <__lshift>
 800678a:	9904      	ldr	r1, [sp, #16]
 800678c:	4683      	mov	fp, r0
 800678e:	f001 ff7d 	bl	800868c <__mcmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	dd72      	ble.n	800687c <_strtod_l+0x8d4>
 8006796:	9905      	ldr	r1, [sp, #20]
 8006798:	4a21      	ldr	r2, [pc, #132]	; (8006820 <_strtod_l+0x878>)
 800679a:	464b      	mov	r3, r9
 800679c:	2900      	cmp	r1, #0
 800679e:	f000 808d 	beq.w	80068bc <_strtod_l+0x914>
 80067a2:	ea02 0109 	and.w	r1, r2, r9
 80067a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067aa:	f300 8087 	bgt.w	80068bc <_strtod_l+0x914>
 80067ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067b2:	f77f aead 	ble.w	8006510 <_strtod_l+0x568>
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <_strtod_l+0x87c>)
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	2200      	movs	r2, #0
 80067be:	f7f9 fef3 	bl	80005a8 <__aeabi_dmul>
 80067c2:	460b      	mov	r3, r1
 80067c4:	4303      	orrs	r3, r0
 80067c6:	bf08      	it	eq
 80067c8:	2322      	moveq	r3, #34	; 0x22
 80067ca:	4680      	mov	r8, r0
 80067cc:	4689      	mov	r9, r1
 80067ce:	bf08      	it	eq
 80067d0:	f8ca 3000 	streq.w	r3, [sl]
 80067d4:	e632      	b.n	800643c <_strtod_l+0x494>
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	ea03 0808 	and.w	r8, r3, r8
 80067e2:	e6e3      	b.n	80065ac <_strtod_l+0x604>
 80067e4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80067e8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80067ec:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80067f0:	35e2      	adds	r5, #226	; 0xe2
 80067f2:	fa07 f505 	lsl.w	r5, r7, r5
 80067f6:	970f      	str	r7, [sp, #60]	; 0x3c
 80067f8:	e747      	b.n	800668a <_strtod_l+0x6e2>
 80067fa:	2301      	movs	r3, #1
 80067fc:	2500      	movs	r5, #0
 80067fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006800:	e743      	b.n	800668a <_strtod_l+0x6e2>
 8006802:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006804:	463a      	mov	r2, r7
 8006806:	4650      	mov	r0, sl
 8006808:	f001 fed0 	bl	80085ac <__lshift>
 800680c:	901a      	str	r0, [sp, #104]	; 0x68
 800680e:	2800      	cmp	r0, #0
 8006810:	f47f af69 	bne.w	80066e6 <_strtod_l+0x73e>
 8006814:	e607      	b.n	8006426 <_strtod_l+0x47e>
 8006816:	bf00      	nop
 8006818:	0800a4d0 	.word	0x0800a4d0
 800681c:	fffffc02 	.word	0xfffffc02
 8006820:	7ff00000 	.word	0x7ff00000
 8006824:	39500000 	.word	0x39500000
 8006828:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800682c:	d165      	bne.n	80068fa <_strtod_l+0x952>
 800682e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006834:	b35a      	cbz	r2, 800688e <_strtod_l+0x8e6>
 8006836:	4a9a      	ldr	r2, [pc, #616]	; (8006aa0 <_strtod_l+0xaf8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d12b      	bne.n	8006894 <_strtod_l+0x8ec>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	4641      	mov	r1, r8
 8006840:	b303      	cbz	r3, 8006884 <_strtod_l+0x8dc>
 8006842:	4b98      	ldr	r3, [pc, #608]	; (8006aa4 <_strtod_l+0xafc>)
 8006844:	464a      	mov	r2, r9
 8006846:	4013      	ands	r3, r2
 8006848:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800684c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006850:	d81b      	bhi.n	800688a <_strtod_l+0x8e2>
 8006852:	0d1b      	lsrs	r3, r3, #20
 8006854:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	4299      	cmp	r1, r3
 800685e:	d119      	bne.n	8006894 <_strtod_l+0x8ec>
 8006860:	4b91      	ldr	r3, [pc, #580]	; (8006aa8 <_strtod_l+0xb00>)
 8006862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006864:	429a      	cmp	r2, r3
 8006866:	d102      	bne.n	800686e <_strtod_l+0x8c6>
 8006868:	3101      	adds	r1, #1
 800686a:	f43f addc 	beq.w	8006426 <_strtod_l+0x47e>
 800686e:	4b8d      	ldr	r3, [pc, #564]	; (8006aa4 <_strtod_l+0xafc>)
 8006870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006872:	401a      	ands	r2, r3
 8006874:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006878:	f04f 0800 	mov.w	r8, #0
 800687c:	9b05      	ldr	r3, [sp, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d199      	bne.n	80067b6 <_strtod_l+0x80e>
 8006882:	e5db      	b.n	800643c <_strtod_l+0x494>
 8006884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006888:	e7e8      	b.n	800685c <_strtod_l+0x8b4>
 800688a:	4613      	mov	r3, r2
 800688c:	e7e6      	b.n	800685c <_strtod_l+0x8b4>
 800688e:	ea53 0308 	orrs.w	r3, r3, r8
 8006892:	d080      	beq.n	8006796 <_strtod_l+0x7ee>
 8006894:	b1e5      	cbz	r5, 80068d0 <_strtod_l+0x928>
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	421d      	tst	r5, r3
 800689a:	d0ef      	beq.n	800687c <_strtod_l+0x8d4>
 800689c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689e:	9a05      	ldr	r2, [sp, #20]
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	b1c3      	cbz	r3, 80068d8 <_strtod_l+0x930>
 80068a6:	f7ff fb5c 	bl	8005f62 <sulp>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b2:	f7f9 fcc3 	bl	800023c <__adddf3>
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	e7df      	b.n	800687c <_strtod_l+0x8d4>
 80068bc:	4013      	ands	r3, r2
 80068be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80068c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80068ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80068ce:	e7d5      	b.n	800687c <_strtod_l+0x8d4>
 80068d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068d2:	ea13 0f08 	tst.w	r3, r8
 80068d6:	e7e0      	b.n	800689a <_strtod_l+0x8f2>
 80068d8:	f7ff fb43 	bl	8005f62 <sulp>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e4:	f7f9 fca8 	bl	8000238 <__aeabi_dsub>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4680      	mov	r8, r0
 80068ee:	4689      	mov	r9, r1
 80068f0:	f7fa f8c2 	bl	8000a78 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d0c1      	beq.n	800687c <_strtod_l+0x8d4>
 80068f8:	e60a      	b.n	8006510 <_strtod_l+0x568>
 80068fa:	9904      	ldr	r1, [sp, #16]
 80068fc:	4658      	mov	r0, fp
 80068fe:	f002 f83f 	bl	8008980 <__ratio>
 8006902:	2200      	movs	r2, #0
 8006904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006908:	4606      	mov	r6, r0
 800690a:	460f      	mov	r7, r1
 800690c:	f7fa f8c8 	bl	8000aa0 <__aeabi_dcmple>
 8006910:	2800      	cmp	r0, #0
 8006912:	d070      	beq.n	80069f6 <_strtod_l+0xa4e>
 8006914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d042      	beq.n	80069a0 <_strtod_l+0x9f8>
 800691a:	4f64      	ldr	r7, [pc, #400]	; (8006aac <_strtod_l+0xb04>)
 800691c:	2600      	movs	r6, #0
 800691e:	4d63      	ldr	r5, [pc, #396]	; (8006aac <_strtod_l+0xb04>)
 8006920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006926:	0d1b      	lsrs	r3, r3, #20
 8006928:	051b      	lsls	r3, r3, #20
 800692a:	930f      	str	r3, [sp, #60]	; 0x3c
 800692c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800692e:	4b60      	ldr	r3, [pc, #384]	; (8006ab0 <_strtod_l+0xb08>)
 8006930:	429a      	cmp	r2, r3
 8006932:	f040 80c5 	bne.w	8006ac0 <_strtod_l+0xb18>
 8006936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006938:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f001 ff48 	bl	80087d4 <__ulp>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fe2c 	bl	80005a8 <__aeabi_dmul>
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	f7f9 fc72 	bl	800023c <__adddf3>
 8006958:	460b      	mov	r3, r1
 800695a:	4952      	ldr	r1, [pc, #328]	; (8006aa4 <_strtod_l+0xafc>)
 800695c:	4a55      	ldr	r2, [pc, #340]	; (8006ab4 <_strtod_l+0xb0c>)
 800695e:	4019      	ands	r1, r3
 8006960:	4291      	cmp	r1, r2
 8006962:	4680      	mov	r8, r0
 8006964:	d95d      	bls.n	8006a22 <_strtod_l+0xa7a>
 8006966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006968:	4b4f      	ldr	r3, [pc, #316]	; (8006aa8 <_strtod_l+0xb00>)
 800696a:	429a      	cmp	r2, r3
 800696c:	d103      	bne.n	8006976 <_strtod_l+0x9ce>
 800696e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006970:	3301      	adds	r3, #1
 8006972:	f43f ad58 	beq.w	8006426 <_strtod_l+0x47e>
 8006976:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8006aa8 <_strtod_l+0xb00>
 800697a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800697e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006980:	4650      	mov	r0, sl
 8006982:	f001 fbfb 	bl	800817c <_Bfree>
 8006986:	9906      	ldr	r1, [sp, #24]
 8006988:	4650      	mov	r0, sl
 800698a:	f001 fbf7 	bl	800817c <_Bfree>
 800698e:	9904      	ldr	r1, [sp, #16]
 8006990:	4650      	mov	r0, sl
 8006992:	f001 fbf3 	bl	800817c <_Bfree>
 8006996:	4659      	mov	r1, fp
 8006998:	4650      	mov	r0, sl
 800699a:	f001 fbef 	bl	800817c <_Bfree>
 800699e:	e629      	b.n	80065f4 <_strtod_l+0x64c>
 80069a0:	f1b8 0f00 	cmp.w	r8, #0
 80069a4:	d119      	bne.n	80069da <_strtod_l+0xa32>
 80069a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ac:	b9e3      	cbnz	r3, 80069e8 <_strtod_l+0xa40>
 80069ae:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <_strtod_l+0xb04>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7fa f869 	bl	8000a8c <__aeabi_dcmplt>
 80069ba:	b9c8      	cbnz	r0, 80069f0 <_strtod_l+0xa48>
 80069bc:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <_strtod_l+0xb10>)
 80069be:	2200      	movs	r2, #0
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7f9 fdf0 	bl	80005a8 <__aeabi_dmul>
 80069c8:	4604      	mov	r4, r0
 80069ca:	460d      	mov	r5, r1
 80069cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069d0:	9416      	str	r4, [sp, #88]	; 0x58
 80069d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80069d4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80069d8:	e7a2      	b.n	8006920 <_strtod_l+0x978>
 80069da:	f1b8 0f01 	cmp.w	r8, #1
 80069de:	d103      	bne.n	80069e8 <_strtod_l+0xa40>
 80069e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f43f ad94 	beq.w	8006510 <_strtod_l+0x568>
 80069e8:	4f34      	ldr	r7, [pc, #208]	; (8006abc <_strtod_l+0xb14>)
 80069ea:	2600      	movs	r6, #0
 80069ec:	2400      	movs	r4, #0
 80069ee:	e796      	b.n	800691e <_strtod_l+0x976>
 80069f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80069f2:	4d31      	ldr	r5, [pc, #196]	; (8006ab8 <_strtod_l+0xb10>)
 80069f4:	e7ea      	b.n	80069cc <_strtod_l+0xa24>
 80069f6:	4b30      	ldr	r3, [pc, #192]	; (8006ab8 <_strtod_l+0xb10>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	4630      	mov	r0, r6
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7f9 fdd3 	bl	80005a8 <__aeabi_dmul>
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	b933      	cbnz	r3, 8006a18 <_strtod_l+0xa70>
 8006a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a0e:	9010      	str	r0, [sp, #64]	; 0x40
 8006a10:	9311      	str	r3, [sp, #68]	; 0x44
 8006a12:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a16:	e783      	b.n	8006920 <_strtod_l+0x978>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006a20:	e7f7      	b.n	8006a12 <_strtod_l+0xa6a>
 8006a22:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006a26:	9b05      	ldr	r3, [sp, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1a8      	bne.n	800697e <_strtod_l+0x9d6>
 8006a2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a32:	0d1b      	lsrs	r3, r3, #20
 8006a34:	051b      	lsls	r3, r3, #20
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d1a1      	bne.n	800697e <_strtod_l+0x9d6>
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f7fa fb71 	bl	8001124 <__aeabi_d2lz>
 8006a42:	f7f9 fd83 	bl	800054c <__aeabi_l2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fbf3 	bl	8000238 <__aeabi_dsub>
 8006a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a58:	ea43 0308 	orr.w	r3, r3, r8
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	d068      	beq.n	8006b36 <_strtod_l+0xb8e>
 8006a64:	a30a      	add	r3, pc, #40	; (adr r3, 8006a90 <_strtod_l+0xae8>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7fa f80f 	bl	8000a8c <__aeabi_dcmplt>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f47f ace4 	bne.w	800643c <_strtod_l+0x494>
 8006a74:	a308      	add	r3, pc, #32	; (adr r3, 8006a98 <_strtod_l+0xaf0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7fa f823 	bl	8000ac8 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f43f af7b 	beq.w	800697e <_strtod_l+0x9d6>
 8006a88:	e4d8      	b.n	800643c <_strtod_l+0x494>
 8006a8a:	bf00      	nop
 8006a8c:	f3af 8000 	nop.w
 8006a90:	94a03595 	.word	0x94a03595
 8006a94:	3fdfffff 	.word	0x3fdfffff
 8006a98:	35afe535 	.word	0x35afe535
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	000fffff 	.word	0x000fffff
 8006aa4:	7ff00000 	.word	0x7ff00000
 8006aa8:	7fefffff 	.word	0x7fefffff
 8006aac:	3ff00000 	.word	0x3ff00000
 8006ab0:	7fe00000 	.word	0x7fe00000
 8006ab4:	7c9fffff 	.word	0x7c9fffff
 8006ab8:	3fe00000 	.word	0x3fe00000
 8006abc:	bff00000 	.word	0xbff00000
 8006ac0:	9b05      	ldr	r3, [sp, #20]
 8006ac2:	b313      	cbz	r3, 8006b0a <_strtod_l+0xb62>
 8006ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ac6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006aca:	d81e      	bhi.n	8006b0a <_strtod_l+0xb62>
 8006acc:	a326      	add	r3, pc, #152	; (adr r3, 8006b68 <_strtod_l+0xbc0>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	f7f9 ffe3 	bl	8000aa0 <__aeabi_dcmple>
 8006ada:	b190      	cbz	r0, 8006b02 <_strtod_l+0xb5a>
 8006adc:	4629      	mov	r1, r5
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7fa f83a 	bl	8000b58 <__aeabi_d2uiz>
 8006ae4:	2801      	cmp	r0, #1
 8006ae6:	bf38      	it	cc
 8006ae8:	2001      	movcc	r0, #1
 8006aea:	f7f9 fce3 	bl	80004b4 <__aeabi_ui2d>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	4604      	mov	r4, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	b9d3      	cbnz	r3, 8006b2c <_strtod_l+0xb84>
 8006af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006afa:	9012      	str	r0, [sp, #72]	; 0x48
 8006afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006afe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006b08:	1a9f      	subs	r7, r3, r2
 8006b0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b0e:	f001 fe61 	bl	80087d4 <__ulp>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fd45 	bl	80005a8 <__aeabi_dmul>
 8006b1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b22:	f7f9 fb8b 	bl	800023c <__adddf3>
 8006b26:	4680      	mov	r8, r0
 8006b28:	4689      	mov	r9, r1
 8006b2a:	e77c      	b.n	8006a26 <_strtod_l+0xa7e>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006b34:	e7e3      	b.n	8006afe <_strtod_l+0xb56>
 8006b36:	a30e      	add	r3, pc, #56	; (adr r3, 8006b70 <_strtod_l+0xbc8>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f7f9 ffa6 	bl	8000a8c <__aeabi_dcmplt>
 8006b40:	e79f      	b.n	8006a82 <_strtod_l+0xada>
 8006b42:	2300      	movs	r3, #0
 8006b44:	930a      	str	r3, [sp, #40]	; 0x28
 8006b46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	f7ff ba71 	b.w	8006032 <_strtod_l+0x8a>
 8006b50:	2a65      	cmp	r2, #101	; 0x65
 8006b52:	f43f ab63 	beq.w	800621c <_strtod_l+0x274>
 8006b56:	2a45      	cmp	r2, #69	; 0x45
 8006b58:	f43f ab60 	beq.w	800621c <_strtod_l+0x274>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f7ff bb95 	b.w	800628c <_strtod_l+0x2e4>
 8006b62:	bf00      	nop
 8006b64:	f3af 8000 	nop.w
 8006b68:	ffc00000 	.word	0xffc00000
 8006b6c:	41dfffff 	.word	0x41dfffff
 8006b70:	94a03595 	.word	0x94a03595
 8006b74:	3fcfffff 	.word	0x3fcfffff

08006b78 <_strtod_r>:
 8006b78:	4b01      	ldr	r3, [pc, #4]	; (8006b80 <_strtod_r+0x8>)
 8006b7a:	f7ff ba15 	b.w	8005fa8 <_strtod_l>
 8006b7e:	bf00      	nop
 8006b80:	20000074 	.word	0x20000074

08006b84 <_strtol_l.constprop.0>:
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	d001      	beq.n	8006b92 <_strtol_l.constprop.0+0xe>
 8006b8e:	2b24      	cmp	r3, #36	; 0x24
 8006b90:	d906      	bls.n	8006ba0 <_strtol_l.constprop.0+0x1c>
 8006b92:	f7fe fa9b 	bl	80050cc <__errno>
 8006b96:	2316      	movs	r3, #22
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	4f35      	ldr	r7, [pc, #212]	; (8006c78 <_strtol_l.constprop.0+0xf4>)
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006baa:	5de6      	ldrb	r6, [r4, r7]
 8006bac:	f016 0608 	ands.w	r6, r6, #8
 8006bb0:	d1f8      	bne.n	8006ba4 <_strtol_l.constprop.0+0x20>
 8006bb2:	2c2d      	cmp	r4, #45	; 0x2d
 8006bb4:	d12f      	bne.n	8006c16 <_strtol_l.constprop.0+0x92>
 8006bb6:	782c      	ldrb	r4, [r5, #0]
 8006bb8:	2601      	movs	r6, #1
 8006bba:	1c85      	adds	r5, r0, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d057      	beq.n	8006c70 <_strtol_l.constprop.0+0xec>
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d109      	bne.n	8006bd8 <_strtol_l.constprop.0+0x54>
 8006bc4:	2c30      	cmp	r4, #48	; 0x30
 8006bc6:	d107      	bne.n	8006bd8 <_strtol_l.constprop.0+0x54>
 8006bc8:	7828      	ldrb	r0, [r5, #0]
 8006bca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006bce:	2858      	cmp	r0, #88	; 0x58
 8006bd0:	d149      	bne.n	8006c66 <_strtol_l.constprop.0+0xe2>
 8006bd2:	786c      	ldrb	r4, [r5, #1]
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	3502      	adds	r5, #2
 8006bd8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006bdc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006be0:	2700      	movs	r7, #0
 8006be2:	fbbe f9f3 	udiv	r9, lr, r3
 8006be6:	4638      	mov	r0, r7
 8006be8:	fb03 ea19 	mls	sl, r3, r9, lr
 8006bec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006bf0:	f1bc 0f09 	cmp.w	ip, #9
 8006bf4:	d814      	bhi.n	8006c20 <_strtol_l.constprop.0+0x9c>
 8006bf6:	4664      	mov	r4, ip
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	dd22      	ble.n	8006c42 <_strtol_l.constprop.0+0xbe>
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	db1d      	blt.n	8006c3c <_strtol_l.constprop.0+0xb8>
 8006c00:	4581      	cmp	r9, r0
 8006c02:	d31b      	bcc.n	8006c3c <_strtol_l.constprop.0+0xb8>
 8006c04:	d101      	bne.n	8006c0a <_strtol_l.constprop.0+0x86>
 8006c06:	45a2      	cmp	sl, r4
 8006c08:	db18      	blt.n	8006c3c <_strtol_l.constprop.0+0xb8>
 8006c0a:	fb00 4003 	mla	r0, r0, r3, r4
 8006c0e:	2701      	movs	r7, #1
 8006c10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c14:	e7ea      	b.n	8006bec <_strtol_l.constprop.0+0x68>
 8006c16:	2c2b      	cmp	r4, #43	; 0x2b
 8006c18:	bf04      	itt	eq
 8006c1a:	782c      	ldrbeq	r4, [r5, #0]
 8006c1c:	1c85      	addeq	r5, r0, #2
 8006c1e:	e7cd      	b.n	8006bbc <_strtol_l.constprop.0+0x38>
 8006c20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006c24:	f1bc 0f19 	cmp.w	ip, #25
 8006c28:	d801      	bhi.n	8006c2e <_strtol_l.constprop.0+0xaa>
 8006c2a:	3c37      	subs	r4, #55	; 0x37
 8006c2c:	e7e4      	b.n	8006bf8 <_strtol_l.constprop.0+0x74>
 8006c2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c32:	f1bc 0f19 	cmp.w	ip, #25
 8006c36:	d804      	bhi.n	8006c42 <_strtol_l.constprop.0+0xbe>
 8006c38:	3c57      	subs	r4, #87	; 0x57
 8006c3a:	e7dd      	b.n	8006bf8 <_strtol_l.constprop.0+0x74>
 8006c3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c40:	e7e6      	b.n	8006c10 <_strtol_l.constprop.0+0x8c>
 8006c42:	2f00      	cmp	r7, #0
 8006c44:	da07      	bge.n	8006c56 <_strtol_l.constprop.0+0xd2>
 8006c46:	2322      	movs	r3, #34	; 0x22
 8006c48:	f8c8 3000 	str.w	r3, [r8]
 8006c4c:	4670      	mov	r0, lr
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	d0a4      	beq.n	8006b9c <_strtol_l.constprop.0+0x18>
 8006c52:	1e69      	subs	r1, r5, #1
 8006c54:	e005      	b.n	8006c62 <_strtol_l.constprop.0+0xde>
 8006c56:	b106      	cbz	r6, 8006c5a <_strtol_l.constprop.0+0xd6>
 8006c58:	4240      	negs	r0, r0
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	d09e      	beq.n	8006b9c <_strtol_l.constprop.0+0x18>
 8006c5e:	2f00      	cmp	r7, #0
 8006c60:	d1f7      	bne.n	8006c52 <_strtol_l.constprop.0+0xce>
 8006c62:	6011      	str	r1, [r2, #0]
 8006c64:	e79a      	b.n	8006b9c <_strtol_l.constprop.0+0x18>
 8006c66:	2430      	movs	r4, #48	; 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1b5      	bne.n	8006bd8 <_strtol_l.constprop.0+0x54>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	e7b3      	b.n	8006bd8 <_strtol_l.constprop.0+0x54>
 8006c70:	2c30      	cmp	r4, #48	; 0x30
 8006c72:	d0a9      	beq.n	8006bc8 <_strtol_l.constprop.0+0x44>
 8006c74:	230a      	movs	r3, #10
 8006c76:	e7af      	b.n	8006bd8 <_strtol_l.constprop.0+0x54>
 8006c78:	0800a4f9 	.word	0x0800a4f9

08006c7c <_strtol_r>:
 8006c7c:	f7ff bf82 	b.w	8006b84 <_strtol_l.constprop.0>

08006c80 <_write_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_write_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa ffab 	bl	8001bea <_write>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_write_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_write_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200002e8 	.word	0x200002e8

08006ca4 <_close_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_close_r+0x1c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f7fa ffb7 	bl	8001c22 <_close>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_close_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_close_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	200002e8 	.word	0x200002e8

08006cc4 <quorem>:
 8006cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc8:	6903      	ldr	r3, [r0, #16]
 8006cca:	690c      	ldr	r4, [r1, #16]
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	4607      	mov	r7, r0
 8006cd0:	db7d      	blt.n	8006dce <quorem+0x10a>
 8006cd2:	3c01      	subs	r4, #1
 8006cd4:	f101 0814 	add.w	r8, r1, #20
 8006cd8:	f100 0514 	add.w	r5, r0, #20
 8006cdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cea:	3301      	adds	r3, #1
 8006cec:	429a      	cmp	r2, r3
 8006cee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cf2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cf6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cfa:	d32e      	bcc.n	8006d5a <quorem+0x96>
 8006cfc:	f04f 0e00 	mov.w	lr, #0
 8006d00:	4640      	mov	r0, r8
 8006d02:	46ac      	mov	ip, r5
 8006d04:	46f2      	mov	sl, lr
 8006d06:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d0a:	b293      	uxth	r3, r2
 8006d0c:	fb06 e303 	mla	r3, r6, r3, lr
 8006d10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d14:	0c12      	lsrs	r2, r2, #16
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	fb06 e202 	mla	r2, r6, r2, lr
 8006d1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d20:	f8dc a000 	ldr.w	sl, [ip]
 8006d24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	fa13 f38a 	uxtah	r3, r3, sl
 8006d2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d3c:	4581      	cmp	r9, r0
 8006d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006d42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d46:	d2de      	bcs.n	8006d06 <quorem+0x42>
 8006d48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d4c:	b92b      	cbnz	r3, 8006d5a <quorem+0x96>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	429d      	cmp	r5, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	d32e      	bcc.n	8006db6 <quorem+0xf2>
 8006d58:	613c      	str	r4, [r7, #16]
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f001 fc96 	bl	800868c <__mcmp>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	db24      	blt.n	8006dae <quorem+0xea>
 8006d64:	3601      	adds	r6, #1
 8006d66:	4628      	mov	r0, r5
 8006d68:	f04f 0c00 	mov.w	ip, #0
 8006d6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d70:	f8d0 e000 	ldr.w	lr, [r0]
 8006d74:	b293      	uxth	r3, r2
 8006d76:	ebac 0303 	sub.w	r3, ip, r3
 8006d7a:	0c12      	lsrs	r2, r2, #16
 8006d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d8e:	45c1      	cmp	r9, r8
 8006d90:	f840 3b04 	str.w	r3, [r0], #4
 8006d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d98:	d2e8      	bcs.n	8006d6c <quorem+0xa8>
 8006d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da2:	b922      	cbnz	r2, 8006dae <quorem+0xea>
 8006da4:	3b04      	subs	r3, #4
 8006da6:	429d      	cmp	r5, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	d30a      	bcc.n	8006dc2 <quorem+0xfe>
 8006dac:	613c      	str	r4, [r7, #16]
 8006dae:	4630      	mov	r0, r6
 8006db0:	b003      	add	sp, #12
 8006db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	3b04      	subs	r3, #4
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d1cc      	bne.n	8006d58 <quorem+0x94>
 8006dbe:	3c01      	subs	r4, #1
 8006dc0:	e7c7      	b.n	8006d52 <quorem+0x8e>
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d1f0      	bne.n	8006dac <quorem+0xe8>
 8006dca:	3c01      	subs	r4, #1
 8006dcc:	e7eb      	b.n	8006da6 <quorem+0xe2>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e7ee      	b.n	8006db0 <quorem+0xec>
 8006dd2:	0000      	movs	r0, r0
 8006dd4:	0000      	movs	r0, r0
	...

08006dd8 <_dtoa_r>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dde:	b099      	sub	sp, #100	; 0x64
 8006de0:	4616      	mov	r6, r2
 8006de2:	461f      	mov	r7, r3
 8006de4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006de8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006dec:	4605      	mov	r5, r0
 8006dee:	b974      	cbnz	r4, 8006e0e <_dtoa_r+0x36>
 8006df0:	2010      	movs	r0, #16
 8006df2:	f001 f95b 	bl	80080ac <malloc>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6268      	str	r0, [r5, #36]	; 0x24
 8006dfa:	b920      	cbnz	r0, 8006e06 <_dtoa_r+0x2e>
 8006dfc:	4ba8      	ldr	r3, [pc, #672]	; (80070a0 <_dtoa_r+0x2c8>)
 8006dfe:	21ea      	movs	r1, #234	; 0xea
 8006e00:	48a8      	ldr	r0, [pc, #672]	; (80070a4 <_dtoa_r+0x2cc>)
 8006e02:	f002 fcd1 	bl	80097a8 <__assert_func>
 8006e06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e0a:	6004      	str	r4, [r0, #0]
 8006e0c:	60c4      	str	r4, [r0, #12]
 8006e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e10:	6819      	ldr	r1, [r3, #0]
 8006e12:	b151      	cbz	r1, 8006e2a <_dtoa_r+0x52>
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	604a      	str	r2, [r1, #4]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4093      	lsls	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f001 f9ac 	bl	800817c <_Bfree>
 8006e24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	1e3b      	subs	r3, r7, #0
 8006e2c:	bfb9      	ittee	lt
 8006e2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	9305      	strlt	r3, [sp, #20]
 8006e34:	2300      	movge	r3, #0
 8006e36:	f8c8 3000 	strge.w	r3, [r8]
 8006e3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e3e:	4b9a      	ldr	r3, [pc, #616]	; (80070a8 <_dtoa_r+0x2d0>)
 8006e40:	bfbc      	itt	lt
 8006e42:	2201      	movlt	r2, #1
 8006e44:	f8c8 2000 	strlt.w	r2, [r8]
 8006e48:	ea33 0309 	bics.w	r3, r3, r9
 8006e4c:	d119      	bne.n	8006e82 <_dtoa_r+0xaa>
 8006e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e50:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5a:	4333      	orrs	r3, r6
 8006e5c:	f000 8580 	beq.w	8007960 <_dtoa_r+0xb88>
 8006e60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e62:	b953      	cbnz	r3, 8006e7a <_dtoa_r+0xa2>
 8006e64:	4b91      	ldr	r3, [pc, #580]	; (80070ac <_dtoa_r+0x2d4>)
 8006e66:	e022      	b.n	8006eae <_dtoa_r+0xd6>
 8006e68:	4b91      	ldr	r3, [pc, #580]	; (80070b0 <_dtoa_r+0x2d8>)
 8006e6a:	9303      	str	r3, [sp, #12]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	9803      	ldr	r0, [sp, #12]
 8006e74:	b019      	add	sp, #100	; 0x64
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	4b8c      	ldr	r3, [pc, #560]	; (80070ac <_dtoa_r+0x2d4>)
 8006e7c:	9303      	str	r3, [sp, #12]
 8006e7e:	3303      	adds	r3, #3
 8006e80:	e7f5      	b.n	8006e6e <_dtoa_r+0x96>
 8006e82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e86:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	f7f9 fdf1 	bl	8000a78 <__aeabi_dcmpeq>
 8006e96:	4680      	mov	r8, r0
 8006e98:	b158      	cbz	r0, 8006eb2 <_dtoa_r+0xda>
 8006e9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8559 	beq.w	800795a <_dtoa_r+0xb82>
 8006ea8:	4882      	ldr	r0, [pc, #520]	; (80070b4 <_dtoa_r+0x2dc>)
 8006eaa:	6018      	str	r0, [r3, #0]
 8006eac:	1e43      	subs	r3, r0, #1
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	e7df      	b.n	8006e72 <_dtoa_r+0x9a>
 8006eb2:	ab16      	add	r3, sp, #88	; 0x58
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	ab17      	add	r3, sp, #92	; 0x5c
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	4628      	mov	r0, r5
 8006ebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ec0:	f001 fd02 	bl	80088c8 <__d2b>
 8006ec4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ec8:	4683      	mov	fp, r0
 8006eca:	2c00      	cmp	r4, #0
 8006ecc:	d07e      	beq.n	8006fcc <_dtoa_r+0x1f4>
 8006ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ed0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006edc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006ee0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ee4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ee8:	4b73      	ldr	r3, [pc, #460]	; (80070b8 <_dtoa_r+0x2e0>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	f7f9 f9a4 	bl	8000238 <__aeabi_dsub>
 8006ef0:	a365      	add	r3, pc, #404	; (adr r3, 8007088 <_dtoa_r+0x2b0>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 fb57 	bl	80005a8 <__aeabi_dmul>
 8006efa:	a365      	add	r3, pc, #404	; (adr r3, 8007090 <_dtoa_r+0x2b8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 f99c 	bl	800023c <__adddf3>
 8006f04:	4606      	mov	r6, r0
 8006f06:	4620      	mov	r0, r4
 8006f08:	460f      	mov	r7, r1
 8006f0a:	f7f9 fae3 	bl	80004d4 <__aeabi_i2d>
 8006f0e:	a362      	add	r3, pc, #392	; (adr r3, 8007098 <_dtoa_r+0x2c0>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f7f9 fb48 	bl	80005a8 <__aeabi_dmul>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	4639      	mov	r1, r7
 8006f20:	f7f9 f98c 	bl	800023c <__adddf3>
 8006f24:	4606      	mov	r6, r0
 8006f26:	460f      	mov	r7, r1
 8006f28:	f7f9 fdee 	bl	8000b08 <__aeabi_d2iz>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4682      	mov	sl, r0
 8006f30:	2300      	movs	r3, #0
 8006f32:	4630      	mov	r0, r6
 8006f34:	4639      	mov	r1, r7
 8006f36:	f7f9 fda9 	bl	8000a8c <__aeabi_dcmplt>
 8006f3a:	b148      	cbz	r0, 8006f50 <_dtoa_r+0x178>
 8006f3c:	4650      	mov	r0, sl
 8006f3e:	f7f9 fac9 	bl	80004d4 <__aeabi_i2d>
 8006f42:	4632      	mov	r2, r6
 8006f44:	463b      	mov	r3, r7
 8006f46:	f7f9 fd97 	bl	8000a78 <__aeabi_dcmpeq>
 8006f4a:	b908      	cbnz	r0, 8006f50 <_dtoa_r+0x178>
 8006f4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f50:	f1ba 0f16 	cmp.w	sl, #22
 8006f54:	d857      	bhi.n	8007006 <_dtoa_r+0x22e>
 8006f56:	4b59      	ldr	r3, [pc, #356]	; (80070bc <_dtoa_r+0x2e4>)
 8006f58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f64:	f7f9 fd92 	bl	8000a8c <__aeabi_dcmplt>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d04e      	beq.n	800700a <_dtoa_r+0x232>
 8006f6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f70:	2300      	movs	r3, #0
 8006f72:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f76:	1b1c      	subs	r4, r3, r4
 8006f78:	1e63      	subs	r3, r4, #1
 8006f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7c:	bf45      	ittet	mi
 8006f7e:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f82:	9306      	strmi	r3, [sp, #24]
 8006f84:	2300      	movpl	r3, #0
 8006f86:	2300      	movmi	r3, #0
 8006f88:	bf4c      	ite	mi
 8006f8a:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f8c:	9306      	strpl	r3, [sp, #24]
 8006f8e:	f1ba 0f00 	cmp.w	sl, #0
 8006f92:	db3c      	blt.n	800700e <_dtoa_r+0x236>
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f9a:	4453      	add	r3, sl
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	f200 808d 	bhi.w	80070c4 <_dtoa_r+0x2ec>
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	bfc4      	itt	gt
 8006fae:	3b04      	subgt	r3, #4
 8006fb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fb4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fb8:	bfcc      	ite	gt
 8006fba:	2400      	movgt	r4, #0
 8006fbc:	2401      	movle	r4, #1
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	f200 808c 	bhi.w	80070dc <_dtoa_r+0x304>
 8006fc4:	e8df f003 	tbb	[pc, r3]
 8006fc8:	5b4d4f2d 	.word	0x5b4d4f2d
 8006fcc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	bfc3      	ittte	gt
 8006fda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fde:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006fe2:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fe6:	f1c3 0320 	rsble	r3, r3, #32
 8006fea:	bfc6      	itte	gt
 8006fec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ff0:	4318      	orrgt	r0, r3
 8006ff2:	fa06 f003 	lslle.w	r0, r6, r3
 8006ff6:	f7f9 fa5d 	bl	80004b4 <__aeabi_ui2d>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007000:	3c01      	subs	r4, #1
 8007002:	9313      	str	r3, [sp, #76]	; 0x4c
 8007004:	e770      	b.n	8006ee8 <_dtoa_r+0x110>
 8007006:	2301      	movs	r3, #1
 8007008:	e7b3      	b.n	8006f72 <_dtoa_r+0x19a>
 800700a:	900f      	str	r0, [sp, #60]	; 0x3c
 800700c:	e7b2      	b.n	8006f74 <_dtoa_r+0x19c>
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	eba3 030a 	sub.w	r3, r3, sl
 8007014:	9306      	str	r3, [sp, #24]
 8007016:	f1ca 0300 	rsb	r3, sl, #0
 800701a:	930a      	str	r3, [sp, #40]	; 0x28
 800701c:	2300      	movs	r3, #0
 800701e:	930e      	str	r3, [sp, #56]	; 0x38
 8007020:	e7bf      	b.n	8006fa2 <_dtoa_r+0x1ca>
 8007022:	2300      	movs	r3, #0
 8007024:	930b      	str	r3, [sp, #44]	; 0x2c
 8007026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc5a      	bgt.n	80070e2 <_dtoa_r+0x30a>
 800702c:	f04f 0901 	mov.w	r9, #1
 8007030:	f8cd 9020 	str.w	r9, [sp, #32]
 8007034:	464b      	mov	r3, r9
 8007036:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800703a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800703c:	2200      	movs	r2, #0
 800703e:	6042      	str	r2, [r0, #4]
 8007040:	2204      	movs	r2, #4
 8007042:	f102 0614 	add.w	r6, r2, #20
 8007046:	429e      	cmp	r6, r3
 8007048:	6841      	ldr	r1, [r0, #4]
 800704a:	d950      	bls.n	80070ee <_dtoa_r+0x316>
 800704c:	4628      	mov	r0, r5
 800704e:	f001 f855 	bl	80080fc <_Balloc>
 8007052:	9003      	str	r0, [sp, #12]
 8007054:	2800      	cmp	r0, #0
 8007056:	d14e      	bne.n	80070f6 <_dtoa_r+0x31e>
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <_dtoa_r+0x2e8>)
 800705a:	4602      	mov	r2, r0
 800705c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007060:	e6ce      	b.n	8006e00 <_dtoa_r+0x28>
 8007062:	2301      	movs	r3, #1
 8007064:	e7de      	b.n	8007024 <_dtoa_r+0x24c>
 8007066:	2300      	movs	r3, #0
 8007068:	930b      	str	r3, [sp, #44]	; 0x2c
 800706a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800706c:	eb0a 0903 	add.w	r9, sl, r3
 8007070:	f109 0301 	add.w	r3, r9, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	9308      	str	r3, [sp, #32]
 8007078:	bfb8      	it	lt
 800707a:	2301      	movlt	r3, #1
 800707c:	e7dd      	b.n	800703a <_dtoa_r+0x262>
 800707e:	2301      	movs	r3, #1
 8007080:	e7f2      	b.n	8007068 <_dtoa_r+0x290>
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	636f4361 	.word	0x636f4361
 800708c:	3fd287a7 	.word	0x3fd287a7
 8007090:	8b60c8b3 	.word	0x8b60c8b3
 8007094:	3fc68a28 	.word	0x3fc68a28
 8007098:	509f79fb 	.word	0x509f79fb
 800709c:	3fd34413 	.word	0x3fd34413
 80070a0:	0800a606 	.word	0x0800a606
 80070a4:	0800a61d 	.word	0x0800a61d
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	0800a602 	.word	0x0800a602
 80070b0:	0800a5f9 	.word	0x0800a5f9
 80070b4:	0800a872 	.word	0x0800a872
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	0800a788 	.word	0x0800a788
 80070c0:	0800a678 	.word	0x0800a678
 80070c4:	2401      	movs	r4, #1
 80070c6:	2300      	movs	r3, #0
 80070c8:	9322      	str	r3, [sp, #136]	; 0x88
 80070ca:	940b      	str	r4, [sp, #44]	; 0x2c
 80070cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8cd 9020 	str.w	r9, [sp, #32]
 80070d6:	2312      	movs	r3, #18
 80070d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80070da:	e7ae      	b.n	800703a <_dtoa_r+0x262>
 80070dc:	2301      	movs	r3, #1
 80070de:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e0:	e7f4      	b.n	80070cc <_dtoa_r+0x2f4>
 80070e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80070e6:	f8cd 9020 	str.w	r9, [sp, #32]
 80070ea:	464b      	mov	r3, r9
 80070ec:	e7a5      	b.n	800703a <_dtoa_r+0x262>
 80070ee:	3101      	adds	r1, #1
 80070f0:	6041      	str	r1, [r0, #4]
 80070f2:	0052      	lsls	r2, r2, #1
 80070f4:	e7a5      	b.n	8007042 <_dtoa_r+0x26a>
 80070f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070f8:	9a03      	ldr	r2, [sp, #12]
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	2b0e      	cmp	r3, #14
 8007100:	f200 80a8 	bhi.w	8007254 <_dtoa_r+0x47c>
 8007104:	2c00      	cmp	r4, #0
 8007106:	f000 80a5 	beq.w	8007254 <_dtoa_r+0x47c>
 800710a:	f1ba 0f00 	cmp.w	sl, #0
 800710e:	dd34      	ble.n	800717a <_dtoa_r+0x3a2>
 8007110:	4a9a      	ldr	r2, [pc, #616]	; (800737c <_dtoa_r+0x5a4>)
 8007112:	f00a 030f 	and.w	r3, sl, #15
 8007116:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800711a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800711e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007122:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007126:	ea4f 142a 	mov.w	r4, sl, asr #4
 800712a:	d016      	beq.n	800715a <_dtoa_r+0x382>
 800712c:	4b94      	ldr	r3, [pc, #592]	; (8007380 <_dtoa_r+0x5a8>)
 800712e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007132:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007136:	f7f9 fb61 	bl	80007fc <__aeabi_ddiv>
 800713a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800713e:	f004 040f 	and.w	r4, r4, #15
 8007142:	2703      	movs	r7, #3
 8007144:	4e8e      	ldr	r6, [pc, #568]	; (8007380 <_dtoa_r+0x5a8>)
 8007146:	b954      	cbnz	r4, 800715e <_dtoa_r+0x386>
 8007148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800714c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007150:	f7f9 fb54 	bl	80007fc <__aeabi_ddiv>
 8007154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007158:	e029      	b.n	80071ae <_dtoa_r+0x3d6>
 800715a:	2702      	movs	r7, #2
 800715c:	e7f2      	b.n	8007144 <_dtoa_r+0x36c>
 800715e:	07e1      	lsls	r1, r4, #31
 8007160:	d508      	bpl.n	8007174 <_dtoa_r+0x39c>
 8007162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800716a:	f7f9 fa1d 	bl	80005a8 <__aeabi_dmul>
 800716e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007172:	3701      	adds	r7, #1
 8007174:	1064      	asrs	r4, r4, #1
 8007176:	3608      	adds	r6, #8
 8007178:	e7e5      	b.n	8007146 <_dtoa_r+0x36e>
 800717a:	f000 80a5 	beq.w	80072c8 <_dtoa_r+0x4f0>
 800717e:	f1ca 0400 	rsb	r4, sl, #0
 8007182:	4b7e      	ldr	r3, [pc, #504]	; (800737c <_dtoa_r+0x5a4>)
 8007184:	4e7e      	ldr	r6, [pc, #504]	; (8007380 <_dtoa_r+0x5a8>)
 8007186:	f004 020f 	and.w	r2, r4, #15
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007196:	f7f9 fa07 	bl	80005a8 <__aeabi_dmul>
 800719a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800719e:	1124      	asrs	r4, r4, #4
 80071a0:	2300      	movs	r3, #0
 80071a2:	2702      	movs	r7, #2
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	f040 8084 	bne.w	80072b2 <_dtoa_r+0x4da>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d2      	bne.n	8007154 <_dtoa_r+0x37c>
 80071ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 808b 	beq.w	80072cc <_dtoa_r+0x4f4>
 80071b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c2:	4b70      	ldr	r3, [pc, #448]	; (8007384 <_dtoa_r+0x5ac>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7f9 fc61 	bl	8000a8c <__aeabi_dcmplt>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d07e      	beq.n	80072cc <_dtoa_r+0x4f4>
 80071ce:	9b08      	ldr	r3, [sp, #32]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d07b      	beq.n	80072cc <_dtoa_r+0x4f4>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	dd38      	ble.n	800724c <_dtoa_r+0x474>
 80071da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <_dtoa_r+0x5b0>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7f9 f9e1 	bl	80005a8 <__aeabi_dmul>
 80071e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ea:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80071ee:	3701      	adds	r7, #1
 80071f0:	464c      	mov	r4, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	f7f9 f96e 	bl	80004d4 <__aeabi_i2d>
 80071f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071fc:	f7f9 f9d4 	bl	80005a8 <__aeabi_dmul>
 8007200:	4b62      	ldr	r3, [pc, #392]	; (800738c <_dtoa_r+0x5b4>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 f81a 	bl	800023c <__adddf3>
 8007208:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800720c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007210:	9611      	str	r6, [sp, #68]	; 0x44
 8007212:	2c00      	cmp	r4, #0
 8007214:	d15d      	bne.n	80072d2 <_dtoa_r+0x4fa>
 8007216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800721a:	4b5d      	ldr	r3, [pc, #372]	; (8007390 <_dtoa_r+0x5b8>)
 800721c:	2200      	movs	r2, #0
 800721e:	f7f9 f80b 	bl	8000238 <__aeabi_dsub>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800722a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800722c:	4633      	mov	r3, r6
 800722e:	f7f9 fc4b 	bl	8000ac8 <__aeabi_dcmpgt>
 8007232:	2800      	cmp	r0, #0
 8007234:	f040 829c 	bne.w	8007770 <_dtoa_r+0x998>
 8007238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800723e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007242:	f7f9 fc23 	bl	8000a8c <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f040 8290 	bne.w	800776c <_dtoa_r+0x994>
 800724c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007250:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007256:	2b00      	cmp	r3, #0
 8007258:	f2c0 8152 	blt.w	8007500 <_dtoa_r+0x728>
 800725c:	f1ba 0f0e 	cmp.w	sl, #14
 8007260:	f300 814e 	bgt.w	8007500 <_dtoa_r+0x728>
 8007264:	4b45      	ldr	r3, [pc, #276]	; (800737c <_dtoa_r+0x5a4>)
 8007266:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800726a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800726e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007274:	2b00      	cmp	r3, #0
 8007276:	f280 80db 	bge.w	8007430 <_dtoa_r+0x658>
 800727a:	9b08      	ldr	r3, [sp, #32]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f300 80d7 	bgt.w	8007430 <_dtoa_r+0x658>
 8007282:	f040 8272 	bne.w	800776a <_dtoa_r+0x992>
 8007286:	4b42      	ldr	r3, [pc, #264]	; (8007390 <_dtoa_r+0x5b8>)
 8007288:	2200      	movs	r2, #0
 800728a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800728e:	f7f9 f98b 	bl	80005a8 <__aeabi_dmul>
 8007292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007296:	f7f9 fc0d 	bl	8000ab4 <__aeabi_dcmpge>
 800729a:	9c08      	ldr	r4, [sp, #32]
 800729c:	4626      	mov	r6, r4
 800729e:	2800      	cmp	r0, #0
 80072a0:	f040 8248 	bne.w	8007734 <_dtoa_r+0x95c>
 80072a4:	9f03      	ldr	r7, [sp, #12]
 80072a6:	2331      	movs	r3, #49	; 0x31
 80072a8:	f807 3b01 	strb.w	r3, [r7], #1
 80072ac:	f10a 0a01 	add.w	sl, sl, #1
 80072b0:	e244      	b.n	800773c <_dtoa_r+0x964>
 80072b2:	07e2      	lsls	r2, r4, #31
 80072b4:	d505      	bpl.n	80072c2 <_dtoa_r+0x4ea>
 80072b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072ba:	f7f9 f975 	bl	80005a8 <__aeabi_dmul>
 80072be:	3701      	adds	r7, #1
 80072c0:	2301      	movs	r3, #1
 80072c2:	1064      	asrs	r4, r4, #1
 80072c4:	3608      	adds	r6, #8
 80072c6:	e76d      	b.n	80071a4 <_dtoa_r+0x3cc>
 80072c8:	2702      	movs	r7, #2
 80072ca:	e770      	b.n	80071ae <_dtoa_r+0x3d6>
 80072cc:	9c08      	ldr	r4, [sp, #32]
 80072ce:	46d0      	mov	r8, sl
 80072d0:	e78f      	b.n	80071f2 <_dtoa_r+0x41a>
 80072d2:	9903      	ldr	r1, [sp, #12]
 80072d4:	4b29      	ldr	r3, [pc, #164]	; (800737c <_dtoa_r+0x5a4>)
 80072d6:	4421      	add	r1, r4
 80072d8:	9112      	str	r1, [sp, #72]	; 0x48
 80072da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80072e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d055      	beq.n	8007398 <_dtoa_r+0x5c0>
 80072ec:	4929      	ldr	r1, [pc, #164]	; (8007394 <_dtoa_r+0x5bc>)
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7f9 fa84 	bl	80007fc <__aeabi_ddiv>
 80072f4:	463b      	mov	r3, r7
 80072f6:	4632      	mov	r2, r6
 80072f8:	f7f8 ff9e 	bl	8000238 <__aeabi_dsub>
 80072fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007300:	9f03      	ldr	r7, [sp, #12]
 8007302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007306:	f7f9 fbff 	bl	8000b08 <__aeabi_d2iz>
 800730a:	4604      	mov	r4, r0
 800730c:	f7f9 f8e2 	bl	80004d4 <__aeabi_i2d>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007318:	f7f8 ff8e 	bl	8000238 <__aeabi_dsub>
 800731c:	3430      	adds	r4, #48	; 0x30
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007326:	f807 4b01 	strb.w	r4, [r7], #1
 800732a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800732e:	f7f9 fbad 	bl	8000a8c <__aeabi_dcmplt>
 8007332:	2800      	cmp	r0, #0
 8007334:	d174      	bne.n	8007420 <_dtoa_r+0x648>
 8007336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800733a:	4912      	ldr	r1, [pc, #72]	; (8007384 <_dtoa_r+0x5ac>)
 800733c:	2000      	movs	r0, #0
 800733e:	f7f8 ff7b 	bl	8000238 <__aeabi_dsub>
 8007342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007346:	f7f9 fba1 	bl	8000a8c <__aeabi_dcmplt>
 800734a:	2800      	cmp	r0, #0
 800734c:	f040 80b7 	bne.w	80074be <_dtoa_r+0x6e6>
 8007350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007352:	429f      	cmp	r7, r3
 8007354:	f43f af7a 	beq.w	800724c <_dtoa_r+0x474>
 8007358:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <_dtoa_r+0x5b0>)
 800735e:	2200      	movs	r2, #0
 8007360:	f7f9 f922 	bl	80005a8 <__aeabi_dmul>
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <_dtoa_r+0x5b0>)
 8007366:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800736a:	2200      	movs	r2, #0
 800736c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007370:	f7f9 f91a 	bl	80005a8 <__aeabi_dmul>
 8007374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007378:	e7c3      	b.n	8007302 <_dtoa_r+0x52a>
 800737a:	bf00      	nop
 800737c:	0800a788 	.word	0x0800a788
 8007380:	0800a760 	.word	0x0800a760
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	40240000 	.word	0x40240000
 800738c:	401c0000 	.word	0x401c0000
 8007390:	40140000 	.word	0x40140000
 8007394:	3fe00000 	.word	0x3fe00000
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f9 f904 	bl	80005a8 <__aeabi_dmul>
 80073a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073a6:	9c03      	ldr	r4, [sp, #12]
 80073a8:	9314      	str	r3, [sp, #80]	; 0x50
 80073aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ae:	f7f9 fbab 	bl	8000b08 <__aeabi_d2iz>
 80073b2:	9015      	str	r0, [sp, #84]	; 0x54
 80073b4:	f7f9 f88e 	bl	80004d4 <__aeabi_i2d>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073c0:	f7f8 ff3a 	bl	8000238 <__aeabi_dsub>
 80073c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c6:	3330      	adds	r3, #48	; 0x30
 80073c8:	f804 3b01 	strb.w	r3, [r4], #1
 80073cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073ce:	429c      	cmp	r4, r3
 80073d0:	4606      	mov	r6, r0
 80073d2:	460f      	mov	r7, r1
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	d124      	bne.n	8007424 <_dtoa_r+0x64c>
 80073da:	4ba4      	ldr	r3, [pc, #656]	; (800766c <_dtoa_r+0x894>)
 80073dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073e0:	f7f8 ff2c 	bl	800023c <__adddf3>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f9 fb6c 	bl	8000ac8 <__aeabi_dcmpgt>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d163      	bne.n	80074bc <_dtoa_r+0x6e4>
 80073f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073f8:	499c      	ldr	r1, [pc, #624]	; (800766c <_dtoa_r+0x894>)
 80073fa:	2000      	movs	r0, #0
 80073fc:	f7f8 ff1c 	bl	8000238 <__aeabi_dsub>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 fb40 	bl	8000a8c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f43f af1d 	beq.w	800724c <_dtoa_r+0x474>
 8007412:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007414:	1e7b      	subs	r3, r7, #1
 8007416:	9314      	str	r3, [sp, #80]	; 0x50
 8007418:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800741c:	2b30      	cmp	r3, #48	; 0x30
 800741e:	d0f8      	beq.n	8007412 <_dtoa_r+0x63a>
 8007420:	46c2      	mov	sl, r8
 8007422:	e03b      	b.n	800749c <_dtoa_r+0x6c4>
 8007424:	4b92      	ldr	r3, [pc, #584]	; (8007670 <_dtoa_r+0x898>)
 8007426:	f7f9 f8bf 	bl	80005a8 <__aeabi_dmul>
 800742a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800742e:	e7bc      	b.n	80073aa <_dtoa_r+0x5d2>
 8007430:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007434:	9f03      	ldr	r7, [sp, #12]
 8007436:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f9 f9dd 	bl	80007fc <__aeabi_ddiv>
 8007442:	f7f9 fb61 	bl	8000b08 <__aeabi_d2iz>
 8007446:	4604      	mov	r4, r0
 8007448:	f7f9 f844 	bl	80004d4 <__aeabi_i2d>
 800744c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007450:	f7f9 f8aa 	bl	80005a8 <__aeabi_dmul>
 8007454:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f8 feea 	bl	8000238 <__aeabi_dsub>
 8007464:	f807 6b01 	strb.w	r6, [r7], #1
 8007468:	9e03      	ldr	r6, [sp, #12]
 800746a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800746e:	1bbe      	subs	r6, r7, r6
 8007470:	45b4      	cmp	ip, r6
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	d136      	bne.n	80074e6 <_dtoa_r+0x70e>
 8007478:	f7f8 fee0 	bl	800023c <__adddf3>
 800747c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007480:	4680      	mov	r8, r0
 8007482:	4689      	mov	r9, r1
 8007484:	f7f9 fb20 	bl	8000ac8 <__aeabi_dcmpgt>
 8007488:	bb58      	cbnz	r0, 80074e2 <_dtoa_r+0x70a>
 800748a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f7f9 faf1 	bl	8000a78 <__aeabi_dcmpeq>
 8007496:	b108      	cbz	r0, 800749c <_dtoa_r+0x6c4>
 8007498:	07e1      	lsls	r1, r4, #31
 800749a:	d422      	bmi.n	80074e2 <_dtoa_r+0x70a>
 800749c:	4628      	mov	r0, r5
 800749e:	4659      	mov	r1, fp
 80074a0:	f000 fe6c 	bl	800817c <_Bfree>
 80074a4:	2300      	movs	r3, #0
 80074a6:	703b      	strb	r3, [r7, #0]
 80074a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80074aa:	f10a 0001 	add.w	r0, sl, #1
 80074ae:	6018      	str	r0, [r3, #0]
 80074b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f43f acdd 	beq.w	8006e72 <_dtoa_r+0x9a>
 80074b8:	601f      	str	r7, [r3, #0]
 80074ba:	e4da      	b.n	8006e72 <_dtoa_r+0x9a>
 80074bc:	4627      	mov	r7, r4
 80074be:	463b      	mov	r3, r7
 80074c0:	461f      	mov	r7, r3
 80074c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074c6:	2a39      	cmp	r2, #57	; 0x39
 80074c8:	d107      	bne.n	80074da <_dtoa_r+0x702>
 80074ca:	9a03      	ldr	r2, [sp, #12]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d1f7      	bne.n	80074c0 <_dtoa_r+0x6e8>
 80074d0:	9903      	ldr	r1, [sp, #12]
 80074d2:	2230      	movs	r2, #48	; 0x30
 80074d4:	f108 0801 	add.w	r8, r8, #1
 80074d8:	700a      	strb	r2, [r1, #0]
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	3201      	adds	r2, #1
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e79e      	b.n	8007420 <_dtoa_r+0x648>
 80074e2:	46d0      	mov	r8, sl
 80074e4:	e7eb      	b.n	80074be <_dtoa_r+0x6e6>
 80074e6:	4b62      	ldr	r3, [pc, #392]	; (8007670 <_dtoa_r+0x898>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f9 f85d 	bl	80005a8 <__aeabi_dmul>
 80074ee:	2200      	movs	r2, #0
 80074f0:	2300      	movs	r3, #0
 80074f2:	4680      	mov	r8, r0
 80074f4:	4689      	mov	r9, r1
 80074f6:	f7f9 fabf 	bl	8000a78 <__aeabi_dcmpeq>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d09b      	beq.n	8007436 <_dtoa_r+0x65e>
 80074fe:	e7cd      	b.n	800749c <_dtoa_r+0x6c4>
 8007500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007502:	2a00      	cmp	r2, #0
 8007504:	f000 80d0 	beq.w	80076a8 <_dtoa_r+0x8d0>
 8007508:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800750a:	2a01      	cmp	r2, #1
 800750c:	f300 80b2 	bgt.w	8007674 <_dtoa_r+0x89c>
 8007510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007512:	2a00      	cmp	r2, #0
 8007514:	f000 80a6 	beq.w	8007664 <_dtoa_r+0x88c>
 8007518:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800751c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800751e:	9f06      	ldr	r7, [sp, #24]
 8007520:	9a06      	ldr	r2, [sp, #24]
 8007522:	441a      	add	r2, r3
 8007524:	9206      	str	r2, [sp, #24]
 8007526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007528:	2101      	movs	r1, #1
 800752a:	441a      	add	r2, r3
 800752c:	4628      	mov	r0, r5
 800752e:	9209      	str	r2, [sp, #36]	; 0x24
 8007530:	f000 ff24 	bl	800837c <__i2b>
 8007534:	4606      	mov	r6, r0
 8007536:	2f00      	cmp	r7, #0
 8007538:	dd0c      	ble.n	8007554 <_dtoa_r+0x77c>
 800753a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd09      	ble.n	8007554 <_dtoa_r+0x77c>
 8007540:	42bb      	cmp	r3, r7
 8007542:	9a06      	ldr	r2, [sp, #24]
 8007544:	bfa8      	it	ge
 8007546:	463b      	movge	r3, r7
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	9206      	str	r2, [sp, #24]
 800754c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800754e:	1aff      	subs	r7, r7, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007556:	b1f3      	cbz	r3, 8007596 <_dtoa_r+0x7be>
 8007558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80a8 	beq.w	80076b0 <_dtoa_r+0x8d8>
 8007560:	2c00      	cmp	r4, #0
 8007562:	dd10      	ble.n	8007586 <_dtoa_r+0x7ae>
 8007564:	4631      	mov	r1, r6
 8007566:	4622      	mov	r2, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 ffc5 	bl	80084f8 <__pow5mult>
 800756e:	465a      	mov	r2, fp
 8007570:	4601      	mov	r1, r0
 8007572:	4606      	mov	r6, r0
 8007574:	4628      	mov	r0, r5
 8007576:	f000 ff17 	bl	80083a8 <__multiply>
 800757a:	4659      	mov	r1, fp
 800757c:	4680      	mov	r8, r0
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fdfc 	bl	800817c <_Bfree>
 8007584:	46c3      	mov	fp, r8
 8007586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007588:	1b1a      	subs	r2, r3, r4
 800758a:	d004      	beq.n	8007596 <_dtoa_r+0x7be>
 800758c:	4659      	mov	r1, fp
 800758e:	4628      	mov	r0, r5
 8007590:	f000 ffb2 	bl	80084f8 <__pow5mult>
 8007594:	4683      	mov	fp, r0
 8007596:	2101      	movs	r1, #1
 8007598:	4628      	mov	r0, r5
 800759a:	f000 feef 	bl	800837c <__i2b>
 800759e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	f340 8086 	ble.w	80076b4 <_dtoa_r+0x8dc>
 80075a8:	461a      	mov	r2, r3
 80075aa:	4601      	mov	r1, r0
 80075ac:	4628      	mov	r0, r5
 80075ae:	f000 ffa3 	bl	80084f8 <__pow5mult>
 80075b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	4604      	mov	r4, r0
 80075b8:	dd7f      	ble.n	80076ba <_dtoa_r+0x8e2>
 80075ba:	f04f 0800 	mov.w	r8, #0
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075c4:	6918      	ldr	r0, [r3, #16]
 80075c6:	f000 fe8b 	bl	80082e0 <__hi0bits>
 80075ca:	f1c0 0020 	rsb	r0, r0, #32
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	4418      	add	r0, r3
 80075d2:	f010 001f 	ands.w	r0, r0, #31
 80075d6:	f000 8092 	beq.w	80076fe <_dtoa_r+0x926>
 80075da:	f1c0 0320 	rsb	r3, r0, #32
 80075de:	2b04      	cmp	r3, #4
 80075e0:	f340 808a 	ble.w	80076f8 <_dtoa_r+0x920>
 80075e4:	f1c0 001c 	rsb	r0, r0, #28
 80075e8:	9b06      	ldr	r3, [sp, #24]
 80075ea:	4403      	add	r3, r0
 80075ec:	9306      	str	r3, [sp, #24]
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	4403      	add	r3, r0
 80075f2:	4407      	add	r7, r0
 80075f4:	9309      	str	r3, [sp, #36]	; 0x24
 80075f6:	9b06      	ldr	r3, [sp, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dd05      	ble.n	8007608 <_dtoa_r+0x830>
 80075fc:	4659      	mov	r1, fp
 80075fe:	461a      	mov	r2, r3
 8007600:	4628      	mov	r0, r5
 8007602:	f000 ffd3 	bl	80085ac <__lshift>
 8007606:	4683      	mov	fp, r0
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd05      	ble.n	800761a <_dtoa_r+0x842>
 800760e:	4621      	mov	r1, r4
 8007610:	461a      	mov	r2, r3
 8007612:	4628      	mov	r0, r5
 8007614:	f000 ffca 	bl	80085ac <__lshift>
 8007618:	4604      	mov	r4, r0
 800761a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d070      	beq.n	8007702 <_dtoa_r+0x92a>
 8007620:	4621      	mov	r1, r4
 8007622:	4658      	mov	r0, fp
 8007624:	f001 f832 	bl	800868c <__mcmp>
 8007628:	2800      	cmp	r0, #0
 800762a:	da6a      	bge.n	8007702 <_dtoa_r+0x92a>
 800762c:	2300      	movs	r3, #0
 800762e:	4659      	mov	r1, fp
 8007630:	220a      	movs	r2, #10
 8007632:	4628      	mov	r0, r5
 8007634:	f000 fdc4 	bl	80081c0 <__multadd>
 8007638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800763e:	4683      	mov	fp, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8194 	beq.w	800796e <_dtoa_r+0xb96>
 8007646:	4631      	mov	r1, r6
 8007648:	2300      	movs	r3, #0
 800764a:	220a      	movs	r2, #10
 800764c:	4628      	mov	r0, r5
 800764e:	f000 fdb7 	bl	80081c0 <__multadd>
 8007652:	f1b9 0f00 	cmp.w	r9, #0
 8007656:	4606      	mov	r6, r0
 8007658:	f300 8093 	bgt.w	8007782 <_dtoa_r+0x9aa>
 800765c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc57      	bgt.n	8007712 <_dtoa_r+0x93a>
 8007662:	e08e      	b.n	8007782 <_dtoa_r+0x9aa>
 8007664:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800766a:	e757      	b.n	800751c <_dtoa_r+0x744>
 800766c:	3fe00000 	.word	0x3fe00000
 8007670:	40240000 	.word	0x40240000
 8007674:	9b08      	ldr	r3, [sp, #32]
 8007676:	1e5c      	subs	r4, r3, #1
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	42a3      	cmp	r3, r4
 800767c:	bfbf      	itttt	lt
 800767e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007680:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007682:	1ae2      	sublt	r2, r4, r3
 8007684:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007686:	bfb6      	itet	lt
 8007688:	189b      	addlt	r3, r3, r2
 800768a:	1b1c      	subge	r4, r3, r4
 800768c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800768e:	9b08      	ldr	r3, [sp, #32]
 8007690:	bfb8      	it	lt
 8007692:	2400      	movlt	r4, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfb9      	ittee	lt
 8007698:	9b06      	ldrlt	r3, [sp, #24]
 800769a:	9a08      	ldrlt	r2, [sp, #32]
 800769c:	9f06      	ldrge	r7, [sp, #24]
 800769e:	9b08      	ldrge	r3, [sp, #32]
 80076a0:	bfbc      	itt	lt
 80076a2:	1a9f      	sublt	r7, r3, r2
 80076a4:	2300      	movlt	r3, #0
 80076a6:	e73b      	b.n	8007520 <_dtoa_r+0x748>
 80076a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80076aa:	9f06      	ldr	r7, [sp, #24]
 80076ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80076ae:	e742      	b.n	8007536 <_dtoa_r+0x75e>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	e76b      	b.n	800758c <_dtoa_r+0x7b4>
 80076b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	dc19      	bgt.n	80076ee <_dtoa_r+0x916>
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	b9bb      	cbnz	r3, 80076ee <_dtoa_r+0x916>
 80076be:	9b05      	ldr	r3, [sp, #20]
 80076c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076c4:	b99b      	cbnz	r3, 80076ee <_dtoa_r+0x916>
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076cc:	0d1b      	lsrs	r3, r3, #20
 80076ce:	051b      	lsls	r3, r3, #20
 80076d0:	b183      	cbz	r3, 80076f4 <_dtoa_r+0x91c>
 80076d2:	9b06      	ldr	r3, [sp, #24]
 80076d4:	3301      	adds	r3, #1
 80076d6:	9306      	str	r3, [sp, #24]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	f04f 0801 	mov.w	r8, #1
 80076e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f af6a 	bne.w	80075be <_dtoa_r+0x7e6>
 80076ea:	2001      	movs	r0, #1
 80076ec:	e76f      	b.n	80075ce <_dtoa_r+0x7f6>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	e7f6      	b.n	80076e2 <_dtoa_r+0x90a>
 80076f4:	4698      	mov	r8, r3
 80076f6:	e7f4      	b.n	80076e2 <_dtoa_r+0x90a>
 80076f8:	f43f af7d 	beq.w	80075f6 <_dtoa_r+0x81e>
 80076fc:	4618      	mov	r0, r3
 80076fe:	301c      	adds	r0, #28
 8007700:	e772      	b.n	80075e8 <_dtoa_r+0x810>
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc36      	bgt.n	8007776 <_dtoa_r+0x99e>
 8007708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800770a:	2b02      	cmp	r3, #2
 800770c:	dd33      	ble.n	8007776 <_dtoa_r+0x99e>
 800770e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	d10d      	bne.n	8007734 <_dtoa_r+0x95c>
 8007718:	4621      	mov	r1, r4
 800771a:	464b      	mov	r3, r9
 800771c:	2205      	movs	r2, #5
 800771e:	4628      	mov	r0, r5
 8007720:	f000 fd4e 	bl	80081c0 <__multadd>
 8007724:	4601      	mov	r1, r0
 8007726:	4604      	mov	r4, r0
 8007728:	4658      	mov	r0, fp
 800772a:	f000 ffaf 	bl	800868c <__mcmp>
 800772e:	2800      	cmp	r0, #0
 8007730:	f73f adb8 	bgt.w	80072a4 <_dtoa_r+0x4cc>
 8007734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007736:	9f03      	ldr	r7, [sp, #12]
 8007738:	ea6f 0a03 	mvn.w	sl, r3
 800773c:	f04f 0800 	mov.w	r8, #0
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f000 fd1a 	bl	800817c <_Bfree>
 8007748:	2e00      	cmp	r6, #0
 800774a:	f43f aea7 	beq.w	800749c <_dtoa_r+0x6c4>
 800774e:	f1b8 0f00 	cmp.w	r8, #0
 8007752:	d005      	beq.n	8007760 <_dtoa_r+0x988>
 8007754:	45b0      	cmp	r8, r6
 8007756:	d003      	beq.n	8007760 <_dtoa_r+0x988>
 8007758:	4641      	mov	r1, r8
 800775a:	4628      	mov	r0, r5
 800775c:	f000 fd0e 	bl	800817c <_Bfree>
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	f000 fd0a 	bl	800817c <_Bfree>
 8007768:	e698      	b.n	800749c <_dtoa_r+0x6c4>
 800776a:	2400      	movs	r4, #0
 800776c:	4626      	mov	r6, r4
 800776e:	e7e1      	b.n	8007734 <_dtoa_r+0x95c>
 8007770:	46c2      	mov	sl, r8
 8007772:	4626      	mov	r6, r4
 8007774:	e596      	b.n	80072a4 <_dtoa_r+0x4cc>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80fd 	beq.w	800797c <_dtoa_r+0xba4>
 8007782:	2f00      	cmp	r7, #0
 8007784:	dd05      	ble.n	8007792 <_dtoa_r+0x9ba>
 8007786:	4631      	mov	r1, r6
 8007788:	463a      	mov	r2, r7
 800778a:	4628      	mov	r0, r5
 800778c:	f000 ff0e 	bl	80085ac <__lshift>
 8007790:	4606      	mov	r6, r0
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	d05c      	beq.n	8007852 <_dtoa_r+0xa7a>
 8007798:	6871      	ldr	r1, [r6, #4]
 800779a:	4628      	mov	r0, r5
 800779c:	f000 fcae 	bl	80080fc <_Balloc>
 80077a0:	4607      	mov	r7, r0
 80077a2:	b928      	cbnz	r0, 80077b0 <_dtoa_r+0x9d8>
 80077a4:	4b80      	ldr	r3, [pc, #512]	; (80079a8 <_dtoa_r+0xbd0>)
 80077a6:	4602      	mov	r2, r0
 80077a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077ac:	f7ff bb28 	b.w	8006e00 <_dtoa_r+0x28>
 80077b0:	6932      	ldr	r2, [r6, #16]
 80077b2:	3202      	adds	r2, #2
 80077b4:	0092      	lsls	r2, r2, #2
 80077b6:	f106 010c 	add.w	r1, r6, #12
 80077ba:	300c      	adds	r0, #12
 80077bc:	f000 fc90 	bl	80080e0 <memcpy>
 80077c0:	2201      	movs	r2, #1
 80077c2:	4639      	mov	r1, r7
 80077c4:	4628      	mov	r0, r5
 80077c6:	f000 fef1 	bl	80085ac <__lshift>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	9308      	str	r3, [sp, #32]
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	444b      	add	r3, r9
 80077d4:	930a      	str	r3, [sp, #40]	; 0x28
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	46b0      	mov	r8, r6
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
 80077e0:	4606      	mov	r6, r0
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	4621      	mov	r1, r4
 80077e6:	3b01      	subs	r3, #1
 80077e8:	4658      	mov	r0, fp
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	f7ff fa6a 	bl	8006cc4 <quorem>
 80077f0:	4603      	mov	r3, r0
 80077f2:	3330      	adds	r3, #48	; 0x30
 80077f4:	9006      	str	r0, [sp, #24]
 80077f6:	4641      	mov	r1, r8
 80077f8:	4658      	mov	r0, fp
 80077fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80077fc:	f000 ff46 	bl	800868c <__mcmp>
 8007800:	4632      	mov	r2, r6
 8007802:	4681      	mov	r9, r0
 8007804:	4621      	mov	r1, r4
 8007806:	4628      	mov	r0, r5
 8007808:	f000 ff5c 	bl	80086c4 <__mdiff>
 800780c:	68c2      	ldr	r2, [r0, #12]
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	4607      	mov	r7, r0
 8007812:	bb02      	cbnz	r2, 8007856 <_dtoa_r+0xa7e>
 8007814:	4601      	mov	r1, r0
 8007816:	4658      	mov	r0, fp
 8007818:	f000 ff38 	bl	800868c <__mcmp>
 800781c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781e:	4602      	mov	r2, r0
 8007820:	4639      	mov	r1, r7
 8007822:	4628      	mov	r0, r5
 8007824:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007828:	f000 fca8 	bl	800817c <_Bfree>
 800782c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800782e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007830:	9f08      	ldr	r7, [sp, #32]
 8007832:	ea43 0102 	orr.w	r1, r3, r2
 8007836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007838:	430b      	orrs	r3, r1
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	d10d      	bne.n	800785a <_dtoa_r+0xa82>
 800783e:	2b39      	cmp	r3, #57	; 0x39
 8007840:	d029      	beq.n	8007896 <_dtoa_r+0xabe>
 8007842:	f1b9 0f00 	cmp.w	r9, #0
 8007846:	dd01      	ble.n	800784c <_dtoa_r+0xa74>
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	3331      	adds	r3, #49	; 0x31
 800784c:	9a04      	ldr	r2, [sp, #16]
 800784e:	7013      	strb	r3, [r2, #0]
 8007850:	e776      	b.n	8007740 <_dtoa_r+0x968>
 8007852:	4630      	mov	r0, r6
 8007854:	e7b9      	b.n	80077ca <_dtoa_r+0x9f2>
 8007856:	2201      	movs	r2, #1
 8007858:	e7e2      	b.n	8007820 <_dtoa_r+0xa48>
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	db06      	blt.n	800786e <_dtoa_r+0xa96>
 8007860:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007862:	ea41 0909 	orr.w	r9, r1, r9
 8007866:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007868:	ea59 0101 	orrs.w	r1, r9, r1
 800786c:	d120      	bne.n	80078b0 <_dtoa_r+0xad8>
 800786e:	2a00      	cmp	r2, #0
 8007870:	ddec      	ble.n	800784c <_dtoa_r+0xa74>
 8007872:	4659      	mov	r1, fp
 8007874:	2201      	movs	r2, #1
 8007876:	4628      	mov	r0, r5
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	f000 fe97 	bl	80085ac <__lshift>
 800787e:	4621      	mov	r1, r4
 8007880:	4683      	mov	fp, r0
 8007882:	f000 ff03 	bl	800868c <__mcmp>
 8007886:	2800      	cmp	r0, #0
 8007888:	9b08      	ldr	r3, [sp, #32]
 800788a:	dc02      	bgt.n	8007892 <_dtoa_r+0xaba>
 800788c:	d1de      	bne.n	800784c <_dtoa_r+0xa74>
 800788e:	07da      	lsls	r2, r3, #31
 8007890:	d5dc      	bpl.n	800784c <_dtoa_r+0xa74>
 8007892:	2b39      	cmp	r3, #57	; 0x39
 8007894:	d1d8      	bne.n	8007848 <_dtoa_r+0xa70>
 8007896:	9a04      	ldr	r2, [sp, #16]
 8007898:	2339      	movs	r3, #57	; 0x39
 800789a:	7013      	strb	r3, [r2, #0]
 800789c:	463b      	mov	r3, r7
 800789e:	461f      	mov	r7, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80078a6:	2a39      	cmp	r2, #57	; 0x39
 80078a8:	d050      	beq.n	800794c <_dtoa_r+0xb74>
 80078aa:	3201      	adds	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e747      	b.n	8007740 <_dtoa_r+0x968>
 80078b0:	2a00      	cmp	r2, #0
 80078b2:	dd03      	ble.n	80078bc <_dtoa_r+0xae4>
 80078b4:	2b39      	cmp	r3, #57	; 0x39
 80078b6:	d0ee      	beq.n	8007896 <_dtoa_r+0xabe>
 80078b8:	3301      	adds	r3, #1
 80078ba:	e7c7      	b.n	800784c <_dtoa_r+0xa74>
 80078bc:	9a08      	ldr	r2, [sp, #32]
 80078be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078c4:	428a      	cmp	r2, r1
 80078c6:	d02a      	beq.n	800791e <_dtoa_r+0xb46>
 80078c8:	4659      	mov	r1, fp
 80078ca:	2300      	movs	r3, #0
 80078cc:	220a      	movs	r2, #10
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 fc76 	bl	80081c0 <__multadd>
 80078d4:	45b0      	cmp	r8, r6
 80078d6:	4683      	mov	fp, r0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	f04f 020a 	mov.w	r2, #10
 80078e0:	4641      	mov	r1, r8
 80078e2:	4628      	mov	r0, r5
 80078e4:	d107      	bne.n	80078f6 <_dtoa_r+0xb1e>
 80078e6:	f000 fc6b 	bl	80081c0 <__multadd>
 80078ea:	4680      	mov	r8, r0
 80078ec:	4606      	mov	r6, r0
 80078ee:	9b08      	ldr	r3, [sp, #32]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	e775      	b.n	80077e2 <_dtoa_r+0xa0a>
 80078f6:	f000 fc63 	bl	80081c0 <__multadd>
 80078fa:	4631      	mov	r1, r6
 80078fc:	4680      	mov	r8, r0
 80078fe:	2300      	movs	r3, #0
 8007900:	220a      	movs	r2, #10
 8007902:	4628      	mov	r0, r5
 8007904:	f000 fc5c 	bl	80081c0 <__multadd>
 8007908:	4606      	mov	r6, r0
 800790a:	e7f0      	b.n	80078ee <_dtoa_r+0xb16>
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	9a03      	ldr	r2, [sp, #12]
 8007912:	bfcc      	ite	gt
 8007914:	464f      	movgt	r7, r9
 8007916:	2701      	movle	r7, #1
 8007918:	4417      	add	r7, r2
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	4659      	mov	r1, fp
 8007920:	2201      	movs	r2, #1
 8007922:	4628      	mov	r0, r5
 8007924:	9308      	str	r3, [sp, #32]
 8007926:	f000 fe41 	bl	80085ac <__lshift>
 800792a:	4621      	mov	r1, r4
 800792c:	4683      	mov	fp, r0
 800792e:	f000 fead 	bl	800868c <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	dcb2      	bgt.n	800789c <_dtoa_r+0xac4>
 8007936:	d102      	bne.n	800793e <_dtoa_r+0xb66>
 8007938:	9b08      	ldr	r3, [sp, #32]
 800793a:	07db      	lsls	r3, r3, #31
 800793c:	d4ae      	bmi.n	800789c <_dtoa_r+0xac4>
 800793e:	463b      	mov	r3, r7
 8007940:	461f      	mov	r7, r3
 8007942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007946:	2a30      	cmp	r2, #48	; 0x30
 8007948:	d0fa      	beq.n	8007940 <_dtoa_r+0xb68>
 800794a:	e6f9      	b.n	8007740 <_dtoa_r+0x968>
 800794c:	9a03      	ldr	r2, [sp, #12]
 800794e:	429a      	cmp	r2, r3
 8007950:	d1a5      	bne.n	800789e <_dtoa_r+0xac6>
 8007952:	f10a 0a01 	add.w	sl, sl, #1
 8007956:	2331      	movs	r3, #49	; 0x31
 8007958:	e779      	b.n	800784e <_dtoa_r+0xa76>
 800795a:	4b14      	ldr	r3, [pc, #80]	; (80079ac <_dtoa_r+0xbd4>)
 800795c:	f7ff baa7 	b.w	8006eae <_dtoa_r+0xd6>
 8007960:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007962:	2b00      	cmp	r3, #0
 8007964:	f47f aa80 	bne.w	8006e68 <_dtoa_r+0x90>
 8007968:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <_dtoa_r+0xbd8>)
 800796a:	f7ff baa0 	b.w	8006eae <_dtoa_r+0xd6>
 800796e:	f1b9 0f00 	cmp.w	r9, #0
 8007972:	dc03      	bgt.n	800797c <_dtoa_r+0xba4>
 8007974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007976:	2b02      	cmp	r3, #2
 8007978:	f73f aecb 	bgt.w	8007712 <_dtoa_r+0x93a>
 800797c:	9f03      	ldr	r7, [sp, #12]
 800797e:	4621      	mov	r1, r4
 8007980:	4658      	mov	r0, fp
 8007982:	f7ff f99f 	bl	8006cc4 <quorem>
 8007986:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800798a:	f807 3b01 	strb.w	r3, [r7], #1
 800798e:	9a03      	ldr	r2, [sp, #12]
 8007990:	1aba      	subs	r2, r7, r2
 8007992:	4591      	cmp	r9, r2
 8007994:	ddba      	ble.n	800790c <_dtoa_r+0xb34>
 8007996:	4659      	mov	r1, fp
 8007998:	2300      	movs	r3, #0
 800799a:	220a      	movs	r2, #10
 800799c:	4628      	mov	r0, r5
 800799e:	f000 fc0f 	bl	80081c0 <__multadd>
 80079a2:	4683      	mov	fp, r0
 80079a4:	e7eb      	b.n	800797e <_dtoa_r+0xba6>
 80079a6:	bf00      	nop
 80079a8:	0800a678 	.word	0x0800a678
 80079ac:	0800a871 	.word	0x0800a871
 80079b0:	0800a5f9 	.word	0x0800a5f9

080079b4 <rshift>:
 80079b4:	6903      	ldr	r3, [r0, #16]
 80079b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079c2:	f100 0414 	add.w	r4, r0, #20
 80079c6:	dd45      	ble.n	8007a54 <rshift+0xa0>
 80079c8:	f011 011f 	ands.w	r1, r1, #31
 80079cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079d4:	d10c      	bne.n	80079f0 <rshift+0x3c>
 80079d6:	f100 0710 	add.w	r7, r0, #16
 80079da:	4629      	mov	r1, r5
 80079dc:	42b1      	cmp	r1, r6
 80079de:	d334      	bcc.n	8007a4a <rshift+0x96>
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	1eea      	subs	r2, r5, #3
 80079e6:	4296      	cmp	r6, r2
 80079e8:	bf38      	it	cc
 80079ea:	2300      	movcc	r3, #0
 80079ec:	4423      	add	r3, r4
 80079ee:	e015      	b.n	8007a1c <rshift+0x68>
 80079f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079f4:	f1c1 0820 	rsb	r8, r1, #32
 80079f8:	40cf      	lsrs	r7, r1
 80079fa:	f105 0e04 	add.w	lr, r5, #4
 80079fe:	46a1      	mov	r9, r4
 8007a00:	4576      	cmp	r6, lr
 8007a02:	46f4      	mov	ip, lr
 8007a04:	d815      	bhi.n	8007a32 <rshift+0x7e>
 8007a06:	1a9a      	subs	r2, r3, r2
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	3a04      	subs	r2, #4
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	42ae      	cmp	r6, r5
 8007a10:	bf38      	it	cc
 8007a12:	2200      	movcc	r2, #0
 8007a14:	18a3      	adds	r3, r4, r2
 8007a16:	50a7      	str	r7, [r4, r2]
 8007a18:	b107      	cbz	r7, 8007a1c <rshift+0x68>
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	1b1a      	subs	r2, r3, r4
 8007a1e:	42a3      	cmp	r3, r4
 8007a20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a24:	bf08      	it	eq
 8007a26:	2300      	moveq	r3, #0
 8007a28:	6102      	str	r2, [r0, #16]
 8007a2a:	bf08      	it	eq
 8007a2c:	6143      	streq	r3, [r0, #20]
 8007a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a32:	f8dc c000 	ldr.w	ip, [ip]
 8007a36:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a3a:	ea4c 0707 	orr.w	r7, ip, r7
 8007a3e:	f849 7b04 	str.w	r7, [r9], #4
 8007a42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a46:	40cf      	lsrs	r7, r1
 8007a48:	e7da      	b.n	8007a00 <rshift+0x4c>
 8007a4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a52:	e7c3      	b.n	80079dc <rshift+0x28>
 8007a54:	4623      	mov	r3, r4
 8007a56:	e7e1      	b.n	8007a1c <rshift+0x68>

08007a58 <__hexdig_fun>:
 8007a58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d802      	bhi.n	8007a66 <__hexdig_fun+0xe>
 8007a60:	3820      	subs	r0, #32
 8007a62:	b2c0      	uxtb	r0, r0
 8007a64:	4770      	bx	lr
 8007a66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a6a:	2b05      	cmp	r3, #5
 8007a6c:	d801      	bhi.n	8007a72 <__hexdig_fun+0x1a>
 8007a6e:	3847      	subs	r0, #71	; 0x47
 8007a70:	e7f7      	b.n	8007a62 <__hexdig_fun+0xa>
 8007a72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d801      	bhi.n	8007a7e <__hexdig_fun+0x26>
 8007a7a:	3827      	subs	r0, #39	; 0x27
 8007a7c:	e7f1      	b.n	8007a62 <__hexdig_fun+0xa>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	4770      	bx	lr
	...

08007a84 <__gethex>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	b08b      	sub	sp, #44	; 0x2c
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	4bb2      	ldr	r3, [pc, #712]	; (8007d58 <__gethex+0x2d4>)
 8007a90:	9002      	str	r0, [sp, #8]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	4618      	mov	r0, r3
 8007a98:	4690      	mov	r8, r2
 8007a9a:	f7f8 fb71 	bl	8000180 <strlen>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	f8db 2000 	ldr.w	r2, [fp]
 8007aa4:	4403      	add	r3, r0
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007aac:	9306      	str	r3, [sp, #24]
 8007aae:	1c93      	adds	r3, r2, #2
 8007ab0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007ab4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007ab8:	32fe      	adds	r2, #254	; 0xfe
 8007aba:	18d1      	adds	r1, r2, r3
 8007abc:	461f      	mov	r7, r3
 8007abe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ac2:	9101      	str	r1, [sp, #4]
 8007ac4:	2830      	cmp	r0, #48	; 0x30
 8007ac6:	d0f8      	beq.n	8007aba <__gethex+0x36>
 8007ac8:	f7ff ffc6 	bl	8007a58 <__hexdig_fun>
 8007acc:	4604      	mov	r4, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d13a      	bne.n	8007b48 <__gethex+0xc4>
 8007ad2:	9903      	ldr	r1, [sp, #12]
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f001 fd96 	bl	8009608 <strncmp>
 8007adc:	4605      	mov	r5, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d166      	bne.n	8007bb0 <__gethex+0x12c>
 8007ae2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ae6:	eb07 060a 	add.w	r6, r7, sl
 8007aea:	f7ff ffb5 	bl	8007a58 <__hexdig_fun>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d060      	beq.n	8007bb4 <__gethex+0x130>
 8007af2:	4633      	mov	r3, r6
 8007af4:	7818      	ldrb	r0, [r3, #0]
 8007af6:	2830      	cmp	r0, #48	; 0x30
 8007af8:	461f      	mov	r7, r3
 8007afa:	f103 0301 	add.w	r3, r3, #1
 8007afe:	d0f9      	beq.n	8007af4 <__gethex+0x70>
 8007b00:	f7ff ffaa 	bl	8007a58 <__hexdig_fun>
 8007b04:	2301      	movs	r3, #1
 8007b06:	fab0 f480 	clz	r4, r0
 8007b0a:	0964      	lsrs	r4, r4, #5
 8007b0c:	4635      	mov	r5, r6
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	463a      	mov	r2, r7
 8007b12:	4616      	mov	r6, r2
 8007b14:	3201      	adds	r2, #1
 8007b16:	7830      	ldrb	r0, [r6, #0]
 8007b18:	f7ff ff9e 	bl	8007a58 <__hexdig_fun>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1f8      	bne.n	8007b12 <__gethex+0x8e>
 8007b20:	9903      	ldr	r1, [sp, #12]
 8007b22:	4652      	mov	r2, sl
 8007b24:	4630      	mov	r0, r6
 8007b26:	f001 fd6f 	bl	8009608 <strncmp>
 8007b2a:	b980      	cbnz	r0, 8007b4e <__gethex+0xca>
 8007b2c:	b94d      	cbnz	r5, 8007b42 <__gethex+0xbe>
 8007b2e:	eb06 050a 	add.w	r5, r6, sl
 8007b32:	462a      	mov	r2, r5
 8007b34:	4616      	mov	r6, r2
 8007b36:	3201      	adds	r2, #1
 8007b38:	7830      	ldrb	r0, [r6, #0]
 8007b3a:	f7ff ff8d 	bl	8007a58 <__hexdig_fun>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d1f8      	bne.n	8007b34 <__gethex+0xb0>
 8007b42:	1bad      	subs	r5, r5, r6
 8007b44:	00ad      	lsls	r5, r5, #2
 8007b46:	e004      	b.n	8007b52 <__gethex+0xce>
 8007b48:	2400      	movs	r4, #0
 8007b4a:	4625      	mov	r5, r4
 8007b4c:	e7e0      	b.n	8007b10 <__gethex+0x8c>
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	d1f7      	bne.n	8007b42 <__gethex+0xbe>
 8007b52:	7833      	ldrb	r3, [r6, #0]
 8007b54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b58:	2b50      	cmp	r3, #80	; 0x50
 8007b5a:	d139      	bne.n	8007bd0 <__gethex+0x14c>
 8007b5c:	7873      	ldrb	r3, [r6, #1]
 8007b5e:	2b2b      	cmp	r3, #43	; 0x2b
 8007b60:	d02a      	beq.n	8007bb8 <__gethex+0x134>
 8007b62:	2b2d      	cmp	r3, #45	; 0x2d
 8007b64:	d02c      	beq.n	8007bc0 <__gethex+0x13c>
 8007b66:	1c71      	adds	r1, r6, #1
 8007b68:	f04f 0900 	mov.w	r9, #0
 8007b6c:	7808      	ldrb	r0, [r1, #0]
 8007b6e:	f7ff ff73 	bl	8007a58 <__hexdig_fun>
 8007b72:	1e43      	subs	r3, r0, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b18      	cmp	r3, #24
 8007b78:	d82a      	bhi.n	8007bd0 <__gethex+0x14c>
 8007b7a:	f1a0 0210 	sub.w	r2, r0, #16
 8007b7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b82:	f7ff ff69 	bl	8007a58 <__hexdig_fun>
 8007b86:	1e43      	subs	r3, r0, #1
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b18      	cmp	r3, #24
 8007b8c:	d91b      	bls.n	8007bc6 <__gethex+0x142>
 8007b8e:	f1b9 0f00 	cmp.w	r9, #0
 8007b92:	d000      	beq.n	8007b96 <__gethex+0x112>
 8007b94:	4252      	negs	r2, r2
 8007b96:	4415      	add	r5, r2
 8007b98:	f8cb 1000 	str.w	r1, [fp]
 8007b9c:	b1d4      	cbz	r4, 8007bd4 <__gethex+0x150>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bf14      	ite	ne
 8007ba4:	2700      	movne	r7, #0
 8007ba6:	2706      	moveq	r7, #6
 8007ba8:	4638      	mov	r0, r7
 8007baa:	b00b      	add	sp, #44	; 0x2c
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	463e      	mov	r6, r7
 8007bb2:	4625      	mov	r5, r4
 8007bb4:	2401      	movs	r4, #1
 8007bb6:	e7cc      	b.n	8007b52 <__gethex+0xce>
 8007bb8:	f04f 0900 	mov.w	r9, #0
 8007bbc:	1cb1      	adds	r1, r6, #2
 8007bbe:	e7d5      	b.n	8007b6c <__gethex+0xe8>
 8007bc0:	f04f 0901 	mov.w	r9, #1
 8007bc4:	e7fa      	b.n	8007bbc <__gethex+0x138>
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	fb03 0202 	mla	r2, r3, r2, r0
 8007bcc:	3a10      	subs	r2, #16
 8007bce:	e7d6      	b.n	8007b7e <__gethex+0xfa>
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	e7e1      	b.n	8007b98 <__gethex+0x114>
 8007bd4:	1bf3      	subs	r3, r6, r7
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	4621      	mov	r1, r4
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	dc0a      	bgt.n	8007bf4 <__gethex+0x170>
 8007bde:	9802      	ldr	r0, [sp, #8]
 8007be0:	f000 fa8c 	bl	80080fc <_Balloc>
 8007be4:	4604      	mov	r4, r0
 8007be6:	b940      	cbnz	r0, 8007bfa <__gethex+0x176>
 8007be8:	4b5c      	ldr	r3, [pc, #368]	; (8007d5c <__gethex+0x2d8>)
 8007bea:	4602      	mov	r2, r0
 8007bec:	21de      	movs	r1, #222	; 0xde
 8007bee:	485c      	ldr	r0, [pc, #368]	; (8007d60 <__gethex+0x2dc>)
 8007bf0:	f001 fdda 	bl	80097a8 <__assert_func>
 8007bf4:	3101      	adds	r1, #1
 8007bf6:	105b      	asrs	r3, r3, #1
 8007bf8:	e7ef      	b.n	8007bda <__gethex+0x156>
 8007bfa:	f100 0914 	add.w	r9, r0, #20
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	f1ca 0301 	rsb	r3, sl, #1
 8007c06:	f8cd 9010 	str.w	r9, [sp, #16]
 8007c0a:	f8cd b004 	str.w	fp, [sp, #4]
 8007c0e:	9308      	str	r3, [sp, #32]
 8007c10:	42b7      	cmp	r7, r6
 8007c12:	d33f      	bcc.n	8007c94 <__gethex+0x210>
 8007c14:	9f04      	ldr	r7, [sp, #16]
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	f847 3b04 	str.w	r3, [r7], #4
 8007c1c:	eba7 0709 	sub.w	r7, r7, r9
 8007c20:	10bf      	asrs	r7, r7, #2
 8007c22:	6127      	str	r7, [r4, #16]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fb5b 	bl	80082e0 <__hi0bits>
 8007c2a:	017f      	lsls	r7, r7, #5
 8007c2c:	f8d8 6000 	ldr.w	r6, [r8]
 8007c30:	1a3f      	subs	r7, r7, r0
 8007c32:	42b7      	cmp	r7, r6
 8007c34:	dd62      	ble.n	8007cfc <__gethex+0x278>
 8007c36:	1bbf      	subs	r7, r7, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fef1 	bl	8008a22 <__any_on>
 8007c40:	4682      	mov	sl, r0
 8007c42:	b1a8      	cbz	r0, 8007c70 <__gethex+0x1ec>
 8007c44:	1e7b      	subs	r3, r7, #1
 8007c46:	1159      	asrs	r1, r3, #5
 8007c48:	f003 021f 	and.w	r2, r3, #31
 8007c4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c50:	f04f 0a01 	mov.w	sl, #1
 8007c54:	fa0a f202 	lsl.w	r2, sl, r2
 8007c58:	420a      	tst	r2, r1
 8007c5a:	d009      	beq.n	8007c70 <__gethex+0x1ec>
 8007c5c:	4553      	cmp	r3, sl
 8007c5e:	dd05      	ble.n	8007c6c <__gethex+0x1e8>
 8007c60:	1eb9      	subs	r1, r7, #2
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fedd 	bl	8008a22 <__any_on>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d144      	bne.n	8007cf6 <__gethex+0x272>
 8007c6c:	f04f 0a02 	mov.w	sl, #2
 8007c70:	4639      	mov	r1, r7
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff fe9e 	bl	80079b4 <rshift>
 8007c78:	443d      	add	r5, r7
 8007c7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c7e:	42ab      	cmp	r3, r5
 8007c80:	da4a      	bge.n	8007d18 <__gethex+0x294>
 8007c82:	9802      	ldr	r0, [sp, #8]
 8007c84:	4621      	mov	r1, r4
 8007c86:	f000 fa79 	bl	800817c <_Bfree>
 8007c8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	27a3      	movs	r7, #163	; 0xa3
 8007c92:	e789      	b.n	8007ba8 <__gethex+0x124>
 8007c94:	1e73      	subs	r3, r6, #1
 8007c96:	9a06      	ldr	r2, [sp, #24]
 8007c98:	9307      	str	r3, [sp, #28]
 8007c9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d019      	beq.n	8007cd6 <__gethex+0x252>
 8007ca2:	f1bb 0f20 	cmp.w	fp, #32
 8007ca6:	d107      	bne.n	8007cb8 <__gethex+0x234>
 8007ca8:	9b04      	ldr	r3, [sp, #16]
 8007caa:	9a01      	ldr	r2, [sp, #4]
 8007cac:	f843 2b04 	str.w	r2, [r3], #4
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	469b      	mov	fp, r3
 8007cb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007cbc:	f7ff fecc 	bl	8007a58 <__hexdig_fun>
 8007cc0:	9b01      	ldr	r3, [sp, #4]
 8007cc2:	f000 000f 	and.w	r0, r0, #15
 8007cc6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007cca:	4303      	orrs	r3, r0
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	f10b 0b04 	add.w	fp, fp, #4
 8007cd2:	9b07      	ldr	r3, [sp, #28]
 8007cd4:	e00d      	b.n	8007cf2 <__gethex+0x26e>
 8007cd6:	9a08      	ldr	r2, [sp, #32]
 8007cd8:	1e73      	subs	r3, r6, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	42bb      	cmp	r3, r7
 8007cde:	d3e0      	bcc.n	8007ca2 <__gethex+0x21e>
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	9903      	ldr	r1, [sp, #12]
 8007ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce6:	4652      	mov	r2, sl
 8007ce8:	f001 fc8e 	bl	8009608 <strncmp>
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1d7      	bne.n	8007ca2 <__gethex+0x21e>
 8007cf2:	461e      	mov	r6, r3
 8007cf4:	e78c      	b.n	8007c10 <__gethex+0x18c>
 8007cf6:	f04f 0a03 	mov.w	sl, #3
 8007cfa:	e7b9      	b.n	8007c70 <__gethex+0x1ec>
 8007cfc:	da09      	bge.n	8007d12 <__gethex+0x28e>
 8007cfe:	1bf7      	subs	r7, r6, r7
 8007d00:	4621      	mov	r1, r4
 8007d02:	9802      	ldr	r0, [sp, #8]
 8007d04:	463a      	mov	r2, r7
 8007d06:	f000 fc51 	bl	80085ac <__lshift>
 8007d0a:	1bed      	subs	r5, r5, r7
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	f100 0914 	add.w	r9, r0, #20
 8007d12:	f04f 0a00 	mov.w	sl, #0
 8007d16:	e7b0      	b.n	8007c7a <__gethex+0x1f6>
 8007d18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d1c:	42a8      	cmp	r0, r5
 8007d1e:	dd71      	ble.n	8007e04 <__gethex+0x380>
 8007d20:	1b45      	subs	r5, r0, r5
 8007d22:	42ae      	cmp	r6, r5
 8007d24:	dc35      	bgt.n	8007d92 <__gethex+0x30e>
 8007d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d029      	beq.n	8007d82 <__gethex+0x2fe>
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d02b      	beq.n	8007d8a <__gethex+0x306>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d11c      	bne.n	8007d70 <__gethex+0x2ec>
 8007d36:	42ae      	cmp	r6, r5
 8007d38:	d11a      	bne.n	8007d70 <__gethex+0x2ec>
 8007d3a:	2e01      	cmp	r6, #1
 8007d3c:	d112      	bne.n	8007d64 <__gethex+0x2e0>
 8007d3e:	9a05      	ldr	r2, [sp, #20]
 8007d40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	2301      	movs	r3, #1
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	f8c9 3000 	str.w	r3, [r9]
 8007d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d50:	2762      	movs	r7, #98	; 0x62
 8007d52:	601c      	str	r4, [r3, #0]
 8007d54:	e728      	b.n	8007ba8 <__gethex+0x124>
 8007d56:	bf00      	nop
 8007d58:	0800a6f0 	.word	0x0800a6f0
 8007d5c:	0800a678 	.word	0x0800a678
 8007d60:	0800a689 	.word	0x0800a689
 8007d64:	1e71      	subs	r1, r6, #1
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 fe5b 	bl	8008a22 <__any_on>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1e6      	bne.n	8007d3e <__gethex+0x2ba>
 8007d70:	9802      	ldr	r0, [sp, #8]
 8007d72:	4621      	mov	r1, r4
 8007d74:	f000 fa02 	bl	800817c <_Bfree>
 8007d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	2750      	movs	r7, #80	; 0x50
 8007d80:	e712      	b.n	8007ba8 <__gethex+0x124>
 8007d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f3      	bne.n	8007d70 <__gethex+0x2ec>
 8007d88:	e7d9      	b.n	8007d3e <__gethex+0x2ba>
 8007d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1d6      	bne.n	8007d3e <__gethex+0x2ba>
 8007d90:	e7ee      	b.n	8007d70 <__gethex+0x2ec>
 8007d92:	1e6f      	subs	r7, r5, #1
 8007d94:	f1ba 0f00 	cmp.w	sl, #0
 8007d98:	d131      	bne.n	8007dfe <__gethex+0x37a>
 8007d9a:	b127      	cbz	r7, 8007da6 <__gethex+0x322>
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 fe3f 	bl	8008a22 <__any_on>
 8007da4:	4682      	mov	sl, r0
 8007da6:	117b      	asrs	r3, r7, #5
 8007da8:	2101      	movs	r1, #1
 8007daa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007dae:	f007 071f 	and.w	r7, r7, #31
 8007db2:	fa01 f707 	lsl.w	r7, r1, r7
 8007db6:	421f      	tst	r7, r3
 8007db8:	4629      	mov	r1, r5
 8007dba:	4620      	mov	r0, r4
 8007dbc:	bf18      	it	ne
 8007dbe:	f04a 0a02 	orrne.w	sl, sl, #2
 8007dc2:	1b76      	subs	r6, r6, r5
 8007dc4:	f7ff fdf6 	bl	80079b4 <rshift>
 8007dc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dcc:	2702      	movs	r7, #2
 8007dce:	f1ba 0f00 	cmp.w	sl, #0
 8007dd2:	d048      	beq.n	8007e66 <__gethex+0x3e2>
 8007dd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d015      	beq.n	8007e08 <__gethex+0x384>
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d017      	beq.n	8007e10 <__gethex+0x38c>
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d109      	bne.n	8007df8 <__gethex+0x374>
 8007de4:	f01a 0f02 	tst.w	sl, #2
 8007de8:	d006      	beq.n	8007df8 <__gethex+0x374>
 8007dea:	f8d9 0000 	ldr.w	r0, [r9]
 8007dee:	ea4a 0a00 	orr.w	sl, sl, r0
 8007df2:	f01a 0f01 	tst.w	sl, #1
 8007df6:	d10e      	bne.n	8007e16 <__gethex+0x392>
 8007df8:	f047 0710 	orr.w	r7, r7, #16
 8007dfc:	e033      	b.n	8007e66 <__gethex+0x3e2>
 8007dfe:	f04f 0a01 	mov.w	sl, #1
 8007e02:	e7d0      	b.n	8007da6 <__gethex+0x322>
 8007e04:	2701      	movs	r7, #1
 8007e06:	e7e2      	b.n	8007dce <__gethex+0x34a>
 8007e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e0a:	f1c3 0301 	rsb	r3, r3, #1
 8007e0e:	9315      	str	r3, [sp, #84]	; 0x54
 8007e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f0      	beq.n	8007df8 <__gethex+0x374>
 8007e16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e1a:	f104 0314 	add.w	r3, r4, #20
 8007e1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e26:	f04f 0c00 	mov.w	ip, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e30:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007e34:	d01c      	beq.n	8007e70 <__gethex+0x3ec>
 8007e36:	3201      	adds	r2, #1
 8007e38:	6002      	str	r2, [r0, #0]
 8007e3a:	2f02      	cmp	r7, #2
 8007e3c:	f104 0314 	add.w	r3, r4, #20
 8007e40:	d13d      	bne.n	8007ebe <__gethex+0x43a>
 8007e42:	f8d8 2000 	ldr.w	r2, [r8]
 8007e46:	3a01      	subs	r2, #1
 8007e48:	42b2      	cmp	r2, r6
 8007e4a:	d10a      	bne.n	8007e62 <__gethex+0x3de>
 8007e4c:	1171      	asrs	r1, r6, #5
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e54:	f006 061f 	and.w	r6, r6, #31
 8007e58:	fa02 f606 	lsl.w	r6, r2, r6
 8007e5c:	421e      	tst	r6, r3
 8007e5e:	bf18      	it	ne
 8007e60:	4617      	movne	r7, r2
 8007e62:	f047 0720 	orr.w	r7, r7, #32
 8007e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e68:	601c      	str	r4, [r3, #0]
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	601d      	str	r5, [r3, #0]
 8007e6e:	e69b      	b.n	8007ba8 <__gethex+0x124>
 8007e70:	4299      	cmp	r1, r3
 8007e72:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e76:	d8d8      	bhi.n	8007e2a <__gethex+0x3a6>
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	459b      	cmp	fp, r3
 8007e7c:	db17      	blt.n	8007eae <__gethex+0x42a>
 8007e7e:	6861      	ldr	r1, [r4, #4]
 8007e80:	9802      	ldr	r0, [sp, #8]
 8007e82:	3101      	adds	r1, #1
 8007e84:	f000 f93a 	bl	80080fc <_Balloc>
 8007e88:	4681      	mov	r9, r0
 8007e8a:	b918      	cbnz	r0, 8007e94 <__gethex+0x410>
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <__gethex+0x474>)
 8007e8e:	4602      	mov	r2, r0
 8007e90:	2184      	movs	r1, #132	; 0x84
 8007e92:	e6ac      	b.n	8007bee <__gethex+0x16a>
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	3202      	adds	r2, #2
 8007e98:	f104 010c 	add.w	r1, r4, #12
 8007e9c:	0092      	lsls	r2, r2, #2
 8007e9e:	300c      	adds	r0, #12
 8007ea0:	f000 f91e 	bl	80080e0 <memcpy>
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	9802      	ldr	r0, [sp, #8]
 8007ea8:	f000 f968 	bl	800817c <_Bfree>
 8007eac:	464c      	mov	r4, r9
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eb6:	6122      	str	r2, [r4, #16]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	615a      	str	r2, [r3, #20]
 8007ebc:	e7bd      	b.n	8007e3a <__gethex+0x3b6>
 8007ebe:	6922      	ldr	r2, [r4, #16]
 8007ec0:	455a      	cmp	r2, fp
 8007ec2:	dd0b      	ble.n	8007edc <__gethex+0x458>
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7ff fd74 	bl	80079b4 <rshift>
 8007ecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	42ab      	cmp	r3, r5
 8007ed4:	f6ff aed5 	blt.w	8007c82 <__gethex+0x1fe>
 8007ed8:	2701      	movs	r7, #1
 8007eda:	e7c2      	b.n	8007e62 <__gethex+0x3de>
 8007edc:	f016 061f 	ands.w	r6, r6, #31
 8007ee0:	d0fa      	beq.n	8007ed8 <__gethex+0x454>
 8007ee2:	4453      	add	r3, sl
 8007ee4:	f1c6 0620 	rsb	r6, r6, #32
 8007ee8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007eec:	f000 f9f8 	bl	80082e0 <__hi0bits>
 8007ef0:	42b0      	cmp	r0, r6
 8007ef2:	dbe7      	blt.n	8007ec4 <__gethex+0x440>
 8007ef4:	e7f0      	b.n	8007ed8 <__gethex+0x454>
 8007ef6:	bf00      	nop
 8007ef8:	0800a678 	.word	0x0800a678

08007efc <L_shift>:
 8007efc:	f1c2 0208 	rsb	r2, r2, #8
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	b570      	push	{r4, r5, r6, lr}
 8007f04:	f1c2 0620 	rsb	r6, r2, #32
 8007f08:	6843      	ldr	r3, [r0, #4]
 8007f0a:	6804      	ldr	r4, [r0, #0]
 8007f0c:	fa03 f506 	lsl.w	r5, r3, r6
 8007f10:	432c      	orrs	r4, r5
 8007f12:	40d3      	lsrs	r3, r2
 8007f14:	6004      	str	r4, [r0, #0]
 8007f16:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f1a:	4288      	cmp	r0, r1
 8007f1c:	d3f4      	bcc.n	8007f08 <L_shift+0xc>
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}

08007f20 <__match>:
 8007f20:	b530      	push	{r4, r5, lr}
 8007f22:	6803      	ldr	r3, [r0, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2a:	b914      	cbnz	r4, 8007f32 <__match+0x12>
 8007f2c:	6003      	str	r3, [r0, #0]
 8007f2e:	2001      	movs	r0, #1
 8007f30:	bd30      	pop	{r4, r5, pc}
 8007f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f3a:	2d19      	cmp	r5, #25
 8007f3c:	bf98      	it	ls
 8007f3e:	3220      	addls	r2, #32
 8007f40:	42a2      	cmp	r2, r4
 8007f42:	d0f0      	beq.n	8007f26 <__match+0x6>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7f3      	b.n	8007f30 <__match+0x10>

08007f48 <__hexnan>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	680b      	ldr	r3, [r1, #0]
 8007f4e:	115e      	asrs	r6, r3, #5
 8007f50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f54:	f013 031f 	ands.w	r3, r3, #31
 8007f58:	b087      	sub	sp, #28
 8007f5a:	bf18      	it	ne
 8007f5c:	3604      	addne	r6, #4
 8007f5e:	2500      	movs	r5, #0
 8007f60:	1f37      	subs	r7, r6, #4
 8007f62:	4690      	mov	r8, r2
 8007f64:	6802      	ldr	r2, [r0, #0]
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	4682      	mov	sl, r0
 8007f6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f6e:	46b9      	mov	r9, r7
 8007f70:	463c      	mov	r4, r7
 8007f72:	9502      	str	r5, [sp, #8]
 8007f74:	46ab      	mov	fp, r5
 8007f76:	7851      	ldrb	r1, [r2, #1]
 8007f78:	1c53      	adds	r3, r2, #1
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	b341      	cbz	r1, 8007fd0 <__hexnan+0x88>
 8007f7e:	4608      	mov	r0, r1
 8007f80:	9205      	str	r2, [sp, #20]
 8007f82:	9104      	str	r1, [sp, #16]
 8007f84:	f7ff fd68 	bl	8007a58 <__hexdig_fun>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d14f      	bne.n	800802c <__hexnan+0xe4>
 8007f8c:	9904      	ldr	r1, [sp, #16]
 8007f8e:	9a05      	ldr	r2, [sp, #20]
 8007f90:	2920      	cmp	r1, #32
 8007f92:	d818      	bhi.n	8007fc6 <__hexnan+0x7e>
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	459b      	cmp	fp, r3
 8007f98:	dd13      	ble.n	8007fc2 <__hexnan+0x7a>
 8007f9a:	454c      	cmp	r4, r9
 8007f9c:	d206      	bcs.n	8007fac <__hexnan+0x64>
 8007f9e:	2d07      	cmp	r5, #7
 8007fa0:	dc04      	bgt.n	8007fac <__hexnan+0x64>
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f7ff ffa8 	bl	8007efc <L_shift>
 8007fac:	4544      	cmp	r4, r8
 8007fae:	d950      	bls.n	8008052 <__hexnan+0x10a>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f1a4 0904 	sub.w	r9, r4, #4
 8007fb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fba:	f8cd b008 	str.w	fp, [sp, #8]
 8007fbe:	464c      	mov	r4, r9
 8007fc0:	461d      	mov	r5, r3
 8007fc2:	9a03      	ldr	r2, [sp, #12]
 8007fc4:	e7d7      	b.n	8007f76 <__hexnan+0x2e>
 8007fc6:	2929      	cmp	r1, #41	; 0x29
 8007fc8:	d156      	bne.n	8008078 <__hexnan+0x130>
 8007fca:	3202      	adds	r2, #2
 8007fcc:	f8ca 2000 	str.w	r2, [sl]
 8007fd0:	f1bb 0f00 	cmp.w	fp, #0
 8007fd4:	d050      	beq.n	8008078 <__hexnan+0x130>
 8007fd6:	454c      	cmp	r4, r9
 8007fd8:	d206      	bcs.n	8007fe8 <__hexnan+0xa0>
 8007fda:	2d07      	cmp	r5, #7
 8007fdc:	dc04      	bgt.n	8007fe8 <__hexnan+0xa0>
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff ff8a 	bl	8007efc <L_shift>
 8007fe8:	4544      	cmp	r4, r8
 8007fea:	d934      	bls.n	8008056 <__hexnan+0x10e>
 8007fec:	f1a8 0204 	sub.w	r2, r8, #4
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ff6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ffa:	429f      	cmp	r7, r3
 8007ffc:	d2f9      	bcs.n	8007ff2 <__hexnan+0xaa>
 8007ffe:	1b3b      	subs	r3, r7, r4
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	3304      	adds	r3, #4
 8008006:	3401      	adds	r4, #1
 8008008:	3e03      	subs	r6, #3
 800800a:	42b4      	cmp	r4, r6
 800800c:	bf88      	it	hi
 800800e:	2304      	movhi	r3, #4
 8008010:	4443      	add	r3, r8
 8008012:	2200      	movs	r2, #0
 8008014:	f843 2b04 	str.w	r2, [r3], #4
 8008018:	429f      	cmp	r7, r3
 800801a:	d2fb      	bcs.n	8008014 <__hexnan+0xcc>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	b91b      	cbnz	r3, 8008028 <__hexnan+0xe0>
 8008020:	4547      	cmp	r7, r8
 8008022:	d127      	bne.n	8008074 <__hexnan+0x12c>
 8008024:	2301      	movs	r3, #1
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	2005      	movs	r0, #5
 800802a:	e026      	b.n	800807a <__hexnan+0x132>
 800802c:	3501      	adds	r5, #1
 800802e:	2d08      	cmp	r5, #8
 8008030:	f10b 0b01 	add.w	fp, fp, #1
 8008034:	dd06      	ble.n	8008044 <__hexnan+0xfc>
 8008036:	4544      	cmp	r4, r8
 8008038:	d9c3      	bls.n	8007fc2 <__hexnan+0x7a>
 800803a:	2300      	movs	r3, #0
 800803c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008040:	2501      	movs	r5, #1
 8008042:	3c04      	subs	r4, #4
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	f000 000f 	and.w	r0, r0, #15
 800804a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800804e:	6022      	str	r2, [r4, #0]
 8008050:	e7b7      	b.n	8007fc2 <__hexnan+0x7a>
 8008052:	2508      	movs	r5, #8
 8008054:	e7b5      	b.n	8007fc2 <__hexnan+0x7a>
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0df      	beq.n	800801c <__hexnan+0xd4>
 800805c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008060:	f1c3 0320 	rsb	r3, r3, #32
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800806c:	401a      	ands	r2, r3
 800806e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008072:	e7d3      	b.n	800801c <__hexnan+0xd4>
 8008074:	3f04      	subs	r7, #4
 8008076:	e7d1      	b.n	800801c <__hexnan+0xd4>
 8008078:	2004      	movs	r0, #4
 800807a:	b007      	add	sp, #28
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008080 <_localeconv_r>:
 8008080:	4800      	ldr	r0, [pc, #0]	; (8008084 <_localeconv_r+0x4>)
 8008082:	4770      	bx	lr
 8008084:	20000164 	.word	0x20000164

08008088 <_lseek_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	; (80080a8 <_lseek_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f9 fde7 	bl	8001c6a <_lseek>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_lseek_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_lseek_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200002e8 	.word	0x200002e8

080080ac <malloc>:
 80080ac:	4b02      	ldr	r3, [pc, #8]	; (80080b8 <malloc+0xc>)
 80080ae:	4601      	mov	r1, r0
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	f000 bd55 	b.w	8008b60 <_malloc_r>
 80080b6:	bf00      	nop
 80080b8:	2000000c 	.word	0x2000000c

080080bc <__ascii_mbtowc>:
 80080bc:	b082      	sub	sp, #8
 80080be:	b901      	cbnz	r1, 80080c2 <__ascii_mbtowc+0x6>
 80080c0:	a901      	add	r1, sp, #4
 80080c2:	b142      	cbz	r2, 80080d6 <__ascii_mbtowc+0x1a>
 80080c4:	b14b      	cbz	r3, 80080da <__ascii_mbtowc+0x1e>
 80080c6:	7813      	ldrb	r3, [r2, #0]
 80080c8:	600b      	str	r3, [r1, #0]
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	1e10      	subs	r0, r2, #0
 80080ce:	bf18      	it	ne
 80080d0:	2001      	movne	r0, #1
 80080d2:	b002      	add	sp, #8
 80080d4:	4770      	bx	lr
 80080d6:	4610      	mov	r0, r2
 80080d8:	e7fb      	b.n	80080d2 <__ascii_mbtowc+0x16>
 80080da:	f06f 0001 	mvn.w	r0, #1
 80080de:	e7f8      	b.n	80080d2 <__ascii_mbtowc+0x16>

080080e0 <memcpy>:
 80080e0:	440a      	add	r2, r1
 80080e2:	4291      	cmp	r1, r2
 80080e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080e8:	d100      	bne.n	80080ec <memcpy+0xc>
 80080ea:	4770      	bx	lr
 80080ec:	b510      	push	{r4, lr}
 80080ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080f6:	4291      	cmp	r1, r2
 80080f8:	d1f9      	bne.n	80080ee <memcpy+0xe>
 80080fa:	bd10      	pop	{r4, pc}

080080fc <_Balloc>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	b976      	cbnz	r6, 8008124 <_Balloc+0x28>
 8008106:	2010      	movs	r0, #16
 8008108:	f7ff ffd0 	bl	80080ac <malloc>
 800810c:	4602      	mov	r2, r0
 800810e:	6260      	str	r0, [r4, #36]	; 0x24
 8008110:	b920      	cbnz	r0, 800811c <_Balloc+0x20>
 8008112:	4b18      	ldr	r3, [pc, #96]	; (8008174 <_Balloc+0x78>)
 8008114:	4818      	ldr	r0, [pc, #96]	; (8008178 <_Balloc+0x7c>)
 8008116:	2166      	movs	r1, #102	; 0x66
 8008118:	f001 fb46 	bl	80097a8 <__assert_func>
 800811c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008120:	6006      	str	r6, [r0, #0]
 8008122:	60c6      	str	r6, [r0, #12]
 8008124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008126:	68f3      	ldr	r3, [r6, #12]
 8008128:	b183      	cbz	r3, 800814c <_Balloc+0x50>
 800812a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008132:	b9b8      	cbnz	r0, 8008164 <_Balloc+0x68>
 8008134:	2101      	movs	r1, #1
 8008136:	fa01 f605 	lsl.w	r6, r1, r5
 800813a:	1d72      	adds	r2, r6, #5
 800813c:	0092      	lsls	r2, r2, #2
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fc90 	bl	8008a64 <_calloc_r>
 8008144:	b160      	cbz	r0, 8008160 <_Balloc+0x64>
 8008146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800814a:	e00e      	b.n	800816a <_Balloc+0x6e>
 800814c:	2221      	movs	r2, #33	; 0x21
 800814e:	2104      	movs	r1, #4
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fc87 	bl	8008a64 <_calloc_r>
 8008156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008158:	60f0      	str	r0, [r6, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e4      	bne.n	800812a <_Balloc+0x2e>
 8008160:	2000      	movs	r0, #0
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	6802      	ldr	r2, [r0, #0]
 8008166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800816a:	2300      	movs	r3, #0
 800816c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008170:	e7f7      	b.n	8008162 <_Balloc+0x66>
 8008172:	bf00      	nop
 8008174:	0800a606 	.word	0x0800a606
 8008178:	0800a704 	.word	0x0800a704

0800817c <_Bfree>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b976      	cbnz	r6, 80081a4 <_Bfree+0x28>
 8008186:	2010      	movs	r0, #16
 8008188:	f7ff ff90 	bl	80080ac <malloc>
 800818c:	4602      	mov	r2, r0
 800818e:	6268      	str	r0, [r5, #36]	; 0x24
 8008190:	b920      	cbnz	r0, 800819c <_Bfree+0x20>
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <_Bfree+0x3c>)
 8008194:	4809      	ldr	r0, [pc, #36]	; (80081bc <_Bfree+0x40>)
 8008196:	218a      	movs	r1, #138	; 0x8a
 8008198:	f001 fb06 	bl	80097a8 <__assert_func>
 800819c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081a0:	6006      	str	r6, [r0, #0]
 80081a2:	60c6      	str	r6, [r0, #12]
 80081a4:	b13c      	cbz	r4, 80081b6 <_Bfree+0x3a>
 80081a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081a8:	6862      	ldr	r2, [r4, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081b0:	6021      	str	r1, [r4, #0]
 80081b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	0800a606 	.word	0x0800a606
 80081bc:	0800a704 	.word	0x0800a704

080081c0 <__multadd>:
 80081c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	690d      	ldr	r5, [r1, #16]
 80081c6:	4607      	mov	r7, r0
 80081c8:	460c      	mov	r4, r1
 80081ca:	461e      	mov	r6, r3
 80081cc:	f101 0c14 	add.w	ip, r1, #20
 80081d0:	2000      	movs	r0, #0
 80081d2:	f8dc 3000 	ldr.w	r3, [ip]
 80081d6:	b299      	uxth	r1, r3
 80081d8:	fb02 6101 	mla	r1, r2, r1, r6
 80081dc:	0c1e      	lsrs	r6, r3, #16
 80081de:	0c0b      	lsrs	r3, r1, #16
 80081e0:	fb02 3306 	mla	r3, r2, r6, r3
 80081e4:	b289      	uxth	r1, r1
 80081e6:	3001      	adds	r0, #1
 80081e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081ec:	4285      	cmp	r5, r0
 80081ee:	f84c 1b04 	str.w	r1, [ip], #4
 80081f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081f6:	dcec      	bgt.n	80081d2 <__multadd+0x12>
 80081f8:	b30e      	cbz	r6, 800823e <__multadd+0x7e>
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	42ab      	cmp	r3, r5
 80081fe:	dc19      	bgt.n	8008234 <__multadd+0x74>
 8008200:	6861      	ldr	r1, [r4, #4]
 8008202:	4638      	mov	r0, r7
 8008204:	3101      	adds	r1, #1
 8008206:	f7ff ff79 	bl	80080fc <_Balloc>
 800820a:	4680      	mov	r8, r0
 800820c:	b928      	cbnz	r0, 800821a <__multadd+0x5a>
 800820e:	4602      	mov	r2, r0
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <__multadd+0x84>)
 8008212:	480d      	ldr	r0, [pc, #52]	; (8008248 <__multadd+0x88>)
 8008214:	21b5      	movs	r1, #181	; 0xb5
 8008216:	f001 fac7 	bl	80097a8 <__assert_func>
 800821a:	6922      	ldr	r2, [r4, #16]
 800821c:	3202      	adds	r2, #2
 800821e:	f104 010c 	add.w	r1, r4, #12
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	300c      	adds	r0, #12
 8008226:	f7ff ff5b 	bl	80080e0 <memcpy>
 800822a:	4621      	mov	r1, r4
 800822c:	4638      	mov	r0, r7
 800822e:	f7ff ffa5 	bl	800817c <_Bfree>
 8008232:	4644      	mov	r4, r8
 8008234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008238:	3501      	adds	r5, #1
 800823a:	615e      	str	r6, [r3, #20]
 800823c:	6125      	str	r5, [r4, #16]
 800823e:	4620      	mov	r0, r4
 8008240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008244:	0800a678 	.word	0x0800a678
 8008248:	0800a704 	.word	0x0800a704

0800824c <__s2b>:
 800824c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008250:	460c      	mov	r4, r1
 8008252:	4615      	mov	r5, r2
 8008254:	461f      	mov	r7, r3
 8008256:	2209      	movs	r2, #9
 8008258:	3308      	adds	r3, #8
 800825a:	4606      	mov	r6, r0
 800825c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008260:	2100      	movs	r1, #0
 8008262:	2201      	movs	r2, #1
 8008264:	429a      	cmp	r2, r3
 8008266:	db09      	blt.n	800827c <__s2b+0x30>
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff ff47 	bl	80080fc <_Balloc>
 800826e:	b940      	cbnz	r0, 8008282 <__s2b+0x36>
 8008270:	4602      	mov	r2, r0
 8008272:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <__s2b+0x8c>)
 8008274:	4819      	ldr	r0, [pc, #100]	; (80082dc <__s2b+0x90>)
 8008276:	21ce      	movs	r1, #206	; 0xce
 8008278:	f001 fa96 	bl	80097a8 <__assert_func>
 800827c:	0052      	lsls	r2, r2, #1
 800827e:	3101      	adds	r1, #1
 8008280:	e7f0      	b.n	8008264 <__s2b+0x18>
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	6143      	str	r3, [r0, #20]
 8008286:	2d09      	cmp	r5, #9
 8008288:	f04f 0301 	mov.w	r3, #1
 800828c:	6103      	str	r3, [r0, #16]
 800828e:	dd16      	ble.n	80082be <__s2b+0x72>
 8008290:	f104 0909 	add.w	r9, r4, #9
 8008294:	46c8      	mov	r8, r9
 8008296:	442c      	add	r4, r5
 8008298:	f818 3b01 	ldrb.w	r3, [r8], #1
 800829c:	4601      	mov	r1, r0
 800829e:	3b30      	subs	r3, #48	; 0x30
 80082a0:	220a      	movs	r2, #10
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff ff8c 	bl	80081c0 <__multadd>
 80082a8:	45a0      	cmp	r8, r4
 80082aa:	d1f5      	bne.n	8008298 <__s2b+0x4c>
 80082ac:	f1a5 0408 	sub.w	r4, r5, #8
 80082b0:	444c      	add	r4, r9
 80082b2:	1b2d      	subs	r5, r5, r4
 80082b4:	1963      	adds	r3, r4, r5
 80082b6:	42bb      	cmp	r3, r7
 80082b8:	db04      	blt.n	80082c4 <__s2b+0x78>
 80082ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082be:	340a      	adds	r4, #10
 80082c0:	2509      	movs	r5, #9
 80082c2:	e7f6      	b.n	80082b2 <__s2b+0x66>
 80082c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082c8:	4601      	mov	r1, r0
 80082ca:	3b30      	subs	r3, #48	; 0x30
 80082cc:	220a      	movs	r2, #10
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ff76 	bl	80081c0 <__multadd>
 80082d4:	e7ee      	b.n	80082b4 <__s2b+0x68>
 80082d6:	bf00      	nop
 80082d8:	0800a678 	.word	0x0800a678
 80082dc:	0800a704 	.word	0x0800a704

080082e0 <__hi0bits>:
 80082e0:	0c02      	lsrs	r2, r0, #16
 80082e2:	0412      	lsls	r2, r2, #16
 80082e4:	4603      	mov	r3, r0
 80082e6:	b9ca      	cbnz	r2, 800831c <__hi0bits+0x3c>
 80082e8:	0403      	lsls	r3, r0, #16
 80082ea:	2010      	movs	r0, #16
 80082ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80082f0:	bf04      	itt	eq
 80082f2:	021b      	lsleq	r3, r3, #8
 80082f4:	3008      	addeq	r0, #8
 80082f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082fa:	bf04      	itt	eq
 80082fc:	011b      	lsleq	r3, r3, #4
 80082fe:	3004      	addeq	r0, #4
 8008300:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008304:	bf04      	itt	eq
 8008306:	009b      	lsleq	r3, r3, #2
 8008308:	3002      	addeq	r0, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	db05      	blt.n	800831a <__hi0bits+0x3a>
 800830e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008312:	f100 0001 	add.w	r0, r0, #1
 8008316:	bf08      	it	eq
 8008318:	2020      	moveq	r0, #32
 800831a:	4770      	bx	lr
 800831c:	2000      	movs	r0, #0
 800831e:	e7e5      	b.n	80082ec <__hi0bits+0xc>

08008320 <__lo0bits>:
 8008320:	6803      	ldr	r3, [r0, #0]
 8008322:	4602      	mov	r2, r0
 8008324:	f013 0007 	ands.w	r0, r3, #7
 8008328:	d00b      	beq.n	8008342 <__lo0bits+0x22>
 800832a:	07d9      	lsls	r1, r3, #31
 800832c:	d421      	bmi.n	8008372 <__lo0bits+0x52>
 800832e:	0798      	lsls	r0, r3, #30
 8008330:	bf49      	itett	mi
 8008332:	085b      	lsrmi	r3, r3, #1
 8008334:	089b      	lsrpl	r3, r3, #2
 8008336:	2001      	movmi	r0, #1
 8008338:	6013      	strmi	r3, [r2, #0]
 800833a:	bf5c      	itt	pl
 800833c:	6013      	strpl	r3, [r2, #0]
 800833e:	2002      	movpl	r0, #2
 8008340:	4770      	bx	lr
 8008342:	b299      	uxth	r1, r3
 8008344:	b909      	cbnz	r1, 800834a <__lo0bits+0x2a>
 8008346:	0c1b      	lsrs	r3, r3, #16
 8008348:	2010      	movs	r0, #16
 800834a:	b2d9      	uxtb	r1, r3
 800834c:	b909      	cbnz	r1, 8008352 <__lo0bits+0x32>
 800834e:	3008      	adds	r0, #8
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	0719      	lsls	r1, r3, #28
 8008354:	bf04      	itt	eq
 8008356:	091b      	lsreq	r3, r3, #4
 8008358:	3004      	addeq	r0, #4
 800835a:	0799      	lsls	r1, r3, #30
 800835c:	bf04      	itt	eq
 800835e:	089b      	lsreq	r3, r3, #2
 8008360:	3002      	addeq	r0, #2
 8008362:	07d9      	lsls	r1, r3, #31
 8008364:	d403      	bmi.n	800836e <__lo0bits+0x4e>
 8008366:	085b      	lsrs	r3, r3, #1
 8008368:	f100 0001 	add.w	r0, r0, #1
 800836c:	d003      	beq.n	8008376 <__lo0bits+0x56>
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4770      	bx	lr
 8008372:	2000      	movs	r0, #0
 8008374:	4770      	bx	lr
 8008376:	2020      	movs	r0, #32
 8008378:	4770      	bx	lr
	...

0800837c <__i2b>:
 800837c:	b510      	push	{r4, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	2101      	movs	r1, #1
 8008382:	f7ff febb 	bl	80080fc <_Balloc>
 8008386:	4602      	mov	r2, r0
 8008388:	b928      	cbnz	r0, 8008396 <__i2b+0x1a>
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <__i2b+0x24>)
 800838c:	4805      	ldr	r0, [pc, #20]	; (80083a4 <__i2b+0x28>)
 800838e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008392:	f001 fa09 	bl	80097a8 <__assert_func>
 8008396:	2301      	movs	r3, #1
 8008398:	6144      	str	r4, [r0, #20]
 800839a:	6103      	str	r3, [r0, #16]
 800839c:	bd10      	pop	{r4, pc}
 800839e:	bf00      	nop
 80083a0:	0800a678 	.word	0x0800a678
 80083a4:	0800a704 	.word	0x0800a704

080083a8 <__multiply>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4691      	mov	r9, r2
 80083ae:	690a      	ldr	r2, [r1, #16]
 80083b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bfb8      	it	lt
 80083b8:	460b      	movlt	r3, r1
 80083ba:	460c      	mov	r4, r1
 80083bc:	bfbc      	itt	lt
 80083be:	464c      	movlt	r4, r9
 80083c0:	4699      	movlt	r9, r3
 80083c2:	6927      	ldr	r7, [r4, #16]
 80083c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	6861      	ldr	r1, [r4, #4]
 80083cc:	eb07 060a 	add.w	r6, r7, sl
 80083d0:	42b3      	cmp	r3, r6
 80083d2:	b085      	sub	sp, #20
 80083d4:	bfb8      	it	lt
 80083d6:	3101      	addlt	r1, #1
 80083d8:	f7ff fe90 	bl	80080fc <_Balloc>
 80083dc:	b930      	cbnz	r0, 80083ec <__multiply+0x44>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b43      	ldr	r3, [pc, #268]	; (80084f0 <__multiply+0x148>)
 80083e2:	4844      	ldr	r0, [pc, #272]	; (80084f4 <__multiply+0x14c>)
 80083e4:	f240 115d 	movw	r1, #349	; 0x15d
 80083e8:	f001 f9de 	bl	80097a8 <__assert_func>
 80083ec:	f100 0514 	add.w	r5, r0, #20
 80083f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083f4:	462b      	mov	r3, r5
 80083f6:	2200      	movs	r2, #0
 80083f8:	4543      	cmp	r3, r8
 80083fa:	d321      	bcc.n	8008440 <__multiply+0x98>
 80083fc:	f104 0314 	add.w	r3, r4, #20
 8008400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008404:	f109 0314 	add.w	r3, r9, #20
 8008408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800840c:	9202      	str	r2, [sp, #8]
 800840e:	1b3a      	subs	r2, r7, r4
 8008410:	3a15      	subs	r2, #21
 8008412:	f022 0203 	bic.w	r2, r2, #3
 8008416:	3204      	adds	r2, #4
 8008418:	f104 0115 	add.w	r1, r4, #21
 800841c:	428f      	cmp	r7, r1
 800841e:	bf38      	it	cc
 8008420:	2204      	movcc	r2, #4
 8008422:	9201      	str	r2, [sp, #4]
 8008424:	9a02      	ldr	r2, [sp, #8]
 8008426:	9303      	str	r3, [sp, #12]
 8008428:	429a      	cmp	r2, r3
 800842a:	d80c      	bhi.n	8008446 <__multiply+0x9e>
 800842c:	2e00      	cmp	r6, #0
 800842e:	dd03      	ble.n	8008438 <__multiply+0x90>
 8008430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008434:	2b00      	cmp	r3, #0
 8008436:	d059      	beq.n	80084ec <__multiply+0x144>
 8008438:	6106      	str	r6, [r0, #16]
 800843a:	b005      	add	sp, #20
 800843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008440:	f843 2b04 	str.w	r2, [r3], #4
 8008444:	e7d8      	b.n	80083f8 <__multiply+0x50>
 8008446:	f8b3 a000 	ldrh.w	sl, [r3]
 800844a:	f1ba 0f00 	cmp.w	sl, #0
 800844e:	d023      	beq.n	8008498 <__multiply+0xf0>
 8008450:	f104 0e14 	add.w	lr, r4, #20
 8008454:	46a9      	mov	r9, r5
 8008456:	f04f 0c00 	mov.w	ip, #0
 800845a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800845e:	f8d9 1000 	ldr.w	r1, [r9]
 8008462:	fa1f fb82 	uxth.w	fp, r2
 8008466:	b289      	uxth	r1, r1
 8008468:	fb0a 110b 	mla	r1, sl, fp, r1
 800846c:	4461      	add	r1, ip
 800846e:	f8d9 c000 	ldr.w	ip, [r9]
 8008472:	0c12      	lsrs	r2, r2, #16
 8008474:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008478:	fb0a c202 	mla	r2, sl, r2, ip
 800847c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008480:	b289      	uxth	r1, r1
 8008482:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008486:	4577      	cmp	r7, lr
 8008488:	f849 1b04 	str.w	r1, [r9], #4
 800848c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008490:	d8e3      	bhi.n	800845a <__multiply+0xb2>
 8008492:	9a01      	ldr	r2, [sp, #4]
 8008494:	f845 c002 	str.w	ip, [r5, r2]
 8008498:	9a03      	ldr	r2, [sp, #12]
 800849a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800849e:	3304      	adds	r3, #4
 80084a0:	f1b9 0f00 	cmp.w	r9, #0
 80084a4:	d020      	beq.n	80084e8 <__multiply+0x140>
 80084a6:	6829      	ldr	r1, [r5, #0]
 80084a8:	f104 0c14 	add.w	ip, r4, #20
 80084ac:	46ae      	mov	lr, r5
 80084ae:	f04f 0a00 	mov.w	sl, #0
 80084b2:	f8bc b000 	ldrh.w	fp, [ip]
 80084b6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084ba:	fb09 220b 	mla	r2, r9, fp, r2
 80084be:	4492      	add	sl, r2
 80084c0:	b289      	uxth	r1, r1
 80084c2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084c6:	f84e 1b04 	str.w	r1, [lr], #4
 80084ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084ce:	f8be 1000 	ldrh.w	r1, [lr]
 80084d2:	0c12      	lsrs	r2, r2, #16
 80084d4:	fb09 1102 	mla	r1, r9, r2, r1
 80084d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084dc:	4567      	cmp	r7, ip
 80084de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084e2:	d8e6      	bhi.n	80084b2 <__multiply+0x10a>
 80084e4:	9a01      	ldr	r2, [sp, #4]
 80084e6:	50a9      	str	r1, [r5, r2]
 80084e8:	3504      	adds	r5, #4
 80084ea:	e79b      	b.n	8008424 <__multiply+0x7c>
 80084ec:	3e01      	subs	r6, #1
 80084ee:	e79d      	b.n	800842c <__multiply+0x84>
 80084f0:	0800a678 	.word	0x0800a678
 80084f4:	0800a704 	.word	0x0800a704

080084f8 <__pow5mult>:
 80084f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084fc:	4615      	mov	r5, r2
 80084fe:	f012 0203 	ands.w	r2, r2, #3
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	d007      	beq.n	8008518 <__pow5mult+0x20>
 8008508:	4c25      	ldr	r4, [pc, #148]	; (80085a0 <__pow5mult+0xa8>)
 800850a:	3a01      	subs	r2, #1
 800850c:	2300      	movs	r3, #0
 800850e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008512:	f7ff fe55 	bl	80081c0 <__multadd>
 8008516:	4607      	mov	r7, r0
 8008518:	10ad      	asrs	r5, r5, #2
 800851a:	d03d      	beq.n	8008598 <__pow5mult+0xa0>
 800851c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800851e:	b97c      	cbnz	r4, 8008540 <__pow5mult+0x48>
 8008520:	2010      	movs	r0, #16
 8008522:	f7ff fdc3 	bl	80080ac <malloc>
 8008526:	4602      	mov	r2, r0
 8008528:	6270      	str	r0, [r6, #36]	; 0x24
 800852a:	b928      	cbnz	r0, 8008538 <__pow5mult+0x40>
 800852c:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <__pow5mult+0xac>)
 800852e:	481e      	ldr	r0, [pc, #120]	; (80085a8 <__pow5mult+0xb0>)
 8008530:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008534:	f001 f938 	bl	80097a8 <__assert_func>
 8008538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800853c:	6004      	str	r4, [r0, #0]
 800853e:	60c4      	str	r4, [r0, #12]
 8008540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008548:	b94c      	cbnz	r4, 800855e <__pow5mult+0x66>
 800854a:	f240 2171 	movw	r1, #625	; 0x271
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff ff14 	bl	800837c <__i2b>
 8008554:	2300      	movs	r3, #0
 8008556:	f8c8 0008 	str.w	r0, [r8, #8]
 800855a:	4604      	mov	r4, r0
 800855c:	6003      	str	r3, [r0, #0]
 800855e:	f04f 0900 	mov.w	r9, #0
 8008562:	07eb      	lsls	r3, r5, #31
 8008564:	d50a      	bpl.n	800857c <__pow5mult+0x84>
 8008566:	4639      	mov	r1, r7
 8008568:	4622      	mov	r2, r4
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ff1c 	bl	80083a8 <__multiply>
 8008570:	4639      	mov	r1, r7
 8008572:	4680      	mov	r8, r0
 8008574:	4630      	mov	r0, r6
 8008576:	f7ff fe01 	bl	800817c <_Bfree>
 800857a:	4647      	mov	r7, r8
 800857c:	106d      	asrs	r5, r5, #1
 800857e:	d00b      	beq.n	8008598 <__pow5mult+0xa0>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	b938      	cbnz	r0, 8008594 <__pow5mult+0x9c>
 8008584:	4622      	mov	r2, r4
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff ff0d 	bl	80083a8 <__multiply>
 800858e:	6020      	str	r0, [r4, #0]
 8008590:	f8c0 9000 	str.w	r9, [r0]
 8008594:	4604      	mov	r4, r0
 8008596:	e7e4      	b.n	8008562 <__pow5mult+0x6a>
 8008598:	4638      	mov	r0, r7
 800859a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859e:	bf00      	nop
 80085a0:	0800a850 	.word	0x0800a850
 80085a4:	0800a606 	.word	0x0800a606
 80085a8:	0800a704 	.word	0x0800a704

080085ac <__lshift>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	460c      	mov	r4, r1
 80085b2:	6849      	ldr	r1, [r1, #4]
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	4607      	mov	r7, r0
 80085be:	4691      	mov	r9, r2
 80085c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085c4:	f108 0601 	add.w	r6, r8, #1
 80085c8:	42b3      	cmp	r3, r6
 80085ca:	db0b      	blt.n	80085e4 <__lshift+0x38>
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7ff fd95 	bl	80080fc <_Balloc>
 80085d2:	4605      	mov	r5, r0
 80085d4:	b948      	cbnz	r0, 80085ea <__lshift+0x3e>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <__lshift+0xd8>)
 80085da:	482b      	ldr	r0, [pc, #172]	; (8008688 <__lshift+0xdc>)
 80085dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085e0:	f001 f8e2 	bl	80097a8 <__assert_func>
 80085e4:	3101      	adds	r1, #1
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	e7ee      	b.n	80085c8 <__lshift+0x1c>
 80085ea:	2300      	movs	r3, #0
 80085ec:	f100 0114 	add.w	r1, r0, #20
 80085f0:	f100 0210 	add.w	r2, r0, #16
 80085f4:	4618      	mov	r0, r3
 80085f6:	4553      	cmp	r3, sl
 80085f8:	db37      	blt.n	800866a <__lshift+0xbe>
 80085fa:	6920      	ldr	r0, [r4, #16]
 80085fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008600:	f104 0314 	add.w	r3, r4, #20
 8008604:	f019 091f 	ands.w	r9, r9, #31
 8008608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800860c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008610:	d02f      	beq.n	8008672 <__lshift+0xc6>
 8008612:	f1c9 0e20 	rsb	lr, r9, #32
 8008616:	468a      	mov	sl, r1
 8008618:	f04f 0c00 	mov.w	ip, #0
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	fa02 f209 	lsl.w	r2, r2, r9
 8008622:	ea42 020c 	orr.w	r2, r2, ip
 8008626:	f84a 2b04 	str.w	r2, [sl], #4
 800862a:	f853 2b04 	ldr.w	r2, [r3], #4
 800862e:	4298      	cmp	r0, r3
 8008630:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008634:	d8f2      	bhi.n	800861c <__lshift+0x70>
 8008636:	1b03      	subs	r3, r0, r4
 8008638:	3b15      	subs	r3, #21
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	3304      	adds	r3, #4
 8008640:	f104 0215 	add.w	r2, r4, #21
 8008644:	4290      	cmp	r0, r2
 8008646:	bf38      	it	cc
 8008648:	2304      	movcc	r3, #4
 800864a:	f841 c003 	str.w	ip, [r1, r3]
 800864e:	f1bc 0f00 	cmp.w	ip, #0
 8008652:	d001      	beq.n	8008658 <__lshift+0xac>
 8008654:	f108 0602 	add.w	r6, r8, #2
 8008658:	3e01      	subs	r6, #1
 800865a:	4638      	mov	r0, r7
 800865c:	612e      	str	r6, [r5, #16]
 800865e:	4621      	mov	r1, r4
 8008660:	f7ff fd8c 	bl	800817c <_Bfree>
 8008664:	4628      	mov	r0, r5
 8008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866a:	f842 0f04 	str.w	r0, [r2, #4]!
 800866e:	3301      	adds	r3, #1
 8008670:	e7c1      	b.n	80085f6 <__lshift+0x4a>
 8008672:	3904      	subs	r1, #4
 8008674:	f853 2b04 	ldr.w	r2, [r3], #4
 8008678:	f841 2f04 	str.w	r2, [r1, #4]!
 800867c:	4298      	cmp	r0, r3
 800867e:	d8f9      	bhi.n	8008674 <__lshift+0xc8>
 8008680:	e7ea      	b.n	8008658 <__lshift+0xac>
 8008682:	bf00      	nop
 8008684:	0800a678 	.word	0x0800a678
 8008688:	0800a704 	.word	0x0800a704

0800868c <__mcmp>:
 800868c:	690a      	ldr	r2, [r1, #16]
 800868e:	4603      	mov	r3, r0
 8008690:	6900      	ldr	r0, [r0, #16]
 8008692:	1a80      	subs	r0, r0, r2
 8008694:	b530      	push	{r4, r5, lr}
 8008696:	d10d      	bne.n	80086b4 <__mcmp+0x28>
 8008698:	3314      	adds	r3, #20
 800869a:	3114      	adds	r1, #20
 800869c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086ac:	4295      	cmp	r5, r2
 80086ae:	d002      	beq.n	80086b6 <__mcmp+0x2a>
 80086b0:	d304      	bcc.n	80086bc <__mcmp+0x30>
 80086b2:	2001      	movs	r0, #1
 80086b4:	bd30      	pop	{r4, r5, pc}
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	d3f4      	bcc.n	80086a4 <__mcmp+0x18>
 80086ba:	e7fb      	b.n	80086b4 <__mcmp+0x28>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c0:	e7f8      	b.n	80086b4 <__mcmp+0x28>
	...

080086c4 <__mdiff>:
 80086c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	460d      	mov	r5, r1
 80086ca:	4607      	mov	r7, r0
 80086cc:	4611      	mov	r1, r2
 80086ce:	4628      	mov	r0, r5
 80086d0:	4614      	mov	r4, r2
 80086d2:	f7ff ffdb 	bl	800868c <__mcmp>
 80086d6:	1e06      	subs	r6, r0, #0
 80086d8:	d111      	bne.n	80086fe <__mdiff+0x3a>
 80086da:	4631      	mov	r1, r6
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff fd0d 	bl	80080fc <_Balloc>
 80086e2:	4602      	mov	r2, r0
 80086e4:	b928      	cbnz	r0, 80086f2 <__mdiff+0x2e>
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <__mdiff+0x108>)
 80086e8:	f240 2132 	movw	r1, #562	; 0x232
 80086ec:	4838      	ldr	r0, [pc, #224]	; (80087d0 <__mdiff+0x10c>)
 80086ee:	f001 f85b 	bl	80097a8 <__assert_func>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086f8:	4610      	mov	r0, r2
 80086fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fe:	bfa4      	itt	ge
 8008700:	4623      	movge	r3, r4
 8008702:	462c      	movge	r4, r5
 8008704:	4638      	mov	r0, r7
 8008706:	6861      	ldr	r1, [r4, #4]
 8008708:	bfa6      	itte	ge
 800870a:	461d      	movge	r5, r3
 800870c:	2600      	movge	r6, #0
 800870e:	2601      	movlt	r6, #1
 8008710:	f7ff fcf4 	bl	80080fc <_Balloc>
 8008714:	4602      	mov	r2, r0
 8008716:	b918      	cbnz	r0, 8008720 <__mdiff+0x5c>
 8008718:	4b2c      	ldr	r3, [pc, #176]	; (80087cc <__mdiff+0x108>)
 800871a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800871e:	e7e5      	b.n	80086ec <__mdiff+0x28>
 8008720:	6927      	ldr	r7, [r4, #16]
 8008722:	60c6      	str	r6, [r0, #12]
 8008724:	692e      	ldr	r6, [r5, #16]
 8008726:	f104 0014 	add.w	r0, r4, #20
 800872a:	f105 0914 	add.w	r9, r5, #20
 800872e:	f102 0e14 	add.w	lr, r2, #20
 8008732:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8008736:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800873a:	3410      	adds	r4, #16
 800873c:	46f2      	mov	sl, lr
 800873e:	2100      	movs	r1, #0
 8008740:	f859 3b04 	ldr.w	r3, [r9], #4
 8008744:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008748:	fa1f f883 	uxth.w	r8, r3
 800874c:	fa11 f18b 	uxtah	r1, r1, fp
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	eba1 0808 	sub.w	r8, r1, r8
 8008756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800875a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800875e:	fa1f f888 	uxth.w	r8, r8
 8008762:	1419      	asrs	r1, r3, #16
 8008764:	454e      	cmp	r6, r9
 8008766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800876a:	f84a 3b04 	str.w	r3, [sl], #4
 800876e:	d8e7      	bhi.n	8008740 <__mdiff+0x7c>
 8008770:	1b73      	subs	r3, r6, r5
 8008772:	3b15      	subs	r3, #21
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	3304      	adds	r3, #4
 800877a:	3515      	adds	r5, #21
 800877c:	42ae      	cmp	r6, r5
 800877e:	bf38      	it	cc
 8008780:	2304      	movcc	r3, #4
 8008782:	4418      	add	r0, r3
 8008784:	4473      	add	r3, lr
 8008786:	469e      	mov	lr, r3
 8008788:	4606      	mov	r6, r0
 800878a:	4566      	cmp	r6, ip
 800878c:	d30e      	bcc.n	80087ac <__mdiff+0xe8>
 800878e:	f10c 0103 	add.w	r1, ip, #3
 8008792:	1a09      	subs	r1, r1, r0
 8008794:	f021 0103 	bic.w	r1, r1, #3
 8008798:	3803      	subs	r0, #3
 800879a:	4584      	cmp	ip, r0
 800879c:	bf38      	it	cc
 800879e:	2100      	movcc	r1, #0
 80087a0:	4419      	add	r1, r3
 80087a2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80087a6:	b17b      	cbz	r3, 80087c8 <__mdiff+0x104>
 80087a8:	6117      	str	r7, [r2, #16]
 80087aa:	e7a5      	b.n	80086f8 <__mdiff+0x34>
 80087ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80087b0:	fa11 f488 	uxtah	r4, r1, r8
 80087b4:	1425      	asrs	r5, r4, #16
 80087b6:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80087ba:	b2a4      	uxth	r4, r4
 80087bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80087c0:	f84e 4b04 	str.w	r4, [lr], #4
 80087c4:	1429      	asrs	r1, r5, #16
 80087c6:	e7e0      	b.n	800878a <__mdiff+0xc6>
 80087c8:	3f01      	subs	r7, #1
 80087ca:	e7ea      	b.n	80087a2 <__mdiff+0xde>
 80087cc:	0800a678 	.word	0x0800a678
 80087d0:	0800a704 	.word	0x0800a704

080087d4 <__ulp>:
 80087d4:	4b11      	ldr	r3, [pc, #68]	; (800881c <__ulp+0x48>)
 80087d6:	400b      	ands	r3, r1
 80087d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd02      	ble.n	80087e6 <__ulp+0x12>
 80087e0:	2000      	movs	r0, #0
 80087e2:	4619      	mov	r1, r3
 80087e4:	4770      	bx	lr
 80087e6:	425b      	negs	r3, r3
 80087e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087ec:	ea4f 5223 	mov.w	r2, r3, asr #20
 80087f0:	f04f 0000 	mov.w	r0, #0
 80087f4:	f04f 0100 	mov.w	r1, #0
 80087f8:	da04      	bge.n	8008804 <__ulp+0x30>
 80087fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087fe:	fa43 f102 	asr.w	r1, r3, r2
 8008802:	4770      	bx	lr
 8008804:	f1a2 0314 	sub.w	r3, r2, #20
 8008808:	2b1e      	cmp	r3, #30
 800880a:	bfda      	itte	le
 800880c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008810:	fa22 f303 	lsrle.w	r3, r2, r3
 8008814:	2301      	movgt	r3, #1
 8008816:	4618      	mov	r0, r3
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	7ff00000 	.word	0x7ff00000

08008820 <__b2d>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	6907      	ldr	r7, [r0, #16]
 8008826:	f100 0914 	add.w	r9, r0, #20
 800882a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800882e:	f1a7 0804 	sub.w	r8, r7, #4
 8008832:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff fd52 	bl	80082e0 <__hi0bits>
 800883c:	f1c0 0320 	rsb	r3, r0, #32
 8008840:	280a      	cmp	r0, #10
 8008842:	600b      	str	r3, [r1, #0]
 8008844:	491f      	ldr	r1, [pc, #124]	; (80088c4 <__b2d+0xa4>)
 8008846:	dc17      	bgt.n	8008878 <__b2d+0x58>
 8008848:	f1c0 0c0b 	rsb	ip, r0, #11
 800884c:	45c1      	cmp	r9, r8
 800884e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008852:	bf38      	it	cc
 8008854:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008858:	ea43 0501 	orr.w	r5, r3, r1
 800885c:	bf28      	it	cs
 800885e:	2200      	movcs	r2, #0
 8008860:	f100 0315 	add.w	r3, r0, #21
 8008864:	fa06 f303 	lsl.w	r3, r6, r3
 8008868:	fa22 f20c 	lsr.w	r2, r2, ip
 800886c:	ea43 0402 	orr.w	r4, r3, r2
 8008870:	4620      	mov	r0, r4
 8008872:	4629      	mov	r1, r5
 8008874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008878:	45c1      	cmp	r9, r8
 800887a:	bf3a      	itte	cc
 800887c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008880:	f1a7 0808 	subcc.w	r8, r7, #8
 8008884:	2200      	movcs	r2, #0
 8008886:	f1b0 030b 	subs.w	r3, r0, #11
 800888a:	d016      	beq.n	80088ba <__b2d+0x9a>
 800888c:	f1c3 0720 	rsb	r7, r3, #32
 8008890:	fa22 f107 	lsr.w	r1, r2, r7
 8008894:	45c8      	cmp	r8, r9
 8008896:	fa06 f603 	lsl.w	r6, r6, r3
 800889a:	ea46 0601 	orr.w	r6, r6, r1
 800889e:	bf8c      	ite	hi
 80088a0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80088a4:	2100      	movls	r1, #0
 80088a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80088aa:	fa02 f003 	lsl.w	r0, r2, r3
 80088ae:	40f9      	lsrs	r1, r7
 80088b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088b4:	ea40 0401 	orr.w	r4, r0, r1
 80088b8:	e7da      	b.n	8008870 <__b2d+0x50>
 80088ba:	ea46 0501 	orr.w	r5, r6, r1
 80088be:	4614      	mov	r4, r2
 80088c0:	e7d6      	b.n	8008870 <__b2d+0x50>
 80088c2:	bf00      	nop
 80088c4:	3ff00000 	.word	0x3ff00000

080088c8 <__d2b>:
 80088c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088cc:	2101      	movs	r1, #1
 80088ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80088d2:	4690      	mov	r8, r2
 80088d4:	461d      	mov	r5, r3
 80088d6:	f7ff fc11 	bl	80080fc <_Balloc>
 80088da:	4604      	mov	r4, r0
 80088dc:	b930      	cbnz	r0, 80088ec <__d2b+0x24>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <__d2b+0xb0>)
 80088e2:	4826      	ldr	r0, [pc, #152]	; (800897c <__d2b+0xb4>)
 80088e4:	f240 310a 	movw	r1, #778	; 0x30a
 80088e8:	f000 ff5e 	bl	80097a8 <__assert_func>
 80088ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80088f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80088f4:	bb2d      	cbnz	r5, 8008942 <__d2b+0x7a>
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	f1b8 0300 	subs.w	r3, r8, #0
 80088fc:	d026      	beq.n	800894c <__d2b+0x84>
 80088fe:	4668      	mov	r0, sp
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	f7ff fd0d 	bl	8008320 <__lo0bits>
 8008906:	9900      	ldr	r1, [sp, #0]
 8008908:	b1f0      	cbz	r0, 8008948 <__d2b+0x80>
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	f1c0 0320 	rsb	r3, r0, #32
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	430b      	orrs	r3, r1
 8008916:	40c2      	lsrs	r2, r0
 8008918:	6163      	str	r3, [r4, #20]
 800891a:	9201      	str	r2, [sp, #4]
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	61a3      	str	r3, [r4, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bf14      	ite	ne
 8008924:	2102      	movne	r1, #2
 8008926:	2101      	moveq	r1, #1
 8008928:	6121      	str	r1, [r4, #16]
 800892a:	b1c5      	cbz	r5, 800895e <__d2b+0x96>
 800892c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008930:	4405      	add	r5, r0
 8008932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008936:	603d      	str	r5, [r7, #0]
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4620      	mov	r0, r4
 800893c:	b002      	add	sp, #8
 800893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008946:	e7d6      	b.n	80088f6 <__d2b+0x2e>
 8008948:	6161      	str	r1, [r4, #20]
 800894a:	e7e7      	b.n	800891c <__d2b+0x54>
 800894c:	a801      	add	r0, sp, #4
 800894e:	f7ff fce7 	bl	8008320 <__lo0bits>
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	6163      	str	r3, [r4, #20]
 8008956:	2101      	movs	r1, #1
 8008958:	6121      	str	r1, [r4, #16]
 800895a:	3020      	adds	r0, #32
 800895c:	e7e5      	b.n	800892a <__d2b+0x62>
 800895e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008962:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008966:	6038      	str	r0, [r7, #0]
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	f7ff fcb9 	bl	80082e0 <__hi0bits>
 800896e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008972:	6031      	str	r1, [r6, #0]
 8008974:	e7e1      	b.n	800893a <__d2b+0x72>
 8008976:	bf00      	nop
 8008978:	0800a678 	.word	0x0800a678
 800897c:	0800a704 	.word	0x0800a704

08008980 <__ratio>:
 8008980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4688      	mov	r8, r1
 8008986:	4669      	mov	r1, sp
 8008988:	4681      	mov	r9, r0
 800898a:	f7ff ff49 	bl	8008820 <__b2d>
 800898e:	460f      	mov	r7, r1
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	4640      	mov	r0, r8
 8008996:	a901      	add	r1, sp, #4
 8008998:	f7ff ff42 	bl	8008820 <__b2d>
 800899c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089a4:	eba3 0c02 	sub.w	ip, r3, r2
 80089a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfd5      	itete	le
 80089b6:	460a      	movle	r2, r1
 80089b8:	462a      	movgt	r2, r5
 80089ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089c2:	468b      	mov	fp, r1
 80089c4:	bfd8      	it	le
 80089c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80089ca:	465b      	mov	r3, fp
 80089cc:	4602      	mov	r2, r0
 80089ce:	4639      	mov	r1, r7
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7f7 ff13 	bl	80007fc <__aeabi_ddiv>
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089dc <__copybits>:
 80089dc:	3901      	subs	r1, #1
 80089de:	b570      	push	{r4, r5, r6, lr}
 80089e0:	1149      	asrs	r1, r1, #5
 80089e2:	6914      	ldr	r4, [r2, #16]
 80089e4:	3101      	adds	r1, #1
 80089e6:	f102 0314 	add.w	r3, r2, #20
 80089ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089f2:	1f05      	subs	r5, r0, #4
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d30c      	bcc.n	8008a12 <__copybits+0x36>
 80089f8:	1aa3      	subs	r3, r4, r2
 80089fa:	3b11      	subs	r3, #17
 80089fc:	f023 0303 	bic.w	r3, r3, #3
 8008a00:	3211      	adds	r2, #17
 8008a02:	42a2      	cmp	r2, r4
 8008a04:	bf88      	it	hi
 8008a06:	2300      	movhi	r3, #0
 8008a08:	4418      	add	r0, r3
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4288      	cmp	r0, r1
 8008a0e:	d305      	bcc.n	8008a1c <__copybits+0x40>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a16:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a1a:	e7eb      	b.n	80089f4 <__copybits+0x18>
 8008a1c:	f840 3b04 	str.w	r3, [r0], #4
 8008a20:	e7f4      	b.n	8008a0c <__copybits+0x30>

08008a22 <__any_on>:
 8008a22:	f100 0214 	add.w	r2, r0, #20
 8008a26:	6900      	ldr	r0, [r0, #16]
 8008a28:	114b      	asrs	r3, r1, #5
 8008a2a:	4298      	cmp	r0, r3
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	db11      	blt.n	8008a54 <__any_on+0x32>
 8008a30:	dd0a      	ble.n	8008a48 <__any_on+0x26>
 8008a32:	f011 011f 	ands.w	r1, r1, #31
 8008a36:	d007      	beq.n	8008a48 <__any_on+0x26>
 8008a38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a3c:	fa24 f001 	lsr.w	r0, r4, r1
 8008a40:	fa00 f101 	lsl.w	r1, r0, r1
 8008a44:	428c      	cmp	r4, r1
 8008a46:	d10b      	bne.n	8008a60 <__any_on+0x3e>
 8008a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d803      	bhi.n	8008a58 <__any_on+0x36>
 8008a50:	2000      	movs	r0, #0
 8008a52:	bd10      	pop	{r4, pc}
 8008a54:	4603      	mov	r3, r0
 8008a56:	e7f7      	b.n	8008a48 <__any_on+0x26>
 8008a58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	d0f5      	beq.n	8008a4c <__any_on+0x2a>
 8008a60:	2001      	movs	r0, #1
 8008a62:	e7f6      	b.n	8008a52 <__any_on+0x30>

08008a64 <_calloc_r>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	fba1 5402 	umull	r5, r4, r1, r2
 8008a6a:	b934      	cbnz	r4, 8008a7a <_calloc_r+0x16>
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f000 f877 	bl	8008b60 <_malloc_r>
 8008a72:	4606      	mov	r6, r0
 8008a74:	b928      	cbnz	r0, 8008a82 <_calloc_r+0x1e>
 8008a76:	4630      	mov	r0, r6
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	220c      	movs	r2, #12
 8008a7c:	6002      	str	r2, [r0, #0]
 8008a7e:	2600      	movs	r6, #0
 8008a80:	e7f9      	b.n	8008a76 <_calloc_r+0x12>
 8008a82:	462a      	mov	r2, r5
 8008a84:	4621      	mov	r1, r4
 8008a86:	f7fc fb4b 	bl	8005120 <memset>
 8008a8a:	e7f4      	b.n	8008a76 <_calloc_r+0x12>

08008a8c <_free_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4605      	mov	r5, r0
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d041      	beq.n	8008b18 <_free_r+0x8c>
 8008a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a98:	1f0c      	subs	r4, r1, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bfb8      	it	lt
 8008a9e:	18e4      	addlt	r4, r4, r3
 8008aa0:	f001 f882 	bl	8009ba8 <__malloc_lock>
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <_free_r+0x90>)
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	b933      	cbnz	r3, 8008ab8 <_free_r+0x2c>
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	6014      	str	r4, [r2, #0]
 8008aae:	4628      	mov	r0, r5
 8008ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ab4:	f001 b87e 	b.w	8009bb4 <__malloc_unlock>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d908      	bls.n	8008ace <_free_r+0x42>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	1821      	adds	r1, r4, r0
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf01      	itttt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	1809      	addeq	r1, r1, r0
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	e7ed      	b.n	8008aaa <_free_r+0x1e>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	b10b      	cbz	r3, 8008ad8 <_free_r+0x4c>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d9fa      	bls.n	8008ace <_free_r+0x42>
 8008ad8:	6811      	ldr	r1, [r2, #0]
 8008ada:	1850      	adds	r0, r2, r1
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d10b      	bne.n	8008af8 <_free_r+0x6c>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	1850      	adds	r0, r2, r1
 8008ae6:	4283      	cmp	r3, r0
 8008ae8:	6011      	str	r1, [r2, #0]
 8008aea:	d1e0      	bne.n	8008aae <_free_r+0x22>
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	6053      	str	r3, [r2, #4]
 8008af2:	4401      	add	r1, r0
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	e7da      	b.n	8008aae <_free_r+0x22>
 8008af8:	d902      	bls.n	8008b00 <_free_r+0x74>
 8008afa:	230c      	movs	r3, #12
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	e7d6      	b.n	8008aae <_free_r+0x22>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	1821      	adds	r1, r4, r0
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf04      	itt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	bf04      	itt	eq
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	6054      	str	r4, [r2, #4]
 8008b16:	e7ca      	b.n	8008aae <_free_r+0x22>
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200002e0 	.word	0x200002e0

08008b20 <sbrk_aligned>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	4e0e      	ldr	r6, [pc, #56]	; (8008b5c <sbrk_aligned+0x3c>)
 8008b24:	460c      	mov	r4, r1
 8008b26:	6831      	ldr	r1, [r6, #0]
 8008b28:	4605      	mov	r5, r0
 8008b2a:	b911      	cbnz	r1, 8008b32 <sbrk_aligned+0x12>
 8008b2c:	f000 fd24 	bl	8009578 <_sbrk_r>
 8008b30:	6030      	str	r0, [r6, #0]
 8008b32:	4621      	mov	r1, r4
 8008b34:	4628      	mov	r0, r5
 8008b36:	f000 fd1f 	bl	8009578 <_sbrk_r>
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d00a      	beq.n	8008b54 <sbrk_aligned+0x34>
 8008b3e:	1cc4      	adds	r4, r0, #3
 8008b40:	f024 0403 	bic.w	r4, r4, #3
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d007      	beq.n	8008b58 <sbrk_aligned+0x38>
 8008b48:	1a21      	subs	r1, r4, r0
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 fd14 	bl	8009578 <_sbrk_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d101      	bne.n	8008b58 <sbrk_aligned+0x38>
 8008b54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b58:	4620      	mov	r0, r4
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	200002e4 	.word	0x200002e4

08008b60 <_malloc_r>:
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	1ccd      	adds	r5, r1, #3
 8008b66:	f025 0503 	bic.w	r5, r5, #3
 8008b6a:	3508      	adds	r5, #8
 8008b6c:	2d0c      	cmp	r5, #12
 8008b6e:	bf38      	it	cc
 8008b70:	250c      	movcc	r5, #12
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	4607      	mov	r7, r0
 8008b76:	db01      	blt.n	8008b7c <_malloc_r+0x1c>
 8008b78:	42a9      	cmp	r1, r5
 8008b7a:	d905      	bls.n	8008b88 <_malloc_r+0x28>
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	2600      	movs	r6, #0
 8008b82:	4630      	mov	r0, r6
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	4e2e      	ldr	r6, [pc, #184]	; (8008c44 <_malloc_r+0xe4>)
 8008b8a:	f001 f80d 	bl	8009ba8 <__malloc_lock>
 8008b8e:	6833      	ldr	r3, [r6, #0]
 8008b90:	461c      	mov	r4, r3
 8008b92:	bb34      	cbnz	r4, 8008be2 <_malloc_r+0x82>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	f7ff ffc2 	bl	8008b20 <sbrk_aligned>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	d14d      	bne.n	8008c3e <_malloc_r+0xde>
 8008ba2:	6834      	ldr	r4, [r6, #0]
 8008ba4:	4626      	mov	r6, r4
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	d140      	bne.n	8008c2c <_malloc_r+0xcc>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4631      	mov	r1, r6
 8008bae:	4638      	mov	r0, r7
 8008bb0:	eb04 0803 	add.w	r8, r4, r3
 8008bb4:	f000 fce0 	bl	8009578 <_sbrk_r>
 8008bb8:	4580      	cmp	r8, r0
 8008bba:	d13a      	bne.n	8008c32 <_malloc_r+0xd2>
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	3503      	adds	r5, #3
 8008bc0:	1a6d      	subs	r5, r5, r1
 8008bc2:	f025 0503 	bic.w	r5, r5, #3
 8008bc6:	3508      	adds	r5, #8
 8008bc8:	2d0c      	cmp	r5, #12
 8008bca:	bf38      	it	cc
 8008bcc:	250c      	movcc	r5, #12
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7ff ffa5 	bl	8008b20 <sbrk_aligned>
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d02b      	beq.n	8008c32 <_malloc_r+0xd2>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	442b      	add	r3, r5
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	e00e      	b.n	8008c00 <_malloc_r+0xa0>
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	1b52      	subs	r2, r2, r5
 8008be6:	d41e      	bmi.n	8008c26 <_malloc_r+0xc6>
 8008be8:	2a0b      	cmp	r2, #11
 8008bea:	d916      	bls.n	8008c1a <_malloc_r+0xba>
 8008bec:	1961      	adds	r1, r4, r5
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6025      	str	r5, [r4, #0]
 8008bf2:	bf18      	it	ne
 8008bf4:	6059      	strne	r1, [r3, #4]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	bf08      	it	eq
 8008bfa:	6031      	streq	r1, [r6, #0]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f104 060b 	add.w	r6, r4, #11
 8008c06:	f000 ffd5 	bl	8009bb4 <__malloc_unlock>
 8008c0a:	f026 0607 	bic.w	r6, r6, #7
 8008c0e:	1d23      	adds	r3, r4, #4
 8008c10:	1af2      	subs	r2, r6, r3
 8008c12:	d0b6      	beq.n	8008b82 <_malloc_r+0x22>
 8008c14:	1b9b      	subs	r3, r3, r6
 8008c16:	50a3      	str	r3, [r4, r2]
 8008c18:	e7b3      	b.n	8008b82 <_malloc_r+0x22>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	bf0c      	ite	eq
 8008c20:	6032      	streq	r2, [r6, #0]
 8008c22:	605a      	strne	r2, [r3, #4]
 8008c24:	e7ec      	b.n	8008c00 <_malloc_r+0xa0>
 8008c26:	4623      	mov	r3, r4
 8008c28:	6864      	ldr	r4, [r4, #4]
 8008c2a:	e7b2      	b.n	8008b92 <_malloc_r+0x32>
 8008c2c:	4634      	mov	r4, r6
 8008c2e:	6876      	ldr	r6, [r6, #4]
 8008c30:	e7b9      	b.n	8008ba6 <_malloc_r+0x46>
 8008c32:	230c      	movs	r3, #12
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4638      	mov	r0, r7
 8008c38:	f000 ffbc 	bl	8009bb4 <__malloc_unlock>
 8008c3c:	e7a1      	b.n	8008b82 <_malloc_r+0x22>
 8008c3e:	6025      	str	r5, [r4, #0]
 8008c40:	e7de      	b.n	8008c00 <_malloc_r+0xa0>
 8008c42:	bf00      	nop
 8008c44:	200002e0 	.word	0x200002e0

08008c48 <__ssputs_r>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	688e      	ldr	r6, [r1, #8]
 8008c4e:	429e      	cmp	r6, r3
 8008c50:	4682      	mov	sl, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	4690      	mov	r8, r2
 8008c56:	461f      	mov	r7, r3
 8008c58:	d838      	bhi.n	8008ccc <__ssputs_r+0x84>
 8008c5a:	898a      	ldrh	r2, [r1, #12]
 8008c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c60:	d032      	beq.n	8008cc8 <__ssputs_r+0x80>
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	6909      	ldr	r1, [r1, #16]
 8008c66:	eba5 0901 	sub.w	r9, r5, r1
 8008c6a:	6965      	ldr	r5, [r4, #20]
 8008c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c74:	3301      	adds	r3, #1
 8008c76:	444b      	add	r3, r9
 8008c78:	106d      	asrs	r5, r5, #1
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	bf38      	it	cc
 8008c7e:	461d      	movcc	r5, r3
 8008c80:	0553      	lsls	r3, r2, #21
 8008c82:	d531      	bpl.n	8008ce8 <__ssputs_r+0xa0>
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7ff ff6b 	bl	8008b60 <_malloc_r>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	b950      	cbnz	r0, 8008ca4 <__ssputs_r+0x5c>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	f8ca 3000 	str.w	r3, [sl]
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	f7ff fa1a 	bl	80080e0 <memcpy>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	6126      	str	r6, [r4, #16]
 8008cba:	6165      	str	r5, [r4, #20]
 8008cbc:	444e      	add	r6, r9
 8008cbe:	eba5 0509 	sub.w	r5, r5, r9
 8008cc2:	6026      	str	r6, [r4, #0]
 8008cc4:	60a5      	str	r5, [r4, #8]
 8008cc6:	463e      	mov	r6, r7
 8008cc8:	42be      	cmp	r6, r7
 8008cca:	d900      	bls.n	8008cce <__ssputs_r+0x86>
 8008ccc:	463e      	mov	r6, r7
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	f000 ff4e 	bl	8009b74 <memmove>
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	1b9b      	subs	r3, r3, r6
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	4433      	add	r3, r6
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e7db      	b.n	8008ca0 <__ssputs_r+0x58>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	f000 ff69 	bl	8009bc0 <_realloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d1e1      	bne.n	8008cb8 <__ssputs_r+0x70>
 8008cf4:	6921      	ldr	r1, [r4, #16]
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	f7ff fec8 	bl	8008a8c <_free_r>
 8008cfc:	e7c7      	b.n	8008c8e <__ssputs_r+0x46>
	...

08008d00 <_svfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4698      	mov	r8, r3
 8008d06:	898b      	ldrh	r3, [r1, #12]
 8008d08:	061b      	lsls	r3, r3, #24
 8008d0a:	b09d      	sub	sp, #116	; 0x74
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	4614      	mov	r4, r2
 8008d12:	d50e      	bpl.n	8008d32 <_svfiprintf_r+0x32>
 8008d14:	690b      	ldr	r3, [r1, #16]
 8008d16:	b963      	cbnz	r3, 8008d32 <_svfiprintf_r+0x32>
 8008d18:	2140      	movs	r1, #64	; 0x40
 8008d1a:	f7ff ff21 	bl	8008b60 <_malloc_r>
 8008d1e:	6028      	str	r0, [r5, #0]
 8008d20:	6128      	str	r0, [r5, #16]
 8008d22:	b920      	cbnz	r0, 8008d2e <_svfiprintf_r+0x2e>
 8008d24:	230c      	movs	r3, #12
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2c:	e0d1      	b.n	8008ed2 <_svfiprintf_r+0x1d2>
 8008d2e:	2340      	movs	r3, #64	; 0x40
 8008d30:	616b      	str	r3, [r5, #20]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9309      	str	r3, [sp, #36]	; 0x24
 8008d36:	2320      	movs	r3, #32
 8008d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d40:	2330      	movs	r3, #48	; 0x30
 8008d42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008eec <_svfiprintf_r+0x1ec>
 8008d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d4a:	f04f 0901 	mov.w	r9, #1
 8008d4e:	4623      	mov	r3, r4
 8008d50:	469a      	mov	sl, r3
 8008d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d56:	b10a      	cbz	r2, 8008d5c <_svfiprintf_r+0x5c>
 8008d58:	2a25      	cmp	r2, #37	; 0x25
 8008d5a:	d1f9      	bne.n	8008d50 <_svfiprintf_r+0x50>
 8008d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d60:	d00b      	beq.n	8008d7a <_svfiprintf_r+0x7a>
 8008d62:	465b      	mov	r3, fp
 8008d64:	4622      	mov	r2, r4
 8008d66:	4629      	mov	r1, r5
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ff6d 	bl	8008c48 <__ssputs_r>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f000 80aa 	beq.w	8008ec8 <_svfiprintf_r+0x1c8>
 8008d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d76:	445a      	add	r2, fp
 8008d78:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80a2 	beq.w	8008ec8 <_svfiprintf_r+0x1c8>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8e:	f10a 0a01 	add.w	sl, sl, #1
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	9307      	str	r3, [sp, #28]
 8008d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d9c:	4654      	mov	r4, sl
 8008d9e:	2205      	movs	r2, #5
 8008da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da4:	4851      	ldr	r0, [pc, #324]	; (8008eec <_svfiprintf_r+0x1ec>)
 8008da6:	f7f7 f9f3 	bl	8000190 <memchr>
 8008daa:	9a04      	ldr	r2, [sp, #16]
 8008dac:	b9d8      	cbnz	r0, 8008de6 <_svfiprintf_r+0xe6>
 8008dae:	06d0      	lsls	r0, r2, #27
 8008db0:	bf44      	itt	mi
 8008db2:	2320      	movmi	r3, #32
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db8:	0711      	lsls	r1, r2, #28
 8008dba:	bf44      	itt	mi
 8008dbc:	232b      	movmi	r3, #43	; 0x2b
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc8:	d015      	beq.n	8008df6 <_svfiprintf_r+0xf6>
 8008dca:	9a07      	ldr	r2, [sp, #28]
 8008dcc:	4654      	mov	r4, sl
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f04f 0c0a 	mov.w	ip, #10
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dda:	3b30      	subs	r3, #48	; 0x30
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	d94e      	bls.n	8008e7e <_svfiprintf_r+0x17e>
 8008de0:	b1b0      	cbz	r0, 8008e10 <_svfiprintf_r+0x110>
 8008de2:	9207      	str	r2, [sp, #28]
 8008de4:	e014      	b.n	8008e10 <_svfiprintf_r+0x110>
 8008de6:	eba0 0308 	sub.w	r3, r0, r8
 8008dea:	fa09 f303 	lsl.w	r3, r9, r3
 8008dee:	4313      	orrs	r3, r2
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	46a2      	mov	sl, r4
 8008df4:	e7d2      	b.n	8008d9c <_svfiprintf_r+0x9c>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	1d19      	adds	r1, r3, #4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	9103      	str	r1, [sp, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfbb      	ittet	lt
 8008e02:	425b      	neglt	r3, r3
 8008e04:	f042 0202 	orrlt.w	r2, r2, #2
 8008e08:	9307      	strge	r3, [sp, #28]
 8008e0a:	9307      	strlt	r3, [sp, #28]
 8008e0c:	bfb8      	it	lt
 8008e0e:	9204      	strlt	r2, [sp, #16]
 8008e10:	7823      	ldrb	r3, [r4, #0]
 8008e12:	2b2e      	cmp	r3, #46	; 0x2e
 8008e14:	d10c      	bne.n	8008e30 <_svfiprintf_r+0x130>
 8008e16:	7863      	ldrb	r3, [r4, #1]
 8008e18:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1a:	d135      	bne.n	8008e88 <_svfiprintf_r+0x188>
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	9203      	str	r2, [sp, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	bfb8      	it	lt
 8008e28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e2c:	3402      	adds	r4, #2
 8008e2e:	9305      	str	r3, [sp, #20]
 8008e30:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008ef0 <_svfiprintf_r+0x1f0>
 8008e34:	7821      	ldrb	r1, [r4, #0]
 8008e36:	2203      	movs	r2, #3
 8008e38:	4650      	mov	r0, sl
 8008e3a:	f7f7 f9a9 	bl	8000190 <memchr>
 8008e3e:	b140      	cbz	r0, 8008e52 <_svfiprintf_r+0x152>
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	eba0 000a 	sub.w	r0, r0, sl
 8008e46:	fa03 f000 	lsl.w	r0, r3, r0
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	4303      	orrs	r3, r0
 8008e4e:	3401      	adds	r4, #1
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e56:	4827      	ldr	r0, [pc, #156]	; (8008ef4 <_svfiprintf_r+0x1f4>)
 8008e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	f7f7 f997 	bl	8000190 <memchr>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d038      	beq.n	8008ed8 <_svfiprintf_r+0x1d8>
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <_svfiprintf_r+0x1f8>)
 8008e68:	bb1b      	cbnz	r3, 8008eb2 <_svfiprintf_r+0x1b2>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	3307      	adds	r3, #7
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	3308      	adds	r3, #8
 8008e74:	9303      	str	r3, [sp, #12]
 8008e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e78:	4433      	add	r3, r6
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	e767      	b.n	8008d4e <_svfiprintf_r+0x4e>
 8008e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e82:	460c      	mov	r4, r1
 8008e84:	2001      	movs	r0, #1
 8008e86:	e7a5      	b.n	8008dd4 <_svfiprintf_r+0xd4>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	3401      	adds	r4, #1
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f04f 0c0a 	mov.w	ip, #10
 8008e94:	4620      	mov	r0, r4
 8008e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9a:	3a30      	subs	r2, #48	; 0x30
 8008e9c:	2a09      	cmp	r2, #9
 8008e9e:	d903      	bls.n	8008ea8 <_svfiprintf_r+0x1a8>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0c5      	beq.n	8008e30 <_svfiprintf_r+0x130>
 8008ea4:	9105      	str	r1, [sp, #20]
 8008ea6:	e7c3      	b.n	8008e30 <_svfiprintf_r+0x130>
 8008ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eac:	4604      	mov	r4, r0
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7f0      	b.n	8008e94 <_svfiprintf_r+0x194>
 8008eb2:	ab03      	add	r3, sp, #12
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4b10      	ldr	r3, [pc, #64]	; (8008efc <_svfiprintf_r+0x1fc>)
 8008eba:	a904      	add	r1, sp, #16
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7fc f9d5 	bl	800526c <_printf_float>
 8008ec2:	1c42      	adds	r2, r0, #1
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	d1d6      	bne.n	8008e76 <_svfiprintf_r+0x176>
 8008ec8:	89ab      	ldrh	r3, [r5, #12]
 8008eca:	065b      	lsls	r3, r3, #25
 8008ecc:	f53f af2c 	bmi.w	8008d28 <_svfiprintf_r+0x28>
 8008ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed2:	b01d      	add	sp, #116	; 0x74
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <_svfiprintf_r+0x1fc>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7fc fc5a 	bl	800579c <_printf_i>
 8008ee8:	e7eb      	b.n	8008ec2 <_svfiprintf_r+0x1c2>
 8008eea:	bf00      	nop
 8008eec:	0800a85c 	.word	0x0800a85c
 8008ef0:	0800a862 	.word	0x0800a862
 8008ef4:	0800a866 	.word	0x0800a866
 8008ef8:	0800526d 	.word	0x0800526d
 8008efc:	08008c49 	.word	0x08008c49

08008f00 <_sungetc_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	1c4b      	adds	r3, r1, #1
 8008f04:	4614      	mov	r4, r2
 8008f06:	d103      	bne.n	8008f10 <_sungetc_r+0x10>
 8008f08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	8993      	ldrh	r3, [r2, #12]
 8008f12:	f023 0320 	bic.w	r3, r3, #32
 8008f16:	8193      	strh	r3, [r2, #12]
 8008f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f1a:	6852      	ldr	r2, [r2, #4]
 8008f1c:	b2cd      	uxtb	r5, r1
 8008f1e:	b18b      	cbz	r3, 8008f44 <_sungetc_r+0x44>
 8008f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f22:	4293      	cmp	r3, r2
 8008f24:	dd08      	ble.n	8008f38 <_sungetc_r+0x38>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	1e5a      	subs	r2, r3, #1
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	3301      	adds	r3, #1
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	e7e9      	b.n	8008f0c <_sungetc_r+0xc>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	f000 fbed 	bl	8009718 <__submore>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0f1      	beq.n	8008f26 <_sungetc_r+0x26>
 8008f42:	e7e1      	b.n	8008f08 <_sungetc_r+0x8>
 8008f44:	6921      	ldr	r1, [r4, #16]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	b151      	cbz	r1, 8008f60 <_sungetc_r+0x60>
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	d208      	bcs.n	8008f60 <_sungetc_r+0x60>
 8008f4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f52:	42a9      	cmp	r1, r5
 8008f54:	d104      	bne.n	8008f60 <_sungetc_r+0x60>
 8008f56:	3b01      	subs	r3, #1
 8008f58:	3201      	adds	r2, #1
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	6062      	str	r2, [r4, #4]
 8008f5e:	e7d5      	b.n	8008f0c <_sungetc_r+0xc>
 8008f60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f68:	6363      	str	r3, [r4, #52]	; 0x34
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f6e:	4623      	mov	r3, r4
 8008f70:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7dc      	b.n	8008f34 <_sungetc_r+0x34>

08008f7a <__ssrefill_r>:
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f80:	b169      	cbz	r1, 8008f9e <__ssrefill_r+0x24>
 8008f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d001      	beq.n	8008f8e <__ssrefill_r+0x14>
 8008f8a:	f7ff fd7f 	bl	8008a8c <_free_r>
 8008f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	2000      	movs	r0, #0
 8008f94:	6360      	str	r0, [r4, #52]	; 0x34
 8008f96:	b113      	cbz	r3, 8008f9e <__ssrefill_r+0x24>
 8008f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6063      	str	r3, [r4, #4]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0320 	orr.w	r3, r3, #32
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb2:	e7f3      	b.n	8008f9c <__ssrefill_r+0x22>

08008fb4 <__ssvfiscanf_r>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	460c      	mov	r4, r1
 8008fba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008fc4:	49a6      	ldr	r1, [pc, #664]	; (8009260 <__ssvfiscanf_r+0x2ac>)
 8008fc6:	91a0      	str	r1, [sp, #640]	; 0x280
 8008fc8:	f10d 0804 	add.w	r8, sp, #4
 8008fcc:	49a5      	ldr	r1, [pc, #660]	; (8009264 <__ssvfiscanf_r+0x2b0>)
 8008fce:	4fa6      	ldr	r7, [pc, #664]	; (8009268 <__ssvfiscanf_r+0x2b4>)
 8008fd0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800926c <__ssvfiscanf_r+0x2b8>
 8008fd4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008fd8:	4606      	mov	r6, r0
 8008fda:	91a1      	str	r1, [sp, #644]	; 0x284
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	7813      	ldrb	r3, [r2, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 815a 	beq.w	800929a <__ssvfiscanf_r+0x2e6>
 8008fe6:	5dd9      	ldrb	r1, [r3, r7]
 8008fe8:	f011 0108 	ands.w	r1, r1, #8
 8008fec:	f102 0501 	add.w	r5, r2, #1
 8008ff0:	d019      	beq.n	8009026 <__ssvfiscanf_r+0x72>
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dd0f      	ble.n	8009018 <__ssvfiscanf_r+0x64>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	5cba      	ldrb	r2, [r7, r2]
 8008ffe:	0712      	lsls	r2, r2, #28
 8009000:	d401      	bmi.n	8009006 <__ssvfiscanf_r+0x52>
 8009002:	462a      	mov	r2, r5
 8009004:	e7eb      	b.n	8008fde <__ssvfiscanf_r+0x2a>
 8009006:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009008:	3201      	adds	r2, #1
 800900a:	9245      	str	r2, [sp, #276]	; 0x114
 800900c:	6862      	ldr	r2, [r4, #4]
 800900e:	3301      	adds	r3, #1
 8009010:	3a01      	subs	r2, #1
 8009012:	6062      	str	r2, [r4, #4]
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	e7ec      	b.n	8008ff2 <__ssvfiscanf_r+0x3e>
 8009018:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800901a:	4621      	mov	r1, r4
 800901c:	4630      	mov	r0, r6
 800901e:	4798      	blx	r3
 8009020:	2800      	cmp	r0, #0
 8009022:	d0e9      	beq.n	8008ff8 <__ssvfiscanf_r+0x44>
 8009024:	e7ed      	b.n	8009002 <__ssvfiscanf_r+0x4e>
 8009026:	2b25      	cmp	r3, #37	; 0x25
 8009028:	d012      	beq.n	8009050 <__ssvfiscanf_r+0x9c>
 800902a:	469a      	mov	sl, r3
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f340 8091 	ble.w	8009156 <__ssvfiscanf_r+0x1a2>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	7813      	ldrb	r3, [r2, #0]
 8009038:	4553      	cmp	r3, sl
 800903a:	f040 812e 	bne.w	800929a <__ssvfiscanf_r+0x2e6>
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	3b01      	subs	r3, #1
 8009042:	6063      	str	r3, [r4, #4]
 8009044:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009046:	3201      	adds	r2, #1
 8009048:	3301      	adds	r3, #1
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	9345      	str	r3, [sp, #276]	; 0x114
 800904e:	e7d8      	b.n	8009002 <__ssvfiscanf_r+0x4e>
 8009050:	9141      	str	r1, [sp, #260]	; 0x104
 8009052:	9143      	str	r1, [sp, #268]	; 0x10c
 8009054:	7853      	ldrb	r3, [r2, #1]
 8009056:	2b2a      	cmp	r3, #42	; 0x2a
 8009058:	bf02      	ittt	eq
 800905a:	2310      	moveq	r3, #16
 800905c:	1c95      	addeq	r5, r2, #2
 800905e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009060:	220a      	movs	r2, #10
 8009062:	46aa      	mov	sl, r5
 8009064:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009068:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800906c:	2b09      	cmp	r3, #9
 800906e:	d91d      	bls.n	80090ac <__ssvfiscanf_r+0xf8>
 8009070:	487e      	ldr	r0, [pc, #504]	; (800926c <__ssvfiscanf_r+0x2b8>)
 8009072:	2203      	movs	r2, #3
 8009074:	f7f7 f88c 	bl	8000190 <memchr>
 8009078:	b140      	cbz	r0, 800908c <__ssvfiscanf_r+0xd8>
 800907a:	2301      	movs	r3, #1
 800907c:	eba0 0009 	sub.w	r0, r0, r9
 8009080:	fa03 f000 	lsl.w	r0, r3, r0
 8009084:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009086:	4318      	orrs	r0, r3
 8009088:	9041      	str	r0, [sp, #260]	; 0x104
 800908a:	4655      	mov	r5, sl
 800908c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009090:	2b78      	cmp	r3, #120	; 0x78
 8009092:	d806      	bhi.n	80090a2 <__ssvfiscanf_r+0xee>
 8009094:	2b57      	cmp	r3, #87	; 0x57
 8009096:	d810      	bhi.n	80090ba <__ssvfiscanf_r+0x106>
 8009098:	2b25      	cmp	r3, #37	; 0x25
 800909a:	d0c6      	beq.n	800902a <__ssvfiscanf_r+0x76>
 800909c:	d856      	bhi.n	800914c <__ssvfiscanf_r+0x198>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d064      	beq.n	800916c <__ssvfiscanf_r+0x1b8>
 80090a2:	2303      	movs	r3, #3
 80090a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80090a6:	230a      	movs	r3, #10
 80090a8:	9342      	str	r3, [sp, #264]	; 0x108
 80090aa:	e071      	b.n	8009190 <__ssvfiscanf_r+0x1dc>
 80090ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80090ae:	fb02 1103 	mla	r1, r2, r3, r1
 80090b2:	3930      	subs	r1, #48	; 0x30
 80090b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80090b6:	4655      	mov	r5, sl
 80090b8:	e7d3      	b.n	8009062 <__ssvfiscanf_r+0xae>
 80090ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80090be:	2a20      	cmp	r2, #32
 80090c0:	d8ef      	bhi.n	80090a2 <__ssvfiscanf_r+0xee>
 80090c2:	a101      	add	r1, pc, #4	; (adr r1, 80090c8 <__ssvfiscanf_r+0x114>)
 80090c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090c8:	0800917b 	.word	0x0800917b
 80090cc:	080090a3 	.word	0x080090a3
 80090d0:	080090a3 	.word	0x080090a3
 80090d4:	080091d9 	.word	0x080091d9
 80090d8:	080090a3 	.word	0x080090a3
 80090dc:	080090a3 	.word	0x080090a3
 80090e0:	080090a3 	.word	0x080090a3
 80090e4:	080090a3 	.word	0x080090a3
 80090e8:	080090a3 	.word	0x080090a3
 80090ec:	080090a3 	.word	0x080090a3
 80090f0:	080090a3 	.word	0x080090a3
 80090f4:	080091ef 	.word	0x080091ef
 80090f8:	080091c5 	.word	0x080091c5
 80090fc:	08009153 	.word	0x08009153
 8009100:	08009153 	.word	0x08009153
 8009104:	08009153 	.word	0x08009153
 8009108:	080090a3 	.word	0x080090a3
 800910c:	080091c9 	.word	0x080091c9
 8009110:	080090a3 	.word	0x080090a3
 8009114:	080090a3 	.word	0x080090a3
 8009118:	080090a3 	.word	0x080090a3
 800911c:	080090a3 	.word	0x080090a3
 8009120:	080091ff 	.word	0x080091ff
 8009124:	080091d1 	.word	0x080091d1
 8009128:	08009173 	.word	0x08009173
 800912c:	080090a3 	.word	0x080090a3
 8009130:	080090a3 	.word	0x080090a3
 8009134:	080091fb 	.word	0x080091fb
 8009138:	080090a3 	.word	0x080090a3
 800913c:	080091c5 	.word	0x080091c5
 8009140:	080090a3 	.word	0x080090a3
 8009144:	080090a3 	.word	0x080090a3
 8009148:	0800917b 	.word	0x0800917b
 800914c:	3b45      	subs	r3, #69	; 0x45
 800914e:	2b02      	cmp	r3, #2
 8009150:	d8a7      	bhi.n	80090a2 <__ssvfiscanf_r+0xee>
 8009152:	2305      	movs	r3, #5
 8009154:	e01b      	b.n	800918e <__ssvfiscanf_r+0x1da>
 8009156:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009158:	4621      	mov	r1, r4
 800915a:	4630      	mov	r0, r6
 800915c:	4798      	blx	r3
 800915e:	2800      	cmp	r0, #0
 8009160:	f43f af68 	beq.w	8009034 <__ssvfiscanf_r+0x80>
 8009164:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009166:	2800      	cmp	r0, #0
 8009168:	f040 808d 	bne.w	8009286 <__ssvfiscanf_r+0x2d2>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009170:	e08f      	b.n	8009292 <__ssvfiscanf_r+0x2de>
 8009172:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009174:	f042 0220 	orr.w	r2, r2, #32
 8009178:	9241      	str	r2, [sp, #260]	; 0x104
 800917a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800917c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009180:	9241      	str	r2, [sp, #260]	; 0x104
 8009182:	2210      	movs	r2, #16
 8009184:	2b6f      	cmp	r3, #111	; 0x6f
 8009186:	9242      	str	r2, [sp, #264]	; 0x108
 8009188:	bf34      	ite	cc
 800918a:	2303      	movcc	r3, #3
 800918c:	2304      	movcs	r3, #4
 800918e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009190:	6863      	ldr	r3, [r4, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd42      	ble.n	800921c <__ssvfiscanf_r+0x268>
 8009196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009198:	0659      	lsls	r1, r3, #25
 800919a:	d404      	bmi.n	80091a6 <__ssvfiscanf_r+0x1f2>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	781a      	ldrb	r2, [r3, #0]
 80091a0:	5cba      	ldrb	r2, [r7, r2]
 80091a2:	0712      	lsls	r2, r2, #28
 80091a4:	d441      	bmi.n	800922a <__ssvfiscanf_r+0x276>
 80091a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	dc50      	bgt.n	800924e <__ssvfiscanf_r+0x29a>
 80091ac:	466b      	mov	r3, sp
 80091ae:	4622      	mov	r2, r4
 80091b0:	a941      	add	r1, sp, #260	; 0x104
 80091b2:	4630      	mov	r0, r6
 80091b4:	f000 f876 	bl	80092a4 <_scanf_chars>
 80091b8:	2801      	cmp	r0, #1
 80091ba:	d06e      	beq.n	800929a <__ssvfiscanf_r+0x2e6>
 80091bc:	2802      	cmp	r0, #2
 80091be:	f47f af20 	bne.w	8009002 <__ssvfiscanf_r+0x4e>
 80091c2:	e7cf      	b.n	8009164 <__ssvfiscanf_r+0x1b0>
 80091c4:	220a      	movs	r2, #10
 80091c6:	e7dd      	b.n	8009184 <__ssvfiscanf_r+0x1d0>
 80091c8:	2300      	movs	r3, #0
 80091ca:	9342      	str	r3, [sp, #264]	; 0x108
 80091cc:	2303      	movs	r3, #3
 80091ce:	e7de      	b.n	800918e <__ssvfiscanf_r+0x1da>
 80091d0:	2308      	movs	r3, #8
 80091d2:	9342      	str	r3, [sp, #264]	; 0x108
 80091d4:	2304      	movs	r3, #4
 80091d6:	e7da      	b.n	800918e <__ssvfiscanf_r+0x1da>
 80091d8:	4629      	mov	r1, r5
 80091da:	4640      	mov	r0, r8
 80091dc:	f000 f9dc 	bl	8009598 <__sccl>
 80091e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e6:	9341      	str	r3, [sp, #260]	; 0x104
 80091e8:	4605      	mov	r5, r0
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7cf      	b.n	800918e <__ssvfiscanf_r+0x1da>
 80091ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f4:	9341      	str	r3, [sp, #260]	; 0x104
 80091f6:	2300      	movs	r3, #0
 80091f8:	e7c9      	b.n	800918e <__ssvfiscanf_r+0x1da>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e7c7      	b.n	800918e <__ssvfiscanf_r+0x1da>
 80091fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009200:	06c3      	lsls	r3, r0, #27
 8009202:	f53f aefe 	bmi.w	8009002 <__ssvfiscanf_r+0x4e>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800920a:	1d19      	adds	r1, r3, #4
 800920c:	9100      	str	r1, [sp, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f010 0f01 	tst.w	r0, #1
 8009214:	bf14      	ite	ne
 8009216:	801a      	strhne	r2, [r3, #0]
 8009218:	601a      	streq	r2, [r3, #0]
 800921a:	e6f2      	b.n	8009002 <__ssvfiscanf_r+0x4e>
 800921c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800921e:	4621      	mov	r1, r4
 8009220:	4630      	mov	r0, r6
 8009222:	4798      	blx	r3
 8009224:	2800      	cmp	r0, #0
 8009226:	d0b6      	beq.n	8009196 <__ssvfiscanf_r+0x1e2>
 8009228:	e79c      	b.n	8009164 <__ssvfiscanf_r+0x1b0>
 800922a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800922c:	3201      	adds	r2, #1
 800922e:	9245      	str	r2, [sp, #276]	; 0x114
 8009230:	6862      	ldr	r2, [r4, #4]
 8009232:	3a01      	subs	r2, #1
 8009234:	2a00      	cmp	r2, #0
 8009236:	6062      	str	r2, [r4, #4]
 8009238:	dd02      	ble.n	8009240 <__ssvfiscanf_r+0x28c>
 800923a:	3301      	adds	r3, #1
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	e7ad      	b.n	800919c <__ssvfiscanf_r+0x1e8>
 8009240:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009242:	4621      	mov	r1, r4
 8009244:	4630      	mov	r0, r6
 8009246:	4798      	blx	r3
 8009248:	2800      	cmp	r0, #0
 800924a:	d0a7      	beq.n	800919c <__ssvfiscanf_r+0x1e8>
 800924c:	e78a      	b.n	8009164 <__ssvfiscanf_r+0x1b0>
 800924e:	2b04      	cmp	r3, #4
 8009250:	dc0e      	bgt.n	8009270 <__ssvfiscanf_r+0x2bc>
 8009252:	466b      	mov	r3, sp
 8009254:	4622      	mov	r2, r4
 8009256:	a941      	add	r1, sp, #260	; 0x104
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f87d 	bl	8009358 <_scanf_i>
 800925e:	e7ab      	b.n	80091b8 <__ssvfiscanf_r+0x204>
 8009260:	08008f01 	.word	0x08008f01
 8009264:	08008f7b 	.word	0x08008f7b
 8009268:	0800a4f9 	.word	0x0800a4f9
 800926c:	0800a862 	.word	0x0800a862
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <__ssvfiscanf_r+0x2ec>)
 8009272:	2b00      	cmp	r3, #0
 8009274:	f43f aec5 	beq.w	8009002 <__ssvfiscanf_r+0x4e>
 8009278:	466b      	mov	r3, sp
 800927a:	4622      	mov	r2, r4
 800927c:	a941      	add	r1, sp, #260	; 0x104
 800927e:	4630      	mov	r0, r6
 8009280:	f7fc fbb2 	bl	80059e8 <_scanf_float>
 8009284:	e798      	b.n	80091b8 <__ssvfiscanf_r+0x204>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f013 0f40 	tst.w	r3, #64	; 0x40
 800928c:	bf18      	it	ne
 800928e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009292:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800929c:	e7f9      	b.n	8009292 <__ssvfiscanf_r+0x2de>
 800929e:	bf00      	nop
 80092a0:	080059e9 	.word	0x080059e9

080092a4 <_scanf_chars>:
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4615      	mov	r5, r2
 80092aa:	688a      	ldr	r2, [r1, #8]
 80092ac:	4680      	mov	r8, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	b932      	cbnz	r2, 80092c0 <_scanf_chars+0x1c>
 80092b2:	698a      	ldr	r2, [r1, #24]
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	bf0c      	ite	eq
 80092b8:	2201      	moveq	r2, #1
 80092ba:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80092be:	608a      	str	r2, [r1, #8]
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009354 <_scanf_chars+0xb0>
 80092c6:	06d1      	lsls	r1, r2, #27
 80092c8:	bf5f      	itttt	pl
 80092ca:	681a      	ldrpl	r2, [r3, #0]
 80092cc:	1d11      	addpl	r1, r2, #4
 80092ce:	6019      	strpl	r1, [r3, #0]
 80092d0:	6816      	ldrpl	r6, [r2, #0]
 80092d2:	2700      	movs	r7, #0
 80092d4:	69a0      	ldr	r0, [r4, #24]
 80092d6:	b188      	cbz	r0, 80092fc <_scanf_chars+0x58>
 80092d8:	2801      	cmp	r0, #1
 80092da:	d107      	bne.n	80092ec <_scanf_chars+0x48>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	6963      	ldr	r3, [r4, #20]
 80092e2:	5c9b      	ldrb	r3, [r3, r2]
 80092e4:	b953      	cbnz	r3, 80092fc <_scanf_chars+0x58>
 80092e6:	2f00      	cmp	r7, #0
 80092e8:	d031      	beq.n	800934e <_scanf_chars+0xaa>
 80092ea:	e022      	b.n	8009332 <_scanf_chars+0x8e>
 80092ec:	2802      	cmp	r0, #2
 80092ee:	d120      	bne.n	8009332 <_scanf_chars+0x8e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80092f8:	071b      	lsls	r3, r3, #28
 80092fa:	d41a      	bmi.n	8009332 <_scanf_chars+0x8e>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	06da      	lsls	r2, r3, #27
 8009300:	bf5e      	ittt	pl
 8009302:	682b      	ldrpl	r3, [r5, #0]
 8009304:	781b      	ldrbpl	r3, [r3, #0]
 8009306:	f806 3b01 	strbpl.w	r3, [r6], #1
 800930a:	682a      	ldr	r2, [r5, #0]
 800930c:	686b      	ldr	r3, [r5, #4]
 800930e:	3201      	adds	r2, #1
 8009310:	602a      	str	r2, [r5, #0]
 8009312:	68a2      	ldr	r2, [r4, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	3a01      	subs	r2, #1
 8009318:	606b      	str	r3, [r5, #4]
 800931a:	3701      	adds	r7, #1
 800931c:	60a2      	str	r2, [r4, #8]
 800931e:	b142      	cbz	r2, 8009332 <_scanf_chars+0x8e>
 8009320:	2b00      	cmp	r3, #0
 8009322:	dcd7      	bgt.n	80092d4 <_scanf_chars+0x30>
 8009324:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009328:	4629      	mov	r1, r5
 800932a:	4640      	mov	r0, r8
 800932c:	4798      	blx	r3
 800932e:	2800      	cmp	r0, #0
 8009330:	d0d0      	beq.n	80092d4 <_scanf_chars+0x30>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f013 0310 	ands.w	r3, r3, #16
 8009338:	d105      	bne.n	8009346 <_scanf_chars+0xa2>
 800933a:	68e2      	ldr	r2, [r4, #12]
 800933c:	3201      	adds	r2, #1
 800933e:	60e2      	str	r2, [r4, #12]
 8009340:	69a2      	ldr	r2, [r4, #24]
 8009342:	b102      	cbz	r2, 8009346 <_scanf_chars+0xa2>
 8009344:	7033      	strb	r3, [r6, #0]
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	443b      	add	r3, r7
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	2000      	movs	r0, #0
 800934e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009352:	bf00      	nop
 8009354:	0800a4f9 	.word	0x0800a4f9

08009358 <_scanf_i>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4698      	mov	r8, r3
 800935e:	4b76      	ldr	r3, [pc, #472]	; (8009538 <_scanf_i+0x1e0>)
 8009360:	460c      	mov	r4, r1
 8009362:	4682      	mov	sl, r0
 8009364:	4616      	mov	r6, r2
 8009366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800936a:	b087      	sub	sp, #28
 800936c:	ab03      	add	r3, sp, #12
 800936e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009372:	4b72      	ldr	r3, [pc, #456]	; (800953c <_scanf_i+0x1e4>)
 8009374:	69a1      	ldr	r1, [r4, #24]
 8009376:	4a72      	ldr	r2, [pc, #456]	; (8009540 <_scanf_i+0x1e8>)
 8009378:	2903      	cmp	r1, #3
 800937a:	bf18      	it	ne
 800937c:	461a      	movne	r2, r3
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	9201      	str	r2, [sp, #4]
 8009382:	1e5a      	subs	r2, r3, #1
 8009384:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009388:	bf88      	it	hi
 800938a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800938e:	4627      	mov	r7, r4
 8009390:	bf82      	ittt	hi
 8009392:	eb03 0905 	addhi.w	r9, r3, r5
 8009396:	f240 135d 	movwhi	r3, #349	; 0x15d
 800939a:	60a3      	strhi	r3, [r4, #8]
 800939c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80093a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80093a4:	bf98      	it	ls
 80093a6:	f04f 0900 	movls.w	r9, #0
 80093aa:	6023      	str	r3, [r4, #0]
 80093ac:	463d      	mov	r5, r7
 80093ae:	f04f 0b00 	mov.w	fp, #0
 80093b2:	6831      	ldr	r1, [r6, #0]
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	7809      	ldrb	r1, [r1, #0]
 80093b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80093bc:	2202      	movs	r2, #2
 80093be:	f7f6 fee7 	bl	8000190 <memchr>
 80093c2:	b328      	cbz	r0, 8009410 <_scanf_i+0xb8>
 80093c4:	f1bb 0f01 	cmp.w	fp, #1
 80093c8:	d159      	bne.n	800947e <_scanf_i+0x126>
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	b92a      	cbnz	r2, 80093da <_scanf_i+0x82>
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	2308      	movs	r3, #8
 80093d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80093e0:	6022      	str	r2, [r4, #0]
 80093e2:	68a2      	ldr	r2, [r4, #8]
 80093e4:	1e51      	subs	r1, r2, #1
 80093e6:	60a1      	str	r1, [r4, #8]
 80093e8:	b192      	cbz	r2, 8009410 <_scanf_i+0xb8>
 80093ea:	6832      	ldr	r2, [r6, #0]
 80093ec:	1c51      	adds	r1, r2, #1
 80093ee:	6031      	str	r1, [r6, #0]
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	f805 2b01 	strb.w	r2, [r5], #1
 80093f6:	6872      	ldr	r2, [r6, #4]
 80093f8:	3a01      	subs	r2, #1
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	6072      	str	r2, [r6, #4]
 80093fe:	dc07      	bgt.n	8009410 <_scanf_i+0xb8>
 8009400:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009404:	4631      	mov	r1, r6
 8009406:	4650      	mov	r0, sl
 8009408:	4790      	blx	r2
 800940a:	2800      	cmp	r0, #0
 800940c:	f040 8085 	bne.w	800951a <_scanf_i+0x1c2>
 8009410:	f10b 0b01 	add.w	fp, fp, #1
 8009414:	f1bb 0f03 	cmp.w	fp, #3
 8009418:	d1cb      	bne.n	80093b2 <_scanf_i+0x5a>
 800941a:	6863      	ldr	r3, [r4, #4]
 800941c:	b90b      	cbnz	r3, 8009422 <_scanf_i+0xca>
 800941e:	230a      	movs	r3, #10
 8009420:	6063      	str	r3, [r4, #4]
 8009422:	6863      	ldr	r3, [r4, #4]
 8009424:	4947      	ldr	r1, [pc, #284]	; (8009544 <_scanf_i+0x1ec>)
 8009426:	6960      	ldr	r0, [r4, #20]
 8009428:	1ac9      	subs	r1, r1, r3
 800942a:	f000 f8b5 	bl	8009598 <__sccl>
 800942e:	f04f 0b00 	mov.w	fp, #0
 8009432:	68a3      	ldr	r3, [r4, #8]
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d03d      	beq.n	80094b6 <_scanf_i+0x15e>
 800943a:	6831      	ldr	r1, [r6, #0]
 800943c:	6960      	ldr	r0, [r4, #20]
 800943e:	f891 c000 	ldrb.w	ip, [r1]
 8009442:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009446:	2800      	cmp	r0, #0
 8009448:	d035      	beq.n	80094b6 <_scanf_i+0x15e>
 800944a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800944e:	d124      	bne.n	800949a <_scanf_i+0x142>
 8009450:	0510      	lsls	r0, r2, #20
 8009452:	d522      	bpl.n	800949a <_scanf_i+0x142>
 8009454:	f10b 0b01 	add.w	fp, fp, #1
 8009458:	f1b9 0f00 	cmp.w	r9, #0
 800945c:	d003      	beq.n	8009466 <_scanf_i+0x10e>
 800945e:	3301      	adds	r3, #1
 8009460:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	6873      	ldr	r3, [r6, #4]
 8009468:	3b01      	subs	r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	6073      	str	r3, [r6, #4]
 800946e:	dd1b      	ble.n	80094a8 <_scanf_i+0x150>
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	6033      	str	r3, [r6, #0]
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	3b01      	subs	r3, #1
 800947a:	60a3      	str	r3, [r4, #8]
 800947c:	e7d9      	b.n	8009432 <_scanf_i+0xda>
 800947e:	f1bb 0f02 	cmp.w	fp, #2
 8009482:	d1ae      	bne.n	80093e2 <_scanf_i+0x8a>
 8009484:	6822      	ldr	r2, [r4, #0]
 8009486:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800948a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800948e:	d1bf      	bne.n	8009410 <_scanf_i+0xb8>
 8009490:	2310      	movs	r3, #16
 8009492:	6063      	str	r3, [r4, #4]
 8009494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009498:	e7a2      	b.n	80093e0 <_scanf_i+0x88>
 800949a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	780b      	ldrb	r3, [r1, #0]
 80094a2:	f805 3b01 	strb.w	r3, [r5], #1
 80094a6:	e7de      	b.n	8009466 <_scanf_i+0x10e>
 80094a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094ac:	4631      	mov	r1, r6
 80094ae:	4650      	mov	r0, sl
 80094b0:	4798      	blx	r3
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d0df      	beq.n	8009476 <_scanf_i+0x11e>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	05db      	lsls	r3, r3, #23
 80094ba:	d50d      	bpl.n	80094d8 <_scanf_i+0x180>
 80094bc:	42bd      	cmp	r5, r7
 80094be:	d909      	bls.n	80094d4 <_scanf_i+0x17c>
 80094c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80094c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094c8:	4632      	mov	r2, r6
 80094ca:	4650      	mov	r0, sl
 80094cc:	4798      	blx	r3
 80094ce:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80094d2:	464d      	mov	r5, r9
 80094d4:	42bd      	cmp	r5, r7
 80094d6:	d02d      	beq.n	8009534 <_scanf_i+0x1dc>
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	f012 0210 	ands.w	r2, r2, #16
 80094de:	d113      	bne.n	8009508 <_scanf_i+0x1b0>
 80094e0:	702a      	strb	r2, [r5, #0]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	9e01      	ldr	r6, [sp, #4]
 80094e6:	4639      	mov	r1, r7
 80094e8:	4650      	mov	r0, sl
 80094ea:	47b0      	blx	r6
 80094ec:	6821      	ldr	r1, [r4, #0]
 80094ee:	f8d8 3000 	ldr.w	r3, [r8]
 80094f2:	f011 0f20 	tst.w	r1, #32
 80094f6:	d013      	beq.n	8009520 <_scanf_i+0x1c8>
 80094f8:	1d1a      	adds	r2, r3, #4
 80094fa:	f8c8 2000 	str.w	r2, [r8]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6018      	str	r0, [r3, #0]
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60e3      	str	r3, [r4, #12]
 8009508:	1bed      	subs	r5, r5, r7
 800950a:	44ab      	add	fp, r5
 800950c:	6925      	ldr	r5, [r4, #16]
 800950e:	445d      	add	r5, fp
 8009510:	6125      	str	r5, [r4, #16]
 8009512:	2000      	movs	r0, #0
 8009514:	b007      	add	sp, #28
 8009516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951a:	f04f 0b00 	mov.w	fp, #0
 800951e:	e7ca      	b.n	80094b6 <_scanf_i+0x15e>
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	f8c8 2000 	str.w	r2, [r8]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f011 0f01 	tst.w	r1, #1
 800952c:	bf14      	ite	ne
 800952e:	8018      	strhne	r0, [r3, #0]
 8009530:	6018      	streq	r0, [r3, #0]
 8009532:	e7e6      	b.n	8009502 <_scanf_i+0x1aa>
 8009534:	2001      	movs	r0, #1
 8009536:	e7ed      	b.n	8009514 <_scanf_i+0x1bc>
 8009538:	0800a394 	.word	0x0800a394
 800953c:	08009715 	.word	0x08009715
 8009540:	08006c7d 	.word	0x08006c7d
 8009544:	0800a886 	.word	0x0800a886

08009548 <_read_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	; (8009568 <_read_r+0x20>)
 800954c:	4604      	mov	r4, r0
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f7f8 fb2a 	bl	8001bb0 <_read>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_read_r+0x1e>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_read_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	200002e8 	.word	0x200002e8

0800956c <nan>:
 800956c:	4901      	ldr	r1, [pc, #4]	; (8009574 <nan+0x8>)
 800956e:	2000      	movs	r0, #0
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	7ff80000 	.word	0x7ff80000

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f8 fb7e 	bl	8001c84 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	200002e8 	.word	0x200002e8

08009598 <__sccl>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	780b      	ldrb	r3, [r1, #0]
 800959c:	4604      	mov	r4, r0
 800959e:	2b5e      	cmp	r3, #94	; 0x5e
 80095a0:	bf0b      	itete	eq
 80095a2:	784b      	ldrbeq	r3, [r1, #1]
 80095a4:	1c48      	addne	r0, r1, #1
 80095a6:	1c88      	addeq	r0, r1, #2
 80095a8:	2200      	movne	r2, #0
 80095aa:	bf08      	it	eq
 80095ac:	2201      	moveq	r2, #1
 80095ae:	1e61      	subs	r1, r4, #1
 80095b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80095b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80095b8:	42a9      	cmp	r1, r5
 80095ba:	d1fb      	bne.n	80095b4 <__sccl+0x1c>
 80095bc:	b90b      	cbnz	r3, 80095c2 <__sccl+0x2a>
 80095be:	3801      	subs	r0, #1
 80095c0:	bd70      	pop	{r4, r5, r6, pc}
 80095c2:	f082 0201 	eor.w	r2, r2, #1
 80095c6:	54e2      	strb	r2, [r4, r3]
 80095c8:	4605      	mov	r5, r0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80095d0:	292d      	cmp	r1, #45	; 0x2d
 80095d2:	d006      	beq.n	80095e2 <__sccl+0x4a>
 80095d4:	295d      	cmp	r1, #93	; 0x5d
 80095d6:	d0f3      	beq.n	80095c0 <__sccl+0x28>
 80095d8:	b909      	cbnz	r1, 80095de <__sccl+0x46>
 80095da:	4628      	mov	r0, r5
 80095dc:	e7f0      	b.n	80095c0 <__sccl+0x28>
 80095de:	460b      	mov	r3, r1
 80095e0:	e7f1      	b.n	80095c6 <__sccl+0x2e>
 80095e2:	786e      	ldrb	r6, [r5, #1]
 80095e4:	2e5d      	cmp	r6, #93	; 0x5d
 80095e6:	d0fa      	beq.n	80095de <__sccl+0x46>
 80095e8:	42b3      	cmp	r3, r6
 80095ea:	dcf8      	bgt.n	80095de <__sccl+0x46>
 80095ec:	3502      	adds	r5, #2
 80095ee:	4619      	mov	r1, r3
 80095f0:	3101      	adds	r1, #1
 80095f2:	428e      	cmp	r6, r1
 80095f4:	5462      	strb	r2, [r4, r1]
 80095f6:	dcfb      	bgt.n	80095f0 <__sccl+0x58>
 80095f8:	1af1      	subs	r1, r6, r3
 80095fa:	3901      	subs	r1, #1
 80095fc:	1c58      	adds	r0, r3, #1
 80095fe:	42b3      	cmp	r3, r6
 8009600:	bfa8      	it	ge
 8009602:	2100      	movge	r1, #0
 8009604:	1843      	adds	r3, r0, r1
 8009606:	e7e0      	b.n	80095ca <__sccl+0x32>

08009608 <strncmp>:
 8009608:	b510      	push	{r4, lr}
 800960a:	4603      	mov	r3, r0
 800960c:	b172      	cbz	r2, 800962c <strncmp+0x24>
 800960e:	3901      	subs	r1, #1
 8009610:	1884      	adds	r4, r0, r2
 8009612:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009616:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800961a:	4290      	cmp	r0, r2
 800961c:	d101      	bne.n	8009622 <strncmp+0x1a>
 800961e:	42a3      	cmp	r3, r4
 8009620:	d101      	bne.n	8009626 <strncmp+0x1e>
 8009622:	1a80      	subs	r0, r0, r2
 8009624:	bd10      	pop	{r4, pc}
 8009626:	2800      	cmp	r0, #0
 8009628:	d1f3      	bne.n	8009612 <strncmp+0xa>
 800962a:	e7fa      	b.n	8009622 <strncmp+0x1a>
 800962c:	4610      	mov	r0, r2
 800962e:	e7f9      	b.n	8009624 <strncmp+0x1c>

08009630 <_strtoul_l.constprop.0>:
 8009630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009634:	4f36      	ldr	r7, [pc, #216]	; (8009710 <_strtoul_l.constprop.0+0xe0>)
 8009636:	4686      	mov	lr, r0
 8009638:	460d      	mov	r5, r1
 800963a:	4628      	mov	r0, r5
 800963c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009640:	5de6      	ldrb	r6, [r4, r7]
 8009642:	f016 0608 	ands.w	r6, r6, #8
 8009646:	d1f8      	bne.n	800963a <_strtoul_l.constprop.0+0xa>
 8009648:	2c2d      	cmp	r4, #45	; 0x2d
 800964a:	d12f      	bne.n	80096ac <_strtoul_l.constprop.0+0x7c>
 800964c:	782c      	ldrb	r4, [r5, #0]
 800964e:	2601      	movs	r6, #1
 8009650:	1c85      	adds	r5, r0, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d057      	beq.n	8009706 <_strtoul_l.constprop.0+0xd6>
 8009656:	2b10      	cmp	r3, #16
 8009658:	d109      	bne.n	800966e <_strtoul_l.constprop.0+0x3e>
 800965a:	2c30      	cmp	r4, #48	; 0x30
 800965c:	d107      	bne.n	800966e <_strtoul_l.constprop.0+0x3e>
 800965e:	7828      	ldrb	r0, [r5, #0]
 8009660:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009664:	2858      	cmp	r0, #88	; 0x58
 8009666:	d149      	bne.n	80096fc <_strtoul_l.constprop.0+0xcc>
 8009668:	786c      	ldrb	r4, [r5, #1]
 800966a:	2310      	movs	r3, #16
 800966c:	3502      	adds	r5, #2
 800966e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009672:	2700      	movs	r7, #0
 8009674:	fbb8 f8f3 	udiv	r8, r8, r3
 8009678:	fb03 f908 	mul.w	r9, r3, r8
 800967c:	ea6f 0909 	mvn.w	r9, r9
 8009680:	4638      	mov	r0, r7
 8009682:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009686:	f1bc 0f09 	cmp.w	ip, #9
 800968a:	d814      	bhi.n	80096b6 <_strtoul_l.constprop.0+0x86>
 800968c:	4664      	mov	r4, ip
 800968e:	42a3      	cmp	r3, r4
 8009690:	dd22      	ble.n	80096d8 <_strtoul_l.constprop.0+0xa8>
 8009692:	2f00      	cmp	r7, #0
 8009694:	db1d      	blt.n	80096d2 <_strtoul_l.constprop.0+0xa2>
 8009696:	4580      	cmp	r8, r0
 8009698:	d31b      	bcc.n	80096d2 <_strtoul_l.constprop.0+0xa2>
 800969a:	d101      	bne.n	80096a0 <_strtoul_l.constprop.0+0x70>
 800969c:	45a1      	cmp	r9, r4
 800969e:	db18      	blt.n	80096d2 <_strtoul_l.constprop.0+0xa2>
 80096a0:	fb00 4003 	mla	r0, r0, r3, r4
 80096a4:	2701      	movs	r7, #1
 80096a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096aa:	e7ea      	b.n	8009682 <_strtoul_l.constprop.0+0x52>
 80096ac:	2c2b      	cmp	r4, #43	; 0x2b
 80096ae:	bf04      	itt	eq
 80096b0:	782c      	ldrbeq	r4, [r5, #0]
 80096b2:	1c85      	addeq	r5, r0, #2
 80096b4:	e7cd      	b.n	8009652 <_strtoul_l.constprop.0+0x22>
 80096b6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096ba:	f1bc 0f19 	cmp.w	ip, #25
 80096be:	d801      	bhi.n	80096c4 <_strtoul_l.constprop.0+0x94>
 80096c0:	3c37      	subs	r4, #55	; 0x37
 80096c2:	e7e4      	b.n	800968e <_strtoul_l.constprop.0+0x5e>
 80096c4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096c8:	f1bc 0f19 	cmp.w	ip, #25
 80096cc:	d804      	bhi.n	80096d8 <_strtoul_l.constprop.0+0xa8>
 80096ce:	3c57      	subs	r4, #87	; 0x57
 80096d0:	e7dd      	b.n	800968e <_strtoul_l.constprop.0+0x5e>
 80096d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096d6:	e7e6      	b.n	80096a6 <_strtoul_l.constprop.0+0x76>
 80096d8:	2f00      	cmp	r7, #0
 80096da:	da07      	bge.n	80096ec <_strtoul_l.constprop.0+0xbc>
 80096dc:	2322      	movs	r3, #34	; 0x22
 80096de:	f8ce 3000 	str.w	r3, [lr]
 80096e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e6:	b932      	cbnz	r2, 80096f6 <_strtoul_l.constprop.0+0xc6>
 80096e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ec:	b106      	cbz	r6, 80096f0 <_strtoul_l.constprop.0+0xc0>
 80096ee:	4240      	negs	r0, r0
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d0f9      	beq.n	80096e8 <_strtoul_l.constprop.0+0xb8>
 80096f4:	b107      	cbz	r7, 80096f8 <_strtoul_l.constprop.0+0xc8>
 80096f6:	1e69      	subs	r1, r5, #1
 80096f8:	6011      	str	r1, [r2, #0]
 80096fa:	e7f5      	b.n	80096e8 <_strtoul_l.constprop.0+0xb8>
 80096fc:	2430      	movs	r4, #48	; 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1b5      	bne.n	800966e <_strtoul_l.constprop.0+0x3e>
 8009702:	2308      	movs	r3, #8
 8009704:	e7b3      	b.n	800966e <_strtoul_l.constprop.0+0x3e>
 8009706:	2c30      	cmp	r4, #48	; 0x30
 8009708:	d0a9      	beq.n	800965e <_strtoul_l.constprop.0+0x2e>
 800970a:	230a      	movs	r3, #10
 800970c:	e7af      	b.n	800966e <_strtoul_l.constprop.0+0x3e>
 800970e:	bf00      	nop
 8009710:	0800a4f9 	.word	0x0800a4f9

08009714 <_strtoul_r>:
 8009714:	f7ff bf8c 	b.w	8009630 <_strtoul_l.constprop.0>

08009718 <__submore>:
 8009718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009724:	4299      	cmp	r1, r3
 8009726:	d11d      	bne.n	8009764 <__submore+0x4c>
 8009728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800972c:	f7ff fa18 	bl	8008b60 <_malloc_r>
 8009730:	b918      	cbnz	r0, 800973a <__submore+0x22>
 8009732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800973e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009740:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009744:	6360      	str	r0, [r4, #52]	; 0x34
 8009746:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800974a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800974e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009752:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009756:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800975a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800975e:	6020      	str	r0, [r4, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	e7e8      	b.n	8009736 <__submore+0x1e>
 8009764:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009766:	0077      	lsls	r7, r6, #1
 8009768:	463a      	mov	r2, r7
 800976a:	f000 fa29 	bl	8009bc0 <_realloc_r>
 800976e:	4605      	mov	r5, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d0de      	beq.n	8009732 <__submore+0x1a>
 8009774:	eb00 0806 	add.w	r8, r0, r6
 8009778:	4601      	mov	r1, r0
 800977a:	4632      	mov	r2, r6
 800977c:	4640      	mov	r0, r8
 800977e:	f7fe fcaf 	bl	80080e0 <memcpy>
 8009782:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009786:	f8c4 8000 	str.w	r8, [r4]
 800978a:	e7e9      	b.n	8009760 <__submore+0x48>

0800978c <__ascii_wctomb>:
 800978c:	4603      	mov	r3, r0
 800978e:	4608      	mov	r0, r1
 8009790:	b141      	cbz	r1, 80097a4 <__ascii_wctomb+0x18>
 8009792:	2aff      	cmp	r2, #255	; 0xff
 8009794:	d904      	bls.n	80097a0 <__ascii_wctomb+0x14>
 8009796:	228a      	movs	r2, #138	; 0x8a
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800979e:	4770      	bx	lr
 80097a0:	700a      	strb	r2, [r1, #0]
 80097a2:	2001      	movs	r0, #1
 80097a4:	4770      	bx	lr
	...

080097a8 <__assert_func>:
 80097a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097aa:	4614      	mov	r4, r2
 80097ac:	461a      	mov	r2, r3
 80097ae:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <__assert_func+0x2c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4605      	mov	r5, r0
 80097b4:	68d8      	ldr	r0, [r3, #12]
 80097b6:	b14c      	cbz	r4, 80097cc <__assert_func+0x24>
 80097b8:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <__assert_func+0x30>)
 80097ba:	9100      	str	r1, [sp, #0]
 80097bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097c0:	4906      	ldr	r1, [pc, #24]	; (80097dc <__assert_func+0x34>)
 80097c2:	462b      	mov	r3, r5
 80097c4:	f000 f9a2 	bl	8009b0c <fiprintf>
 80097c8:	f000 fc40 	bl	800a04c <abort>
 80097cc:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <__assert_func+0x38>)
 80097ce:	461c      	mov	r4, r3
 80097d0:	e7f3      	b.n	80097ba <__assert_func+0x12>
 80097d2:	bf00      	nop
 80097d4:	2000000c 	.word	0x2000000c
 80097d8:	0800a888 	.word	0x0800a888
 80097dc:	0800a895 	.word	0x0800a895
 80097e0:	0800a8c3 	.word	0x0800a8c3

080097e4 <__sflush_r>:
 80097e4:	898a      	ldrh	r2, [r1, #12]
 80097e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e8:	4605      	mov	r5, r0
 80097ea:	0710      	lsls	r0, r2, #28
 80097ec:	460c      	mov	r4, r1
 80097ee:	d457      	bmi.n	80098a0 <__sflush_r+0xbc>
 80097f0:	684b      	ldr	r3, [r1, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dc04      	bgt.n	8009800 <__sflush_r+0x1c>
 80097f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dc01      	bgt.n	8009800 <__sflush_r+0x1c>
 80097fc:	2000      	movs	r0, #0
 80097fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009802:	2e00      	cmp	r6, #0
 8009804:	d0fa      	beq.n	80097fc <__sflush_r+0x18>
 8009806:	2300      	movs	r3, #0
 8009808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800980c:	682f      	ldr	r7, [r5, #0]
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	d032      	beq.n	8009878 <__sflush_r+0x94>
 8009812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	075a      	lsls	r2, r3, #29
 8009818:	d505      	bpl.n	8009826 <__sflush_r+0x42>
 800981a:	6863      	ldr	r3, [r4, #4]
 800981c:	1ac0      	subs	r0, r0, r3
 800981e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009820:	b10b      	cbz	r3, 8009826 <__sflush_r+0x42>
 8009822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009824:	1ac0      	subs	r0, r0, r3
 8009826:	2300      	movs	r3, #0
 8009828:	4602      	mov	r2, r0
 800982a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800982c:	6a21      	ldr	r1, [r4, #32]
 800982e:	4628      	mov	r0, r5
 8009830:	47b0      	blx	r6
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	d106      	bne.n	8009846 <__sflush_r+0x62>
 8009838:	6829      	ldr	r1, [r5, #0]
 800983a:	291d      	cmp	r1, #29
 800983c:	d82c      	bhi.n	8009898 <__sflush_r+0xb4>
 800983e:	4a29      	ldr	r2, [pc, #164]	; (80098e4 <__sflush_r+0x100>)
 8009840:	40ca      	lsrs	r2, r1
 8009842:	07d6      	lsls	r6, r2, #31
 8009844:	d528      	bpl.n	8009898 <__sflush_r+0xb4>
 8009846:	2200      	movs	r2, #0
 8009848:	6062      	str	r2, [r4, #4]
 800984a:	04d9      	lsls	r1, r3, #19
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	d504      	bpl.n	800985c <__sflush_r+0x78>
 8009852:	1c42      	adds	r2, r0, #1
 8009854:	d101      	bne.n	800985a <__sflush_r+0x76>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	b903      	cbnz	r3, 800985c <__sflush_r+0x78>
 800985a:	6560      	str	r0, [r4, #84]	; 0x54
 800985c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800985e:	602f      	str	r7, [r5, #0]
 8009860:	2900      	cmp	r1, #0
 8009862:	d0cb      	beq.n	80097fc <__sflush_r+0x18>
 8009864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009868:	4299      	cmp	r1, r3
 800986a:	d002      	beq.n	8009872 <__sflush_r+0x8e>
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff f90d 	bl	8008a8c <_free_r>
 8009872:	2000      	movs	r0, #0
 8009874:	6360      	str	r0, [r4, #52]	; 0x34
 8009876:	e7c2      	b.n	80097fe <__sflush_r+0x1a>
 8009878:	6a21      	ldr	r1, [r4, #32]
 800987a:	2301      	movs	r3, #1
 800987c:	4628      	mov	r0, r5
 800987e:	47b0      	blx	r6
 8009880:	1c41      	adds	r1, r0, #1
 8009882:	d1c7      	bne.n	8009814 <__sflush_r+0x30>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0c4      	beq.n	8009814 <__sflush_r+0x30>
 800988a:	2b1d      	cmp	r3, #29
 800988c:	d001      	beq.n	8009892 <__sflush_r+0xae>
 800988e:	2b16      	cmp	r3, #22
 8009890:	d101      	bne.n	8009896 <__sflush_r+0xb2>
 8009892:	602f      	str	r7, [r5, #0]
 8009894:	e7b2      	b.n	80097fc <__sflush_r+0x18>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	e7ae      	b.n	80097fe <__sflush_r+0x1a>
 80098a0:	690f      	ldr	r7, [r1, #16]
 80098a2:	2f00      	cmp	r7, #0
 80098a4:	d0aa      	beq.n	80097fc <__sflush_r+0x18>
 80098a6:	0793      	lsls	r3, r2, #30
 80098a8:	680e      	ldr	r6, [r1, #0]
 80098aa:	bf08      	it	eq
 80098ac:	694b      	ldreq	r3, [r1, #20]
 80098ae:	600f      	str	r7, [r1, #0]
 80098b0:	bf18      	it	ne
 80098b2:	2300      	movne	r3, #0
 80098b4:	1bf6      	subs	r6, r6, r7
 80098b6:	608b      	str	r3, [r1, #8]
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	dd9f      	ble.n	80097fc <__sflush_r+0x18>
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80098c2:	4633      	mov	r3, r6
 80098c4:	463a      	mov	r2, r7
 80098c6:	4628      	mov	r0, r5
 80098c8:	47e0      	blx	ip
 80098ca:	2800      	cmp	r0, #0
 80098cc:	dc06      	bgt.n	80098dc <__sflush_r+0xf8>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098da:	e790      	b.n	80097fe <__sflush_r+0x1a>
 80098dc:	4407      	add	r7, r0
 80098de:	1a36      	subs	r6, r6, r0
 80098e0:	e7ea      	b.n	80098b8 <__sflush_r+0xd4>
 80098e2:	bf00      	nop
 80098e4:	20400001 	.word	0x20400001

080098e8 <_fflush_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	b913      	cbnz	r3, 80098f8 <_fflush_r+0x10>
 80098f2:	2500      	movs	r5, #0
 80098f4:	4628      	mov	r0, r5
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	b118      	cbz	r0, 8009902 <_fflush_r+0x1a>
 80098fa:	6983      	ldr	r3, [r0, #24]
 80098fc:	b90b      	cbnz	r3, 8009902 <_fflush_r+0x1a>
 80098fe:	f000 f887 	bl	8009a10 <__sinit>
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <_fflush_r+0x6c>)
 8009904:	429c      	cmp	r4, r3
 8009906:	d11b      	bne.n	8009940 <_fflush_r+0x58>
 8009908:	686c      	ldr	r4, [r5, #4]
 800990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0ef      	beq.n	80098f2 <_fflush_r+0xa>
 8009912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009914:	07d0      	lsls	r0, r2, #31
 8009916:	d404      	bmi.n	8009922 <_fflush_r+0x3a>
 8009918:	0599      	lsls	r1, r3, #22
 800991a:	d402      	bmi.n	8009922 <_fflush_r+0x3a>
 800991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991e:	f000 f927 	bl	8009b70 <__retarget_lock_acquire_recursive>
 8009922:	4628      	mov	r0, r5
 8009924:	4621      	mov	r1, r4
 8009926:	f7ff ff5d 	bl	80097e4 <__sflush_r>
 800992a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800992c:	07da      	lsls	r2, r3, #31
 800992e:	4605      	mov	r5, r0
 8009930:	d4e0      	bmi.n	80098f4 <_fflush_r+0xc>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	059b      	lsls	r3, r3, #22
 8009936:	d4dd      	bmi.n	80098f4 <_fflush_r+0xc>
 8009938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993a:	f000 f91a 	bl	8009b72 <__retarget_lock_release_recursive>
 800993e:	e7d9      	b.n	80098f4 <_fflush_r+0xc>
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <_fflush_r+0x70>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d101      	bne.n	800994a <_fflush_r+0x62>
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	e7df      	b.n	800990a <_fflush_r+0x22>
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <_fflush_r+0x74>)
 800994c:	429c      	cmp	r4, r3
 800994e:	bf08      	it	eq
 8009950:	68ec      	ldreq	r4, [r5, #12]
 8009952:	e7da      	b.n	800990a <_fflush_r+0x22>
 8009954:	0800a8e4 	.word	0x0800a8e4
 8009958:	0800a904 	.word	0x0800a904
 800995c:	0800a8c4 	.word	0x0800a8c4

08009960 <std>:
 8009960:	2300      	movs	r3, #0
 8009962:	b510      	push	{r4, lr}
 8009964:	4604      	mov	r4, r0
 8009966:	e9c0 3300 	strd	r3, r3, [r0]
 800996a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800996e:	6083      	str	r3, [r0, #8]
 8009970:	8181      	strh	r1, [r0, #12]
 8009972:	6643      	str	r3, [r0, #100]	; 0x64
 8009974:	81c2      	strh	r2, [r0, #14]
 8009976:	6183      	str	r3, [r0, #24]
 8009978:	4619      	mov	r1, r3
 800997a:	2208      	movs	r2, #8
 800997c:	305c      	adds	r0, #92	; 0x5c
 800997e:	f7fb fbcf 	bl	8005120 <memset>
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <std+0x38>)
 8009984:	6263      	str	r3, [r4, #36]	; 0x24
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <std+0x3c>)
 8009988:	62a3      	str	r3, [r4, #40]	; 0x28
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x40>)
 800998c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x44>)
 8009990:	6224      	str	r4, [r4, #32]
 8009992:	6323      	str	r3, [r4, #48]	; 0x30
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	08005e9d 	.word	0x08005e9d
 800999c:	08005ec3 	.word	0x08005ec3
 80099a0:	08005efb 	.word	0x08005efb
 80099a4:	08005f1f 	.word	0x08005f1f

080099a8 <_cleanup_r>:
 80099a8:	4901      	ldr	r1, [pc, #4]	; (80099b0 <_cleanup_r+0x8>)
 80099aa:	f000 b8c1 	b.w	8009b30 <_fwalk_reent>
 80099ae:	bf00      	nop
 80099b0:	080098e9 	.word	0x080098e9

080099b4 <__sfmoreglue>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	2268      	movs	r2, #104	; 0x68
 80099b8:	1e4d      	subs	r5, r1, #1
 80099ba:	4355      	muls	r5, r2
 80099bc:	460e      	mov	r6, r1
 80099be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099c2:	f7ff f8cd 	bl	8008b60 <_malloc_r>
 80099c6:	4604      	mov	r4, r0
 80099c8:	b140      	cbz	r0, 80099dc <__sfmoreglue+0x28>
 80099ca:	2100      	movs	r1, #0
 80099cc:	e9c0 1600 	strd	r1, r6, [r0]
 80099d0:	300c      	adds	r0, #12
 80099d2:	60a0      	str	r0, [r4, #8]
 80099d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099d8:	f7fb fba2 	bl	8005120 <memset>
 80099dc:	4620      	mov	r0, r4
 80099de:	bd70      	pop	{r4, r5, r6, pc}

080099e0 <__sfp_lock_acquire>:
 80099e0:	4801      	ldr	r0, [pc, #4]	; (80099e8 <__sfp_lock_acquire+0x8>)
 80099e2:	f000 b8c5 	b.w	8009b70 <__retarget_lock_acquire_recursive>
 80099e6:	bf00      	nop
 80099e8:	200002ed 	.word	0x200002ed

080099ec <__sfp_lock_release>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__sfp_lock_release+0x8>)
 80099ee:	f000 b8c0 	b.w	8009b72 <__retarget_lock_release_recursive>
 80099f2:	bf00      	nop
 80099f4:	200002ed 	.word	0x200002ed

080099f8 <__sinit_lock_acquire>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__sinit_lock_acquire+0x8>)
 80099fa:	f000 b8b9 	b.w	8009b70 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	200002ee 	.word	0x200002ee

08009a04 <__sinit_lock_release>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__sinit_lock_release+0x8>)
 8009a06:	f000 b8b4 	b.w	8009b72 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	200002ee 	.word	0x200002ee

08009a10 <__sinit>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4604      	mov	r4, r0
 8009a14:	f7ff fff0 	bl	80099f8 <__sinit_lock_acquire>
 8009a18:	69a3      	ldr	r3, [r4, #24]
 8009a1a:	b11b      	cbz	r3, 8009a24 <__sinit+0x14>
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f7ff bff0 	b.w	8009a04 <__sinit_lock_release>
 8009a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a28:	6523      	str	r3, [r4, #80]	; 0x50
 8009a2a:	4b13      	ldr	r3, [pc, #76]	; (8009a78 <__sinit+0x68>)
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <__sinit+0x6c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	bf04      	itt	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	61a3      	streq	r3, [r4, #24]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f820 	bl	8009a80 <__sfp>
 8009a40:	6060      	str	r0, [r4, #4]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f81c 	bl	8009a80 <__sfp>
 8009a48:	60a0      	str	r0, [r4, #8]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f818 	bl	8009a80 <__sfp>
 8009a50:	2200      	movs	r2, #0
 8009a52:	60e0      	str	r0, [r4, #12]
 8009a54:	2104      	movs	r1, #4
 8009a56:	6860      	ldr	r0, [r4, #4]
 8009a58:	f7ff ff82 	bl	8009960 <std>
 8009a5c:	68a0      	ldr	r0, [r4, #8]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	2109      	movs	r1, #9
 8009a62:	f7ff ff7d 	bl	8009960 <std>
 8009a66:	68e0      	ldr	r0, [r4, #12]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	2112      	movs	r1, #18
 8009a6c:	f7ff ff78 	bl	8009960 <std>
 8009a70:	2301      	movs	r3, #1
 8009a72:	61a3      	str	r3, [r4, #24]
 8009a74:	e7d2      	b.n	8009a1c <__sinit+0xc>
 8009a76:	bf00      	nop
 8009a78:	0800a468 	.word	0x0800a468
 8009a7c:	080099a9 	.word	0x080099a9

08009a80 <__sfp>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	4607      	mov	r7, r0
 8009a84:	f7ff ffac 	bl	80099e0 <__sfp_lock_acquire>
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <__sfp+0x84>)
 8009a8a:	681e      	ldr	r6, [r3, #0]
 8009a8c:	69b3      	ldr	r3, [r6, #24]
 8009a8e:	b913      	cbnz	r3, 8009a96 <__sfp+0x16>
 8009a90:	4630      	mov	r0, r6
 8009a92:	f7ff ffbd 	bl	8009a10 <__sinit>
 8009a96:	3648      	adds	r6, #72	; 0x48
 8009a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	d503      	bpl.n	8009aa8 <__sfp+0x28>
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	b30b      	cbz	r3, 8009ae8 <__sfp+0x68>
 8009aa4:	6836      	ldr	r6, [r6, #0]
 8009aa6:	e7f7      	b.n	8009a98 <__sfp+0x18>
 8009aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009aac:	b9d5      	cbnz	r5, 8009ae4 <__sfp+0x64>
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <__sfp+0x88>)
 8009ab0:	60e3      	str	r3, [r4, #12]
 8009ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ab8:	f000 f859 	bl	8009b6e <__retarget_lock_init_recursive>
 8009abc:	f7ff ff96 	bl	80099ec <__sfp_lock_release>
 8009ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ac8:	6025      	str	r5, [r4, #0]
 8009aca:	61a5      	str	r5, [r4, #24]
 8009acc:	2208      	movs	r2, #8
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ad4:	f7fb fb24 	bl	8005120 <memset>
 8009ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae4:	3468      	adds	r4, #104	; 0x68
 8009ae6:	e7d9      	b.n	8009a9c <__sfp+0x1c>
 8009ae8:	2104      	movs	r1, #4
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7ff ff62 	bl	80099b4 <__sfmoreglue>
 8009af0:	4604      	mov	r4, r0
 8009af2:	6030      	str	r0, [r6, #0]
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d1d5      	bne.n	8009aa4 <__sfp+0x24>
 8009af8:	f7ff ff78 	bl	80099ec <__sfp_lock_release>
 8009afc:	230c      	movs	r3, #12
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	e7ee      	b.n	8009ae0 <__sfp+0x60>
 8009b02:	bf00      	nop
 8009b04:	0800a468 	.word	0x0800a468
 8009b08:	ffff0001 	.word	0xffff0001

08009b0c <fiprintf>:
 8009b0c:	b40e      	push	{r1, r2, r3}
 8009b0e:	b503      	push	{r0, r1, lr}
 8009b10:	4601      	mov	r1, r0
 8009b12:	ab03      	add	r3, sp, #12
 8009b14:	4805      	ldr	r0, [pc, #20]	; (8009b2c <fiprintf+0x20>)
 8009b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	f000 f8a5 	bl	8009c6c <_vfiprintf_r>
 8009b22:	b002      	add	sp, #8
 8009b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b28:	b003      	add	sp, #12
 8009b2a:	4770      	bx	lr
 8009b2c:	2000000c 	.word	0x2000000c

08009b30 <_fwalk_reent>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	4606      	mov	r6, r0
 8009b36:	4688      	mov	r8, r1
 8009b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b3c:	2700      	movs	r7, #0
 8009b3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b42:	f1b9 0901 	subs.w	r9, r9, #1
 8009b46:	d505      	bpl.n	8009b54 <_fwalk_reent+0x24>
 8009b48:	6824      	ldr	r4, [r4, #0]
 8009b4a:	2c00      	cmp	r4, #0
 8009b4c:	d1f7      	bne.n	8009b3e <_fwalk_reent+0xe>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b54:	89ab      	ldrh	r3, [r5, #12]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d907      	bls.n	8009b6a <_fwalk_reent+0x3a>
 8009b5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	d003      	beq.n	8009b6a <_fwalk_reent+0x3a>
 8009b62:	4629      	mov	r1, r5
 8009b64:	4630      	mov	r0, r6
 8009b66:	47c0      	blx	r8
 8009b68:	4307      	orrs	r7, r0
 8009b6a:	3568      	adds	r5, #104	; 0x68
 8009b6c:	e7e9      	b.n	8009b42 <_fwalk_reent+0x12>

08009b6e <__retarget_lock_init_recursive>:
 8009b6e:	4770      	bx	lr

08009b70 <__retarget_lock_acquire_recursive>:
 8009b70:	4770      	bx	lr

08009b72 <__retarget_lock_release_recursive>:
 8009b72:	4770      	bx	lr

08009b74 <memmove>:
 8009b74:	4288      	cmp	r0, r1
 8009b76:	b510      	push	{r4, lr}
 8009b78:	eb01 0402 	add.w	r4, r1, r2
 8009b7c:	d902      	bls.n	8009b84 <memmove+0x10>
 8009b7e:	4284      	cmp	r4, r0
 8009b80:	4623      	mov	r3, r4
 8009b82:	d807      	bhi.n	8009b94 <memmove+0x20>
 8009b84:	1e43      	subs	r3, r0, #1
 8009b86:	42a1      	cmp	r1, r4
 8009b88:	d008      	beq.n	8009b9c <memmove+0x28>
 8009b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b92:	e7f8      	b.n	8009b86 <memmove+0x12>
 8009b94:	4402      	add	r2, r0
 8009b96:	4601      	mov	r1, r0
 8009b98:	428a      	cmp	r2, r1
 8009b9a:	d100      	bne.n	8009b9e <memmove+0x2a>
 8009b9c:	bd10      	pop	{r4, pc}
 8009b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ba6:	e7f7      	b.n	8009b98 <memmove+0x24>

08009ba8 <__malloc_lock>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__malloc_lock+0x8>)
 8009baa:	f7ff bfe1 	b.w	8009b70 <__retarget_lock_acquire_recursive>
 8009bae:	bf00      	nop
 8009bb0:	200002ec 	.word	0x200002ec

08009bb4 <__malloc_unlock>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__malloc_unlock+0x8>)
 8009bb6:	f7ff bfdc 	b.w	8009b72 <__retarget_lock_release_recursive>
 8009bba:	bf00      	nop
 8009bbc:	200002ec 	.word	0x200002ec

08009bc0 <_realloc_r>:
 8009bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	460e      	mov	r6, r1
 8009bca:	b921      	cbnz	r1, 8009bd6 <_realloc_r+0x16>
 8009bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	f7fe bfc5 	b.w	8008b60 <_malloc_r>
 8009bd6:	b92a      	cbnz	r2, 8009be4 <_realloc_r+0x24>
 8009bd8:	f7fe ff58 	bl	8008a8c <_free_r>
 8009bdc:	4625      	mov	r5, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	f000 fa9e 	bl	800a124 <_malloc_usable_size_r>
 8009be8:	4284      	cmp	r4, r0
 8009bea:	4607      	mov	r7, r0
 8009bec:	d802      	bhi.n	8009bf4 <_realloc_r+0x34>
 8009bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bf2:	d812      	bhi.n	8009c1a <_realloc_r+0x5a>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f7fe ffb2 	bl	8008b60 <_malloc_r>
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0ed      	beq.n	8009bde <_realloc_r+0x1e>
 8009c02:	42bc      	cmp	r4, r7
 8009c04:	4622      	mov	r2, r4
 8009c06:	4631      	mov	r1, r6
 8009c08:	bf28      	it	cs
 8009c0a:	463a      	movcs	r2, r7
 8009c0c:	f7fe fa68 	bl	80080e0 <memcpy>
 8009c10:	4631      	mov	r1, r6
 8009c12:	4640      	mov	r0, r8
 8009c14:	f7fe ff3a 	bl	8008a8c <_free_r>
 8009c18:	e7e1      	b.n	8009bde <_realloc_r+0x1e>
 8009c1a:	4635      	mov	r5, r6
 8009c1c:	e7df      	b.n	8009bde <_realloc_r+0x1e>

08009c1e <__sfputc_r>:
 8009c1e:	6893      	ldr	r3, [r2, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	b410      	push	{r4}
 8009c26:	6093      	str	r3, [r2, #8]
 8009c28:	da07      	bge.n	8009c3a <__sfputc_r+0x1c>
 8009c2a:	6994      	ldr	r4, [r2, #24]
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	db01      	blt.n	8009c34 <__sfputc_r+0x16>
 8009c30:	290a      	cmp	r1, #10
 8009c32:	d102      	bne.n	8009c3a <__sfputc_r+0x1c>
 8009c34:	bc10      	pop	{r4}
 8009c36:	f000 b949 	b.w	8009ecc <__swbuf_r>
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	1c58      	adds	r0, r3, #1
 8009c3e:	6010      	str	r0, [r2, #0]
 8009c40:	7019      	strb	r1, [r3, #0]
 8009c42:	4608      	mov	r0, r1
 8009c44:	bc10      	pop	{r4}
 8009c46:	4770      	bx	lr

08009c48 <__sfputs_r>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	18d5      	adds	r5, r2, r3
 8009c52:	42ac      	cmp	r4, r5
 8009c54:	d101      	bne.n	8009c5a <__sfputs_r+0x12>
 8009c56:	2000      	movs	r0, #0
 8009c58:	e007      	b.n	8009c6a <__sfputs_r+0x22>
 8009c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5e:	463a      	mov	r2, r7
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ffdc 	bl	8009c1e <__sfputc_r>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	d1f3      	bne.n	8009c52 <__sfputs_r+0xa>
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c6c <_vfiprintf_r>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	460d      	mov	r5, r1
 8009c72:	b09d      	sub	sp, #116	; 0x74
 8009c74:	4614      	mov	r4, r2
 8009c76:	4698      	mov	r8, r3
 8009c78:	4606      	mov	r6, r0
 8009c7a:	b118      	cbz	r0, 8009c84 <_vfiprintf_r+0x18>
 8009c7c:	6983      	ldr	r3, [r0, #24]
 8009c7e:	b90b      	cbnz	r3, 8009c84 <_vfiprintf_r+0x18>
 8009c80:	f7ff fec6 	bl	8009a10 <__sinit>
 8009c84:	4b89      	ldr	r3, [pc, #548]	; (8009eac <_vfiprintf_r+0x240>)
 8009c86:	429d      	cmp	r5, r3
 8009c88:	d11b      	bne.n	8009cc2 <_vfiprintf_r+0x56>
 8009c8a:	6875      	ldr	r5, [r6, #4]
 8009c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c8e:	07d9      	lsls	r1, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_vfiprintf_r+0x32>
 8009c92:	89ab      	ldrh	r3, [r5, #12]
 8009c94:	059a      	lsls	r2, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_vfiprintf_r+0x32>
 8009c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c9a:	f7ff ff69 	bl	8009b70 <__retarget_lock_acquire_recursive>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	071b      	lsls	r3, r3, #28
 8009ca2:	d501      	bpl.n	8009ca8 <_vfiprintf_r+0x3c>
 8009ca4:	692b      	ldr	r3, [r5, #16]
 8009ca6:	b9eb      	cbnz	r3, 8009ce4 <_vfiprintf_r+0x78>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4630      	mov	r0, r6
 8009cac:	f000 f960 	bl	8009f70 <__swsetup_r>
 8009cb0:	b1c0      	cbz	r0, 8009ce4 <_vfiprintf_r+0x78>
 8009cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb4:	07dc      	lsls	r4, r3, #31
 8009cb6:	d50e      	bpl.n	8009cd6 <_vfiprintf_r+0x6a>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cbc:	b01d      	add	sp, #116	; 0x74
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	4b7b      	ldr	r3, [pc, #492]	; (8009eb0 <_vfiprintf_r+0x244>)
 8009cc4:	429d      	cmp	r5, r3
 8009cc6:	d101      	bne.n	8009ccc <_vfiprintf_r+0x60>
 8009cc8:	68b5      	ldr	r5, [r6, #8]
 8009cca:	e7df      	b.n	8009c8c <_vfiprintf_r+0x20>
 8009ccc:	4b79      	ldr	r3, [pc, #484]	; (8009eb4 <_vfiprintf_r+0x248>)
 8009cce:	429d      	cmp	r5, r3
 8009cd0:	bf08      	it	eq
 8009cd2:	68f5      	ldreq	r5, [r6, #12]
 8009cd4:	e7da      	b.n	8009c8c <_vfiprintf_r+0x20>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	0598      	lsls	r0, r3, #22
 8009cda:	d4ed      	bmi.n	8009cb8 <_vfiprintf_r+0x4c>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cde:	f7ff ff48 	bl	8009b72 <__retarget_lock_release_recursive>
 8009ce2:	e7e9      	b.n	8009cb8 <_vfiprintf_r+0x4c>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf2:	2330      	movs	r3, #48	; 0x30
 8009cf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009eb8 <_vfiprintf_r+0x24c>
 8009cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cfc:	f04f 0901 	mov.w	r9, #1
 8009d00:	4623      	mov	r3, r4
 8009d02:	469a      	mov	sl, r3
 8009d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d08:	b10a      	cbz	r2, 8009d0e <_vfiprintf_r+0xa2>
 8009d0a:	2a25      	cmp	r2, #37	; 0x25
 8009d0c:	d1f9      	bne.n	8009d02 <_vfiprintf_r+0x96>
 8009d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d12:	d00b      	beq.n	8009d2c <_vfiprintf_r+0xc0>
 8009d14:	465b      	mov	r3, fp
 8009d16:	4622      	mov	r2, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7ff ff94 	bl	8009c48 <__sfputs_r>
 8009d20:	3001      	adds	r0, #1
 8009d22:	f000 80aa 	beq.w	8009e7a <_vfiprintf_r+0x20e>
 8009d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d28:	445a      	add	r2, fp
 8009d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 80a2 	beq.w	8009e7a <_vfiprintf_r+0x20e>
 8009d36:	2300      	movs	r3, #0
 8009d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d40:	f10a 0a01 	add.w	sl, sl, #1
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d4e:	4654      	mov	r4, sl
 8009d50:	2205      	movs	r2, #5
 8009d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d56:	4858      	ldr	r0, [pc, #352]	; (8009eb8 <_vfiprintf_r+0x24c>)
 8009d58:	f7f6 fa1a 	bl	8000190 <memchr>
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	b9d8      	cbnz	r0, 8009d98 <_vfiprintf_r+0x12c>
 8009d60:	06d1      	lsls	r1, r2, #27
 8009d62:	bf44      	itt	mi
 8009d64:	2320      	movmi	r3, #32
 8009d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6a:	0713      	lsls	r3, r2, #28
 8009d6c:	bf44      	itt	mi
 8009d6e:	232b      	movmi	r3, #43	; 0x2b
 8009d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d74:	f89a 3000 	ldrb.w	r3, [sl]
 8009d78:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7a:	d015      	beq.n	8009da8 <_vfiprintf_r+0x13c>
 8009d7c:	9a07      	ldr	r2, [sp, #28]
 8009d7e:	4654      	mov	r4, sl
 8009d80:	2000      	movs	r0, #0
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4621      	mov	r1, r4
 8009d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8c:	3b30      	subs	r3, #48	; 0x30
 8009d8e:	2b09      	cmp	r3, #9
 8009d90:	d94e      	bls.n	8009e30 <_vfiprintf_r+0x1c4>
 8009d92:	b1b0      	cbz	r0, 8009dc2 <_vfiprintf_r+0x156>
 8009d94:	9207      	str	r2, [sp, #28]
 8009d96:	e014      	b.n	8009dc2 <_vfiprintf_r+0x156>
 8009d98:	eba0 0308 	sub.w	r3, r0, r8
 8009d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009da0:	4313      	orrs	r3, r2
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	46a2      	mov	sl, r4
 8009da6:	e7d2      	b.n	8009d4e <_vfiprintf_r+0xe2>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	1d19      	adds	r1, r3, #4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	9103      	str	r1, [sp, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bfbb      	ittet	lt
 8009db4:	425b      	neglt	r3, r3
 8009db6:	f042 0202 	orrlt.w	r2, r2, #2
 8009dba:	9307      	strge	r3, [sp, #28]
 8009dbc:	9307      	strlt	r3, [sp, #28]
 8009dbe:	bfb8      	it	lt
 8009dc0:	9204      	strlt	r2, [sp, #16]
 8009dc2:	7823      	ldrb	r3, [r4, #0]
 8009dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc6:	d10c      	bne.n	8009de2 <_vfiprintf_r+0x176>
 8009dc8:	7863      	ldrb	r3, [r4, #1]
 8009dca:	2b2a      	cmp	r3, #42	; 0x2a
 8009dcc:	d135      	bne.n	8009e3a <_vfiprintf_r+0x1ce>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	9203      	str	r2, [sp, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfb8      	it	lt
 8009dda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009dde:	3402      	adds	r4, #2
 8009de0:	9305      	str	r3, [sp, #20]
 8009de2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009ebc <_vfiprintf_r+0x250>
 8009de6:	7821      	ldrb	r1, [r4, #0]
 8009de8:	2203      	movs	r2, #3
 8009dea:	4650      	mov	r0, sl
 8009dec:	f7f6 f9d0 	bl	8000190 <memchr>
 8009df0:	b140      	cbz	r0, 8009e04 <_vfiprintf_r+0x198>
 8009df2:	2340      	movs	r3, #64	; 0x40
 8009df4:	eba0 000a 	sub.w	r0, r0, sl
 8009df8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	4303      	orrs	r3, r0
 8009e00:	3401      	adds	r4, #1
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e08:	482d      	ldr	r0, [pc, #180]	; (8009ec0 <_vfiprintf_r+0x254>)
 8009e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e0e:	2206      	movs	r2, #6
 8009e10:	f7f6 f9be 	bl	8000190 <memchr>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d03f      	beq.n	8009e98 <_vfiprintf_r+0x22c>
 8009e18:	4b2a      	ldr	r3, [pc, #168]	; (8009ec4 <_vfiprintf_r+0x258>)
 8009e1a:	bb1b      	cbnz	r3, 8009e64 <_vfiprintf_r+0x1f8>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	3307      	adds	r3, #7
 8009e20:	f023 0307 	bic.w	r3, r3, #7
 8009e24:	3308      	adds	r3, #8
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	443b      	add	r3, r7
 8009e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2e:	e767      	b.n	8009d00 <_vfiprintf_r+0x94>
 8009e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e34:	460c      	mov	r4, r1
 8009e36:	2001      	movs	r0, #1
 8009e38:	e7a5      	b.n	8009d86 <_vfiprintf_r+0x11a>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	3401      	adds	r4, #1
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	4619      	mov	r1, r3
 8009e42:	f04f 0c0a 	mov.w	ip, #10
 8009e46:	4620      	mov	r0, r4
 8009e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4c:	3a30      	subs	r2, #48	; 0x30
 8009e4e:	2a09      	cmp	r2, #9
 8009e50:	d903      	bls.n	8009e5a <_vfiprintf_r+0x1ee>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0c5      	beq.n	8009de2 <_vfiprintf_r+0x176>
 8009e56:	9105      	str	r1, [sp, #20]
 8009e58:	e7c3      	b.n	8009de2 <_vfiprintf_r+0x176>
 8009e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e5e:	4604      	mov	r4, r0
 8009e60:	2301      	movs	r3, #1
 8009e62:	e7f0      	b.n	8009e46 <_vfiprintf_r+0x1da>
 8009e64:	ab03      	add	r3, sp, #12
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	462a      	mov	r2, r5
 8009e6a:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <_vfiprintf_r+0x25c>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7fb f9fc 	bl	800526c <_printf_float>
 8009e74:	4607      	mov	r7, r0
 8009e76:	1c78      	adds	r0, r7, #1
 8009e78:	d1d6      	bne.n	8009e28 <_vfiprintf_r+0x1bc>
 8009e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e7c:	07d9      	lsls	r1, r3, #31
 8009e7e:	d405      	bmi.n	8009e8c <_vfiprintf_r+0x220>
 8009e80:	89ab      	ldrh	r3, [r5, #12]
 8009e82:	059a      	lsls	r2, r3, #22
 8009e84:	d402      	bmi.n	8009e8c <_vfiprintf_r+0x220>
 8009e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e88:	f7ff fe73 	bl	8009b72 <__retarget_lock_release_recursive>
 8009e8c:	89ab      	ldrh	r3, [r5, #12]
 8009e8e:	065b      	lsls	r3, r3, #25
 8009e90:	f53f af12 	bmi.w	8009cb8 <_vfiprintf_r+0x4c>
 8009e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e96:	e711      	b.n	8009cbc <_vfiprintf_r+0x50>
 8009e98:	ab03      	add	r3, sp, #12
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <_vfiprintf_r+0x25c>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7fb fc7a 	bl	800579c <_printf_i>
 8009ea8:	e7e4      	b.n	8009e74 <_vfiprintf_r+0x208>
 8009eaa:	bf00      	nop
 8009eac:	0800a8e4 	.word	0x0800a8e4
 8009eb0:	0800a904 	.word	0x0800a904
 8009eb4:	0800a8c4 	.word	0x0800a8c4
 8009eb8:	0800a85c 	.word	0x0800a85c
 8009ebc:	0800a862 	.word	0x0800a862
 8009ec0:	0800a866 	.word	0x0800a866
 8009ec4:	0800526d 	.word	0x0800526d
 8009ec8:	08009c49 	.word	0x08009c49

08009ecc <__swbuf_r>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	460e      	mov	r6, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	b118      	cbz	r0, 8009ede <__swbuf_r+0x12>
 8009ed6:	6983      	ldr	r3, [r0, #24]
 8009ed8:	b90b      	cbnz	r3, 8009ede <__swbuf_r+0x12>
 8009eda:	f7ff fd99 	bl	8009a10 <__sinit>
 8009ede:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <__swbuf_r+0x98>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d12b      	bne.n	8009f3c <__swbuf_r+0x70>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	69a3      	ldr	r3, [r4, #24]
 8009ee8:	60a3      	str	r3, [r4, #8]
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	071a      	lsls	r2, r3, #28
 8009eee:	d52f      	bpl.n	8009f50 <__swbuf_r+0x84>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	b36b      	cbz	r3, 8009f50 <__swbuf_r+0x84>
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	1ac0      	subs	r0, r0, r3
 8009efa:	6963      	ldr	r3, [r4, #20]
 8009efc:	b2f6      	uxtb	r6, r6
 8009efe:	4283      	cmp	r3, r0
 8009f00:	4637      	mov	r7, r6
 8009f02:	dc04      	bgt.n	8009f0e <__swbuf_r+0x42>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	f7ff fcee 	bl	80098e8 <_fflush_r>
 8009f0c:	bb30      	cbnz	r0, 8009f5c <__swbuf_r+0x90>
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	60a3      	str	r3, [r4, #8]
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	6022      	str	r2, [r4, #0]
 8009f1a:	701e      	strb	r6, [r3, #0]
 8009f1c:	6963      	ldr	r3, [r4, #20]
 8009f1e:	3001      	adds	r0, #1
 8009f20:	4283      	cmp	r3, r0
 8009f22:	d004      	beq.n	8009f2e <__swbuf_r+0x62>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	07db      	lsls	r3, r3, #31
 8009f28:	d506      	bpl.n	8009f38 <__swbuf_r+0x6c>
 8009f2a:	2e0a      	cmp	r6, #10
 8009f2c:	d104      	bne.n	8009f38 <__swbuf_r+0x6c>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7ff fcd9 	bl	80098e8 <_fflush_r>
 8009f36:	b988      	cbnz	r0, 8009f5c <__swbuf_r+0x90>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <__swbuf_r+0x9c>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d101      	bne.n	8009f46 <__swbuf_r+0x7a>
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	e7cf      	b.n	8009ee6 <__swbuf_r+0x1a>
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <__swbuf_r+0xa0>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	bf08      	it	eq
 8009f4c:	68ec      	ldreq	r4, [r5, #12]
 8009f4e:	e7ca      	b.n	8009ee6 <__swbuf_r+0x1a>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f80c 	bl	8009f70 <__swsetup_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0cb      	beq.n	8009ef4 <__swbuf_r+0x28>
 8009f5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f60:	e7ea      	b.n	8009f38 <__swbuf_r+0x6c>
 8009f62:	bf00      	nop
 8009f64:	0800a8e4 	.word	0x0800a8e4
 8009f68:	0800a904 	.word	0x0800a904
 8009f6c:	0800a8c4 	.word	0x0800a8c4

08009f70 <__swsetup_r>:
 8009f70:	4b32      	ldr	r3, [pc, #200]	; (800a03c <__swsetup_r+0xcc>)
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	4606      	mov	r6, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	b125      	cbz	r5, 8009f86 <__swsetup_r+0x16>
 8009f7c:	69ab      	ldr	r3, [r5, #24]
 8009f7e:	b913      	cbnz	r3, 8009f86 <__swsetup_r+0x16>
 8009f80:	4628      	mov	r0, r5
 8009f82:	f7ff fd45 	bl	8009a10 <__sinit>
 8009f86:	4b2e      	ldr	r3, [pc, #184]	; (800a040 <__swsetup_r+0xd0>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	d10f      	bne.n	8009fac <__swsetup_r+0x3c>
 8009f8c:	686c      	ldr	r4, [r5, #4]
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f94:	0719      	lsls	r1, r3, #28
 8009f96:	d42c      	bmi.n	8009ff2 <__swsetup_r+0x82>
 8009f98:	06dd      	lsls	r5, r3, #27
 8009f9a:	d411      	bmi.n	8009fc0 <__swsetup_r+0x50>
 8009f9c:	2309      	movs	r3, #9
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009faa:	e03e      	b.n	800a02a <__swsetup_r+0xba>
 8009fac:	4b25      	ldr	r3, [pc, #148]	; (800a044 <__swsetup_r+0xd4>)
 8009fae:	429c      	cmp	r4, r3
 8009fb0:	d101      	bne.n	8009fb6 <__swsetup_r+0x46>
 8009fb2:	68ac      	ldr	r4, [r5, #8]
 8009fb4:	e7eb      	b.n	8009f8e <__swsetup_r+0x1e>
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <__swsetup_r+0xd8>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	bf08      	it	eq
 8009fbc:	68ec      	ldreq	r4, [r5, #12]
 8009fbe:	e7e6      	b.n	8009f8e <__swsetup_r+0x1e>
 8009fc0:	0758      	lsls	r0, r3, #29
 8009fc2:	d512      	bpl.n	8009fea <__swsetup_r+0x7a>
 8009fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc6:	b141      	cbz	r1, 8009fda <__swsetup_r+0x6a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__swsetup_r+0x66>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7fe fd5b 	bl	8008a8c <_free_r>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f043 0308 	orr.w	r3, r3, #8
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	b94b      	cbnz	r3, 800a00a <__swsetup_r+0x9a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a000:	d003      	beq.n	800a00a <__swsetup_r+0x9a>
 800a002:	4621      	mov	r1, r4
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f84d 	bl	800a0a4 <__smakebuf_r>
 800a00a:	89a0      	ldrh	r0, [r4, #12]
 800a00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a010:	f010 0301 	ands.w	r3, r0, #1
 800a014:	d00a      	beq.n	800a02c <__swsetup_r+0xbc>
 800a016:	2300      	movs	r3, #0
 800a018:	60a3      	str	r3, [r4, #8]
 800a01a:	6963      	ldr	r3, [r4, #20]
 800a01c:	425b      	negs	r3, r3
 800a01e:	61a3      	str	r3, [r4, #24]
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	b943      	cbnz	r3, 800a036 <__swsetup_r+0xc6>
 800a024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a028:	d1ba      	bne.n	8009fa0 <__swsetup_r+0x30>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	0781      	lsls	r1, r0, #30
 800a02e:	bf58      	it	pl
 800a030:	6963      	ldrpl	r3, [r4, #20]
 800a032:	60a3      	str	r3, [r4, #8]
 800a034:	e7f4      	b.n	800a020 <__swsetup_r+0xb0>
 800a036:	2000      	movs	r0, #0
 800a038:	e7f7      	b.n	800a02a <__swsetup_r+0xba>
 800a03a:	bf00      	nop
 800a03c:	2000000c 	.word	0x2000000c
 800a040:	0800a8e4 	.word	0x0800a8e4
 800a044:	0800a904 	.word	0x0800a904
 800a048:	0800a8c4 	.word	0x0800a8c4

0800a04c <abort>:
 800a04c:	b508      	push	{r3, lr}
 800a04e:	2006      	movs	r0, #6
 800a050:	f000 f898 	bl	800a184 <raise>
 800a054:	2001      	movs	r0, #1
 800a056:	f7f7 fda1 	bl	8001b9c <_exit>

0800a05a <__swhatbuf_r>:
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	460e      	mov	r6, r1
 800a05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a062:	2900      	cmp	r1, #0
 800a064:	b096      	sub	sp, #88	; 0x58
 800a066:	4614      	mov	r4, r2
 800a068:	461d      	mov	r5, r3
 800a06a:	da08      	bge.n	800a07e <__swhatbuf_r+0x24>
 800a06c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	602a      	str	r2, [r5, #0]
 800a074:	061a      	lsls	r2, r3, #24
 800a076:	d410      	bmi.n	800a09a <__swhatbuf_r+0x40>
 800a078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a07c:	e00e      	b.n	800a09c <__swhatbuf_r+0x42>
 800a07e:	466a      	mov	r2, sp
 800a080:	f000 f89c 	bl	800a1bc <_fstat_r>
 800a084:	2800      	cmp	r0, #0
 800a086:	dbf1      	blt.n	800a06c <__swhatbuf_r+0x12>
 800a088:	9a01      	ldr	r2, [sp, #4]
 800a08a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a08e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a092:	425a      	negs	r2, r3
 800a094:	415a      	adcs	r2, r3
 800a096:	602a      	str	r2, [r5, #0]
 800a098:	e7ee      	b.n	800a078 <__swhatbuf_r+0x1e>
 800a09a:	2340      	movs	r3, #64	; 0x40
 800a09c:	2000      	movs	r0, #0
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	b016      	add	sp, #88	; 0x58
 800a0a2:	bd70      	pop	{r4, r5, r6, pc}

0800a0a4 <__smakebuf_r>:
 800a0a4:	898b      	ldrh	r3, [r1, #12]
 800a0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0a8:	079d      	lsls	r5, r3, #30
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	d507      	bpl.n	800a0c0 <__smakebuf_r+0x1c>
 800a0b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	6163      	str	r3, [r4, #20]
 800a0bc:	b002      	add	sp, #8
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	ab01      	add	r3, sp, #4
 800a0c2:	466a      	mov	r2, sp
 800a0c4:	f7ff ffc9 	bl	800a05a <__swhatbuf_r>
 800a0c8:	9900      	ldr	r1, [sp, #0]
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7fe fd47 	bl	8008b60 <_malloc_r>
 800a0d2:	b948      	cbnz	r0, 800a0e8 <__smakebuf_r+0x44>
 800a0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d8:	059a      	lsls	r2, r3, #22
 800a0da:	d4ef      	bmi.n	800a0bc <__smakebuf_r+0x18>
 800a0dc:	f023 0303 	bic.w	r3, r3, #3
 800a0e0:	f043 0302 	orr.w	r3, r3, #2
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	e7e3      	b.n	800a0b0 <__smakebuf_r+0xc>
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <__smakebuf_r+0x7c>)
 800a0ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	6020      	str	r0, [r4, #0]
 800a0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	9b00      	ldr	r3, [sp, #0]
 800a0f8:	6163      	str	r3, [r4, #20]
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	6120      	str	r0, [r4, #16]
 800a0fe:	b15b      	cbz	r3, 800a118 <__smakebuf_r+0x74>
 800a100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a104:	4630      	mov	r0, r6
 800a106:	f000 f86b 	bl	800a1e0 <_isatty_r>
 800a10a:	b128      	cbz	r0, 800a118 <__smakebuf_r+0x74>
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	f043 0301 	orr.w	r3, r3, #1
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	89a0      	ldrh	r0, [r4, #12]
 800a11a:	4305      	orrs	r5, r0
 800a11c:	81a5      	strh	r5, [r4, #12]
 800a11e:	e7cd      	b.n	800a0bc <__smakebuf_r+0x18>
 800a120:	080099a9 	.word	0x080099a9

0800a124 <_malloc_usable_size_r>:
 800a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a128:	1f18      	subs	r0, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfbc      	itt	lt
 800a12e:	580b      	ldrlt	r3, [r1, r0]
 800a130:	18c0      	addlt	r0, r0, r3
 800a132:	4770      	bx	lr

0800a134 <_raise_r>:
 800a134:	291f      	cmp	r1, #31
 800a136:	b538      	push	{r3, r4, r5, lr}
 800a138:	4604      	mov	r4, r0
 800a13a:	460d      	mov	r5, r1
 800a13c:	d904      	bls.n	800a148 <_raise_r+0x14>
 800a13e:	2316      	movs	r3, #22
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a14a:	b112      	cbz	r2, 800a152 <_raise_r+0x1e>
 800a14c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a150:	b94b      	cbnz	r3, 800a166 <_raise_r+0x32>
 800a152:	4620      	mov	r0, r4
 800a154:	f000 f830 	bl	800a1b8 <_getpid_r>
 800a158:	462a      	mov	r2, r5
 800a15a:	4601      	mov	r1, r0
 800a15c:	4620      	mov	r0, r4
 800a15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a162:	f000 b817 	b.w	800a194 <_kill_r>
 800a166:	2b01      	cmp	r3, #1
 800a168:	d00a      	beq.n	800a180 <_raise_r+0x4c>
 800a16a:	1c59      	adds	r1, r3, #1
 800a16c:	d103      	bne.n	800a176 <_raise_r+0x42>
 800a16e:	2316      	movs	r3, #22
 800a170:	6003      	str	r3, [r0, #0]
 800a172:	2001      	movs	r0, #1
 800a174:	e7e7      	b.n	800a146 <_raise_r+0x12>
 800a176:	2400      	movs	r4, #0
 800a178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a17c:	4628      	mov	r0, r5
 800a17e:	4798      	blx	r3
 800a180:	2000      	movs	r0, #0
 800a182:	e7e0      	b.n	800a146 <_raise_r+0x12>

0800a184 <raise>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <raise+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f7ff bfd3 	b.w	800a134 <_raise_r>
 800a18e:	bf00      	nop
 800a190:	2000000c 	.word	0x2000000c

0800a194 <_kill_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d07      	ldr	r5, [pc, #28]	; (800a1b4 <_kill_r+0x20>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	f7f7 fceb 	bl	8001b7c <_kill>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d102      	bne.n	800a1b0 <_kill_r+0x1c>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	b103      	cbz	r3, 800a1b0 <_kill_r+0x1c>
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	bd38      	pop	{r3, r4, r5, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200002e8 	.word	0x200002e8

0800a1b8 <_getpid_r>:
 800a1b8:	f7f7 bcd9 	b.w	8001b6e <_getpid>

0800a1bc <_fstat_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4d07      	ldr	r5, [pc, #28]	; (800a1dc <_fstat_r+0x20>)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	f7f7 fd35 	bl	8001c38 <_fstat>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d102      	bne.n	800a1d8 <_fstat_r+0x1c>
 800a1d2:	682b      	ldr	r3, [r5, #0]
 800a1d4:	b103      	cbz	r3, 800a1d8 <_fstat_r+0x1c>
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
 800a1da:	bf00      	nop
 800a1dc:	200002e8 	.word	0x200002e8

0800a1e0 <_isatty_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d06      	ldr	r5, [pc, #24]	; (800a1fc <_isatty_r+0x1c>)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	f7f7 fd33 	bl	8001c56 <_isatty>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d102      	bne.n	800a1fa <_isatty_r+0x1a>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	b103      	cbz	r3, 800a1fa <_isatty_r+0x1a>
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
 800a1fc:	200002e8 	.word	0x200002e8

0800a200 <floor>:
 800a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a204:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a208:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a20c:	2e13      	cmp	r6, #19
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4607      	mov	r7, r0
 800a214:	460c      	mov	r4, r1
 800a216:	4605      	mov	r5, r0
 800a218:	dc33      	bgt.n	800a282 <floor+0x82>
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	da14      	bge.n	800a248 <floor+0x48>
 800a21e:	a334      	add	r3, pc, #208	; (adr r3, 800a2f0 <floor+0xf0>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f80a 	bl	800023c <__adddf3>
 800a228:	2200      	movs	r2, #0
 800a22a:	2300      	movs	r3, #0
 800a22c:	f7f6 fc4c 	bl	8000ac8 <__aeabi_dcmpgt>
 800a230:	b138      	cbz	r0, 800a242 <floor+0x42>
 800a232:	2c00      	cmp	r4, #0
 800a234:	da58      	bge.n	800a2e8 <floor+0xe8>
 800a236:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a23a:	431d      	orrs	r5, r3
 800a23c:	d001      	beq.n	800a242 <floor+0x42>
 800a23e:	4c2e      	ldr	r4, [pc, #184]	; (800a2f8 <floor+0xf8>)
 800a240:	2500      	movs	r5, #0
 800a242:	4623      	mov	r3, r4
 800a244:	462f      	mov	r7, r5
 800a246:	e025      	b.n	800a294 <floor+0x94>
 800a248:	4a2c      	ldr	r2, [pc, #176]	; (800a2fc <floor+0xfc>)
 800a24a:	fa42 f806 	asr.w	r8, r2, r6
 800a24e:	ea01 0208 	and.w	r2, r1, r8
 800a252:	4302      	orrs	r2, r0
 800a254:	d01e      	beq.n	800a294 <floor+0x94>
 800a256:	a326      	add	r3, pc, #152	; (adr r3, 800a2f0 <floor+0xf0>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f5 ffee 	bl	800023c <__adddf3>
 800a260:	2200      	movs	r2, #0
 800a262:	2300      	movs	r3, #0
 800a264:	f7f6 fc30 	bl	8000ac8 <__aeabi_dcmpgt>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0ea      	beq.n	800a242 <floor+0x42>
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	bfbe      	ittt	lt
 800a270:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a274:	fa43 f606 	asrlt.w	r6, r3, r6
 800a278:	19a4      	addlt	r4, r4, r6
 800a27a:	ea24 0408 	bic.w	r4, r4, r8
 800a27e:	2500      	movs	r5, #0
 800a280:	e7df      	b.n	800a242 <floor+0x42>
 800a282:	2e33      	cmp	r6, #51	; 0x33
 800a284:	dd0a      	ble.n	800a29c <floor+0x9c>
 800a286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a28a:	d103      	bne.n	800a294 <floor+0x94>
 800a28c:	f7f5 ffd6 	bl	800023c <__adddf3>
 800a290:	4607      	mov	r7, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4638      	mov	r0, r7
 800a296:	4619      	mov	r1, r3
 800a298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a29c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a4:	fa22 f808 	lsr.w	r8, r2, r8
 800a2a8:	ea18 0f00 	tst.w	r8, r0
 800a2ac:	d0f2      	beq.n	800a294 <floor+0x94>
 800a2ae:	a310      	add	r3, pc, #64	; (adr r3, 800a2f0 <floor+0xf0>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f7f5 ffc2 	bl	800023c <__adddf3>
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f7f6 fc04 	bl	8000ac8 <__aeabi_dcmpgt>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d0be      	beq.n	800a242 <floor+0x42>
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	da02      	bge.n	800a2ce <floor+0xce>
 800a2c8:	2e14      	cmp	r6, #20
 800a2ca:	d103      	bne.n	800a2d4 <floor+0xd4>
 800a2cc:	3401      	adds	r4, #1
 800a2ce:	ea25 0508 	bic.w	r5, r5, r8
 800a2d2:	e7b6      	b.n	800a242 <floor+0x42>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a2da:	fa03 f606 	lsl.w	r6, r3, r6
 800a2de:	4435      	add	r5, r6
 800a2e0:	42bd      	cmp	r5, r7
 800a2e2:	bf38      	it	cc
 800a2e4:	18e4      	addcc	r4, r4, r3
 800a2e6:	e7f2      	b.n	800a2ce <floor+0xce>
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	462c      	mov	r4, r5
 800a2ec:	e7a9      	b.n	800a242 <floor+0x42>
 800a2ee:	bf00      	nop
 800a2f0:	8800759c 	.word	0x8800759c
 800a2f4:	7e37e43c 	.word	0x7e37e43c
 800a2f8:	bff00000 	.word	0xbff00000
 800a2fc:	000fffff 	.word	0x000fffff

0800a300 <_init>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr

0800a30c <_fini>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr
