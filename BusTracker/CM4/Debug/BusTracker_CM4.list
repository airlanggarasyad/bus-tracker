
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a40  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08009b80  08009b80  00019b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a16c  0800a16c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a174  0800a174  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a174  0800a174  0001a174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  0800a35c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800a35c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b1  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002646  00000000  00000000  000326bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00035fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3f9  00000000  00000000  000371a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b80  00000000  00000000  00054599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4040  00000000  00000000  00067119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006604  00000000  00000000  0011b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08009b68 	.word	0x08009b68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08009b68 	.word	0x08009b68

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9ac 	b.w	8000fa8 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83e 	bl	8000cd8 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4628      	mov	r0, r5
 8000c70:	4621      	mov	r1, r4
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	f7ff ff09 	bl	8000a8c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc7f 	bl	80005a8 <__aeabi_dmul>
 8000caa:	f7ff ff55 	bl	8000b58 <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc00 	bl	80004b4 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fc76 	bl	80005a8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fab8 	bl	8000238 <__aeabi_dsub>
 8000cc8:	f7ff ff46 	bl	8000b58 <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14d      	bne.n	8000d84 <__udivmoddi4+0xac>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d968      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b152      	cbz	r2, 8000d0a <__udivmoddi4+0x32>
 8000cf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf8:	f1c2 0120 	rsb	r1, r2, #32
 8000cfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	ea41 0803 	orr.w	r8, r1, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fbb8 fef5 	udiv	lr, r8, r5
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fb05 831e 	mls	r3, r5, lr, r8
 8000d1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d20:	fb0e f107 	mul.w	r1, lr, r7
 8000d24:	4299      	cmp	r1, r3
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x68>
 8000d28:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000d30:	f080 811e 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f240 811b 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000d48:	fb05 3310 	mls	r3, r5, r0, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb00 f707 	mul.w	r7, r0, r7
 8000d54:	42a7      	cmp	r7, r4
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x96>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d60:	f080 8108 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d64:	42a7      	cmp	r7, r4
 8000d66:	f240 8105 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d6a:	4464      	add	r4, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d74:	2100      	movs	r1, #0
 8000d76:	b11e      	cbz	r6, 8000d80 <__udivmoddi4+0xa8>
 8000d78:	40d4      	lsrs	r4, r2
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	f000 80ee 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e9c6 0500 	strd	r0, r5, [r6]
 8000d94:	4608      	mov	r0, r1
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0303 	sbc.w	r3, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0e2      	beq.n	8000d80 <__udivmoddi4+0xa8>
 8000dba:	e9c6 4800 	strd	r4, r8, [r6]
 8000dbe:	e7df      	b.n	8000d80 <__udivmoddi4+0xa8>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8091 	bne.w	8000ef0 <__udivmoddi4+0x218>
 8000dce:	eba1 050c 	sub.w	r5, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000de0:	fb07 5013 	mls	r0, r7, r3, r5
 8000de4:	0c25      	lsrs	r5, r4, #16
 8000de6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	42a8      	cmp	r0, r5
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0505 	adds.w	r5, ip, r5
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	42a8      	cmp	r0, r5
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000e10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79e      	b.n	8000d76 <__udivmoddi4+0x9e>
 8000e38:	f1c1 0720 	rsb	r7, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40fd      	lsrs	r5, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f301 	lsl.w	r3, r0, r1
 8000e5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 5518 	mls	r5, r9, r8, r5
 8000e68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	42a8      	cmp	r0, r5
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0505 	adds.w	r5, ip, r5
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	42a8      	cmp	r0, r5
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4465      	add	r5, ip
 8000e90:	1a2d      	subs	r5, r5, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000e98:	fb09 5510 	mls	r5, r9, r0, r5
 8000e9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	45ae      	cmp	lr, r5
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0505 	adds.w	r5, ip, r5
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	45ae      	cmp	lr, r5
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4465      	add	r5, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba5 050e 	sub.w	r5, r5, lr
 8000ec6:	42a5      	cmp	r5, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15e      	cbz	r6, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb65 050e 	sbc.w	r5, r5, lr
 8000eda:	fa05 f707 	lsl.w	r7, r5, r7
 8000ede:	fa22 f301 	lsr.w	r3, r2, r1
 8000ee2:	40cd      	lsrs	r5, r1
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c6 7500 	strd	r7, r5, [r6]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa25 f303 	lsr.w	r3, r5, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	430d      	orrs	r5, r1
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f10:	fb07 3011 	mls	r0, r7, r1, r3
 8000f14:	0c2b      	lsrs	r3, r5, #16
 8000f16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3902      	subs	r1, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a1b      	subs	r3, r3, r0
 8000f3a:	b2ad      	uxth	r5, r5
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3310 	mls	r3, r7, r0, r3
 8000f44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f48:	fb00 f30e 	mul.w	r3, r0, lr
 8000f4c:	42ab      	cmp	r3, r5
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0505 	adds.w	r5, ip, r5
 8000f54:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4465      	add	r5, ip
 8000f62:	1aed      	subs	r5, r5, r3
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	e707      	b.n	8000d80 <__udivmoddi4+0xa8>
 8000f70:	4686      	mov	lr, r0
 8000f72:	e6e5      	b.n	8000d40 <__udivmoddi4+0x68>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6fa      	b.n	8000d6e <__udivmoddi4+0x96>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4641      	mov	r1, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4465      	add	r5, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc8:	f023 0218 	bic.w	r2, r3, #24
 8000fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
	...

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	f6ad 4da8 	subw	sp, sp, #3240	; 0xca8
 800101a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fb74 	bl	8001708 <HAL_Init>
  uint8_t filteredMessage[1000];

  char buff[1000];
  char *ptr;

  const char desiredNMEA[] = "GPGGA";
 8001020:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8001024:	f6a3 33cc 	subw	r3, r3, #3020	; 0xbcc
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <main+0x148>)
 800102a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102e:	6018      	str	r0, [r3, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	8019      	strh	r1, [r3, #0]

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f89e 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f980 	bl	800133c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800103c:	f000 f932 	bl	80012a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001040:	f000 f8f2 	bl	8001228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8001044:	2001      	movs	r0, #1
 8001046:	f001 fb97 	bl	8002778 <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start reading data
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 800104a:	2374      	movs	r3, #116	; 0x74
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	2202      	movs	r2, #2
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <main+0x14c>)
 8001054:	f000 ff96 	bl	8001f84 <HAL_I2C_IsDeviceReady>
 8001058:	4603      	mov	r3, r0
 800105a:	f887 3c9b 	strb.w	r3, [r7, #3227]	; 0xc9b

	  if (ret != HAL_OK) {
 800105e:	f897 3c9b 	ldrb.w	r3, [r7, #3227]	; 0xc9b
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <main+0x60>
		  sprintf((char*)buff, "Device is not ready \r\n");
 8001066:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800106a:	493e      	ldr	r1, [pc, #248]	; (8001164 <main+0x150>)
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fb89 	bl	8005784 <siprintf>
 8001072:	e018      	b.n	80010a6 <main+0x92>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 8001074:	2374      	movs	r3, #116	; 0x74
 8001076:	b299      	uxth	r1, r3
 8001078:	f607 02ac 	addw	r2, r7, #2220	; 0x8ac
 800107c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	4836      	ldr	r0, [pc, #216]	; (8001160 <main+0x14c>)
 8001088:	f000 fe86 	bl	8001d98 <HAL_I2C_Master_Receive>
 800108c:	4603      	mov	r3, r0
 800108e:	f887 3c9b 	strb.w	r3, [r7, #3227]	; 0xc9b

		  if (ret != HAL_OK) {
 8001092:	f897 3c9b 	ldrb.w	r3, [r7, #3227]	; 0xc9b
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <main+0x92>
			  sprintf((char*)buff, "Error Rx \r\n");
 800109a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800109e:	4932      	ldr	r1, [pc, #200]	; (8001168 <main+0x154>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fb6f 	bl	8005784 <siprintf>
		  }
	  }

//	  HAL_UART_Transmit(&huart2, receivedData, strlen((char*)receivedData), HAL_MAX_DELAY);

	  ptr = strstr((char*)receivedData, desiredNMEA);
 80010a6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80010aa:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fbf6 	bl	80058a2 <strstr>
 80010b6:	f8c7 0c94 	str.w	r0, [r7, #3220]	; 0xc94

	  if(ptr) {
 80010ba:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	; 0xc94
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0c3      	beq.n	800104a <main+0x36>
		  int position = ptr - (char*)receivedData;
 80010c2:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80010c6:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	; 0xc94
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c

		  while((char*)receivedData[position] != '\n') {
 80010d0:	e015      	b.n	80010fe <main+0xea>
			  filteredMessage[position] = receivedData[position];
 80010d2:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80010d6:	f5a3 727d 	sub.w	r2, r3, #1012	; 0x3f4
 80010da:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 80010de:	4413      	add	r3, r2
 80010e0:	7819      	ldrb	r1, [r3, #0]
 80010e2:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80010e6:	f2a3 72dc 	subw	r2, r3, #2012	; 0x7dc
 80010ea:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
			  position++;
 80010f4:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 80010f8:	3301      	adds	r3, #1
 80010fa:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
		  while((char*)receivedData[position] != '\n') {
 80010fe:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8001102:	f5a3 727d 	sub.w	r2, r3, #1012	; 0x3f4
 8001106:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d1df      	bne.n	80010d2 <main+0xbe>
		  }

		  filteredMessage[position] = '\0';
 8001112:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8001116:	f2a3 72dc 	subw	r2, r3, #2012	; 0x7dc
 800111a:	f8d7 3c9c 	ldr.w	r3, [r7, #3228]	; 0xc9c
 800111e:	4413      	add	r3, r2
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

		  sscanf((char*)filteredMessage, "&GPGGA,%f,%f,S,%f,E,", &time, &latitude, &longitude);
 8001124:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001128:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800112c:	f207 40c4 	addw	r0, r7, #1220	; 0x4c4
 8001130:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	460b      	mov	r3, r1
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <main+0x158>)
 800113a:	f004 fb43 	bl	80057c4 <siscanf>
		  char data[200];
//		  sprintf(data, "Time: %f Lat: %f Lon: %f \r\n", time, latitude, longitude);
//		  sprintf(data, ">START\n%s\n>END\r\n", filteredMessage);
//		  HAL_UART_Transmit(&huart2, data, strlen((char*)data), HAL_MAX_DELAY);

		  HAL_UART_Transmit(&huart2, filteredMessage, strlen((char*)filteredMessage), HAL_MAX_DELAY);
 800113e:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f81c 	bl	8000180 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f207 41c4 	addw	r1, r7, #1220	; 0x4c4
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <main+0x15c>)
 8001156:	f002 feb8 	bl	8003eca <HAL_UART_Transmit>
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 800115a:	e776      	b.n	800104a <main+0x36>
 800115c:	08009bbc 	.word	0x08009bbc
 8001160:	200001fc 	.word	0x200001fc
 8001164:	08009b80 	.word	0x08009b80
 8001168:	08009b98 	.word	0x08009b98
 800116c:	08009ba4 	.word	0x08009ba4
 8001170:	20000248 	.word	0x20000248

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09a      	sub	sp, #104	; 0x68
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2248      	movs	r2, #72	; 0x48
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fc8a 	bl	8004a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800119a:	f001 fac5 	bl	8002728 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff0a 	bl	8000fb8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <SystemClock_Config+0xb0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <SystemClock_Config+0xb0>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <SystemClock_Config+0xb0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011c0:	2324      	movs	r3, #36	; 0x24
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011c4:	2381      	movs	r3, #129	; 0x81
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fd8d 	bl	8002cfc <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011e8:	f000 f8b5 	bl	8001356 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80011ec:	236f      	movs	r3, #111	; 0x6f
 80011ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f911 	bl	8003434 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001218:	f000 f89d 	bl	8001356 <Error_Handler>
  }
}
 800121c:	bf00      	nop
 800121e:	3768      	adds	r7, #104	; 0x68
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58000400 	.word	0x58000400

08001228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_I2C1_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_I2C1_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_I2C1_Init+0x74>)
 8001234:	f640 6214 	movw	r2, #3604	; 0xe14
 8001238:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_I2C1_Init+0x74>)
 8001242:	2201      	movs	r2, #1
 8001244:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_I2C1_Init+0x74>)
 8001266:	f000 fd07 	bl	8001c78 <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 f871 	bl	8001356 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_I2C1_Init+0x74>)
 8001278:	f001 f9c0 	bl	80025fc <HAL_I2CEx_ConfigAnalogFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001282:	f000 f868 	bl	8001356 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_I2C1_Init+0x74>)
 800128a:	f001 fa01 	bl	8002690 <HAL_I2CEx_ConfigDigitalFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001294:	f000 f85f 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001fc 	.word	0x200001fc
 80012a0:	40005400 	.word	0x40005400

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <MX_USART2_UART_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_USART2_UART_Init+0x90>)
 80012ee:	f002 fd9c 	bl	8003e2a <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012f8:	f000 f82d 	bl	8001356 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_USART2_UART_Init+0x90>)
 8001300:	f003 fada 	bl	80048b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800130a:	f000 f824 	bl	8001356 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <MX_USART2_UART_Init+0x90>)
 8001312:	f003 fb0f 	bl	8004934 <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f81b 	bl	8001356 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_USART2_UART_Init+0x90>)
 8001322:	f003 fa91 	bl	8004848 <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800132c:	f000 f813 	bl	8001356 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000248 	.word	0x20000248
 8001338:	40004400 	.word	0x40004400

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fe4e 	bl	8000fe2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2004      	movs	r0, #4
 8001348:	f7ff fe4b 	bl	8000fe2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fe48 	bl	8000fe2 <LL_AHB2_GRP1_EnableClock>

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135a:	b672      	cpsid	i
}
 800135c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135e:	e7fe      	b.n	800135e <Error_Handler+0x8>

08001360 <LL_AHB2_GRP1_EnableClock>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b096      	sub	sp, #88	; 0x58
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2238      	movs	r2, #56	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fb55 	bl	8004a9c <memset>
  if(hi2c->Instance==I2C1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <HAL_I2C_MspInit+0x84>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d125      	bne.n	8001448 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013fc:	2340      	movs	r3, #64	; 0x40
 80013fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001400:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001404:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fbd2 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001416:	f7ff ff9e 	bl	8001356 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ffa0 	bl	8001360 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001430:	2304      	movs	r3, #4
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_I2C_MspInit+0x88>)
 800143c:	f000 fabc 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001440:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001444:	f7ff ffa4 	bl	8001390 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3758      	adds	r7, #88	; 0x58
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	48000400 	.word	0x48000400

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2238      	movs	r2, #56	; 0x38
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fb0f 	bl	8004a9c <memset>
  if(huart->Instance==USART2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d126      	bne.n	80014d6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001488:	2302      	movs	r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800148c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001490:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fb8c 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014a2:	f7ff ff58 	bl	8001356 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014aa:	f7ff ff71 	bl	8001390 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff ff56 	bl	8001360 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80014b4:	230c      	movs	r3, #12
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f000 fa71 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3758      	adds	r7, #88	; 0x58
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004400 	.word	0x40004400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152a:	f000 f947 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}

08001532 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
	return 1;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <_kill>:

int _kill(int pid, int sig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800154a:	f003 fa7d 	bl	8004a48 <__errno>
 800154e:	4603      	mov	r3, r0
 8001550:	2216      	movs	r2, #22
 8001552:	601a      	str	r2, [r3, #0]
	return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_exit>:

void _exit (int status)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe7 	bl	8001540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001572:	e7fe      	b.n	8001572 <_exit+0x12>

08001574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
	}

return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e009      	b.n	80015d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf1      	blt.n	80015c0 <_write+0x12>
	}
	return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160c:	605a      	str	r2, [r3, #4]
	return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 f9e6 	bl	8004a48 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20008000 	.word	0x20008000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	200002d8 	.word	0x200002d8
 80016b0:	200002f0 	.word	0x200002f0

080016b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7ff fc78 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016e2:	f003 f9b7 	bl	8004a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e6:	f7ff fc95 	bl	8001014 <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80016f8:	0800a17c 	.word	0x0800a17c
  ldr r2, =_sbss
 80016fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001700:	200002f0 	.word	0x200002f0

08001704 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001712:	2003      	movs	r0, #3
 8001714:	f000 f91e 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001718:	f002 f86e 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 800171c:	4603      	mov	r3, r0
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_Init+0x3c>)
 8001720:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f810 	bl	8001748 <HAL_InitTick>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	e001      	b.n	8001738 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001734:	f7ff fe44 	bl	80013c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001738:	79fb      	ldrb	r3, [r7, #7]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d024      	beq.n	80017a6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800175c:	f002 f84c 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_InitTick+0x6c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f912 	bl	800199e <HAL_SYSTICK_Config>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d809      	bhi.n	800179a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178e:	f000 f8ec 	bl	800196a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_InitTick+0x70>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e007      	b.n	80017aa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e004      	b.n	80017aa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x20>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000008 	.word	0x20000008
 80017dc:	200002dc 	.word	0x200002dc

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	200002dc 	.word	0x200002dc

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff49 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff60 	bl	800183c <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff92 	bl	80018ac <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff61 	bl	8001858 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb2 	bl	8001910 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e140      	b.n	8001c4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8132 	beq.w	8001c44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d005      	beq.n	80019f8 <HAL_GPIO_Init+0x40>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d130      	bne.n	8001a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0201 	and.w	r2, r3, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d017      	beq.n	8001a96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d123      	bne.n	8001aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 808c 	beq.w	8001c44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1bc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a44      	ldr	r2, [pc, #272]	; (8001c6c <HAL_GPIO_Init+0x2b4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1b8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_GPIO_Init+0x2b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1b4>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1be>
 8001b74:	2300      	movs	r3, #0
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b86:	4938      	ldr	r1, [pc, #224]	; (8001c68 <HAL_GPIO_Init+0x2b0>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c0e:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_GPIO_Init+0x2bc>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f aeb7 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800
 8001c74:	58000800 	.word	0x58000800

08001c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e081      	b.n	8001d8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fb94 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d104      	bne.n	8001d12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69d9      	ldr	r1, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	461a      	mov	r2, r3
 8001da4:	460b      	mov	r3, r1
 8001da6:	817b      	strh	r3, [r7, #10]
 8001da8:	4613      	mov	r3, r2
 8001daa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	f040 80db 	bne.w	8001f70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0x30>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0d4      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fd06 	bl	80017e0 <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2319      	movs	r3, #25
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f9f8 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0bf      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2222      	movs	r2, #34	; 0x22
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2bff      	cmp	r3, #255	; 0xff
 8001e22:	d90e      	bls.n	8001e42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	22ff      	movs	r2, #255	; 0xff
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	8979      	ldrh	r1, [r7, #10]
 8001e32:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_I2C_Master_Receive+0x1e4>)
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fbae 	bl	800259c <I2C_TransferConfig>
 8001e40:	e06d      	b.n	8001f1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_I2C_Master_Receive+0x1e4>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fb9d 	bl	800259c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e62:	e05c      	b.n	8001f1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	6a39      	ldr	r1, [r7, #32]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fa31 	bl	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e07c      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d034      	beq.n	8001f1e <HAL_I2C_Master_Receive+0x186>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d130      	bne.n	8001f1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f986 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e04d      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2bff      	cmp	r3, #255	; 0xff
 8001ede:	d90e      	bls.n	8001efe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	22ff      	movs	r2, #255	; 0xff
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	8979      	ldrh	r1, [r7, #10]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fb50 	bl	800259c <I2C_TransferConfig>
 8001efc:	e00f      	b.n	8001f1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	8979      	ldrh	r1, [r7, #10]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fb3f 	bl	800259c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d19d      	bne.n	8001e64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	6a39      	ldr	r1, [r7, #32]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f993 	bl	8002258 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e01a      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2220      	movs	r2, #32
 8001f42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_I2C_Master_Receive+0x1e8>)
 8001f50:	400b      	ands	r3, r1
 8001f52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	80002400 	.word	0x80002400
 8001f80:	fe00e800 	.word	0xfe00e800

08001f84 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	460b      	mov	r3, r1
 8001f92:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	f040 80f1 	bne.w	8002188 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0e7      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2C_IsDeviceReady+0x44>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0e0      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_I2C_IsDeviceReady+0x72>
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff4:	e004      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x7c>
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002006:	f7ff fbeb 	bl	80017e0 <HAL_GetTick>
 800200a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b20      	cmp	r3, #32
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002038:	e034      	b.n	80020a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002040:	d01a      	beq.n	8002078 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff fbcd 	bl	80017e0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <HAL_I2C_IsDeviceReady+0xd4>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10f      	bne.n	8002078 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e088      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_I2C_IsDeviceReady+0x12c>
 80020aa:	7fbb      	ldrb	r3, [r7, #30]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0c4      	beq.n	800203a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d01a      	beq.n	80020f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2120      	movs	r1, #32
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f885 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e058      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2220      	movs	r2, #32
 80020de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e04a      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2120      	movs	r1, #32
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f86a 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e03d      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2210      	movs	r2, #16
 8002114:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d118      	bne.n	8002158 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002134:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2120      	movs	r1, #32
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f849 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01c      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2220      	movs	r2, #32
 8002156:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	f63f af3b 	bhi.w	8001fde <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d103      	bne.n	80021b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d007      	beq.n	80021ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	619a      	str	r2, [r3, #24]
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	e022      	b.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d01e      	beq.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff faf5 	bl	80017e0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d113      	bne.n	8002230 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00f      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	429a      	cmp	r2, r3
 800224c:	d0cd      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002264:	e028      	b.n	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f8aa 	bl	80023c4 <I2C_IsErrorOccurred>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e026      	b.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff fab1 	bl	80017e0 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d1cf      	bne.n	8002266 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022dc:	e064      	b.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f86e 	bl	80023c4 <I2C_IsErrorOccurred>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e062      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d138      	bne.n	8002372 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b04      	cmp	r3, #4
 800230c:	d105      	bne.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e04e      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d107      	bne.n	8002338 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2210      	movs	r2, #16
 800232e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2204      	movs	r2, #4
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
 8002336:	e002      	b.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2220      	movs	r2, #32
 8002344:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002352:	400b      	ands	r3, r1
 8002354:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002372:	f7ff fa35 	bl	80017e0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	d302      	bcc.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d193      	bne.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	fe00e800 	.word	0xfe00e800

080023c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d075      	beq.n	80024dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2210      	movs	r2, #16
 80023f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f8:	e056      	b.n	80024a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d052      	beq.n	80024a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7ff f9ed 	bl	80017e0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <I2C_IsErrorOccurred+0x54>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d147      	bne.n	80024a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800242a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800243a:	d12e      	bne.n	800249a <I2C_IsErrorOccurred+0xd6>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002442:	d02a      	beq.n	800249a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b20      	cmp	r3, #32
 8002448:	d027      	beq.n	800249a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002458:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800245a:	f7ff f9c1 	bl	80017e0 <HAL_GetTick>
 800245e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002460:	e01b      	b.n	800249a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002462:	f7ff f9bd 	bl	80017e0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b19      	cmp	r3, #25
 800246e:	d914      	bls.n	800249a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d1dc      	bne.n	8002462 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d003      	beq.n	80024be <I2C_IsErrorOccurred+0xfa>
 80024b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d09d      	beq.n	80023fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2220      	movs	r2, #32
 80024cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002542:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01c      	beq.n	800258c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff fe1d 	bl	8002192 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <I2C_IsErrorOccurred+0x1d4>)
 8002564:	400b      	ands	r3, r1
 8002566:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002590:	4618      	mov	r0, r3
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	fe00e800 	.word	0xfe00e800

0800259c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	817b      	strh	r3, [r7, #10]
 80025aa:	4613      	mov	r3, r2
 80025ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025b4:	7a7b      	ldrb	r3, [r7, #9]
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025bc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	0d5b      	lsrs	r3, r3, #21
 80025d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <I2C_TransferConfig+0x5c>)
 80025dc:	430b      	orrs	r3, r1
 80025de:	43db      	mvns	r3, r3
 80025e0:	ea02 0103 	and.w	r1, r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	03ff63ff 	.word	0x03ff63ff

080025fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	d138      	bne.n	8002684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800261c:	2302      	movs	r3, #2
 800261e:	e032      	b.n	8002686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800264e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d139      	bne.n	800271a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e033      	b.n	800271c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x18>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	58000400 	.word	0x58000400

08002744 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <LL_PWR_EnableBootC2+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <LL_PWR_EnableBootC2+0x18>)
 800274e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_PWREx_GetVoltageRange+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002780:	f7ff ffe0 	bl	8002744 <LL_PWR_EnableBootC2>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <LL_PWR_IsEnabledBkUpAccess>:
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d101      	bne.n	80027a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	58000400 	.word	0x58000400

080027b0 <LL_RCC_HSE_EnableTcxo>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_RCC_HSE_DisableTcxo>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027fa:	d101      	bne.n	8002800 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <LL_RCC_HSE_Enable>:
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <LL_RCC_HSE_Disable>:
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <LL_RCC_HSE_IsReady>:
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002854:	d101      	bne.n	800285a <LL_RCC_HSE_IsReady+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_RCC_HSE_IsReady+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_HSI_Enable>:
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_RCC_HSI_Disable>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_HSI_IsReady>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d101      	bne.n	80028b4 <LL_RCC_HSI_IsReady+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_RCC_HSI_IsReady+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_HSI_SetCalibTrimming>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d101      	bne.n	80028fe <LL_RCC_LSE_IsReady+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_RCC_LSE_IsReady+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d101      	bne.n	8002960 <LL_RCC_LSI_IsReady+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_LSI_IsReady+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6013      	str	r3, [r2, #0]
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d101      	bne.n	80029b8 <LL_RCC_MSI_IsReady+0x16>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_RCC_MSI_IsReady+0x18>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d101      	bne.n	80029d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad4:	f023 020f 	bic.w	r2, r3, #15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be2:	d101      	bne.n	8002be8 <LL_RCC_PLL_IsReady+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_RCC_PLL_IsReady+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0303 	and.w	r3, r3, #3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5e:	d101      	bne.n	8002c64 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c82:	d101      	bne.n	8002c88 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d101      	bne.n	8002cac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc8:	d101      	bne.n	8002cce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cea:	d101      	bne.n	8002cf0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e38b      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	f7ff fea6 	bl	8002a5e <LL_RCC_GetSysClkSource>
 8002d12:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d14:	f7ff ff8f 	bl	8002c36 <LL_RCC_PLL_GetMainSource>
 8002d18:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80c9 	beq.w	8002eba <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3e>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d17b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d178      	bne.n	8002e2c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d3a:	f7ff fe32 	bl	80029a2 <LL_RCC_MSI_IsReady>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x54>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e36a      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x72>
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	e006      	b.n	8002d7c <HAL_RCC_OscConfig+0x80>
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d222      	bcs.n	8002dc6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd6f 	bl	8003868 <RCC_SetFlashLatencyFromMSIRange>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e348      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe26 	bl	8002a10 <LL_RCC_MSI_SetCalibTrimming>
 8002dc4:	e021      	b.n	8002e0a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fe0d 	bl	8002a10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fd34 	bl	8003868 <RCC_SetFlashLatencyFromMSIRange>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e30d      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e0a:	f000 fcf5 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4aa1      	ldr	r2, [pc, #644]	; (8003098 <HAL_RCC_OscConfig+0x39c>)
 8002e12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e14:	4ba1      	ldr	r3, [pc, #644]	; (800309c <HAL_RCC_OscConfig+0x3a0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fc95 	bl	8001748 <HAL_InitTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d047      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	e2fc      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d02c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e34:	f7ff fd99 	bl	800296a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fcd2 	bl	80017e0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe fcce 	bl	80017e0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2e9      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e52:	f7ff fda6 	bl	80029a2 <LL_RCC_MSI_IsReady>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f1      	beq.n	8002e40 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fdc2 	bl	8002a10 <LL_RCC_MSI_SetCalibTrimming>
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e8e:	f7ff fd7a 	bl	8002986 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fca5 	bl	80017e0 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e9a:	f7fe fca1 	bl	80017e0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2bc      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eac:	f7ff fd79 	bl	80029a2 <LL_RCC_MSI_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f1      	bne.n	8002e9a <HAL_RCC_OscConfig+0x19e>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05f      	beq.n	8002f86 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x1dc>
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d10d      	bne.n	8002eee <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d10a      	bne.n	8002eee <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	f7ff fcb3 	bl	8002842 <LL_RCC_HSE_IsReady>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d050      	beq.n	8002f84 <HAL_RCC_OscConfig+0x288>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d14c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e29b      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x218>
 8002f0e:	f7ff fc7c 	bl	800280a <LL_RCC_HSE_Enable>
 8002f12:	e00d      	b.n	8002f30 <HAL_RCC_OscConfig+0x234>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f1c:	d104      	bne.n	8002f28 <HAL_RCC_OscConfig+0x22c>
 8002f1e:	f7ff fc47 	bl	80027b0 <LL_RCC_HSE_EnableTcxo>
 8002f22:	f7ff fc72 	bl	800280a <LL_RCC_HSE_Enable>
 8002f26:	e003      	b.n	8002f30 <HAL_RCC_OscConfig+0x234>
 8002f28:	f7ff fc7d 	bl	8002826 <LL_RCC_HSE_Disable>
 8002f2c:	f7ff fc4e 	bl	80027cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fc52 	bl	80017e0 <HAL_GetTick>
 8002f3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fc4e 	bl	80017e0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e269      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f52:	f7ff fc76 	bl	8002842 <LL_RCC_HSE_IsReady>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f1      	beq.n	8002f40 <HAL_RCC_OscConfig+0x244>
 8002f5c:	e013      	b.n	8002f86 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fc3f 	bl	80017e0 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f66:	f7fe fc3b 	bl	80017e0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e256      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f78:	f7ff fc63 	bl	8002842 <LL_RCC_HSE_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f1      	bne.n	8002f66 <HAL_RCC_OscConfig+0x26a>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04b      	beq.n	800302a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2a8>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d113      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d110      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa4:	f7ff fc7a 	bl	800289c <LL_RCC_HSI_IsReady>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x2be>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e235      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fc7d 	bl	80028be <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc4:	e031      	b.n	800302a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d019      	beq.n	8003002 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fce:	f7ff fc49 	bl	8002864 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fc05 	bl	80017e0 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe fc01 	bl	80017e0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e21c      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fec:	f7ff fc56 	bl	800289c <LL_RCC_HSI_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f1      	beq.n	8002fda <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fc5f 	bl	80028be <LL_RCC_HSI_SetCalibTrimming>
 8003000:	e013      	b.n	800302a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	f7ff fc3d 	bl	8002880 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe fbeb 	bl	80017e0 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7fe fbe7 	bl	80017e0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e202      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003020:	f7ff fc3c 	bl	800289c <LL_RCC_HSI_IsReady>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f1      	bne.n	800300e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06f      	beq.n	8003116 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d057      	beq.n	80030ee <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	429a      	cmp	r2, r3
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1db      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d018      	beq.n	80030aa <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8003078:	f7ff fc56 	bl	8002928 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800307c:	f7fe fbb0 	bl	80017e0 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003082:	e00d      	b.n	80030a0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fbac 	bl	80017e0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b11      	cmp	r3, #17
 8003090:	d906      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1c7      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80030a0:	f7ff fc52 	bl	8002948 <LL_RCC_LSI_IsReady>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ec      	bne.n	8003084 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c4:	f7ff fc20 	bl	8002908 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fb8a 	bl	80017e0 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fb86 	bl	80017e0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1a1      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030e2:	f7ff fc31 	bl	8002948 <LL_RCC_LSI_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3d4>
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	f7ff fc1b 	bl	8002928 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fb75 	bl	80017e0 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fb71 	bl	80017e0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b11      	cmp	r3, #17
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e18c      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800310c:	f7ff fc1c 	bl	8002948 <LL_RCC_LSI_IsReady>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f1      	bne.n	80030fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80d8 	beq.w	80032d4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003124:	f7ff fb32 	bl	800278c <LL_PWR_IsEnabledBkUpAccess>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800312e:	f7ff fafb 	bl	8002728 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fe fb55 	bl	80017e0 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fb51 	bl	80017e0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e16c      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800314c:	f7ff fb1e 	bl	800278c <LL_PWR_IsEnabledBkUpAccess>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f1      	beq.n	800313a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d07b      	beq.n	8003256 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b85      	cmp	r3, #133	; 0x85
 8003164:	d003      	beq.n	800316e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d109      	bne.n	8003182 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fb2d 	bl	80017e0 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fb1f 	bl	80017e0 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e138      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031b4:	f7ff fb97 	bl	80028e6 <LL_RCC_LSE_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ef      	beq.n	800319e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b81      	cmp	r3, #129	; 0x81
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b85      	cmp	r3, #133	; 0x85
 80031cc:	d121      	bne.n	8003212 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fb07 	bl	80017e0 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe faf9 	bl	80017e0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e112      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ec      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003210:	e060      	b.n	80032d4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe fae5 	bl	80017e0 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fad7 	bl	80017e0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0f0      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ec      	bne.n	800322e <HAL_RCC_OscConfig+0x532>
 8003254:	e03e      	b.n	80032d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fac3 	bl	80017e0 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fab5 	bl	80017e0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0ce      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ec      	bne.n	8003272 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe faa2 	bl	80017e0 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fe fa94 	bl	80017e0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0ad      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ca:	f7ff fb0c 	bl	80028e6 <LL_RCC_LSE_IsReady>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ef      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a3 	beq.w	8003424 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d076      	beq.n	80033d2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d14b      	bne.n	8003384 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	f7ff fc62 	bl	8002bb4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fa76 	bl	80017e0 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fa72 	bl	80017e0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e08d      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800330a:	f7ff fc61 	bl	8002bd0 <LL_RCC_PLL_IsReady>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f1      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b45      	ldr	r3, [pc, #276]	; (8003430 <HAL_RCC_OscConfig+0x734>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800332c:	0212      	lsls	r2, r2, #8
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003340:	430a      	orrs	r2, r1
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	4313      	orrs	r3, r2
 8003348:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334a:	f7ff fc25 	bl	8002b98 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fa3f 	bl	80017e0 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe fa3b 	bl	80017e0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e056      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003378:	f7ff fc2a 	bl	8002bd0 <LL_RCC_PLL_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0x66a>
 8003382:	e04f      	b.n	8003424 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003384:	f7ff fc16 	bl	8002bb4 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fa18 	bl	80017e0 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fa14 	bl	80017e0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b0a      	cmp	r3, #10
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e02f      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033c6:	f7ff fc03 	bl	8002bd0 <LL_RCC_PLL_IsReady>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f1      	bne.n	80033b4 <HAL_RCC_OscConfig+0x6b8>
 80033d0:	e028      	b.n	8003424 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e023      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d115      	bne.n	8003420 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10e      	bne.n	8003420 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	429a      	cmp	r2, r3
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	11c1808c 	.word	0x11c1808c

08003434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e12c      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b98      	ldr	r3, [pc, #608]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d91b      	bls.n	800348e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b95      	ldr	r3, [pc, #596]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4993      	ldr	r1, [pc, #588]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003466:	f7fe f9bb 	bl	80017e0 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346c:	e008      	b.n	8003480 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800346e:	f7fe f9b7 	bl	80017e0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e110      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	4b8a      	ldr	r3, [pc, #552]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fae8 	bl	8002a74 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034a4:	f7fe f99c 	bl	80017e0 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ac:	f7fe f998 	bl	80017e0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0f1      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034be:	f7ff fbc5 	bl	8002c4c <LL_RCC_IsActiveFlag_HPRE>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d016      	beq.n	8003502 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fade 	bl	8002a9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034de:	f7fe f97f 	bl	80017e0 <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034e6:	f7fe f97b 	bl	80017e0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0d4      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034f8:	f7ff fbb9 	bl	8002c6e <LL_RCC_IsActiveFlag_C2HPRE>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f1      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fad6 	bl	8002ac4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003518:	f7fe f962 	bl	80017e0 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003520:	f7fe f95e 	bl	80017e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b7      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003532:	f7ff fbae 	bl	8002c92 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f1      	beq.n	8003520 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff facf 	bl	8002af0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003552:	f7fe f945 	bl	80017e0 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800355a:	f7fe f941 	bl	80017e0 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800356c:	f7ff fba3 	bl	8002cb6 <LL_RCC_IsActiveFlag_PPRE1>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f1      	beq.n	800355a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d017      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fac4 	bl	8002b16 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800358e:	f7fe f927 	bl	80017e0 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003596:	f7fe f923 	bl	80017e0 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e07c      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035a8:	f7ff fb96 	bl	8002cd8 <LL_RCC_IsActiveFlag_PPRE2>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f1      	beq.n	8003596 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d043      	beq.n	8003646 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035c6:	f7ff f93c 	bl	8002842 <LL_RCC_HSE_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11e      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e066      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d106      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035dc:	f7ff faf8 	bl	8002bd0 <LL_RCC_PLL_IsReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e05b      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035f2:	f7ff f9d6 	bl	80029a2 <LL_RCC_MSI_IsReady>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d108      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e050      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003600:	f7ff f94c 	bl	800289c <LL_RCC_HSI_IsReady>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e049      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fa10 	bl	8002a38 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003618:	f7fe f8e2 	bl	80017e0 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fe f8de 	bl	80017e0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e035      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	f7ff fa12 	bl	8002a5e <LL_RCC_GetSysClkSource>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	429a      	cmp	r2, r3
 8003644:	d1ec      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d21b      	bcs.n	800368c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 0207 	bic.w	r2, r3, #7
 800365c:	4913      	ldr	r1, [pc, #76]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7fe f8bc 	bl	80017e0 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	e008      	b.n	800367e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800366c:	f7fe f8b8 	bl	80017e0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e011      	b.n	80036a2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x278>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d1ef      	bne.n	800366c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800368c:	f000 f8b4 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003690:	4603      	mov	r3, r0
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_RCC_ClockConfig+0x27c>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <HAL_RCC_ClockConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f854 	bl	8001748 <HAL_InitTick>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	58004000 	.word	0x58004000
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	f7ff f9ca 	bl	8002a5e <LL_RCC_GetSysClkSource>
 80036ca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036cc:	f7ff fab3 	bl	8002c36 <LL_RCC_PLL_GetMainSource>
 80036d0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x2c>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d139      	bne.n	8003752 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d136      	bne.n	8003752 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036e4:	f7ff f96d 	bl	80029c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d115      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x62>
 80036ee:	f7ff f968 	bl	80029c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x4e>
 80036f8:	f7ff f973 	bl	80029e2 <LL_RCC_MSI_GetRange>
 80036fc:	4603      	mov	r3, r0
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	e005      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x5a>
 8003706:	f7ff f977 	bl	80029f8 <LL_RCC_MSI_GetRangeAfterStandby>
 800370a:	4603      	mov	r3, r0
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_RCC_GetSysClockFreq+0x134>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	e014      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x8c>
 800371a:	f7ff f952 	bl	80029c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800371e:	4603      	mov	r3, r0
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7a>
 8003724:	f7ff f95d 	bl	80029e2 <LL_RCC_MSI_GetRange>
 8003728:	4603      	mov	r3, r0
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	e005      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x86>
 8003732:	f7ff f961 	bl	80029f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003736:	4603      	mov	r3, r0
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <HAL_RCC_GetSysClockFreq+0x134>)
 8003740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003744:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d115      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003750:	e012      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d102      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x138>)
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00c      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d109      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003764:	f7ff f840 	bl	80027e8 <LL_RCC_HSE_IsEnabledDiv2>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e001      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003776:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003778:	f7ff f971 	bl	8002a5e <LL_RCC_GetSysClkSource>
 800377c:	4603      	mov	r3, r0
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d12f      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003782:	f7ff fa58 	bl	8002c36 <LL_RCC_PLL_GetMainSource>
 8003786:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0xde>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d003      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xe4>
 8003794:	e00d      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003796:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e00d      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800379c:	f7ff f824 	bl	80027e8 <LL_RCC_HSE_IsEnabledDiv2>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80037a8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037aa:	e005      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037ae:	60fb      	str	r3, [r7, #12]
        break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	60fb      	str	r3, [r7, #12]
        break;
 80037b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037b8:	f7ff fa1b 	bl	8002bf2 <LL_RCC_PLL_GetN>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	fb03 f402 	mul.w	r4, r3, r2
 80037c4:	f7ff fa2c 	bl	8002c20 <LL_RCC_PLL_GetDivider>
 80037c8:	4603      	mov	r3, r0
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	3301      	adds	r3, #1
 80037ce:	fbb4 f4f3 	udiv	r4, r4, r3
 80037d2:	f7ff fa1a 	bl	8002c0a <LL_RCC_PLL_GetR>
 80037d6:	4603      	mov	r3, r0
 80037d8:	0f5b      	lsrs	r3, r3, #29
 80037da:	3301      	adds	r3, #1
 80037dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80037e0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037e2:	697b      	ldr	r3, [r7, #20]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	08009c4c 	.word	0x08009c4c
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	01e84800 	.word	0x01e84800

080037f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b598      	push	{r3, r4, r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037fc:	f7ff ff5c 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003800:	4604      	mov	r4, r0
 8003802:	f7ff f99b 	bl	8002b3c <LL_RCC_GetAHBPrescaler>
 8003806:	4603      	mov	r3, r0
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	4a03      	ldr	r2, [pc, #12]	; (800381c <HAL_RCC_GetHCLKFreq+0x24>)
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd98      	pop	{r3, r4, r7, pc}
 800381c:	08009bec 	.word	0x08009bec

08003820 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b598      	push	{r3, r4, r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003824:	f7ff ffe8 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003828:	4604      	mov	r4, r0
 800382a:	f7ff f99f 	bl	8002b6c <LL_RCC_GetAPB1Prescaler>
 800382e:	4603      	mov	r3, r0
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	4a03      	ldr	r2, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	fa24 f303 	lsr.w	r3, r4, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd98      	pop	{r3, r4, r7, pc}
 8003840:	08009c2c 	.word	0x08009c2c

08003844 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b598      	push	{r3, r4, r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003848:	f7ff ffd6 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 800384c:	4604      	mov	r4, r0
 800384e:	f7ff f998 	bl	8002b82 <LL_RCC_GetAPB2Prescaler>
 8003852:	4603      	mov	r3, r0
 8003854:	0adb      	lsrs	r3, r3, #11
 8003856:	4a03      	ldr	r2, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd98      	pop	{r3, r4, r7, pc}
 8003864:	08009c2c 	.word	0x08009c2c

08003868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	4a10      	ldr	r2, [pc, #64]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003880:	f7ff f967 	bl	8002b52 <LL_RCC_GetAHB3Prescaler>
 8003884:	4603      	mov	r3, r0
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9c      	lsrs	r4, r3, #18
 80038a4:	f7fe ff5c 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4619      	mov	r1, r3
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 f80b 	bl	80038c8 <RCC_SetFlashLatency>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	08009c4c 	.word	0x08009c4c
 80038c0:	08009bec 	.word	0x08009bec
 80038c4:	431bde83 	.word	0x431bde83

080038c8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	; 0x38
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038d2:	4a3a      	ldr	r2, [pc, #232]	; (80039bc <RCC_SetFlashLatency+0xf4>)
 80038d4:	f107 0320 	add.w	r3, r7, #32
 80038d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038dc:	6018      	str	r0, [r3, #0]
 80038de:	3304      	adds	r3, #4
 80038e0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038e2:	4a37      	ldr	r2, [pc, #220]	; (80039c0 <RCC_SetFlashLatency+0xf8>)
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038ec:	6018      	str	r0, [r3, #0]
 80038ee:	3304      	adds	r3, #4
 80038f0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038f2:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <RCC_SetFlashLatency+0xfc>)
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d11b      	bne.n	8003942 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800390a:	2300      	movs	r3, #0
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
 800390e:	e014      	b.n	800393a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	3338      	adds	r3, #56	; 0x38
 8003916:	443b      	add	r3, r7
 8003918:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800391c:	461a      	mov	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4293      	cmp	r3, r2
 8003922:	d807      	bhi.n	8003934 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	443b      	add	r3, r7
 800392c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003932:	e021      	b.n	8003978 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	3301      	adds	r3, #1
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2b02      	cmp	r3, #2
 800393e:	d9e7      	bls.n	8003910 <RCC_SetFlashLatency+0x48>
 8003940:	e01a      	b.n	8003978 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	e014      	b.n	8003972 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	3338      	adds	r3, #56	; 0x38
 800394e:	443b      	add	r3, r7
 8003950:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3338      	adds	r3, #56	; 0x38
 8003962:	443b      	add	r3, r7
 8003964:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800396a:	e005      	b.n	8003978 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	3301      	adds	r3, #1
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2b02      	cmp	r3, #2
 8003976:	d9e7      	bls.n	8003948 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <RCC_SetFlashLatency+0x100>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 0207 	bic.w	r2, r3, #7
 8003980:	4911      	ldr	r1, [pc, #68]	; (80039c8 <RCC_SetFlashLatency+0x100>)
 8003982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003988:	f7fd ff2a 	bl	80017e0 <HAL_GetTick>
 800398c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800398e:	e008      	b.n	80039a2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003990:	f7fd ff26 	bl	80017e0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e007      	b.n	80039b2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <RCC_SetFlashLatency+0x100>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1ef      	bne.n	8003990 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3738      	adds	r7, #56	; 0x38
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08009bc4 	.word	0x08009bc4
 80039c0:	08009bcc 	.word	0x08009bcc
 80039c4:	08009bd4 	.word	0x08009bd4
 80039c8:	58004000 	.word	0x58004000

080039cc <LL_RCC_LSE_IsReady>:
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d101      	bne.n	80039e4 <LL_RCC_LSE_IsReady+0x18>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <LL_RCC_LSE_IsReady+0x1a>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetUSARTClockSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	43db      	mvns	r3, r3
 8003a04:	401a      	ands	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <LL_RCC_SetI2SClockSource>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_SetLPUARTClockSource>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <LL_RCC_SetI2CClockSource>:
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <LL_RCC_SetLPTIMClockSource>:
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <LL_RCC_SetRNGClockSource>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_SetADCClockSource>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_SetRTCClockSource>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_GetRTCClockSource>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <LL_RCC_ForceBackupDomainReset>:
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d058      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003bd4:	f7fe fda8 	bl	8002728 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fe02 	bl	80017e0 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bde:	e009      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fd fdfe 	bl	80017e0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bf4:	4b7b      	ldr	r3, [pc, #492]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13c      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003c08:	f7ff ffa7 	bl	8003b5a <LL_RCC_GetRTCClockSource>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d00f      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c24:	f7ff ffa5 	bl	8003b72 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c28:	f7ff ffb3 	bl	8003b92 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fdce 	bl	80017e0 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fd fdca 	bl	80017e0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d902      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c60:	f7ff feb4 	bl	80039cc <LL_RCC_LSE_IsReady>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d1ee      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff ff5b 	bl	8003b30 <LL_RCC_SetRTCClockSource>
 8003c7a:	e004      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
 8003c80:	e001      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fea9 	bl	80039ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fe9e 	bl	80039ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fec0 	bl	8003a48 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fee6 	bl	8003aaa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fedb 	bl	8003aaa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fed0 	bl	8003aaa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fea9 	bl	8003a72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fe9e 	bl	8003a72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fe93 	bl	8003a72 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fe5e 	bl	8003a1e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fea5 	bl	8003adc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d011      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fea3 	bl	8003b06 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc8:	d107      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	58000400 	.word	0x58000400

08003de8 <LL_RCC_GetUSARTClockSource>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	4313      	orrs	r3, r2
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <LL_RCC_GetLPUARTClockSource>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4013      	ands	r3, r2
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e042      	b.n	8003ec2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fb02 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8c3 	bl	8003ff8 <UART_SetConfig>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e022      	b.n	8003ec2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fb2b 	bl	80044e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fbb1 	bl	8004622 <UART_CheckIdleState>
 8003ec0:	4603      	mov	r3, r0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08a      	sub	sp, #40	; 0x28
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	f040 8083 	bne.w	8003fec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_Transmit+0x28>
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07b      	b.n	8003fee <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x3a>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e074      	b.n	8003fee <HAL_UART_Transmit+0x124>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2221      	movs	r2, #33	; 0x21
 8003f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fc60 	bl	80017e0 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3a:	d108      	bne.n	8003f4e <HAL_UART_Transmit+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	e003      	b.n	8003f56 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003f5e:	e02c      	b.n	8003fba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fba4 	bl	80046b8 <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e039      	b.n	8003fee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	3302      	adds	r3, #2
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e007      	b.n	8003fa8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1cc      	bne.n	8003f60 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb71 	bl	80046b8 <UART_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e006      	b.n	8003fee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b08c      	sub	sp, #48	; 0x30
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	431a      	orrs	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	431a      	orrs	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	4313      	orrs	r3, r2
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b94      	ldr	r3, [pc, #592]	; (8004278 <UART_SetConfig+0x280>)
 8004028:	4013      	ands	r3, r2
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004030:	430b      	orrs	r3, r1
 8004032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a89      	ldr	r2, [pc, #548]	; (800427c <UART_SetConfig+0x284>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004060:	4313      	orrs	r3, r2
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800406e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	430b      	orrs	r3, r1
 800407a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f023 010f 	bic.w	r1, r3, #15
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7a      	ldr	r2, [pc, #488]	; (8004280 <UART_SetConfig+0x288>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d127      	bne.n	80040ec <UART_SetConfig+0xf4>
 800409c:	2003      	movs	r0, #3
 800409e:	f7ff fea3 	bl	8003de8 <LL_RCC_GetUSARTClockSource>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d81b      	bhi.n	80040e4 <UART_SetConfig+0xec>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0xbc>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040d5 	.word	0x080040d5
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040dd 	.word	0x080040dd
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e080      	b.n	80041ce <UART_SetConfig+0x1d6>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e07c      	b.n	80041ce <UART_SetConfig+0x1d6>
 80040d4:	2304      	movs	r3, #4
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040da:	e078      	b.n	80041ce <UART_SetConfig+0x1d6>
 80040dc:	2308      	movs	r3, #8
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e074      	b.n	80041ce <UART_SetConfig+0x1d6>
 80040e4:	2310      	movs	r3, #16
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e070      	b.n	80041ce <UART_SetConfig+0x1d6>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a64      	ldr	r2, [pc, #400]	; (8004284 <UART_SetConfig+0x28c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d138      	bne.n	8004168 <UART_SetConfig+0x170>
 80040f6:	200c      	movs	r0, #12
 80040f8:	f7ff fe76 	bl	8003de8 <LL_RCC_GetUSARTClockSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d82c      	bhi.n	8004160 <UART_SetConfig+0x168>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x114>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004141 	.word	0x08004141
 8004110:	08004161 	.word	0x08004161
 8004114:	08004161 	.word	0x08004161
 8004118:	08004161 	.word	0x08004161
 800411c:	08004151 	.word	0x08004151
 8004120:	08004161 	.word	0x08004161
 8004124:	08004161 	.word	0x08004161
 8004128:	08004161 	.word	0x08004161
 800412c:	08004149 	.word	0x08004149
 8004130:	08004161 	.word	0x08004161
 8004134:	08004161 	.word	0x08004161
 8004138:	08004161 	.word	0x08004161
 800413c:	08004159 	.word	0x08004159
 8004140:	2300      	movs	r3, #0
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004146:	e042      	b.n	80041ce <UART_SetConfig+0x1d6>
 8004148:	2302      	movs	r3, #2
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414e:	e03e      	b.n	80041ce <UART_SetConfig+0x1d6>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004156:	e03a      	b.n	80041ce <UART_SetConfig+0x1d6>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e036      	b.n	80041ce <UART_SetConfig+0x1d6>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e032      	b.n	80041ce <UART_SetConfig+0x1d6>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a43      	ldr	r2, [pc, #268]	; (800427c <UART_SetConfig+0x284>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d12a      	bne.n	80041c8 <UART_SetConfig+0x1d0>
 8004172:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004176:	f7ff fe49 	bl	8003e0c <LL_RCC_GetLPUARTClockSource>
 800417a:	4603      	mov	r3, r0
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004180:	d01a      	beq.n	80041b8 <UART_SetConfig+0x1c0>
 8004182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004186:	d81b      	bhi.n	80041c0 <UART_SetConfig+0x1c8>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d00c      	beq.n	80041a8 <UART_SetConfig+0x1b0>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d815      	bhi.n	80041c0 <UART_SetConfig+0x1c8>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <UART_SetConfig+0x1a8>
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d008      	beq.n	80041b0 <UART_SetConfig+0x1b8>
 800419e:	e00f      	b.n	80041c0 <UART_SetConfig+0x1c8>
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a6:	e012      	b.n	80041ce <UART_SetConfig+0x1d6>
 80041a8:	2302      	movs	r3, #2
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ae:	e00e      	b.n	80041ce <UART_SetConfig+0x1d6>
 80041b0:	2304      	movs	r3, #4
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b6:	e00a      	b.n	80041ce <UART_SetConfig+0x1d6>
 80041b8:	2308      	movs	r3, #8
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041be:	e006      	b.n	80041ce <UART_SetConfig+0x1d6>
 80041c0:	2310      	movs	r3, #16
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c6:	e002      	b.n	80041ce <UART_SetConfig+0x1d6>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <UART_SetConfig+0x284>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	f040 80a4 	bne.w	8004322 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d823      	bhi.n	800422a <UART_SetConfig+0x232>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x1f0>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	08004215 	.word	0x08004215
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800421b 	.word	0x0800421b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	0800422b 	.word	0x0800422b
 8004204:	0800422b 	.word	0x0800422b
 8004208:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7ff fb08 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004210:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004212:	e010      	b.n	8004236 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <UART_SetConfig+0x290>)
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004218:	e00d      	b.n	8004236 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7ff fa4d 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004220:	e009      	b.n	8004236 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004228:	e005      	b.n	8004236 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8137 	beq.w	80044ac <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <UART_SetConfig+0x294>)
 8004244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004248:	461a      	mov	r2, r3
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004250:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d305      	bcc.n	800426e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004274:	e11a      	b.n	80044ac <UART_SetConfig+0x4b4>
 8004276:	bf00      	nop
 8004278:	cfff69f3 	.word	0xcfff69f3
 800427c:	40008000 	.word	0x40008000
 8004280:	40013800 	.word	0x40013800
 8004284:	40004400 	.word	0x40004400
 8004288:	00f42400 	.word	0x00f42400
 800428c:	08009c8c 	.word	0x08009c8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	2200      	movs	r2, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	60fa      	str	r2, [r7, #12]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	4a8e      	ldr	r2, [pc, #568]	; (80044d8 <UART_SetConfig+0x4e0>)
 800429e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042b2:	f7fc fcc1 	bl	8000c38 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	020b      	lsls	r3, r1, #8
 80042c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042cc:	0202      	lsls	r2, r0, #8
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	6849      	ldr	r1, [r1, #4]
 80042d2:	0849      	lsrs	r1, r1, #1
 80042d4:	2000      	movs	r0, #0
 80042d6:	460c      	mov	r4, r1
 80042d8:	4605      	mov	r5, r0
 80042da:	eb12 0804 	adds.w	r8, r2, r4
 80042de:	eb43 0905 	adc.w	r9, r3, r5
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	469a      	mov	sl, r3
 80042ea:	4693      	mov	fp, r2
 80042ec:	4652      	mov	r2, sl
 80042ee:	465b      	mov	r3, fp
 80042f0:	4640      	mov	r0, r8
 80042f2:	4649      	mov	r1, r9
 80042f4:	f7fc fca0 	bl	8000c38 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4613      	mov	r3, r2
 80042fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004306:	d308      	bcc.n	800431a <UART_SetConfig+0x322>
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430e:	d204      	bcs.n	800431a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	e0c8      	b.n	80044ac <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004320:	e0c4      	b.n	80044ac <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432a:	d168      	bne.n	80043fe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800432c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004330:	2b08      	cmp	r3, #8
 8004332:	d828      	bhi.n	8004386 <UART_SetConfig+0x38e>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x344>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	08004387 	.word	0x08004387
 800434c:	08004377 	.word	0x08004377
 8004350:	08004387 	.word	0x08004387
 8004354:	08004387 	.word	0x08004387
 8004358:	08004387 	.word	0x08004387
 800435c:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7ff fa5e 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004366:	e014      	b.n	8004392 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7ff fa6c 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b5a      	ldr	r3, [pc, #360]	; (80044dc <UART_SetConfig+0x4e4>)
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7ff f99f 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800437c:	e009      	b.n	8004392 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004384:	e005      	b.n	8004392 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8089 	beq.w	80044ac <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <UART_SetConfig+0x4e0>)
 80043a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	441a      	add	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d916      	bls.n	80043f6 <UART_SetConfig+0x3fe>
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d212      	bcs.n	80043f6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f023 030f 	bic.w	r3, r3, #15
 80043d8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	8bfb      	ldrh	r3, [r7, #30]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8bfa      	ldrh	r2, [r7, #30]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e05a      	b.n	80044ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043fc:	e056      	b.n	80044ac <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004402:	2b08      	cmp	r3, #8
 8004404:	d827      	bhi.n	8004456 <UART_SetConfig+0x45e>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x414>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004457 	.word	0x08004457
 800441c:	08004447 	.word	0x08004447
 8004420:	08004457 	.word	0x08004457
 8004424:	08004457 	.word	0x08004457
 8004428:	08004457 	.word	0x08004457
 800442c:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7ff f9f6 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004436:	e014      	b.n	8004462 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004438:	f7ff fa04 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800443e:	e010      	b.n	8004462 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <UART_SetConfig+0x4e4>)
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004444:	e00d      	b.n	8004462 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7ff f937 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800444a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800444c:	e009      	b.n	8004462 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004454:	e005      	b.n	8004462 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004460:	bf00      	nop
    }

    if (pclk != 0U)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d021      	beq.n	80044ac <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <UART_SetConfig+0x4e0>)
 800446e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004472:	461a      	mov	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	fbb3 f2f2 	udiv	r2, r3, r2
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d908      	bls.n	80044a6 <UART_SetConfig+0x4ae>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d204      	bcs.n	80044a6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e002      	b.n	80044ac <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3730      	adds	r7, #48	; 0x30
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	08009c8c 	.word	0x08009c8c
 80044dc:	00f42400 	.word	0x00f42400

080044e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045de:	d10a      	bne.n	80045f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af02      	add	r7, sp, #8
 8004628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004632:	f7fd f8d5 	bl	80017e0 <HAL_GetTick>
 8004636:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d10e      	bne.n	8004664 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004646:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f82f 	bl	80046b8 <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e025      	b.n	80046b0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d10e      	bne.n	8004690 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f819 	bl	80046b8 <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e00f      	b.n	80046b0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b09c      	sub	sp, #112	; 0x70
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c8:	e0a9      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d0:	f000 80a5 	beq.w	800481e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fd f884 	bl	80017e0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <UART_WaitOnFlagUntilTimeout+0x32>
 80046e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d140      	bne.n	800476c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800470a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800470e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e6      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3308      	adds	r3, #8
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	663b      	str	r3, [r7, #96]	; 0x60
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800473c:	64ba      	str	r2, [r7, #72]	; 0x48
 800473e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800474a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e069      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d051      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	d149      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004792:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
 80047b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e6      	bne.n	8004794 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	613b      	str	r3, [r7, #16]
   return(result);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047e6:	623a      	str	r2, [r7, #32]
 80047e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e010      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	bf0c      	ite	eq
 800482e:	2301      	moveq	r3, #1
 8004830:	2300      	movne	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	429a      	cmp	r2, r3
 800483a:	f43f af46 	beq.w	80046ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3770      	adds	r7, #112	; 0x70
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_UARTEx_DisableFifoMode+0x16>
 800485a:	2302      	movs	r3, #2
 800485c:	e027      	b.n	80048ae <HAL_UARTEx_DisableFifoMode+0x66>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2224      	movs	r2, #36	; 0x24
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800488c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e02d      	b.n	800492c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f84f 	bl	80049b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e02d      	b.n	80049a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f811 	bl	80049b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049d0:	e031      	b.n	8004a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049d2:	2308      	movs	r3, #8
 80049d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049d6:	2308      	movs	r3, #8
 80049d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	0e5b      	lsrs	r3, r3, #25
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	0f5b      	lsrs	r3, r3, #29
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	7b3a      	ldrb	r2, [r7, #12]
 80049fe:	4910      	ldr	r1, [pc, #64]	; (8004a40 <UARTEx_SetNbDataToProcess+0x90>)
 8004a00:	5c8a      	ldrb	r2, [r1, r2]
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a06:	7b3a      	ldrb	r2, [r7, #12]
 8004a08:	490e      	ldr	r1, [pc, #56]	; (8004a44 <UARTEx_SetNbDataToProcess+0x94>)
 8004a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	7b7a      	ldrb	r2, [r7, #13]
 8004a1c:	4908      	ldr	r1, [pc, #32]	; (8004a40 <UARTEx_SetNbDataToProcess+0x90>)
 8004a1e:	5c8a      	ldrb	r2, [r1, r2]
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a24:	7b7a      	ldrb	r2, [r7, #13]
 8004a26:	4907      	ldr	r1, [pc, #28]	; (8004a44 <UARTEx_SetNbDataToProcess+0x94>)
 8004a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	08009ca4 	.word	0x08009ca4
 8004a44:	08009cac 	.word	0x08009cac

08004a48 <__errno>:
 8004a48:	4b01      	ldr	r3, [pc, #4]	; (8004a50 <__errno+0x8>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	2000000c 	.word	0x2000000c

08004a54 <__libc_init_array>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	4d0d      	ldr	r5, [pc, #52]	; (8004a8c <__libc_init_array+0x38>)
 8004a58:	4c0d      	ldr	r4, [pc, #52]	; (8004a90 <__libc_init_array+0x3c>)
 8004a5a:	1b64      	subs	r4, r4, r5
 8004a5c:	10a4      	asrs	r4, r4, #2
 8004a5e:	2600      	movs	r6, #0
 8004a60:	42a6      	cmp	r6, r4
 8004a62:	d109      	bne.n	8004a78 <__libc_init_array+0x24>
 8004a64:	4d0b      	ldr	r5, [pc, #44]	; (8004a94 <__libc_init_array+0x40>)
 8004a66:	4c0c      	ldr	r4, [pc, #48]	; (8004a98 <__libc_init_array+0x44>)
 8004a68:	f005 f87e 	bl	8009b68 <_init>
 8004a6c:	1b64      	subs	r4, r4, r5
 8004a6e:	10a4      	asrs	r4, r4, #2
 8004a70:	2600      	movs	r6, #0
 8004a72:	42a6      	cmp	r6, r4
 8004a74:	d105      	bne.n	8004a82 <__libc_init_array+0x2e>
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7c:	4798      	blx	r3
 8004a7e:	3601      	adds	r6, #1
 8004a80:	e7ee      	b.n	8004a60 <__libc_init_array+0xc>
 8004a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a86:	4798      	blx	r3
 8004a88:	3601      	adds	r6, #1
 8004a8a:	e7f2      	b.n	8004a72 <__libc_init_array+0x1e>
 8004a8c:	0800a174 	.word	0x0800a174
 8004a90:	0800a174 	.word	0x0800a174
 8004a94:	0800a174 	.word	0x0800a174
 8004a98:	0800a178 	.word	0x0800a178

08004a9c <memset>:
 8004a9c:	4402      	add	r2, r0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <memset+0xa>
 8004aa4:	4770      	bx	lr
 8004aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aaa:	e7f9      	b.n	8004aa0 <memset+0x4>

08004aac <__cvt>:
 8004aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab0:	b088      	sub	sp, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	461f      	mov	r7, r3
 8004ab6:	4614      	mov	r4, r2
 8004ab8:	bfb8      	it	lt
 8004aba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ac0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ac2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004ac6:	bfb6      	itet	lt
 8004ac8:	461f      	movlt	r7, r3
 8004aca:	2300      	movge	r3, #0
 8004acc:	232d      	movlt	r3, #45	; 0x2d
 8004ace:	7013      	strb	r3, [r2, #0]
 8004ad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ad2:	f023 0820 	bic.w	r8, r3, #32
 8004ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ada:	d005      	beq.n	8004ae8 <__cvt+0x3c>
 8004adc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ae0:	d100      	bne.n	8004ae4 <__cvt+0x38>
 8004ae2:	3501      	adds	r5, #1
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e000      	b.n	8004aea <__cvt+0x3e>
 8004ae8:	2303      	movs	r3, #3
 8004aea:	aa07      	add	r2, sp, #28
 8004aec:	9204      	str	r2, [sp, #16]
 8004aee:	aa06      	add	r2, sp, #24
 8004af0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004af4:	e9cd 3500 	strd	r3, r5, [sp]
 8004af8:	4622      	mov	r2, r4
 8004afa:	463b      	mov	r3, r7
 8004afc:	f001 fe20 	bl	8006740 <_dtoa_r>
 8004b00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b04:	4606      	mov	r6, r0
 8004b06:	d102      	bne.n	8004b0e <__cvt+0x62>
 8004b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b0a:	07db      	lsls	r3, r3, #31
 8004b0c:	d522      	bpl.n	8004b54 <__cvt+0xa8>
 8004b0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b12:	eb06 0905 	add.w	r9, r6, r5
 8004b16:	d110      	bne.n	8004b3a <__cvt+0x8e>
 8004b18:	7833      	ldrb	r3, [r6, #0]
 8004b1a:	2b30      	cmp	r3, #48	; 0x30
 8004b1c:	d10a      	bne.n	8004b34 <__cvt+0x88>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	4620      	mov	r0, r4
 8004b24:	4639      	mov	r1, r7
 8004b26:	f7fb ffa7 	bl	8000a78 <__aeabi_dcmpeq>
 8004b2a:	b918      	cbnz	r0, 8004b34 <__cvt+0x88>
 8004b2c:	f1c5 0501 	rsb	r5, r5, #1
 8004b30:	f8ca 5000 	str.w	r5, [sl]
 8004b34:	f8da 3000 	ldr.w	r3, [sl]
 8004b38:	4499      	add	r9, r3
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4639      	mov	r1, r7
 8004b42:	f7fb ff99 	bl	8000a78 <__aeabi_dcmpeq>
 8004b46:	b108      	cbz	r0, 8004b4c <__cvt+0xa0>
 8004b48:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b4c:	2230      	movs	r2, #48	; 0x30
 8004b4e:	9b07      	ldr	r3, [sp, #28]
 8004b50:	454b      	cmp	r3, r9
 8004b52:	d307      	bcc.n	8004b64 <__cvt+0xb8>
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b58:	1b9b      	subs	r3, r3, r6
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	b008      	add	sp, #32
 8004b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	9107      	str	r1, [sp, #28]
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e7f0      	b.n	8004b4e <__cvt+0xa2>

08004b6c <__exponent>:
 8004b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2900      	cmp	r1, #0
 8004b72:	bfb8      	it	lt
 8004b74:	4249      	neglt	r1, r1
 8004b76:	f803 2b02 	strb.w	r2, [r3], #2
 8004b7a:	bfb4      	ite	lt
 8004b7c:	222d      	movlt	r2, #45	; 0x2d
 8004b7e:	222b      	movge	r2, #43	; 0x2b
 8004b80:	2909      	cmp	r1, #9
 8004b82:	7042      	strb	r2, [r0, #1]
 8004b84:	dd2a      	ble.n	8004bdc <__exponent+0x70>
 8004b86:	f10d 0407 	add.w	r4, sp, #7
 8004b8a:	46a4      	mov	ip, r4
 8004b8c:	270a      	movs	r7, #10
 8004b8e:	46a6      	mov	lr, r4
 8004b90:	460a      	mov	r2, r1
 8004b92:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b96:	fb07 1516 	mls	r5, r7, r6, r1
 8004b9a:	3530      	adds	r5, #48	; 0x30
 8004b9c:	2a63      	cmp	r2, #99	; 0x63
 8004b9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004ba2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	dcf1      	bgt.n	8004b8e <__exponent+0x22>
 8004baa:	3130      	adds	r1, #48	; 0x30
 8004bac:	f1ae 0502 	sub.w	r5, lr, #2
 8004bb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bb4:	1c44      	adds	r4, r0, #1
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4561      	cmp	r1, ip
 8004bba:	d30a      	bcc.n	8004bd2 <__exponent+0x66>
 8004bbc:	f10d 0209 	add.w	r2, sp, #9
 8004bc0:	eba2 020e 	sub.w	r2, r2, lr
 8004bc4:	4565      	cmp	r5, ip
 8004bc6:	bf88      	it	hi
 8004bc8:	2200      	movhi	r2, #0
 8004bca:	4413      	add	r3, r2
 8004bcc:	1a18      	subs	r0, r3, r0
 8004bce:	b003      	add	sp, #12
 8004bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bda:	e7ed      	b.n	8004bb8 <__exponent+0x4c>
 8004bdc:	2330      	movs	r3, #48	; 0x30
 8004bde:	3130      	adds	r1, #48	; 0x30
 8004be0:	7083      	strb	r3, [r0, #2]
 8004be2:	70c1      	strb	r1, [r0, #3]
 8004be4:	1d03      	adds	r3, r0, #4
 8004be6:	e7f1      	b.n	8004bcc <__exponent+0x60>

08004be8 <_printf_float>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b091      	sub	sp, #68	; 0x44
 8004bee:	460c      	mov	r4, r1
 8004bf0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	461f      	mov	r7, r3
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	f002 fef5 	bl	80079e8 <_localeconv_r>
 8004bfe:	6803      	ldr	r3, [r0, #0]
 8004c00:	9309      	str	r3, [sp, #36]	; 0x24
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fabc 	bl	8000180 <strlen>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c10:	900a      	str	r0, [sp, #40]	; 0x28
 8004c12:	3307      	adds	r3, #7
 8004c14:	f023 0307 	bic.w	r3, r3, #7
 8004c18:	f103 0208 	add.w	r2, r3, #8
 8004c1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004c20:	f8d4 b000 	ldr.w	fp, [r4]
 8004c24:	f8c8 2000 	str.w	r2, [r8]
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004c34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c3c:	4b9c      	ldr	r3, [pc, #624]	; (8004eb0 <_printf_float+0x2c8>)
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c42:	4640      	mov	r0, r8
 8004c44:	f7fb ff4a 	bl	8000adc <__aeabi_dcmpun>
 8004c48:	bb70      	cbnz	r0, 8004ca8 <_printf_float+0xc0>
 8004c4a:	4b99      	ldr	r3, [pc, #612]	; (8004eb0 <_printf_float+0x2c8>)
 8004c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7fb ff24 	bl	8000aa0 <__aeabi_dcmple>
 8004c58:	bb30      	cbnz	r0, 8004ca8 <_printf_float+0xc0>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4640      	mov	r0, r8
 8004c60:	4651      	mov	r1, sl
 8004c62:	f7fb ff13 	bl	8000a8c <__aeabi_dcmplt>
 8004c66:	b110      	cbz	r0, 8004c6e <_printf_float+0x86>
 8004c68:	232d      	movs	r3, #45	; 0x2d
 8004c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6e:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <_printf_float+0x2cc>)
 8004c70:	4891      	ldr	r0, [pc, #580]	; (8004eb8 <_printf_float+0x2d0>)
 8004c72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c76:	bf94      	ite	ls
 8004c78:	4698      	movls	r8, r3
 8004c7a:	4680      	movhi	r8, r0
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	f02b 0304 	bic.w	r3, fp, #4
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	f04f 0a00 	mov.w	sl, #0
 8004c8a:	9700      	str	r7, [sp, #0]
 8004c8c:	4633      	mov	r3, r6
 8004c8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f9d2 	bl	800503c <_printf_common>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f040 808f 	bne.w	8004dbc <_printf_float+0x1d4>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca2:	b011      	add	sp, #68	; 0x44
 8004ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca8:	4642      	mov	r2, r8
 8004caa:	4653      	mov	r3, sl
 8004cac:	4640      	mov	r0, r8
 8004cae:	4651      	mov	r1, sl
 8004cb0:	f7fb ff14 	bl	8000adc <__aeabi_dcmpun>
 8004cb4:	b140      	cbz	r0, 8004cc8 <_printf_float+0xe0>
 8004cb6:	f1ba 0f00 	cmp.w	sl, #0
 8004cba:	bfbc      	itt	lt
 8004cbc:	232d      	movlt	r3, #45	; 0x2d
 8004cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cc2:	487e      	ldr	r0, [pc, #504]	; (8004ebc <_printf_float+0x2d4>)
 8004cc4:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <_printf_float+0x2d8>)
 8004cc6:	e7d4      	b.n	8004c72 <_printf_float+0x8a>
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004cd0:	d142      	bne.n	8004d58 <_printf_float+0x170>
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	6063      	str	r3, [r4, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	9206      	str	r2, [sp, #24]
 8004cda:	aa0e      	add	r2, sp, #56	; 0x38
 8004cdc:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ce0:	aa0d      	add	r2, sp, #52	; 0x34
 8004ce2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ce6:	9203      	str	r2, [sp, #12]
 8004ce8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004cec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	4653      	mov	r3, sl
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	910b      	str	r1, [sp, #44]	; 0x2c
 8004cfe:	f7ff fed5 	bl	8004aac <__cvt>
 8004d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d04:	2947      	cmp	r1, #71	; 0x47
 8004d06:	4680      	mov	r8, r0
 8004d08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d0a:	d108      	bne.n	8004d1e <_printf_float+0x136>
 8004d0c:	1cc8      	adds	r0, r1, #3
 8004d0e:	db02      	blt.n	8004d16 <_printf_float+0x12e>
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	4299      	cmp	r1, r3
 8004d14:	dd40      	ble.n	8004d98 <_printf_float+0x1b0>
 8004d16:	f1a9 0902 	sub.w	r9, r9, #2
 8004d1a:	fa5f f989 	uxtb.w	r9, r9
 8004d1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d22:	d81f      	bhi.n	8004d64 <_printf_float+0x17c>
 8004d24:	3901      	subs	r1, #1
 8004d26:	464a      	mov	r2, r9
 8004d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d2c:	910d      	str	r1, [sp, #52]	; 0x34
 8004d2e:	f7ff ff1d 	bl	8004b6c <__exponent>
 8004d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d34:	1813      	adds	r3, r2, r0
 8004d36:	2a01      	cmp	r2, #1
 8004d38:	4682      	mov	sl, r0
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	dc02      	bgt.n	8004d44 <_printf_float+0x15c>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	07d2      	lsls	r2, r2, #31
 8004d42:	d501      	bpl.n	8004d48 <_printf_float+0x160>
 8004d44:	3301      	adds	r3, #1
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d09c      	beq.n	8004c8a <_printf_float+0xa2>
 8004d50:	232d      	movs	r3, #45	; 0x2d
 8004d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d56:	e798      	b.n	8004c8a <_printf_float+0xa2>
 8004d58:	2947      	cmp	r1, #71	; 0x47
 8004d5a:	d1bc      	bne.n	8004cd6 <_printf_float+0xee>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ba      	bne.n	8004cd6 <_printf_float+0xee>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e7b7      	b.n	8004cd4 <_printf_float+0xec>
 8004d64:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d68:	d118      	bne.n	8004d9c <_printf_float+0x1b4>
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	dd0b      	ble.n	8004d88 <_printf_float+0x1a0>
 8004d70:	6121      	str	r1, [r4, #16]
 8004d72:	b913      	cbnz	r3, 8004d7a <_printf_float+0x192>
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	07d0      	lsls	r0, r2, #31
 8004d78:	d502      	bpl.n	8004d80 <_printf_float+0x198>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	440b      	add	r3, r1
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d82:	f04f 0a00 	mov.w	sl, #0
 8004d86:	e7df      	b.n	8004d48 <_printf_float+0x160>
 8004d88:	b913      	cbnz	r3, 8004d90 <_printf_float+0x1a8>
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	07d2      	lsls	r2, r2, #31
 8004d8e:	d501      	bpl.n	8004d94 <_printf_float+0x1ac>
 8004d90:	3302      	adds	r3, #2
 8004d92:	e7f4      	b.n	8004d7e <_printf_float+0x196>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e7f2      	b.n	8004d7e <_printf_float+0x196>
 8004d98:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	db05      	blt.n	8004dae <_printf_float+0x1c6>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6121      	str	r1, [r4, #16]
 8004da6:	07d8      	lsls	r0, r3, #31
 8004da8:	d5ea      	bpl.n	8004d80 <_printf_float+0x198>
 8004daa:	1c4b      	adds	r3, r1, #1
 8004dac:	e7e7      	b.n	8004d7e <_printf_float+0x196>
 8004dae:	2900      	cmp	r1, #0
 8004db0:	bfd4      	ite	le
 8004db2:	f1c1 0202 	rsble	r2, r1, #2
 8004db6:	2201      	movgt	r2, #1
 8004db8:	4413      	add	r3, r2
 8004dba:	e7e0      	b.n	8004d7e <_printf_float+0x196>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	055a      	lsls	r2, r3, #21
 8004dc0:	d407      	bmi.n	8004dd2 <_printf_float+0x1ea>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d12b      	bne.n	8004e28 <_printf_float+0x240>
 8004dd0:	e765      	b.n	8004c9e <_printf_float+0xb6>
 8004dd2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004dd6:	f240 80dc 	bls.w	8004f92 <_printf_float+0x3aa>
 8004dda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dde:	2200      	movs	r2, #0
 8004de0:	2300      	movs	r3, #0
 8004de2:	f7fb fe49 	bl	8000a78 <__aeabi_dcmpeq>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d033      	beq.n	8004e52 <_printf_float+0x26a>
 8004dea:	4a36      	ldr	r2, [pc, #216]	; (8004ec4 <_printf_float+0x2dc>)
 8004dec:	2301      	movs	r3, #1
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f af52 	beq.w	8004c9e <_printf_float+0xb6>
 8004dfa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	db02      	blt.n	8004e08 <_printf_float+0x220>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	07d8      	lsls	r0, r3, #31
 8004e06:	d50f      	bpl.n	8004e28 <_printf_float+0x240>
 8004e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f af43 	beq.w	8004c9e <_printf_float+0xb6>
 8004e18:	f04f 0800 	mov.w	r8, #0
 8004e1c:	f104 091a 	add.w	r9, r4, #26
 8004e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4543      	cmp	r3, r8
 8004e26:	dc09      	bgt.n	8004e3c <_printf_float+0x254>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	079b      	lsls	r3, r3, #30
 8004e2c:	f100 8101 	bmi.w	8005032 <_printf_float+0x44a>
 8004e30:	68e0      	ldr	r0, [r4, #12]
 8004e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e34:	4298      	cmp	r0, r3
 8004e36:	bfb8      	it	lt
 8004e38:	4618      	movlt	r0, r3
 8004e3a:	e732      	b.n	8004ca2 <_printf_float+0xba>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	464a      	mov	r2, r9
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	f43f af29 	beq.w	8004c9e <_printf_float+0xb6>
 8004e4c:	f108 0801 	add.w	r8, r8, #1
 8004e50:	e7e6      	b.n	8004e20 <_printf_float+0x238>
 8004e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dc37      	bgt.n	8004ec8 <_printf_float+0x2e0>
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <_printf_float+0x2dc>)
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	f43f af1b 	beq.w	8004c9e <_printf_float+0xb6>
 8004e68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d102      	bne.n	8004e76 <_printf_float+0x28e>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	07d9      	lsls	r1, r3, #31
 8004e74:	d5d8      	bpl.n	8004e28 <_printf_float+0x240>
 8004e76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f af0c 	beq.w	8004c9e <_printf_float+0xb6>
 8004e86:	f04f 0900 	mov.w	r9, #0
 8004e8a:	f104 0a1a 	add.w	sl, r4, #26
 8004e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e90:	425b      	negs	r3, r3
 8004e92:	454b      	cmp	r3, r9
 8004e94:	dc01      	bgt.n	8004e9a <_printf_float+0x2b2>
 8004e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e98:	e794      	b.n	8004dc4 <_printf_float+0x1dc>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	f43f aefa 	beq.w	8004c9e <_printf_float+0xb6>
 8004eaa:	f109 0901 	add.w	r9, r9, #1
 8004eae:	e7ee      	b.n	8004e8e <_printf_float+0x2a6>
 8004eb0:	7fefffff 	.word	0x7fefffff
 8004eb4:	08009cb8 	.word	0x08009cb8
 8004eb8:	08009cbc 	.word	0x08009cbc
 8004ebc:	08009cc4 	.word	0x08009cc4
 8004ec0:	08009cc0 	.word	0x08009cc0
 8004ec4:	0800a0b9 	.word	0x0800a0b9
 8004ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	bfa8      	it	ge
 8004ed0:	461a      	movge	r2, r3
 8004ed2:	2a00      	cmp	r2, #0
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	dc37      	bgt.n	8004f48 <_printf_float+0x360>
 8004ed8:	f04f 0b00 	mov.w	fp, #0
 8004edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ee0:	f104 021a 	add.w	r2, r4, #26
 8004ee4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ee8:	ebaa 0309 	sub.w	r3, sl, r9
 8004eec:	455b      	cmp	r3, fp
 8004eee:	dc33      	bgt.n	8004f58 <_printf_float+0x370>
 8004ef0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	db3b      	blt.n	8004f70 <_printf_float+0x388>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	07da      	lsls	r2, r3, #31
 8004efc:	d438      	bmi.n	8004f70 <_printf_float+0x388>
 8004efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f02:	eba3 020a 	sub.w	r2, r3, sl
 8004f06:	eba3 0901 	sub.w	r9, r3, r1
 8004f0a:	4591      	cmp	r9, r2
 8004f0c:	bfa8      	it	ge
 8004f0e:	4691      	movge	r9, r2
 8004f10:	f1b9 0f00 	cmp.w	r9, #0
 8004f14:	dc34      	bgt.n	8004f80 <_printf_float+0x398>
 8004f16:	f04f 0800 	mov.w	r8, #0
 8004f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f1e:	f104 0a1a 	add.w	sl, r4, #26
 8004f22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	eba3 0309 	sub.w	r3, r3, r9
 8004f2c:	4543      	cmp	r3, r8
 8004f2e:	f77f af7b 	ble.w	8004e28 <_printf_float+0x240>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4652      	mov	r2, sl
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f aeae 	beq.w	8004c9e <_printf_float+0xb6>
 8004f42:	f108 0801 	add.w	r8, r8, #1
 8004f46:	e7ec      	b.n	8004f22 <_printf_float+0x33a>
 8004f48:	4613      	mov	r3, r2
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	d1c0      	bne.n	8004ed8 <_printf_float+0x2f0>
 8004f56:	e6a2      	b.n	8004c9e <_printf_float+0xb6>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f ae9b 	beq.w	8004c9e <_printf_float+0xb6>
 8004f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f6a:	f10b 0b01 	add.w	fp, fp, #1
 8004f6e:	e7b9      	b.n	8004ee4 <_printf_float+0x2fc>
 8004f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d1bf      	bne.n	8004efe <_printf_float+0x316>
 8004f7e:	e68e      	b.n	8004c9e <_printf_float+0xb6>
 8004f80:	464b      	mov	r3, r9
 8004f82:	eb08 020a 	add.w	r2, r8, sl
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d1c2      	bne.n	8004f16 <_printf_float+0x32e>
 8004f90:	e685      	b.n	8004c9e <_printf_float+0xb6>
 8004f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f94:	2a01      	cmp	r2, #1
 8004f96:	dc01      	bgt.n	8004f9c <_printf_float+0x3b4>
 8004f98:	07db      	lsls	r3, r3, #31
 8004f9a:	d537      	bpl.n	800500c <_printf_float+0x424>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	f43f ae79 	beq.w	8004c9e <_printf_float+0xb6>
 8004fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f ae71 	beq.w	8004c9e <_printf_float+0xb6>
 8004fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f7fb fd58 	bl	8000a78 <__aeabi_dcmpeq>
 8004fc8:	b9d8      	cbnz	r0, 8005002 <_printf_float+0x41a>
 8004fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fcc:	f108 0201 	add.w	r2, r8, #1
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d10e      	bne.n	8004ffa <_printf_float+0x412>
 8004fdc:	e65f      	b.n	8004c9e <_printf_float+0xb6>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	464a      	mov	r2, r9
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f ae58 	beq.w	8004c9e <_printf_float+0xb6>
 8004fee:	f108 0801 	add.w	r8, r8, #1
 8004ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	4543      	cmp	r3, r8
 8004ff8:	dcf1      	bgt.n	8004fde <_printf_float+0x3f6>
 8004ffa:	4653      	mov	r3, sl
 8004ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005000:	e6e1      	b.n	8004dc6 <_printf_float+0x1de>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	f104 091a 	add.w	r9, r4, #26
 800500a:	e7f2      	b.n	8004ff2 <_printf_float+0x40a>
 800500c:	2301      	movs	r3, #1
 800500e:	4642      	mov	r2, r8
 8005010:	e7df      	b.n	8004fd2 <_printf_float+0x3ea>
 8005012:	2301      	movs	r3, #1
 8005014:	464a      	mov	r2, r9
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f ae3e 	beq.w	8004c9e <_printf_float+0xb6>
 8005022:	f108 0801 	add.w	r8, r8, #1
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	4543      	cmp	r3, r8
 800502e:	dcf0      	bgt.n	8005012 <_printf_float+0x42a>
 8005030:	e6fe      	b.n	8004e30 <_printf_float+0x248>
 8005032:	f04f 0800 	mov.w	r8, #0
 8005036:	f104 0919 	add.w	r9, r4, #25
 800503a:	e7f4      	b.n	8005026 <_printf_float+0x43e>

0800503c <_printf_common>:
 800503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005040:	4616      	mov	r6, r2
 8005042:	4699      	mov	r9, r3
 8005044:	688a      	ldr	r2, [r1, #8]
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800504c:	4293      	cmp	r3, r2
 800504e:	bfb8      	it	lt
 8005050:	4613      	movlt	r3, r2
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005058:	4607      	mov	r7, r0
 800505a:	460c      	mov	r4, r1
 800505c:	b10a      	cbz	r2, 8005062 <_printf_common+0x26>
 800505e:	3301      	adds	r3, #1
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	0699      	lsls	r1, r3, #26
 8005066:	bf42      	ittt	mi
 8005068:	6833      	ldrmi	r3, [r6, #0]
 800506a:	3302      	addmi	r3, #2
 800506c:	6033      	strmi	r3, [r6, #0]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	f015 0506 	ands.w	r5, r5, #6
 8005074:	d106      	bne.n	8005084 <_printf_common+0x48>
 8005076:	f104 0a19 	add.w	sl, r4, #25
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	6832      	ldr	r2, [r6, #0]
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	42ab      	cmp	r3, r5
 8005082:	dc26      	bgt.n	80050d2 <_printf_common+0x96>
 8005084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005088:	1e13      	subs	r3, r2, #0
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	bf18      	it	ne
 800508e:	2301      	movne	r3, #1
 8005090:	0692      	lsls	r2, r2, #26
 8005092:	d42b      	bmi.n	80050ec <_printf_common+0xb0>
 8005094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005098:	4649      	mov	r1, r9
 800509a:	4638      	mov	r0, r7
 800509c:	47c0      	blx	r8
 800509e:	3001      	adds	r0, #1
 80050a0:	d01e      	beq.n	80050e0 <_printf_common+0xa4>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	68e5      	ldr	r5, [r4, #12]
 80050a6:	6832      	ldr	r2, [r6, #0]
 80050a8:	f003 0306 	and.w	r3, r3, #6
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	bf08      	it	eq
 80050b0:	1aad      	subeq	r5, r5, r2
 80050b2:	68a3      	ldr	r3, [r4, #8]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	bf0c      	ite	eq
 80050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050bc:	2500      	movne	r5, #0
 80050be:	4293      	cmp	r3, r2
 80050c0:	bfc4      	itt	gt
 80050c2:	1a9b      	subgt	r3, r3, r2
 80050c4:	18ed      	addgt	r5, r5, r3
 80050c6:	2600      	movs	r6, #0
 80050c8:	341a      	adds	r4, #26
 80050ca:	42b5      	cmp	r5, r6
 80050cc:	d11a      	bne.n	8005104 <_printf_common+0xc8>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e008      	b.n	80050e4 <_printf_common+0xa8>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4652      	mov	r2, sl
 80050d6:	4649      	mov	r1, r9
 80050d8:	4638      	mov	r0, r7
 80050da:	47c0      	blx	r8
 80050dc:	3001      	adds	r0, #1
 80050de:	d103      	bne.n	80050e8 <_printf_common+0xac>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e8:	3501      	adds	r5, #1
 80050ea:	e7c6      	b.n	800507a <_printf_common+0x3e>
 80050ec:	18e1      	adds	r1, r4, r3
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	2030      	movs	r0, #48	; 0x30
 80050f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f6:	4422      	add	r2, r4
 80050f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005100:	3302      	adds	r3, #2
 8005102:	e7c7      	b.n	8005094 <_printf_common+0x58>
 8005104:	2301      	movs	r3, #1
 8005106:	4622      	mov	r2, r4
 8005108:	4649      	mov	r1, r9
 800510a:	4638      	mov	r0, r7
 800510c:	47c0      	blx	r8
 800510e:	3001      	adds	r0, #1
 8005110:	d0e6      	beq.n	80050e0 <_printf_common+0xa4>
 8005112:	3601      	adds	r6, #1
 8005114:	e7d9      	b.n	80050ca <_printf_common+0x8e>
	...

08005118 <_printf_i>:
 8005118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	7e0f      	ldrb	r7, [r1, #24]
 800511e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005120:	2f78      	cmp	r7, #120	; 0x78
 8005122:	4691      	mov	r9, r2
 8005124:	4680      	mov	r8, r0
 8005126:	460c      	mov	r4, r1
 8005128:	469a      	mov	sl, r3
 800512a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800512e:	d807      	bhi.n	8005140 <_printf_i+0x28>
 8005130:	2f62      	cmp	r7, #98	; 0x62
 8005132:	d80a      	bhi.n	800514a <_printf_i+0x32>
 8005134:	2f00      	cmp	r7, #0
 8005136:	f000 80d8 	beq.w	80052ea <_printf_i+0x1d2>
 800513a:	2f58      	cmp	r7, #88	; 0x58
 800513c:	f000 80a3 	beq.w	8005286 <_printf_i+0x16e>
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005148:	e03a      	b.n	80051c0 <_printf_i+0xa8>
 800514a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514e:	2b15      	cmp	r3, #21
 8005150:	d8f6      	bhi.n	8005140 <_printf_i+0x28>
 8005152:	a101      	add	r1, pc, #4	; (adr r1, 8005158 <_printf_i+0x40>)
 8005154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051c5 	.word	0x080051c5
 8005160:	08005141 	.word	0x08005141
 8005164:	08005141 	.word	0x08005141
 8005168:	08005141 	.word	0x08005141
 800516c:	08005141 	.word	0x08005141
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005141 	.word	0x08005141
 8005178:	08005141 	.word	0x08005141
 800517c:	08005141 	.word	0x08005141
 8005180:	08005141 	.word	0x08005141
 8005184:	080052d1 	.word	0x080052d1
 8005188:	080051f5 	.word	0x080051f5
 800518c:	080052b3 	.word	0x080052b3
 8005190:	08005141 	.word	0x08005141
 8005194:	08005141 	.word	0x08005141
 8005198:	080052f3 	.word	0x080052f3
 800519c:	08005141 	.word	0x08005141
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005141 	.word	0x08005141
 80051a8:	08005141 	.word	0x08005141
 80051ac:	080052bb 	.word	0x080052bb
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	602a      	str	r2, [r5, #0]
 80051b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0a3      	b.n	800530c <_printf_i+0x1f4>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	6829      	ldr	r1, [r5, #0]
 80051c8:	0606      	lsls	r6, r0, #24
 80051ca:	f101 0304 	add.w	r3, r1, #4
 80051ce:	d50a      	bpl.n	80051e6 <_printf_i+0xce>
 80051d0:	680e      	ldr	r6, [r1, #0]
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	2e00      	cmp	r6, #0
 80051d6:	da03      	bge.n	80051e0 <_printf_i+0xc8>
 80051d8:	232d      	movs	r3, #45	; 0x2d
 80051da:	4276      	negs	r6, r6
 80051dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e0:	485e      	ldr	r0, [pc, #376]	; (800535c <_printf_i+0x244>)
 80051e2:	230a      	movs	r3, #10
 80051e4:	e019      	b.n	800521a <_printf_i+0x102>
 80051e6:	680e      	ldr	r6, [r1, #0]
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ee:	bf18      	it	ne
 80051f0:	b236      	sxthne	r6, r6
 80051f2:	e7ef      	b.n	80051d4 <_printf_i+0xbc>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	1d19      	adds	r1, r3, #4
 80051fa:	6029      	str	r1, [r5, #0]
 80051fc:	0601      	lsls	r1, r0, #24
 80051fe:	d501      	bpl.n	8005204 <_printf_i+0xec>
 8005200:	681e      	ldr	r6, [r3, #0]
 8005202:	e002      	b.n	800520a <_printf_i+0xf2>
 8005204:	0646      	lsls	r6, r0, #25
 8005206:	d5fb      	bpl.n	8005200 <_printf_i+0xe8>
 8005208:	881e      	ldrh	r6, [r3, #0]
 800520a:	4854      	ldr	r0, [pc, #336]	; (800535c <_printf_i+0x244>)
 800520c:	2f6f      	cmp	r7, #111	; 0x6f
 800520e:	bf0c      	ite	eq
 8005210:	2308      	moveq	r3, #8
 8005212:	230a      	movne	r3, #10
 8005214:	2100      	movs	r1, #0
 8005216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800521a:	6865      	ldr	r5, [r4, #4]
 800521c:	60a5      	str	r5, [r4, #8]
 800521e:	2d00      	cmp	r5, #0
 8005220:	bfa2      	ittt	ge
 8005222:	6821      	ldrge	r1, [r4, #0]
 8005224:	f021 0104 	bicge.w	r1, r1, #4
 8005228:	6021      	strge	r1, [r4, #0]
 800522a:	b90e      	cbnz	r6, 8005230 <_printf_i+0x118>
 800522c:	2d00      	cmp	r5, #0
 800522e:	d04d      	beq.n	80052cc <_printf_i+0x1b4>
 8005230:	4615      	mov	r5, r2
 8005232:	fbb6 f1f3 	udiv	r1, r6, r3
 8005236:	fb03 6711 	mls	r7, r3, r1, r6
 800523a:	5dc7      	ldrb	r7, [r0, r7]
 800523c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005240:	4637      	mov	r7, r6
 8005242:	42bb      	cmp	r3, r7
 8005244:	460e      	mov	r6, r1
 8005246:	d9f4      	bls.n	8005232 <_printf_i+0x11a>
 8005248:	2b08      	cmp	r3, #8
 800524a:	d10b      	bne.n	8005264 <_printf_i+0x14c>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07de      	lsls	r6, r3, #31
 8005250:	d508      	bpl.n	8005264 <_printf_i+0x14c>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	6861      	ldr	r1, [r4, #4]
 8005256:	4299      	cmp	r1, r3
 8005258:	bfde      	ittt	le
 800525a:	2330      	movle	r3, #48	; 0x30
 800525c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005264:	1b52      	subs	r2, r2, r5
 8005266:	6122      	str	r2, [r4, #16]
 8005268:	f8cd a000 	str.w	sl, [sp]
 800526c:	464b      	mov	r3, r9
 800526e:	aa03      	add	r2, sp, #12
 8005270:	4621      	mov	r1, r4
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fee2 	bl	800503c <_printf_common>
 8005278:	3001      	adds	r0, #1
 800527a:	d14c      	bne.n	8005316 <_printf_i+0x1fe>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005280:	b004      	add	sp, #16
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	4835      	ldr	r0, [pc, #212]	; (800535c <_printf_i+0x244>)
 8005288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800528c:	6829      	ldr	r1, [r5, #0]
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f851 6b04 	ldr.w	r6, [r1], #4
 8005294:	6029      	str	r1, [r5, #0]
 8005296:	061d      	lsls	r5, r3, #24
 8005298:	d514      	bpl.n	80052c4 <_printf_i+0x1ac>
 800529a:	07df      	lsls	r7, r3, #31
 800529c:	bf44      	itt	mi
 800529e:	f043 0320 	orrmi.w	r3, r3, #32
 80052a2:	6023      	strmi	r3, [r4, #0]
 80052a4:	b91e      	cbnz	r6, 80052ae <_printf_i+0x196>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f023 0320 	bic.w	r3, r3, #32
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	2310      	movs	r3, #16
 80052b0:	e7b0      	b.n	8005214 <_printf_i+0xfc>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	2378      	movs	r3, #120	; 0x78
 80052bc:	4828      	ldr	r0, [pc, #160]	; (8005360 <_printf_i+0x248>)
 80052be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052c2:	e7e3      	b.n	800528c <_printf_i+0x174>
 80052c4:	0659      	lsls	r1, r3, #25
 80052c6:	bf48      	it	mi
 80052c8:	b2b6      	uxthmi	r6, r6
 80052ca:	e7e6      	b.n	800529a <_printf_i+0x182>
 80052cc:	4615      	mov	r5, r2
 80052ce:	e7bb      	b.n	8005248 <_printf_i+0x130>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	6826      	ldr	r6, [r4, #0]
 80052d4:	6961      	ldr	r1, [r4, #20]
 80052d6:	1d18      	adds	r0, r3, #4
 80052d8:	6028      	str	r0, [r5, #0]
 80052da:	0635      	lsls	r5, r6, #24
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0x1cc>
 80052e0:	6019      	str	r1, [r3, #0]
 80052e2:	e002      	b.n	80052ea <_printf_i+0x1d2>
 80052e4:	0670      	lsls	r0, r6, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0x1c8>
 80052e8:	8019      	strh	r1, [r3, #0]
 80052ea:	2300      	movs	r3, #0
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	4615      	mov	r5, r2
 80052f0:	e7ba      	b.n	8005268 <_printf_i+0x150>
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	1d1a      	adds	r2, r3, #4
 80052f6:	602a      	str	r2, [r5, #0]
 80052f8:	681d      	ldr	r5, [r3, #0]
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	2100      	movs	r1, #0
 80052fe:	4628      	mov	r0, r5
 8005300:	f7fa ff46 	bl	8000190 <memchr>
 8005304:	b108      	cbz	r0, 800530a <_printf_i+0x1f2>
 8005306:	1b40      	subs	r0, r0, r5
 8005308:	6060      	str	r0, [r4, #4]
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	2300      	movs	r3, #0
 8005310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005314:	e7a8      	b.n	8005268 <_printf_i+0x150>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	462a      	mov	r2, r5
 800531a:	4649      	mov	r1, r9
 800531c:	4640      	mov	r0, r8
 800531e:	47d0      	blx	sl
 8005320:	3001      	adds	r0, #1
 8005322:	d0ab      	beq.n	800527c <_printf_i+0x164>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	079b      	lsls	r3, r3, #30
 8005328:	d413      	bmi.n	8005352 <_printf_i+0x23a>
 800532a:	68e0      	ldr	r0, [r4, #12]
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	4298      	cmp	r0, r3
 8005330:	bfb8      	it	lt
 8005332:	4618      	movlt	r0, r3
 8005334:	e7a4      	b.n	8005280 <_printf_i+0x168>
 8005336:	2301      	movs	r3, #1
 8005338:	4632      	mov	r2, r6
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	47d0      	blx	sl
 8005340:	3001      	adds	r0, #1
 8005342:	d09b      	beq.n	800527c <_printf_i+0x164>
 8005344:	3501      	adds	r5, #1
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	9903      	ldr	r1, [sp, #12]
 800534a:	1a5b      	subs	r3, r3, r1
 800534c:	42ab      	cmp	r3, r5
 800534e:	dcf2      	bgt.n	8005336 <_printf_i+0x21e>
 8005350:	e7eb      	b.n	800532a <_printf_i+0x212>
 8005352:	2500      	movs	r5, #0
 8005354:	f104 0619 	add.w	r6, r4, #25
 8005358:	e7f5      	b.n	8005346 <_printf_i+0x22e>
 800535a:	bf00      	nop
 800535c:	08009cc8 	.word	0x08009cc8
 8005360:	08009cd9 	.word	0x08009cd9

08005364 <_scanf_float>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	b087      	sub	sp, #28
 800536a:	4617      	mov	r7, r2
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	688b      	ldr	r3, [r1, #8]
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005376:	bf83      	ittte	hi
 8005378:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800537c:	195b      	addhi	r3, r3, r5
 800537e:	9302      	strhi	r3, [sp, #8]
 8005380:	2300      	movls	r3, #0
 8005382:	bf86      	itte	hi
 8005384:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005388:	608b      	strhi	r3, [r1, #8]
 800538a:	9302      	strls	r3, [sp, #8]
 800538c:	680b      	ldr	r3, [r1, #0]
 800538e:	468b      	mov	fp, r1
 8005390:	2500      	movs	r5, #0
 8005392:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005396:	f84b 3b1c 	str.w	r3, [fp], #28
 800539a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800539e:	4680      	mov	r8, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	465e      	mov	r6, fp
 80053a4:	46aa      	mov	sl, r5
 80053a6:	46a9      	mov	r9, r5
 80053a8:	9501      	str	r5, [sp, #4]
 80053aa:	68a2      	ldr	r2, [r4, #8]
 80053ac:	b152      	cbz	r2, 80053c4 <_scanf_float+0x60>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b4e      	cmp	r3, #78	; 0x4e
 80053b4:	d864      	bhi.n	8005480 <_scanf_float+0x11c>
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d83c      	bhi.n	8005434 <_scanf_float+0xd0>
 80053ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80053be:	b2c8      	uxtb	r0, r1
 80053c0:	280e      	cmp	r0, #14
 80053c2:	d93a      	bls.n	800543a <_scanf_float+0xd6>
 80053c4:	f1b9 0f00 	cmp.w	r9, #0
 80053c8:	d003      	beq.n	80053d2 <_scanf_float+0x6e>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053d6:	f1ba 0f01 	cmp.w	sl, #1
 80053da:	f200 8113 	bhi.w	8005604 <_scanf_float+0x2a0>
 80053de:	455e      	cmp	r6, fp
 80053e0:	f200 8105 	bhi.w	80055ee <_scanf_float+0x28a>
 80053e4:	2501      	movs	r5, #1
 80053e6:	4628      	mov	r0, r5
 80053e8:	b007      	add	sp, #28
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80053f2:	2a0d      	cmp	r2, #13
 80053f4:	d8e6      	bhi.n	80053c4 <_scanf_float+0x60>
 80053f6:	a101      	add	r1, pc, #4	; (adr r1, 80053fc <_scanf_float+0x98>)
 80053f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053fc:	0800553b 	.word	0x0800553b
 8005400:	080053c5 	.word	0x080053c5
 8005404:	080053c5 	.word	0x080053c5
 8005408:	080053c5 	.word	0x080053c5
 800540c:	0800559b 	.word	0x0800559b
 8005410:	08005573 	.word	0x08005573
 8005414:	080053c5 	.word	0x080053c5
 8005418:	080053c5 	.word	0x080053c5
 800541c:	08005549 	.word	0x08005549
 8005420:	080053c5 	.word	0x080053c5
 8005424:	080053c5 	.word	0x080053c5
 8005428:	080053c5 	.word	0x080053c5
 800542c:	080053c5 	.word	0x080053c5
 8005430:	08005501 	.word	0x08005501
 8005434:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005438:	e7db      	b.n	80053f2 <_scanf_float+0x8e>
 800543a:	290e      	cmp	r1, #14
 800543c:	d8c2      	bhi.n	80053c4 <_scanf_float+0x60>
 800543e:	a001      	add	r0, pc, #4	; (adr r0, 8005444 <_scanf_float+0xe0>)
 8005440:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005444:	080054f3 	.word	0x080054f3
 8005448:	080053c5 	.word	0x080053c5
 800544c:	080054f3 	.word	0x080054f3
 8005450:	08005587 	.word	0x08005587
 8005454:	080053c5 	.word	0x080053c5
 8005458:	080054a1 	.word	0x080054a1
 800545c:	080054dd 	.word	0x080054dd
 8005460:	080054dd 	.word	0x080054dd
 8005464:	080054dd 	.word	0x080054dd
 8005468:	080054dd 	.word	0x080054dd
 800546c:	080054dd 	.word	0x080054dd
 8005470:	080054dd 	.word	0x080054dd
 8005474:	080054dd 	.word	0x080054dd
 8005478:	080054dd 	.word	0x080054dd
 800547c:	080054dd 	.word	0x080054dd
 8005480:	2b6e      	cmp	r3, #110	; 0x6e
 8005482:	d809      	bhi.n	8005498 <_scanf_float+0x134>
 8005484:	2b60      	cmp	r3, #96	; 0x60
 8005486:	d8b2      	bhi.n	80053ee <_scanf_float+0x8a>
 8005488:	2b54      	cmp	r3, #84	; 0x54
 800548a:	d077      	beq.n	800557c <_scanf_float+0x218>
 800548c:	2b59      	cmp	r3, #89	; 0x59
 800548e:	d199      	bne.n	80053c4 <_scanf_float+0x60>
 8005490:	2d07      	cmp	r5, #7
 8005492:	d197      	bne.n	80053c4 <_scanf_float+0x60>
 8005494:	2508      	movs	r5, #8
 8005496:	e029      	b.n	80054ec <_scanf_float+0x188>
 8005498:	2b74      	cmp	r3, #116	; 0x74
 800549a:	d06f      	beq.n	800557c <_scanf_float+0x218>
 800549c:	2b79      	cmp	r3, #121	; 0x79
 800549e:	e7f6      	b.n	800548e <_scanf_float+0x12a>
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	05c8      	lsls	r0, r1, #23
 80054a4:	d51a      	bpl.n	80054dc <_scanf_float+0x178>
 80054a6:	9b02      	ldr	r3, [sp, #8]
 80054a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054ac:	6021      	str	r1, [r4, #0]
 80054ae:	f109 0901 	add.w	r9, r9, #1
 80054b2:	b11b      	cbz	r3, 80054bc <_scanf_float+0x158>
 80054b4:	3b01      	subs	r3, #1
 80054b6:	3201      	adds	r2, #1
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	60a2      	str	r2, [r4, #8]
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	3b01      	subs	r3, #1
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	3301      	adds	r3, #1
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	f340 8084 	ble.w	80055dc <_scanf_float+0x278>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	e766      	b.n	80053aa <_scanf_float+0x46>
 80054dc:	eb1a 0f05 	cmn.w	sl, r5
 80054e0:	f47f af70 	bne.w	80053c4 <_scanf_float+0x60>
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80054ea:	6022      	str	r2, [r4, #0]
 80054ec:	f806 3b01 	strb.w	r3, [r6], #1
 80054f0:	e7e4      	b.n	80054bc <_scanf_float+0x158>
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	0610      	lsls	r0, r2, #24
 80054f6:	f57f af65 	bpl.w	80053c4 <_scanf_float+0x60>
 80054fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fe:	e7f4      	b.n	80054ea <_scanf_float+0x186>
 8005500:	f1ba 0f00 	cmp.w	sl, #0
 8005504:	d10e      	bne.n	8005524 <_scanf_float+0x1c0>
 8005506:	f1b9 0f00 	cmp.w	r9, #0
 800550a:	d10e      	bne.n	800552a <_scanf_float+0x1c6>
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005512:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005516:	d108      	bne.n	800552a <_scanf_float+0x1c6>
 8005518:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	f04f 0a01 	mov.w	sl, #1
 8005522:	e7e3      	b.n	80054ec <_scanf_float+0x188>
 8005524:	f1ba 0f02 	cmp.w	sl, #2
 8005528:	d055      	beq.n	80055d6 <_scanf_float+0x272>
 800552a:	2d01      	cmp	r5, #1
 800552c:	d002      	beq.n	8005534 <_scanf_float+0x1d0>
 800552e:	2d04      	cmp	r5, #4
 8005530:	f47f af48 	bne.w	80053c4 <_scanf_float+0x60>
 8005534:	3501      	adds	r5, #1
 8005536:	b2ed      	uxtb	r5, r5
 8005538:	e7d8      	b.n	80054ec <_scanf_float+0x188>
 800553a:	f1ba 0f01 	cmp.w	sl, #1
 800553e:	f47f af41 	bne.w	80053c4 <_scanf_float+0x60>
 8005542:	f04f 0a02 	mov.w	sl, #2
 8005546:	e7d1      	b.n	80054ec <_scanf_float+0x188>
 8005548:	b97d      	cbnz	r5, 800556a <_scanf_float+0x206>
 800554a:	f1b9 0f00 	cmp.w	r9, #0
 800554e:	f47f af3c 	bne.w	80053ca <_scanf_float+0x66>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005558:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800555c:	f47f af39 	bne.w	80053d2 <_scanf_float+0x6e>
 8005560:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	2501      	movs	r5, #1
 8005568:	e7c0      	b.n	80054ec <_scanf_float+0x188>
 800556a:	2d03      	cmp	r5, #3
 800556c:	d0e2      	beq.n	8005534 <_scanf_float+0x1d0>
 800556e:	2d05      	cmp	r5, #5
 8005570:	e7de      	b.n	8005530 <_scanf_float+0x1cc>
 8005572:	2d02      	cmp	r5, #2
 8005574:	f47f af26 	bne.w	80053c4 <_scanf_float+0x60>
 8005578:	2503      	movs	r5, #3
 800557a:	e7b7      	b.n	80054ec <_scanf_float+0x188>
 800557c:	2d06      	cmp	r5, #6
 800557e:	f47f af21 	bne.w	80053c4 <_scanf_float+0x60>
 8005582:	2507      	movs	r5, #7
 8005584:	e7b2      	b.n	80054ec <_scanf_float+0x188>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	0591      	lsls	r1, r2, #22
 800558a:	f57f af1b 	bpl.w	80053c4 <_scanf_float+0x60>
 800558e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	f8cd 9004 	str.w	r9, [sp, #4]
 8005598:	e7a8      	b.n	80054ec <_scanf_float+0x188>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055a4:	d006      	beq.n	80055b4 <_scanf_float+0x250>
 80055a6:	0550      	lsls	r0, r2, #21
 80055a8:	f57f af0c 	bpl.w	80053c4 <_scanf_float+0x60>
 80055ac:	f1b9 0f00 	cmp.w	r9, #0
 80055b0:	f43f af0f 	beq.w	80053d2 <_scanf_float+0x6e>
 80055b4:	0591      	lsls	r1, r2, #22
 80055b6:	bf58      	it	pl
 80055b8:	9901      	ldrpl	r1, [sp, #4]
 80055ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055be:	bf58      	it	pl
 80055c0:	eba9 0101 	subpl.w	r1, r9, r1
 80055c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055c8:	bf58      	it	pl
 80055ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055ce:	6022      	str	r2, [r4, #0]
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	e78a      	b.n	80054ec <_scanf_float+0x188>
 80055d6:	f04f 0a03 	mov.w	sl, #3
 80055da:	e787      	b.n	80054ec <_scanf_float+0x188>
 80055dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055e0:	4639      	mov	r1, r7
 80055e2:	4640      	mov	r0, r8
 80055e4:	4798      	blx	r3
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f aedf 	beq.w	80053aa <_scanf_float+0x46>
 80055ec:	e6ea      	b.n	80053c4 <_scanf_float+0x60>
 80055ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055f6:	463a      	mov	r2, r7
 80055f8:	4640      	mov	r0, r8
 80055fa:	4798      	blx	r3
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	3b01      	subs	r3, #1
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	e6ec      	b.n	80053de <_scanf_float+0x7a>
 8005604:	1e6b      	subs	r3, r5, #1
 8005606:	2b06      	cmp	r3, #6
 8005608:	d825      	bhi.n	8005656 <_scanf_float+0x2f2>
 800560a:	2d02      	cmp	r5, #2
 800560c:	d836      	bhi.n	800567c <_scanf_float+0x318>
 800560e:	455e      	cmp	r6, fp
 8005610:	f67f aee8 	bls.w	80053e4 <_scanf_float+0x80>
 8005614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005618:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800561c:	463a      	mov	r2, r7
 800561e:	4640      	mov	r0, r8
 8005620:	4798      	blx	r3
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	3b01      	subs	r3, #1
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	e7f1      	b.n	800560e <_scanf_float+0x2aa>
 800562a:	9802      	ldr	r0, [sp, #8]
 800562c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005630:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	463a      	mov	r2, r7
 8005638:	4640      	mov	r0, r8
 800563a:	4798      	blx	r3
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	3b01      	subs	r3, #1
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005646:	fa5f fa8a 	uxtb.w	sl, sl
 800564a:	f1ba 0f02 	cmp.w	sl, #2
 800564e:	d1ec      	bne.n	800562a <_scanf_float+0x2c6>
 8005650:	3d03      	subs	r5, #3
 8005652:	b2ed      	uxtb	r5, r5
 8005654:	1b76      	subs	r6, r6, r5
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	05da      	lsls	r2, r3, #23
 800565a:	d52f      	bpl.n	80056bc <_scanf_float+0x358>
 800565c:	055b      	lsls	r3, r3, #21
 800565e:	d510      	bpl.n	8005682 <_scanf_float+0x31e>
 8005660:	455e      	cmp	r6, fp
 8005662:	f67f aebf 	bls.w	80053e4 <_scanf_float+0x80>
 8005666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800566a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800566e:	463a      	mov	r2, r7
 8005670:	4640      	mov	r0, r8
 8005672:	4798      	blx	r3
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	3b01      	subs	r3, #1
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	e7f1      	b.n	8005660 <_scanf_float+0x2fc>
 800567c:	46aa      	mov	sl, r5
 800567e:	9602      	str	r6, [sp, #8]
 8005680:	e7df      	b.n	8005642 <_scanf_float+0x2de>
 8005682:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	2965      	cmp	r1, #101	; 0x65
 800568a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800568e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	d00c      	beq.n	80056b0 <_scanf_float+0x34c>
 8005696:	2945      	cmp	r1, #69	; 0x45
 8005698:	d00a      	beq.n	80056b0 <_scanf_float+0x34c>
 800569a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569e:	463a      	mov	r2, r7
 80056a0:	4640      	mov	r0, r8
 80056a2:	4798      	blx	r3
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	1eb5      	subs	r5, r6, #2
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056b4:	463a      	mov	r2, r7
 80056b6:	4640      	mov	r0, r8
 80056b8:	4798      	blx	r3
 80056ba:	462e      	mov	r6, r5
 80056bc:	6825      	ldr	r5, [r4, #0]
 80056be:	f015 0510 	ands.w	r5, r5, #16
 80056c2:	d155      	bne.n	8005770 <_scanf_float+0x40c>
 80056c4:	7035      	strb	r5, [r6, #0]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d11b      	bne.n	800570a <_scanf_float+0x3a6>
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	454b      	cmp	r3, r9
 80056d6:	eba3 0209 	sub.w	r2, r3, r9
 80056da:	d123      	bne.n	8005724 <_scanf_float+0x3c0>
 80056dc:	2200      	movs	r2, #0
 80056de:	4659      	mov	r1, fp
 80056e0:	4640      	mov	r0, r8
 80056e2:	f000 fefd 	bl	80064e0 <_strtod_r>
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	f012 0f02 	tst.w	r2, #2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4606      	mov	r6, r0
 80056f2:	460f      	mov	r7, r1
 80056f4:	d021      	beq.n	800573a <_scanf_float+0x3d6>
 80056f6:	1d1a      	adds	r2, r3, #4
 80056f8:	9903      	ldr	r1, [sp, #12]
 80056fa:	600a      	str	r2, [r1, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	e9c3 6700 	strd	r6, r7, [r3]
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60e3      	str	r3, [r4, #12]
 8005708:	e66d      	b.n	80053e6 <_scanf_float+0x82>
 800570a:	9b04      	ldr	r3, [sp, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0e5      	beq.n	80056dc <_scanf_float+0x378>
 8005710:	9905      	ldr	r1, [sp, #20]
 8005712:	230a      	movs	r3, #10
 8005714:	462a      	mov	r2, r5
 8005716:	3101      	adds	r1, #1
 8005718:	4640      	mov	r0, r8
 800571a:	f000 ff63 	bl	80065e4 <_strtol_r>
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	9e05      	ldr	r6, [sp, #20]
 8005722:	1ac2      	subs	r2, r0, r3
 8005724:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005728:	429e      	cmp	r6, r3
 800572a:	bf28      	it	cs
 800572c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005730:	4910      	ldr	r1, [pc, #64]	; (8005774 <_scanf_float+0x410>)
 8005732:	4630      	mov	r0, r6
 8005734:	f000 f826 	bl	8005784 <siprintf>
 8005738:	e7d0      	b.n	80056dc <_scanf_float+0x378>
 800573a:	f012 0f04 	tst.w	r2, #4
 800573e:	f103 0204 	add.w	r2, r3, #4
 8005742:	d1d9      	bne.n	80056f8 <_scanf_float+0x394>
 8005744:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005748:	f8cc 2000 	str.w	r2, [ip]
 800574c:	f8d3 8000 	ldr.w	r8, [r3]
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	f7fb f9c2 	bl	8000adc <__aeabi_dcmpun>
 8005758:	b128      	cbz	r0, 8005766 <_scanf_float+0x402>
 800575a:	4807      	ldr	r0, [pc, #28]	; (8005778 <_scanf_float+0x414>)
 800575c:	f000 f80e 	bl	800577c <nanf>
 8005760:	f8c8 0000 	str.w	r0, [r8]
 8005764:	e7cd      	b.n	8005702 <_scanf_float+0x39e>
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fb fa15 	bl	8000b98 <__aeabi_d2f>
 800576e:	e7f7      	b.n	8005760 <_scanf_float+0x3fc>
 8005770:	2500      	movs	r5, #0
 8005772:	e638      	b.n	80053e6 <_scanf_float+0x82>
 8005774:	08009cea 	.word	0x08009cea
 8005778:	0800a10b 	.word	0x0800a10b

0800577c <nanf>:
 800577c:	4800      	ldr	r0, [pc, #0]	; (8005780 <nanf+0x4>)
 800577e:	4770      	bx	lr
 8005780:	7fc00000 	.word	0x7fc00000

08005784 <siprintf>:
 8005784:	b40e      	push	{r1, r2, r3}
 8005786:	b500      	push	{lr}
 8005788:	b09c      	sub	sp, #112	; 0x70
 800578a:	ab1d      	add	r3, sp, #116	; 0x74
 800578c:	9002      	str	r0, [sp, #8]
 800578e:	9006      	str	r0, [sp, #24]
 8005790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005794:	4809      	ldr	r0, [pc, #36]	; (80057bc <siprintf+0x38>)
 8005796:	9107      	str	r1, [sp, #28]
 8005798:	9104      	str	r1, [sp, #16]
 800579a:	4909      	ldr	r1, [pc, #36]	; (80057c0 <siprintf+0x3c>)
 800579c:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a0:	9105      	str	r1, [sp, #20]
 80057a2:	6800      	ldr	r0, [r0, #0]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	a902      	add	r1, sp, #8
 80057a8:	f002 ff5e 	bl	8008668 <_svfiprintf_r>
 80057ac:	9b02      	ldr	r3, [sp, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	b01c      	add	sp, #112	; 0x70
 80057b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b8:	b003      	add	sp, #12
 80057ba:	4770      	bx	lr
 80057bc:	2000000c 	.word	0x2000000c
 80057c0:	ffff0208 	.word	0xffff0208

080057c4 <siscanf>:
 80057c4:	b40e      	push	{r1, r2, r3}
 80057c6:	b530      	push	{r4, r5, lr}
 80057c8:	b09c      	sub	sp, #112	; 0x70
 80057ca:	ac1f      	add	r4, sp, #124	; 0x7c
 80057cc:	f44f 7201 	mov.w	r2, #516	; 0x204
 80057d0:	f854 5b04 	ldr.w	r5, [r4], #4
 80057d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80057d8:	9002      	str	r0, [sp, #8]
 80057da:	9006      	str	r0, [sp, #24]
 80057dc:	f7fa fcd0 	bl	8000180 <strlen>
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <siscanf+0x4c>)
 80057e2:	9003      	str	r0, [sp, #12]
 80057e4:	9007      	str	r0, [sp, #28]
 80057e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e8:	480a      	ldr	r0, [pc, #40]	; (8005814 <siscanf+0x50>)
 80057ea:	9401      	str	r4, [sp, #4]
 80057ec:	2300      	movs	r3, #0
 80057ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80057f0:	9314      	str	r3, [sp, #80]	; 0x50
 80057f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057fa:	462a      	mov	r2, r5
 80057fc:	4623      	mov	r3, r4
 80057fe:	a902      	add	r1, sp, #8
 8005800:	6800      	ldr	r0, [r0, #0]
 8005802:	f003 f88b 	bl	800891c <__ssvfiscanf_r>
 8005806:	b01c      	add	sp, #112	; 0x70
 8005808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580c:	b003      	add	sp, #12
 800580e:	4770      	bx	lr
 8005810:	0800583b 	.word	0x0800583b
 8005814:	2000000c 	.word	0x2000000c

08005818 <__sread>:
 8005818:	b510      	push	{r4, lr}
 800581a:	460c      	mov	r4, r1
 800581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005820:	f003 fb46 	bl	8008eb0 <_read_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	bfab      	itete	ge
 8005828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800582a:	89a3      	ldrhlt	r3, [r4, #12]
 800582c:	181b      	addge	r3, r3, r0
 800582e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005832:	bfac      	ite	ge
 8005834:	6563      	strge	r3, [r4, #84]	; 0x54
 8005836:	81a3      	strhlt	r3, [r4, #12]
 8005838:	bd10      	pop	{r4, pc}

0800583a <__seofread>:
 800583a:	2000      	movs	r0, #0
 800583c:	4770      	bx	lr

0800583e <__swrite>:
 800583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	461f      	mov	r7, r3
 8005844:	898b      	ldrh	r3, [r1, #12]
 8005846:	05db      	lsls	r3, r3, #23
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	4616      	mov	r6, r2
 800584e:	d505      	bpl.n	800585c <__swrite+0x1e>
 8005850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005854:	2302      	movs	r3, #2
 8005856:	2200      	movs	r2, #0
 8005858:	f002 f8ca 	bl	80079f0 <_lseek_r>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	4632      	mov	r2, r6
 800586a:	463b      	mov	r3, r7
 800586c:	4628      	mov	r0, r5
 800586e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	f000 beb9 	b.w	80065e8 <_write_r>

08005876 <__sseek>:
 8005876:	b510      	push	{r4, lr}
 8005878:	460c      	mov	r4, r1
 800587a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587e:	f002 f8b7 	bl	80079f0 <_lseek_r>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	bf15      	itete	ne
 8005888:	6560      	strne	r0, [r4, #84]	; 0x54
 800588a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800588e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005892:	81a3      	strheq	r3, [r4, #12]
 8005894:	bf18      	it	ne
 8005896:	81a3      	strhne	r3, [r4, #12]
 8005898:	bd10      	pop	{r4, pc}

0800589a <__sclose>:
 800589a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589e:	f000 beb5 	b.w	800660c <_close_r>

080058a2 <strstr>:
 80058a2:	780a      	ldrb	r2, [r1, #0]
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	b96a      	cbnz	r2, 80058c4 <strstr+0x22>
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d109      	bne.n	80058c2 <strstr+0x20>
 80058ae:	460c      	mov	r4, r1
 80058b0:	4605      	mov	r5, r0
 80058b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f6      	beq.n	80058a8 <strstr+0x6>
 80058ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80058be:	429e      	cmp	r6, r3
 80058c0:	d0f7      	beq.n	80058b2 <strstr+0x10>
 80058c2:	3001      	adds	r0, #1
 80058c4:	7803      	ldrb	r3, [r0, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ef      	bne.n	80058aa <strstr+0x8>
 80058ca:	4618      	mov	r0, r3
 80058cc:	e7ec      	b.n	80058a8 <strstr+0x6>

080058ce <sulp>:
 80058ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	460f      	mov	r7, r1
 80058d4:	4690      	mov	r8, r2
 80058d6:	f002 fc31 	bl	800813c <__ulp>
 80058da:	4604      	mov	r4, r0
 80058dc:	460d      	mov	r5, r1
 80058de:	f1b8 0f00 	cmp.w	r8, #0
 80058e2:	d011      	beq.n	8005908 <sulp+0x3a>
 80058e4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80058e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	dd0b      	ble.n	8005908 <sulp+0x3a>
 80058f0:	051b      	lsls	r3, r3, #20
 80058f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058f6:	2400      	movs	r4, #0
 80058f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058fc:	4622      	mov	r2, r4
 80058fe:	462b      	mov	r3, r5
 8005900:	f7fa fe52 	bl	80005a8 <__aeabi_dmul>
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
 8005908:	4620      	mov	r0, r4
 800590a:	4629      	mov	r1, r5
 800590c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005910 <_strtod_l>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	b09f      	sub	sp, #124	; 0x7c
 8005916:	469b      	mov	fp, r3
 8005918:	2300      	movs	r3, #0
 800591a:	931a      	str	r3, [sp, #104]	; 0x68
 800591c:	4b9e      	ldr	r3, [pc, #632]	; (8005b98 <_strtod_l+0x288>)
 800591e:	9215      	str	r2, [sp, #84]	; 0x54
 8005920:	681f      	ldr	r7, [r3, #0]
 8005922:	4682      	mov	sl, r0
 8005924:	4638      	mov	r0, r7
 8005926:	460e      	mov	r6, r1
 8005928:	f7fa fc2a 	bl	8000180 <strlen>
 800592c:	f04f 0800 	mov.w	r8, #0
 8005930:	4604      	mov	r4, r0
 8005932:	f04f 0900 	mov.w	r9, #0
 8005936:	9619      	str	r6, [sp, #100]	; 0x64
 8005938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	2a2b      	cmp	r2, #43	; 0x2b
 800593e:	d04c      	beq.n	80059da <_strtod_l+0xca>
 8005940:	d83a      	bhi.n	80059b8 <_strtod_l+0xa8>
 8005942:	2a0d      	cmp	r2, #13
 8005944:	d833      	bhi.n	80059ae <_strtod_l+0x9e>
 8005946:	2a08      	cmp	r2, #8
 8005948:	d833      	bhi.n	80059b2 <_strtod_l+0xa2>
 800594a:	2a00      	cmp	r2, #0
 800594c:	d03d      	beq.n	80059ca <_strtod_l+0xba>
 800594e:	2300      	movs	r3, #0
 8005950:	930a      	str	r3, [sp, #40]	; 0x28
 8005952:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005954:	782b      	ldrb	r3, [r5, #0]
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	f040 80aa 	bne.w	8005ab0 <_strtod_l+0x1a0>
 800595c:	786b      	ldrb	r3, [r5, #1]
 800595e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005962:	2b58      	cmp	r3, #88	; 0x58
 8005964:	d166      	bne.n	8005a34 <_strtod_l+0x124>
 8005966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	ab1a      	add	r3, sp, #104	; 0x68
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4a8b      	ldr	r2, [pc, #556]	; (8005b9c <_strtod_l+0x28c>)
 8005970:	f8cd b008 	str.w	fp, [sp, #8]
 8005974:	ab1b      	add	r3, sp, #108	; 0x6c
 8005976:	a919      	add	r1, sp, #100	; 0x64
 8005978:	4650      	mov	r0, sl
 800597a:	f001 fd37 	bl	80073ec <__gethex>
 800597e:	f010 0607 	ands.w	r6, r0, #7
 8005982:	4604      	mov	r4, r0
 8005984:	d005      	beq.n	8005992 <_strtod_l+0x82>
 8005986:	2e06      	cmp	r6, #6
 8005988:	d129      	bne.n	80059de <_strtod_l+0xce>
 800598a:	3501      	adds	r5, #1
 800598c:	2300      	movs	r3, #0
 800598e:	9519      	str	r5, [sp, #100]	; 0x64
 8005990:	930a      	str	r3, [sp, #40]	; 0x28
 8005992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 858a 	bne.w	80064ae <_strtod_l+0xb9e>
 800599a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599c:	b1d3      	cbz	r3, 80059d4 <_strtod_l+0xc4>
 800599e:	4642      	mov	r2, r8
 80059a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	b01f      	add	sp, #124	; 0x7c
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	2a20      	cmp	r2, #32
 80059b0:	d1cd      	bne.n	800594e <_strtod_l+0x3e>
 80059b2:	3301      	adds	r3, #1
 80059b4:	9319      	str	r3, [sp, #100]	; 0x64
 80059b6:	e7bf      	b.n	8005938 <_strtod_l+0x28>
 80059b8:	2a2d      	cmp	r2, #45	; 0x2d
 80059ba:	d1c8      	bne.n	800594e <_strtod_l+0x3e>
 80059bc:	2201      	movs	r2, #1
 80059be:	920a      	str	r2, [sp, #40]	; 0x28
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	9219      	str	r2, [sp, #100]	; 0x64
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1c3      	bne.n	8005952 <_strtod_l+0x42>
 80059ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059cc:	9619      	str	r6, [sp, #100]	; 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 856b 	bne.w	80064aa <_strtod_l+0xb9a>
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	e7e4      	b.n	80059a4 <_strtod_l+0x94>
 80059da:	2200      	movs	r2, #0
 80059dc:	e7ef      	b.n	80059be <_strtod_l+0xae>
 80059de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80059e0:	b13a      	cbz	r2, 80059f2 <_strtod_l+0xe2>
 80059e2:	2135      	movs	r1, #53	; 0x35
 80059e4:	a81c      	add	r0, sp, #112	; 0x70
 80059e6:	f002 fcad 	bl	8008344 <__copybits>
 80059ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059ec:	4650      	mov	r0, sl
 80059ee:	f002 f879 	bl	8007ae4 <_Bfree>
 80059f2:	3e01      	subs	r6, #1
 80059f4:	2e04      	cmp	r6, #4
 80059f6:	d806      	bhi.n	8005a06 <_strtod_l+0xf6>
 80059f8:	e8df f006 	tbb	[pc, r6]
 80059fc:	1714030a 	.word	0x1714030a
 8005a00:	0a          	.byte	0x0a
 8005a01:	00          	.byte	0x00
 8005a02:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005a06:	0721      	lsls	r1, r4, #28
 8005a08:	d5c3      	bpl.n	8005992 <_strtod_l+0x82>
 8005a0a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005a0e:	e7c0      	b.n	8005992 <_strtod_l+0x82>
 8005a10:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005a14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005a22:	e7f0      	b.n	8005a06 <_strtod_l+0xf6>
 8005a24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005ba0 <_strtod_l+0x290>
 8005a28:	e7ed      	b.n	8005a06 <_strtod_l+0xf6>
 8005a2a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005a2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005a32:	e7e8      	b.n	8005a06 <_strtod_l+0xf6>
 8005a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	9219      	str	r2, [sp, #100]	; 0x64
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d0f9      	beq.n	8005a34 <_strtod_l+0x124>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0a6      	beq.n	8005992 <_strtod_l+0x82>
 8005a44:	2301      	movs	r3, #1
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a4a:	9308      	str	r3, [sp, #32]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005a52:	469b      	mov	fp, r3
 8005a54:	220a      	movs	r2, #10
 8005a56:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005a58:	7805      	ldrb	r5, [r0, #0]
 8005a5a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005a5e:	b2d9      	uxtb	r1, r3
 8005a60:	2909      	cmp	r1, #9
 8005a62:	d927      	bls.n	8005ab4 <_strtod_l+0x1a4>
 8005a64:	4622      	mov	r2, r4
 8005a66:	4639      	mov	r1, r7
 8005a68:	f003 fa82 	bl	8008f70 <strncmp>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d033      	beq.n	8005ad8 <_strtod_l+0x1c8>
 8005a70:	2000      	movs	r0, #0
 8005a72:	462a      	mov	r2, r5
 8005a74:	465c      	mov	r4, fp
 8005a76:	9004      	str	r0, [sp, #16]
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2a65      	cmp	r2, #101	; 0x65
 8005a7c:	d001      	beq.n	8005a82 <_strtod_l+0x172>
 8005a7e:	2a45      	cmp	r2, #69	; 0x45
 8005a80:	d114      	bne.n	8005aac <_strtod_l+0x19c>
 8005a82:	b91c      	cbnz	r4, 8005a8c <_strtod_l+0x17c>
 8005a84:	9a07      	ldr	r2, [sp, #28]
 8005a86:	4302      	orrs	r2, r0
 8005a88:	d09f      	beq.n	80059ca <_strtod_l+0xba>
 8005a8a:	2400      	movs	r4, #0
 8005a8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005a8e:	1c72      	adds	r2, r6, #1
 8005a90:	9219      	str	r2, [sp, #100]	; 0x64
 8005a92:	7872      	ldrb	r2, [r6, #1]
 8005a94:	2a2b      	cmp	r2, #43	; 0x2b
 8005a96:	d079      	beq.n	8005b8c <_strtod_l+0x27c>
 8005a98:	2a2d      	cmp	r2, #45	; 0x2d
 8005a9a:	f000 8083 	beq.w	8005ba4 <_strtod_l+0x294>
 8005a9e:	2700      	movs	r7, #0
 8005aa0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005aa4:	2909      	cmp	r1, #9
 8005aa6:	f240 8083 	bls.w	8005bb0 <_strtod_l+0x2a0>
 8005aaa:	9619      	str	r6, [sp, #100]	; 0x64
 8005aac:	2500      	movs	r5, #0
 8005aae:	e09f      	b.n	8005bf0 <_strtod_l+0x2e0>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e7c8      	b.n	8005a46 <_strtod_l+0x136>
 8005ab4:	f1bb 0f08 	cmp.w	fp, #8
 8005ab8:	bfd5      	itete	le
 8005aba:	9906      	ldrle	r1, [sp, #24]
 8005abc:	9905      	ldrgt	r1, [sp, #20]
 8005abe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ac2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ac6:	f100 0001 	add.w	r0, r0, #1
 8005aca:	bfd4      	ite	le
 8005acc:	9306      	strle	r3, [sp, #24]
 8005ace:	9305      	strgt	r3, [sp, #20]
 8005ad0:	f10b 0b01 	add.w	fp, fp, #1
 8005ad4:	9019      	str	r0, [sp, #100]	; 0x64
 8005ad6:	e7be      	b.n	8005a56 <_strtod_l+0x146>
 8005ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ada:	191a      	adds	r2, r3, r4
 8005adc:	9219      	str	r2, [sp, #100]	; 0x64
 8005ade:	5d1a      	ldrb	r2, [r3, r4]
 8005ae0:	f1bb 0f00 	cmp.w	fp, #0
 8005ae4:	d036      	beq.n	8005b54 <_strtod_l+0x244>
 8005ae6:	9004      	str	r0, [sp, #16]
 8005ae8:	465c      	mov	r4, fp
 8005aea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d912      	bls.n	8005b18 <_strtod_l+0x208>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e7c1      	b.n	8005a7a <_strtod_l+0x16a>
 8005af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	9219      	str	r2, [sp, #100]	; 0x64
 8005afc:	785a      	ldrb	r2, [r3, #1]
 8005afe:	3001      	adds	r0, #1
 8005b00:	2a30      	cmp	r2, #48	; 0x30
 8005b02:	d0f8      	beq.n	8005af6 <_strtod_l+0x1e6>
 8005b04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	f200 84d5 	bhi.w	80064b8 <_strtod_l+0xba8>
 8005b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	2000      	movs	r0, #0
 8005b14:	9308      	str	r3, [sp, #32]
 8005b16:	4604      	mov	r4, r0
 8005b18:	3a30      	subs	r2, #48	; 0x30
 8005b1a:	f100 0301 	add.w	r3, r0, #1
 8005b1e:	d013      	beq.n	8005b48 <_strtod_l+0x238>
 8005b20:	9904      	ldr	r1, [sp, #16]
 8005b22:	4419      	add	r1, r3
 8005b24:	9104      	str	r1, [sp, #16]
 8005b26:	4623      	mov	r3, r4
 8005b28:	1905      	adds	r5, r0, r4
 8005b2a:	210a      	movs	r1, #10
 8005b2c:	42ab      	cmp	r3, r5
 8005b2e:	d113      	bne.n	8005b58 <_strtod_l+0x248>
 8005b30:	1823      	adds	r3, r4, r0
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	f104 0401 	add.w	r4, r4, #1
 8005b38:	4404      	add	r4, r0
 8005b3a:	dc1b      	bgt.n	8005b74 <_strtod_l+0x264>
 8005b3c:	9906      	ldr	r1, [sp, #24]
 8005b3e:	230a      	movs	r3, #10
 8005b40:	fb03 2301 	mla	r3, r3, r1, r2
 8005b44:	9306      	str	r3, [sp, #24]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b4a:	1c51      	adds	r1, r2, #1
 8005b4c:	9119      	str	r1, [sp, #100]	; 0x64
 8005b4e:	7852      	ldrb	r2, [r2, #1]
 8005b50:	4618      	mov	r0, r3
 8005b52:	e7ca      	b.n	8005aea <_strtod_l+0x1da>
 8005b54:	4658      	mov	r0, fp
 8005b56:	e7d3      	b.n	8005b00 <_strtod_l+0x1f0>
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	dc04      	bgt.n	8005b66 <_strtod_l+0x256>
 8005b5c:	9f06      	ldr	r7, [sp, #24]
 8005b5e:	434f      	muls	r7, r1
 8005b60:	9706      	str	r7, [sp, #24]
 8005b62:	3301      	adds	r3, #1
 8005b64:	e7e2      	b.n	8005b2c <_strtod_l+0x21c>
 8005b66:	1c5f      	adds	r7, r3, #1
 8005b68:	2f10      	cmp	r7, #16
 8005b6a:	bfde      	ittt	le
 8005b6c:	9f05      	ldrle	r7, [sp, #20]
 8005b6e:	434f      	mulle	r7, r1
 8005b70:	9705      	strle	r7, [sp, #20]
 8005b72:	e7f6      	b.n	8005b62 <_strtod_l+0x252>
 8005b74:	2c10      	cmp	r4, #16
 8005b76:	bfdf      	itttt	le
 8005b78:	9905      	ldrle	r1, [sp, #20]
 8005b7a:	230a      	movle	r3, #10
 8005b7c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005b80:	9305      	strle	r3, [sp, #20]
 8005b82:	e7e0      	b.n	8005b46 <_strtod_l+0x236>
 8005b84:	2300      	movs	r3, #0
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e77b      	b.n	8005a84 <_strtod_l+0x174>
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	1cb2      	adds	r2, r6, #2
 8005b90:	9219      	str	r2, [sp, #100]	; 0x64
 8005b92:	78b2      	ldrb	r2, [r6, #2]
 8005b94:	e784      	b.n	8005aa0 <_strtod_l+0x190>
 8005b96:	bf00      	nop
 8005b98:	08009f38 	.word	0x08009f38
 8005b9c:	08009cf0 	.word	0x08009cf0
 8005ba0:	7ff00000 	.word	0x7ff00000
 8005ba4:	2701      	movs	r7, #1
 8005ba6:	e7f2      	b.n	8005b8e <_strtod_l+0x27e>
 8005ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005baa:	1c51      	adds	r1, r2, #1
 8005bac:	9119      	str	r1, [sp, #100]	; 0x64
 8005bae:	7852      	ldrb	r2, [r2, #1]
 8005bb0:	2a30      	cmp	r2, #48	; 0x30
 8005bb2:	d0f9      	beq.n	8005ba8 <_strtod_l+0x298>
 8005bb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005bb8:	2908      	cmp	r1, #8
 8005bba:	f63f af77 	bhi.w	8005aac <_strtod_l+0x19c>
 8005bbe:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005bc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc6:	f04f 0e0a 	mov.w	lr, #10
 8005bca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005bcc:	1c51      	adds	r1, r2, #1
 8005bce:	9119      	str	r1, [sp, #100]	; 0x64
 8005bd0:	7852      	ldrb	r2, [r2, #1]
 8005bd2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005bd6:	2d09      	cmp	r5, #9
 8005bd8:	d935      	bls.n	8005c46 <_strtod_l+0x336>
 8005bda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bdc:	1b49      	subs	r1, r1, r5
 8005bde:	2908      	cmp	r1, #8
 8005be0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005be4:	dc02      	bgt.n	8005bec <_strtod_l+0x2dc>
 8005be6:	4565      	cmp	r5, ip
 8005be8:	bfa8      	it	ge
 8005bea:	4665      	movge	r5, ip
 8005bec:	b107      	cbz	r7, 8005bf0 <_strtod_l+0x2e0>
 8005bee:	426d      	negs	r5, r5
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	d14c      	bne.n	8005c8e <_strtod_l+0x37e>
 8005bf4:	9907      	ldr	r1, [sp, #28]
 8005bf6:	4301      	orrs	r1, r0
 8005bf8:	f47f aecb 	bne.w	8005992 <_strtod_l+0x82>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f47f aee4 	bne.w	80059ca <_strtod_l+0xba>
 8005c02:	2a69      	cmp	r2, #105	; 0x69
 8005c04:	d026      	beq.n	8005c54 <_strtod_l+0x344>
 8005c06:	dc23      	bgt.n	8005c50 <_strtod_l+0x340>
 8005c08:	2a49      	cmp	r2, #73	; 0x49
 8005c0a:	d023      	beq.n	8005c54 <_strtod_l+0x344>
 8005c0c:	2a4e      	cmp	r2, #78	; 0x4e
 8005c0e:	f47f aedc 	bne.w	80059ca <_strtod_l+0xba>
 8005c12:	499d      	ldr	r1, [pc, #628]	; (8005e88 <_strtod_l+0x578>)
 8005c14:	a819      	add	r0, sp, #100	; 0x64
 8005c16:	f001 fe37 	bl	8007888 <__match>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f43f aed5 	beq.w	80059ca <_strtod_l+0xba>
 8005c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b28      	cmp	r3, #40	; 0x28
 8005c26:	d12c      	bne.n	8005c82 <_strtod_l+0x372>
 8005c28:	4998      	ldr	r1, [pc, #608]	; (8005e8c <_strtod_l+0x57c>)
 8005c2a:	aa1c      	add	r2, sp, #112	; 0x70
 8005c2c:	a819      	add	r0, sp, #100	; 0x64
 8005c2e:	f001 fe3f 	bl	80078b0 <__hexnan>
 8005c32:	2805      	cmp	r0, #5
 8005c34:	d125      	bne.n	8005c82 <_strtod_l+0x372>
 8005c36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005c3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005c40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005c44:	e6a5      	b.n	8005992 <_strtod_l+0x82>
 8005c46:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005c4a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005c4e:	e7bc      	b.n	8005bca <_strtod_l+0x2ba>
 8005c50:	2a6e      	cmp	r2, #110	; 0x6e
 8005c52:	e7dc      	b.n	8005c0e <_strtod_l+0x2fe>
 8005c54:	498e      	ldr	r1, [pc, #568]	; (8005e90 <_strtod_l+0x580>)
 8005c56:	a819      	add	r0, sp, #100	; 0x64
 8005c58:	f001 fe16 	bl	8007888 <__match>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	f43f aeb4 	beq.w	80059ca <_strtod_l+0xba>
 8005c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c64:	498b      	ldr	r1, [pc, #556]	; (8005e94 <_strtod_l+0x584>)
 8005c66:	3b01      	subs	r3, #1
 8005c68:	a819      	add	r0, sp, #100	; 0x64
 8005c6a:	9319      	str	r3, [sp, #100]	; 0x64
 8005c6c:	f001 fe0c 	bl	8007888 <__match>
 8005c70:	b910      	cbnz	r0, 8005c78 <_strtod_l+0x368>
 8005c72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c74:	3301      	adds	r3, #1
 8005c76:	9319      	str	r3, [sp, #100]	; 0x64
 8005c78:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8005e98 <_strtod_l+0x588>
 8005c7c:	f04f 0800 	mov.w	r8, #0
 8005c80:	e687      	b.n	8005992 <_strtod_l+0x82>
 8005c82:	4886      	ldr	r0, [pc, #536]	; (8005e9c <_strtod_l+0x58c>)
 8005c84:	f003 f926 	bl	8008ed4 <nan>
 8005c88:	4680      	mov	r8, r0
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	e681      	b.n	8005992 <_strtod_l+0x82>
 8005c8e:	9b04      	ldr	r3, [sp, #16]
 8005c90:	9806      	ldr	r0, [sp, #24]
 8005c92:	1aeb      	subs	r3, r5, r3
 8005c94:	f1bb 0f00 	cmp.w	fp, #0
 8005c98:	bf08      	it	eq
 8005c9a:	46a3      	moveq	fp, r4
 8005c9c:	2c10      	cmp	r4, #16
 8005c9e:	9307      	str	r3, [sp, #28]
 8005ca0:	4626      	mov	r6, r4
 8005ca2:	bfa8      	it	ge
 8005ca4:	2610      	movge	r6, #16
 8005ca6:	f7fa fc05 	bl	80004b4 <__aeabi_ui2d>
 8005caa:	2c09      	cmp	r4, #9
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	dd13      	ble.n	8005cda <_strtod_l+0x3ca>
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <_strtod_l+0x590>)
 8005cb4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005cb8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cbc:	f7fa fc74 	bl	80005a8 <__aeabi_dmul>
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	9805      	ldr	r0, [sp, #20]
 8005cc4:	4689      	mov	r9, r1
 8005cc6:	f7fa fbf5 	bl	80004b4 <__aeabi_ui2d>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	f7fa fab3 	bl	800023c <__adddf3>
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	4689      	mov	r9, r1
 8005cda:	2c0f      	cmp	r4, #15
 8005cdc:	dc36      	bgt.n	8005d4c <_strtod_l+0x43c>
 8005cde:	9b07      	ldr	r3, [sp, #28]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f43f ae56 	beq.w	8005992 <_strtod_l+0x82>
 8005ce6:	dd22      	ble.n	8005d2e <_strtod_l+0x41e>
 8005ce8:	2b16      	cmp	r3, #22
 8005cea:	dc09      	bgt.n	8005d00 <_strtod_l+0x3f0>
 8005cec:	496c      	ldr	r1, [pc, #432]	; (8005ea0 <_strtod_l+0x590>)
 8005cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf6:	4642      	mov	r2, r8
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	f7fa fc55 	bl	80005a8 <__aeabi_dmul>
 8005cfe:	e7c3      	b.n	8005c88 <_strtod_l+0x378>
 8005d00:	9a07      	ldr	r2, [sp, #28]
 8005d02:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d06:	4293      	cmp	r3, r2
 8005d08:	db20      	blt.n	8005d4c <_strtod_l+0x43c>
 8005d0a:	4d65      	ldr	r5, [pc, #404]	; (8005ea0 <_strtod_l+0x590>)
 8005d0c:	f1c4 040f 	rsb	r4, r4, #15
 8005d10:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d1c:	f7fa fc44 	bl	80005a8 <__aeabi_dmul>
 8005d20:	9b07      	ldr	r3, [sp, #28]
 8005d22:	1b1c      	subs	r4, r3, r4
 8005d24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d2c:	e7e5      	b.n	8005cfa <_strtod_l+0x3ea>
 8005d2e:	9b07      	ldr	r3, [sp, #28]
 8005d30:	3316      	adds	r3, #22
 8005d32:	db0b      	blt.n	8005d4c <_strtod_l+0x43c>
 8005d34:	9b04      	ldr	r3, [sp, #16]
 8005d36:	1b5d      	subs	r5, r3, r5
 8005d38:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <_strtod_l+0x590>)
 8005d3a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fd59 	bl	80007fc <__aeabi_ddiv>
 8005d4a:	e79d      	b.n	8005c88 <_strtod_l+0x378>
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	1ba6      	subs	r6, r4, r6
 8005d50:	441e      	add	r6, r3
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	dd74      	ble.n	8005e40 <_strtod_l+0x530>
 8005d56:	f016 030f 	ands.w	r3, r6, #15
 8005d5a:	d00a      	beq.n	8005d72 <_strtod_l+0x462>
 8005d5c:	4950      	ldr	r1, [pc, #320]	; (8005ea0 <_strtod_l+0x590>)
 8005d5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d62:	4642      	mov	r2, r8
 8005d64:	464b      	mov	r3, r9
 8005d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6a:	f7fa fc1d 	bl	80005a8 <__aeabi_dmul>
 8005d6e:	4680      	mov	r8, r0
 8005d70:	4689      	mov	r9, r1
 8005d72:	f036 060f 	bics.w	r6, r6, #15
 8005d76:	d052      	beq.n	8005e1e <_strtod_l+0x50e>
 8005d78:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005d7c:	dd27      	ble.n	8005dce <_strtod_l+0x4be>
 8005d7e:	f04f 0b00 	mov.w	fp, #0
 8005d82:	f8cd b010 	str.w	fp, [sp, #16]
 8005d86:	f8cd b020 	str.w	fp, [sp, #32]
 8005d8a:	f8cd b018 	str.w	fp, [sp, #24]
 8005d8e:	2322      	movs	r3, #34	; 0x22
 8005d90:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005e98 <_strtod_l+0x588>
 8005d94:	f8ca 3000 	str.w	r3, [sl]
 8005d98:	f04f 0800 	mov.w	r8, #0
 8005d9c:	9b08      	ldr	r3, [sp, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f43f adf7 	beq.w	8005992 <_strtod_l+0x82>
 8005da4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005da6:	4650      	mov	r0, sl
 8005da8:	f001 fe9c 	bl	8007ae4 <_Bfree>
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	4650      	mov	r0, sl
 8005db0:	f001 fe98 	bl	8007ae4 <_Bfree>
 8005db4:	9904      	ldr	r1, [sp, #16]
 8005db6:	4650      	mov	r0, sl
 8005db8:	f001 fe94 	bl	8007ae4 <_Bfree>
 8005dbc:	9908      	ldr	r1, [sp, #32]
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	f001 fe90 	bl	8007ae4 <_Bfree>
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f001 fe8c 	bl	8007ae4 <_Bfree>
 8005dcc:	e5e1      	b.n	8005992 <_strtod_l+0x82>
 8005dce:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <_strtod_l+0x594>)
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	1136      	asrs	r6, r6, #4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	461f      	mov	r7, r3
 8005ddc:	2e01      	cmp	r6, #1
 8005dde:	dc21      	bgt.n	8005e24 <_strtod_l+0x514>
 8005de0:	b10b      	cbz	r3, 8005de6 <_strtod_l+0x4d6>
 8005de2:	4680      	mov	r8, r0
 8005de4:	4689      	mov	r9, r1
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <_strtod_l+0x594>)
 8005de8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005dec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df8:	f7fa fbd6 	bl	80005a8 <__aeabi_dmul>
 8005dfc:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <_strtod_l+0x588>)
 8005dfe:	460a      	mov	r2, r1
 8005e00:	400b      	ands	r3, r1
 8005e02:	4929      	ldr	r1, [pc, #164]	; (8005ea8 <_strtod_l+0x598>)
 8005e04:	428b      	cmp	r3, r1
 8005e06:	4680      	mov	r8, r0
 8005e08:	d8b9      	bhi.n	8005d7e <_strtod_l+0x46e>
 8005e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	bf86      	itte	hi
 8005e12:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8005eac <_strtod_l+0x59c>
 8005e16:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005e1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	e07f      	b.n	8005f24 <_strtod_l+0x614>
 8005e24:	07f2      	lsls	r2, r6, #31
 8005e26:	d505      	bpl.n	8005e34 <_strtod_l+0x524>
 8005e28:	9b05      	ldr	r3, [sp, #20]
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fbbb 	bl	80005a8 <__aeabi_dmul>
 8005e32:	2301      	movs	r3, #1
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	3208      	adds	r2, #8
 8005e38:	3701      	adds	r7, #1
 8005e3a:	1076      	asrs	r6, r6, #1
 8005e3c:	9205      	str	r2, [sp, #20]
 8005e3e:	e7cd      	b.n	8005ddc <_strtod_l+0x4cc>
 8005e40:	d0ed      	beq.n	8005e1e <_strtod_l+0x50e>
 8005e42:	4276      	negs	r6, r6
 8005e44:	f016 020f 	ands.w	r2, r6, #15
 8005e48:	d00a      	beq.n	8005e60 <_strtod_l+0x550>
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <_strtod_l+0x590>)
 8005e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa fcd0 	bl	80007fc <__aeabi_ddiv>
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	1136      	asrs	r6, r6, #4
 8005e62:	d0dc      	beq.n	8005e1e <_strtod_l+0x50e>
 8005e64:	2e1f      	cmp	r6, #31
 8005e66:	dd23      	ble.n	8005eb0 <_strtod_l+0x5a0>
 8005e68:	f04f 0b00 	mov.w	fp, #0
 8005e6c:	f8cd b010 	str.w	fp, [sp, #16]
 8005e70:	f8cd b020 	str.w	fp, [sp, #32]
 8005e74:	f8cd b018 	str.w	fp, [sp, #24]
 8005e78:	2322      	movs	r3, #34	; 0x22
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	f8ca 3000 	str.w	r3, [sl]
 8005e86:	e789      	b.n	8005d9c <_strtod_l+0x48c>
 8005e88:	08009cc5 	.word	0x08009cc5
 8005e8c:	08009d04 	.word	0x08009d04
 8005e90:	08009cbd 	.word	0x08009cbd
 8005e94:	08009e44 	.word	0x08009e44
 8005e98:	7ff00000 	.word	0x7ff00000
 8005e9c:	0800a10b 	.word	0x0800a10b
 8005ea0:	08009fd0 	.word	0x08009fd0
 8005ea4:	08009fa8 	.word	0x08009fa8
 8005ea8:	7ca00000 	.word	0x7ca00000
 8005eac:	7fefffff 	.word	0x7fefffff
 8005eb0:	f016 0310 	ands.w	r3, r6, #16
 8005eb4:	bf18      	it	ne
 8005eb6:	236a      	movne	r3, #106	; 0x6a
 8005eb8:	4fb1      	ldr	r7, [pc, #708]	; (8006180 <_strtod_l+0x870>)
 8005eba:	9305      	str	r3, [sp, #20]
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	07f2      	lsls	r2, r6, #31
 8005ec4:	d504      	bpl.n	8005ed0 <_strtod_l+0x5c0>
 8005ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eca:	f7fa fb6d 	bl	80005a8 <__aeabi_dmul>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	1076      	asrs	r6, r6, #1
 8005ed2:	f107 0708 	add.w	r7, r7, #8
 8005ed6:	d1f4      	bne.n	8005ec2 <_strtod_l+0x5b2>
 8005ed8:	b10b      	cbz	r3, 8005ede <_strtod_l+0x5ce>
 8005eda:	4680      	mov	r8, r0
 8005edc:	4689      	mov	r9, r1
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	b1c3      	cbz	r3, 8005f14 <_strtod_l+0x604>
 8005ee2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005ee6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	4649      	mov	r1, r9
 8005eee:	dd11      	ble.n	8005f14 <_strtod_l+0x604>
 8005ef0:	2b1f      	cmp	r3, #31
 8005ef2:	f340 8124 	ble.w	800613e <_strtod_l+0x82e>
 8005ef6:	2b34      	cmp	r3, #52	; 0x34
 8005ef8:	bfde      	ittt	le
 8005efa:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005efe:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005f02:	fa03 f202 	lslle.w	r2, r3, r2
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	bfcc      	ite	gt
 8005f0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005f10:	ea02 0901 	andle.w	r9, r2, r1
 8005f14:	2200      	movs	r2, #0
 8005f16:	2300      	movs	r3, #0
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fdac 	bl	8000a78 <__aeabi_dcmpeq>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d1a1      	bne.n	8005e68 <_strtod_l+0x558>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	9908      	ldr	r1, [sp, #32]
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	465a      	mov	r2, fp
 8005f2e:	4650      	mov	r0, sl
 8005f30:	f001 fe40 	bl	8007bb4 <__s2b>
 8005f34:	9008      	str	r0, [sp, #32]
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f af21 	beq.w	8005d7e <_strtod_l+0x46e>
 8005f3c:	9b04      	ldr	r3, [sp, #16]
 8005f3e:	1b5d      	subs	r5, r3, r5
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfb4      	ite	lt
 8005f46:	462b      	movlt	r3, r5
 8005f48:	2300      	movge	r3, #0
 8005f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f4c:	9b07      	ldr	r3, [sp, #28]
 8005f4e:	f04f 0b00 	mov.w	fp, #0
 8005f52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f56:	9314      	str	r3, [sp, #80]	; 0x50
 8005f58:	f8cd b010 	str.w	fp, [sp, #16]
 8005f5c:	9b08      	ldr	r3, [sp, #32]
 8005f5e:	4650      	mov	r0, sl
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	f001 fd7f 	bl	8007a64 <_Balloc>
 8005f66:	9006      	str	r0, [sp, #24]
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f af10 	beq.w	8005d8e <_strtod_l+0x47e>
 8005f6e:	9b08      	ldr	r3, [sp, #32]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	3202      	adds	r2, #2
 8005f74:	f103 010c 	add.w	r1, r3, #12
 8005f78:	0092      	lsls	r2, r2, #2
 8005f7a:	300c      	adds	r0, #12
 8005f7c:	f001 fd64 	bl	8007a48 <memcpy>
 8005f80:	ab1c      	add	r3, sp, #112	; 0x70
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	ab1b      	add	r3, sp, #108	; 0x6c
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005f92:	f002 f94d 	bl	8008230 <__d2b>
 8005f96:	901a      	str	r0, [sp, #104]	; 0x68
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f43f aef8 	beq.w	8005d8e <_strtod_l+0x47e>
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	f001 fe9f 	bl	8007ce4 <__i2b>
 8005fa6:	9004      	str	r0, [sp, #16]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f43f aeef 	beq.w	8005d8e <_strtod_l+0x47e>
 8005fb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005fb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	bfab      	itete	ge
 8005fb8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005fba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005fbc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005fbe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005fc0:	bfac      	ite	ge
 8005fc2:	18ee      	addge	r6, r5, r3
 8005fc4:	1b5c      	sublt	r4, r3, r5
 8005fc6:	9b05      	ldr	r3, [sp, #20]
 8005fc8:	1aed      	subs	r5, r5, r3
 8005fca:	4415      	add	r5, r2
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <_strtod_l+0x874>)
 8005fce:	3d01      	subs	r5, #1
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fd6:	f280 80c4 	bge.w	8006162 <_strtod_l+0x852>
 8005fda:	1b5b      	subs	r3, r3, r5
 8005fdc:	2b1f      	cmp	r3, #31
 8005fde:	eba2 0203 	sub.w	r2, r2, r3
 8005fe2:	f04f 0701 	mov.w	r7, #1
 8005fe6:	f300 80b1 	bgt.w	800614c <_strtod_l+0x83c>
 8005fea:	fa07 f303 	lsl.w	r3, r7, r3
 8005fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	18b7      	adds	r7, r6, r2
 8005ff4:	9b05      	ldr	r3, [sp, #20]
 8005ff6:	42be      	cmp	r6, r7
 8005ff8:	4414      	add	r4, r2
 8005ffa:	441c      	add	r4, r3
 8005ffc:	4633      	mov	r3, r6
 8005ffe:	bfa8      	it	ge
 8006000:	463b      	movge	r3, r7
 8006002:	42a3      	cmp	r3, r4
 8006004:	bfa8      	it	ge
 8006006:	4623      	movge	r3, r4
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfc2      	ittt	gt
 800600c:	1aff      	subgt	r7, r7, r3
 800600e:	1ae4      	subgt	r4, r4, r3
 8006010:	1af6      	subgt	r6, r6, r3
 8006012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd17      	ble.n	8006048 <_strtod_l+0x738>
 8006018:	9904      	ldr	r1, [sp, #16]
 800601a:	461a      	mov	r2, r3
 800601c:	4650      	mov	r0, sl
 800601e:	f001 ff1f 	bl	8007e60 <__pow5mult>
 8006022:	9004      	str	r0, [sp, #16]
 8006024:	2800      	cmp	r0, #0
 8006026:	f43f aeb2 	beq.w	8005d8e <_strtod_l+0x47e>
 800602a:	4601      	mov	r1, r0
 800602c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800602e:	4650      	mov	r0, sl
 8006030:	f001 fe6e 	bl	8007d10 <__multiply>
 8006034:	9009      	str	r0, [sp, #36]	; 0x24
 8006036:	2800      	cmp	r0, #0
 8006038:	f43f aea9 	beq.w	8005d8e <_strtod_l+0x47e>
 800603c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800603e:	4650      	mov	r0, sl
 8006040:	f001 fd50 	bl	8007ae4 <_Bfree>
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	931a      	str	r3, [sp, #104]	; 0x68
 8006048:	2f00      	cmp	r7, #0
 800604a:	f300 808e 	bgt.w	800616a <_strtod_l+0x85a>
 800604e:	9b07      	ldr	r3, [sp, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	dd08      	ble.n	8006066 <_strtod_l+0x756>
 8006054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006056:	9906      	ldr	r1, [sp, #24]
 8006058:	4650      	mov	r0, sl
 800605a:	f001 ff01 	bl	8007e60 <__pow5mult>
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	2800      	cmp	r0, #0
 8006062:	f43f ae94 	beq.w	8005d8e <_strtod_l+0x47e>
 8006066:	2c00      	cmp	r4, #0
 8006068:	dd08      	ble.n	800607c <_strtod_l+0x76c>
 800606a:	9906      	ldr	r1, [sp, #24]
 800606c:	4622      	mov	r2, r4
 800606e:	4650      	mov	r0, sl
 8006070:	f001 ff50 	bl	8007f14 <__lshift>
 8006074:	9006      	str	r0, [sp, #24]
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f ae89 	beq.w	8005d8e <_strtod_l+0x47e>
 800607c:	2e00      	cmp	r6, #0
 800607e:	dd08      	ble.n	8006092 <_strtod_l+0x782>
 8006080:	9904      	ldr	r1, [sp, #16]
 8006082:	4632      	mov	r2, r6
 8006084:	4650      	mov	r0, sl
 8006086:	f001 ff45 	bl	8007f14 <__lshift>
 800608a:	9004      	str	r0, [sp, #16]
 800608c:	2800      	cmp	r0, #0
 800608e:	f43f ae7e 	beq.w	8005d8e <_strtod_l+0x47e>
 8006092:	9a06      	ldr	r2, [sp, #24]
 8006094:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006096:	4650      	mov	r0, sl
 8006098:	f001 ffc8 	bl	800802c <__mdiff>
 800609c:	4683      	mov	fp, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	f43f ae75 	beq.w	8005d8e <_strtod_l+0x47e>
 80060a4:	2400      	movs	r4, #0
 80060a6:	68c3      	ldr	r3, [r0, #12]
 80060a8:	9904      	ldr	r1, [sp, #16]
 80060aa:	60c4      	str	r4, [r0, #12]
 80060ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ae:	f001 ffa1 	bl	8007ff4 <__mcmp>
 80060b2:	42a0      	cmp	r0, r4
 80060b4:	da6c      	bge.n	8006190 <_strtod_l+0x880>
 80060b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b8:	ea53 0308 	orrs.w	r3, r3, r8
 80060bc:	f040 8092 	bne.w	80061e4 <_strtod_l+0x8d4>
 80060c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 808d 	bne.w	80061e4 <_strtod_l+0x8d4>
 80060ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ce:	0d1b      	lsrs	r3, r3, #20
 80060d0:	051b      	lsls	r3, r3, #20
 80060d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060d6:	f240 8085 	bls.w	80061e4 <_strtod_l+0x8d4>
 80060da:	f8db 3014 	ldr.w	r3, [fp, #20]
 80060de:	b91b      	cbnz	r3, 80060e8 <_strtod_l+0x7d8>
 80060e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	dd7d      	ble.n	80061e4 <_strtod_l+0x8d4>
 80060e8:	4659      	mov	r1, fp
 80060ea:	2201      	movs	r2, #1
 80060ec:	4650      	mov	r0, sl
 80060ee:	f001 ff11 	bl	8007f14 <__lshift>
 80060f2:	9904      	ldr	r1, [sp, #16]
 80060f4:	4683      	mov	fp, r0
 80060f6:	f001 ff7d 	bl	8007ff4 <__mcmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	dd72      	ble.n	80061e4 <_strtod_l+0x8d4>
 80060fe:	9905      	ldr	r1, [sp, #20]
 8006100:	4a21      	ldr	r2, [pc, #132]	; (8006188 <_strtod_l+0x878>)
 8006102:	464b      	mov	r3, r9
 8006104:	2900      	cmp	r1, #0
 8006106:	f000 808d 	beq.w	8006224 <_strtod_l+0x914>
 800610a:	ea02 0109 	and.w	r1, r2, r9
 800610e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006112:	f300 8087 	bgt.w	8006224 <_strtod_l+0x914>
 8006116:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800611a:	f77f aead 	ble.w	8005e78 <_strtod_l+0x568>
 800611e:	4b1b      	ldr	r3, [pc, #108]	; (800618c <_strtod_l+0x87c>)
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	2200      	movs	r2, #0
 8006126:	f7fa fa3f 	bl	80005a8 <__aeabi_dmul>
 800612a:	460b      	mov	r3, r1
 800612c:	4303      	orrs	r3, r0
 800612e:	bf08      	it	eq
 8006130:	2322      	moveq	r3, #34	; 0x22
 8006132:	4680      	mov	r8, r0
 8006134:	4689      	mov	r9, r1
 8006136:	bf08      	it	eq
 8006138:	f8ca 3000 	streq.w	r3, [sl]
 800613c:	e632      	b.n	8005da4 <_strtod_l+0x494>
 800613e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	ea03 0808 	and.w	r8, r3, r8
 800614a:	e6e3      	b.n	8005f14 <_strtod_l+0x604>
 800614c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006150:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006154:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006158:	35e2      	adds	r5, #226	; 0xe2
 800615a:	fa07 f505 	lsl.w	r5, r7, r5
 800615e:	970f      	str	r7, [sp, #60]	; 0x3c
 8006160:	e747      	b.n	8005ff2 <_strtod_l+0x6e2>
 8006162:	2301      	movs	r3, #1
 8006164:	2500      	movs	r5, #0
 8006166:	930f      	str	r3, [sp, #60]	; 0x3c
 8006168:	e743      	b.n	8005ff2 <_strtod_l+0x6e2>
 800616a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800616c:	463a      	mov	r2, r7
 800616e:	4650      	mov	r0, sl
 8006170:	f001 fed0 	bl	8007f14 <__lshift>
 8006174:	901a      	str	r0, [sp, #104]	; 0x68
 8006176:	2800      	cmp	r0, #0
 8006178:	f47f af69 	bne.w	800604e <_strtod_l+0x73e>
 800617c:	e607      	b.n	8005d8e <_strtod_l+0x47e>
 800617e:	bf00      	nop
 8006180:	08009d18 	.word	0x08009d18
 8006184:	fffffc02 	.word	0xfffffc02
 8006188:	7ff00000 	.word	0x7ff00000
 800618c:	39500000 	.word	0x39500000
 8006190:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006194:	d165      	bne.n	8006262 <_strtod_l+0x952>
 8006196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800619c:	b35a      	cbz	r2, 80061f6 <_strtod_l+0x8e6>
 800619e:	4a9a      	ldr	r2, [pc, #616]	; (8006408 <_strtod_l+0xaf8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d12b      	bne.n	80061fc <_strtod_l+0x8ec>
 80061a4:	9b05      	ldr	r3, [sp, #20]
 80061a6:	4641      	mov	r1, r8
 80061a8:	b303      	cbz	r3, 80061ec <_strtod_l+0x8dc>
 80061aa:	4b98      	ldr	r3, [pc, #608]	; (800640c <_strtod_l+0xafc>)
 80061ac:	464a      	mov	r2, r9
 80061ae:	4013      	ands	r3, r2
 80061b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b8:	d81b      	bhi.n	80061f2 <_strtod_l+0x8e2>
 80061ba:	0d1b      	lsrs	r3, r3, #20
 80061bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	4299      	cmp	r1, r3
 80061c6:	d119      	bne.n	80061fc <_strtod_l+0x8ec>
 80061c8:	4b91      	ldr	r3, [pc, #580]	; (8006410 <_strtod_l+0xb00>)
 80061ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d102      	bne.n	80061d6 <_strtod_l+0x8c6>
 80061d0:	3101      	adds	r1, #1
 80061d2:	f43f addc 	beq.w	8005d8e <_strtod_l+0x47e>
 80061d6:	4b8d      	ldr	r3, [pc, #564]	; (800640c <_strtod_l+0xafc>)
 80061d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061da:	401a      	ands	r2, r3
 80061dc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80061e0:	f04f 0800 	mov.w	r8, #0
 80061e4:	9b05      	ldr	r3, [sp, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d199      	bne.n	800611e <_strtod_l+0x80e>
 80061ea:	e5db      	b.n	8005da4 <_strtod_l+0x494>
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f0:	e7e8      	b.n	80061c4 <_strtod_l+0x8b4>
 80061f2:	4613      	mov	r3, r2
 80061f4:	e7e6      	b.n	80061c4 <_strtod_l+0x8b4>
 80061f6:	ea53 0308 	orrs.w	r3, r3, r8
 80061fa:	d080      	beq.n	80060fe <_strtod_l+0x7ee>
 80061fc:	b1e5      	cbz	r5, 8006238 <_strtod_l+0x928>
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	421d      	tst	r5, r3
 8006202:	d0ef      	beq.n	80061e4 <_strtod_l+0x8d4>
 8006204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006206:	9a05      	ldr	r2, [sp, #20]
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	b1c3      	cbz	r3, 8006240 <_strtod_l+0x930>
 800620e:	f7ff fb5e 	bl	80058ce <sulp>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800621a:	f7fa f80f 	bl	800023c <__adddf3>
 800621e:	4680      	mov	r8, r0
 8006220:	4689      	mov	r9, r1
 8006222:	e7df      	b.n	80061e4 <_strtod_l+0x8d4>
 8006224:	4013      	ands	r3, r2
 8006226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800622a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800622e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006232:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006236:	e7d5      	b.n	80061e4 <_strtod_l+0x8d4>
 8006238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800623a:	ea13 0f08 	tst.w	r3, r8
 800623e:	e7e0      	b.n	8006202 <_strtod_l+0x8f2>
 8006240:	f7ff fb45 	bl	80058ce <sulp>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800624c:	f7f9 fff4 	bl	8000238 <__aeabi_dsub>
 8006250:	2200      	movs	r2, #0
 8006252:	2300      	movs	r3, #0
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	f7fa fc0e 	bl	8000a78 <__aeabi_dcmpeq>
 800625c:	2800      	cmp	r0, #0
 800625e:	d0c1      	beq.n	80061e4 <_strtod_l+0x8d4>
 8006260:	e60a      	b.n	8005e78 <_strtod_l+0x568>
 8006262:	9904      	ldr	r1, [sp, #16]
 8006264:	4658      	mov	r0, fp
 8006266:	f002 f83f 	bl	80082e8 <__ratio>
 800626a:	2200      	movs	r2, #0
 800626c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006270:	4606      	mov	r6, r0
 8006272:	460f      	mov	r7, r1
 8006274:	f7fa fc14 	bl	8000aa0 <__aeabi_dcmple>
 8006278:	2800      	cmp	r0, #0
 800627a:	d070      	beq.n	800635e <_strtod_l+0xa4e>
 800627c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d042      	beq.n	8006308 <_strtod_l+0x9f8>
 8006282:	4f64      	ldr	r7, [pc, #400]	; (8006414 <_strtod_l+0xb04>)
 8006284:	2600      	movs	r6, #0
 8006286:	4d63      	ldr	r5, [pc, #396]	; (8006414 <_strtod_l+0xb04>)
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800628e:	0d1b      	lsrs	r3, r3, #20
 8006290:	051b      	lsls	r3, r3, #20
 8006292:	930f      	str	r3, [sp, #60]	; 0x3c
 8006294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006296:	4b60      	ldr	r3, [pc, #384]	; (8006418 <_strtod_l+0xb08>)
 8006298:	429a      	cmp	r2, r3
 800629a:	f040 80c5 	bne.w	8006428 <_strtod_l+0xb18>
 800629e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a0:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f001 ff48 	bl	800813c <__ulp>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa f978 	bl	80005a8 <__aeabi_dmul>
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	f7f9 ffbe 	bl	800023c <__adddf3>
 80062c0:	460b      	mov	r3, r1
 80062c2:	4952      	ldr	r1, [pc, #328]	; (800640c <_strtod_l+0xafc>)
 80062c4:	4a55      	ldr	r2, [pc, #340]	; (800641c <_strtod_l+0xb0c>)
 80062c6:	4019      	ands	r1, r3
 80062c8:	4291      	cmp	r1, r2
 80062ca:	4680      	mov	r8, r0
 80062cc:	d95d      	bls.n	800638a <_strtod_l+0xa7a>
 80062ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062d0:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <_strtod_l+0xb00>)
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d103      	bne.n	80062de <_strtod_l+0x9ce>
 80062d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d8:	3301      	adds	r3, #1
 80062da:	f43f ad58 	beq.w	8005d8e <_strtod_l+0x47e>
 80062de:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8006410 <_strtod_l+0xb00>
 80062e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80062e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062e8:	4650      	mov	r0, sl
 80062ea:	f001 fbfb 	bl	8007ae4 <_Bfree>
 80062ee:	9906      	ldr	r1, [sp, #24]
 80062f0:	4650      	mov	r0, sl
 80062f2:	f001 fbf7 	bl	8007ae4 <_Bfree>
 80062f6:	9904      	ldr	r1, [sp, #16]
 80062f8:	4650      	mov	r0, sl
 80062fa:	f001 fbf3 	bl	8007ae4 <_Bfree>
 80062fe:	4659      	mov	r1, fp
 8006300:	4650      	mov	r0, sl
 8006302:	f001 fbef 	bl	8007ae4 <_Bfree>
 8006306:	e629      	b.n	8005f5c <_strtod_l+0x64c>
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	d119      	bne.n	8006342 <_strtod_l+0xa32>
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006314:	b9e3      	cbnz	r3, 8006350 <_strtod_l+0xa40>
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <_strtod_l+0xb04>)
 8006318:	2200      	movs	r2, #0
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7fa fbb5 	bl	8000a8c <__aeabi_dcmplt>
 8006322:	b9c8      	cbnz	r0, 8006358 <_strtod_l+0xa48>
 8006324:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <_strtod_l+0xb10>)
 8006326:	2200      	movs	r2, #0
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa f93c 	bl	80005a8 <__aeabi_dmul>
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006338:	9416      	str	r4, [sp, #88]	; 0x58
 800633a:	9317      	str	r3, [sp, #92]	; 0x5c
 800633c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006340:	e7a2      	b.n	8006288 <_strtod_l+0x978>
 8006342:	f1b8 0f01 	cmp.w	r8, #1
 8006346:	d103      	bne.n	8006350 <_strtod_l+0xa40>
 8006348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	f43f ad94 	beq.w	8005e78 <_strtod_l+0x568>
 8006350:	4f34      	ldr	r7, [pc, #208]	; (8006424 <_strtod_l+0xb14>)
 8006352:	2600      	movs	r6, #0
 8006354:	2400      	movs	r4, #0
 8006356:	e796      	b.n	8006286 <_strtod_l+0x976>
 8006358:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800635a:	4d31      	ldr	r5, [pc, #196]	; (8006420 <_strtod_l+0xb10>)
 800635c:	e7ea      	b.n	8006334 <_strtod_l+0xa24>
 800635e:	4b30      	ldr	r3, [pc, #192]	; (8006420 <_strtod_l+0xb10>)
 8006360:	2200      	movs	r2, #0
 8006362:	4630      	mov	r0, r6
 8006364:	4639      	mov	r1, r7
 8006366:	f7fa f91f 	bl	80005a8 <__aeabi_dmul>
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	4604      	mov	r4, r0
 800636e:	460d      	mov	r5, r1
 8006370:	b933      	cbnz	r3, 8006380 <_strtod_l+0xa70>
 8006372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006376:	9010      	str	r0, [sp, #64]	; 0x40
 8006378:	9311      	str	r3, [sp, #68]	; 0x44
 800637a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800637e:	e783      	b.n	8006288 <_strtod_l+0x978>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006388:	e7f7      	b.n	800637a <_strtod_l+0xa6a>
 800638a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800638e:	9b05      	ldr	r3, [sp, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1a8      	bne.n	80062e6 <_strtod_l+0x9d6>
 8006394:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800639a:	0d1b      	lsrs	r3, r3, #20
 800639c:	051b      	lsls	r3, r3, #20
 800639e:	429a      	cmp	r2, r3
 80063a0:	d1a1      	bne.n	80062e6 <_strtod_l+0x9d6>
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7fa fc5f 	bl	8000c68 <__aeabi_d2lz>
 80063aa:	f7fa f8cf 	bl	800054c <__aeabi_l2d>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7f9 ff3f 	bl	8000238 <__aeabi_dsub>
 80063ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063c0:	ea43 0308 	orr.w	r3, r3, r8
 80063c4:	4313      	orrs	r3, r2
 80063c6:	4604      	mov	r4, r0
 80063c8:	460d      	mov	r5, r1
 80063ca:	d068      	beq.n	800649e <_strtod_l+0xb8e>
 80063cc:	a30a      	add	r3, pc, #40	; (adr r3, 80063f8 <_strtod_l+0xae8>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7fa fb5b 	bl	8000a8c <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f47f ace4 	bne.w	8005da4 <_strtod_l+0x494>
 80063dc:	a308      	add	r3, pc, #32	; (adr r3, 8006400 <_strtod_l+0xaf0>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	4620      	mov	r0, r4
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7fa fb6f 	bl	8000ac8 <__aeabi_dcmpgt>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f43f af7b 	beq.w	80062e6 <_strtod_l+0x9d6>
 80063f0:	e4d8      	b.n	8005da4 <_strtod_l+0x494>
 80063f2:	bf00      	nop
 80063f4:	f3af 8000 	nop.w
 80063f8:	94a03595 	.word	0x94a03595
 80063fc:	3fdfffff 	.word	0x3fdfffff
 8006400:	35afe535 	.word	0x35afe535
 8006404:	3fe00000 	.word	0x3fe00000
 8006408:	000fffff 	.word	0x000fffff
 800640c:	7ff00000 	.word	0x7ff00000
 8006410:	7fefffff 	.word	0x7fefffff
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	7fe00000 	.word	0x7fe00000
 800641c:	7c9fffff 	.word	0x7c9fffff
 8006420:	3fe00000 	.word	0x3fe00000
 8006424:	bff00000 	.word	0xbff00000
 8006428:	9b05      	ldr	r3, [sp, #20]
 800642a:	b313      	cbz	r3, 8006472 <_strtod_l+0xb62>
 800642c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006432:	d81e      	bhi.n	8006472 <_strtod_l+0xb62>
 8006434:	a326      	add	r3, pc, #152	; (adr r3, 80064d0 <_strtod_l+0xbc0>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7fa fb2f 	bl	8000aa0 <__aeabi_dcmple>
 8006442:	b190      	cbz	r0, 800646a <_strtod_l+0xb5a>
 8006444:	4629      	mov	r1, r5
 8006446:	4620      	mov	r0, r4
 8006448:	f7fa fb86 	bl	8000b58 <__aeabi_d2uiz>
 800644c:	2801      	cmp	r0, #1
 800644e:	bf38      	it	cc
 8006450:	2001      	movcc	r0, #1
 8006452:	f7fa f82f 	bl	80004b4 <__aeabi_ui2d>
 8006456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	b9d3      	cbnz	r3, 8006494 <_strtod_l+0xb84>
 800645e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006462:	9012      	str	r0, [sp, #72]	; 0x48
 8006464:	9313      	str	r3, [sp, #76]	; 0x4c
 8006466:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800646a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800646c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006470:	1a9f      	subs	r7, r3, r2
 8006472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006476:	f001 fe61 	bl	800813c <__ulp>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4630      	mov	r0, r6
 8006480:	4639      	mov	r1, r7
 8006482:	f7fa f891 	bl	80005a8 <__aeabi_dmul>
 8006486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800648a:	f7f9 fed7 	bl	800023c <__adddf3>
 800648e:	4680      	mov	r8, r0
 8006490:	4689      	mov	r9, r1
 8006492:	e77c      	b.n	800638e <_strtod_l+0xa7e>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800649c:	e7e3      	b.n	8006466 <_strtod_l+0xb56>
 800649e:	a30e      	add	r3, pc, #56	; (adr r3, 80064d8 <_strtod_l+0xbc8>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa faf2 	bl	8000a8c <__aeabi_dcmplt>
 80064a8:	e79f      	b.n	80063ea <_strtod_l+0xada>
 80064aa:	2300      	movs	r3, #0
 80064ac:	930a      	str	r3, [sp, #40]	; 0x28
 80064ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	f7ff ba71 	b.w	800599a <_strtod_l+0x8a>
 80064b8:	2a65      	cmp	r2, #101	; 0x65
 80064ba:	f43f ab63 	beq.w	8005b84 <_strtod_l+0x274>
 80064be:	2a45      	cmp	r2, #69	; 0x45
 80064c0:	f43f ab60 	beq.w	8005b84 <_strtod_l+0x274>
 80064c4:	2301      	movs	r3, #1
 80064c6:	f7ff bb95 	b.w	8005bf4 <_strtod_l+0x2e4>
 80064ca:	bf00      	nop
 80064cc:	f3af 8000 	nop.w
 80064d0:	ffc00000 	.word	0xffc00000
 80064d4:	41dfffff 	.word	0x41dfffff
 80064d8:	94a03595 	.word	0x94a03595
 80064dc:	3fcfffff 	.word	0x3fcfffff

080064e0 <_strtod_r>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	; (80064e8 <_strtod_r+0x8>)
 80064e2:	f7ff ba15 	b.w	8005910 <_strtod_l>
 80064e6:	bf00      	nop
 80064e8:	20000074 	.word	0x20000074

080064ec <_strtol_l.constprop.0>:
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f2:	4680      	mov	r8, r0
 80064f4:	d001      	beq.n	80064fa <_strtol_l.constprop.0+0xe>
 80064f6:	2b24      	cmp	r3, #36	; 0x24
 80064f8:	d906      	bls.n	8006508 <_strtol_l.constprop.0+0x1c>
 80064fa:	f7fe faa5 	bl	8004a48 <__errno>
 80064fe:	2316      	movs	r3, #22
 8006500:	6003      	str	r3, [r0, #0]
 8006502:	2000      	movs	r0, #0
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	4f35      	ldr	r7, [pc, #212]	; (80065e0 <_strtol_l.constprop.0+0xf4>)
 800650a:	460d      	mov	r5, r1
 800650c:	4628      	mov	r0, r5
 800650e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006512:	5de6      	ldrb	r6, [r4, r7]
 8006514:	f016 0608 	ands.w	r6, r6, #8
 8006518:	d1f8      	bne.n	800650c <_strtol_l.constprop.0+0x20>
 800651a:	2c2d      	cmp	r4, #45	; 0x2d
 800651c:	d12f      	bne.n	800657e <_strtol_l.constprop.0+0x92>
 800651e:	782c      	ldrb	r4, [r5, #0]
 8006520:	2601      	movs	r6, #1
 8006522:	1c85      	adds	r5, r0, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d057      	beq.n	80065d8 <_strtol_l.constprop.0+0xec>
 8006528:	2b10      	cmp	r3, #16
 800652a:	d109      	bne.n	8006540 <_strtol_l.constprop.0+0x54>
 800652c:	2c30      	cmp	r4, #48	; 0x30
 800652e:	d107      	bne.n	8006540 <_strtol_l.constprop.0+0x54>
 8006530:	7828      	ldrb	r0, [r5, #0]
 8006532:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006536:	2858      	cmp	r0, #88	; 0x58
 8006538:	d149      	bne.n	80065ce <_strtol_l.constprop.0+0xe2>
 800653a:	786c      	ldrb	r4, [r5, #1]
 800653c:	2310      	movs	r3, #16
 800653e:	3502      	adds	r5, #2
 8006540:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006544:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006548:	2700      	movs	r7, #0
 800654a:	fbbe f9f3 	udiv	r9, lr, r3
 800654e:	4638      	mov	r0, r7
 8006550:	fb03 ea19 	mls	sl, r3, r9, lr
 8006554:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006558:	f1bc 0f09 	cmp.w	ip, #9
 800655c:	d814      	bhi.n	8006588 <_strtol_l.constprop.0+0x9c>
 800655e:	4664      	mov	r4, ip
 8006560:	42a3      	cmp	r3, r4
 8006562:	dd22      	ble.n	80065aa <_strtol_l.constprop.0+0xbe>
 8006564:	2f00      	cmp	r7, #0
 8006566:	db1d      	blt.n	80065a4 <_strtol_l.constprop.0+0xb8>
 8006568:	4581      	cmp	r9, r0
 800656a:	d31b      	bcc.n	80065a4 <_strtol_l.constprop.0+0xb8>
 800656c:	d101      	bne.n	8006572 <_strtol_l.constprop.0+0x86>
 800656e:	45a2      	cmp	sl, r4
 8006570:	db18      	blt.n	80065a4 <_strtol_l.constprop.0+0xb8>
 8006572:	fb00 4003 	mla	r0, r0, r3, r4
 8006576:	2701      	movs	r7, #1
 8006578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800657c:	e7ea      	b.n	8006554 <_strtol_l.constprop.0+0x68>
 800657e:	2c2b      	cmp	r4, #43	; 0x2b
 8006580:	bf04      	itt	eq
 8006582:	782c      	ldrbeq	r4, [r5, #0]
 8006584:	1c85      	addeq	r5, r0, #2
 8006586:	e7cd      	b.n	8006524 <_strtol_l.constprop.0+0x38>
 8006588:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800658c:	f1bc 0f19 	cmp.w	ip, #25
 8006590:	d801      	bhi.n	8006596 <_strtol_l.constprop.0+0xaa>
 8006592:	3c37      	subs	r4, #55	; 0x37
 8006594:	e7e4      	b.n	8006560 <_strtol_l.constprop.0+0x74>
 8006596:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800659a:	f1bc 0f19 	cmp.w	ip, #25
 800659e:	d804      	bhi.n	80065aa <_strtol_l.constprop.0+0xbe>
 80065a0:	3c57      	subs	r4, #87	; 0x57
 80065a2:	e7dd      	b.n	8006560 <_strtol_l.constprop.0+0x74>
 80065a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065a8:	e7e6      	b.n	8006578 <_strtol_l.constprop.0+0x8c>
 80065aa:	2f00      	cmp	r7, #0
 80065ac:	da07      	bge.n	80065be <_strtol_l.constprop.0+0xd2>
 80065ae:	2322      	movs	r3, #34	; 0x22
 80065b0:	f8c8 3000 	str.w	r3, [r8]
 80065b4:	4670      	mov	r0, lr
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	d0a4      	beq.n	8006504 <_strtol_l.constprop.0+0x18>
 80065ba:	1e69      	subs	r1, r5, #1
 80065bc:	e005      	b.n	80065ca <_strtol_l.constprop.0+0xde>
 80065be:	b106      	cbz	r6, 80065c2 <_strtol_l.constprop.0+0xd6>
 80065c0:	4240      	negs	r0, r0
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d09e      	beq.n	8006504 <_strtol_l.constprop.0+0x18>
 80065c6:	2f00      	cmp	r7, #0
 80065c8:	d1f7      	bne.n	80065ba <_strtol_l.constprop.0+0xce>
 80065ca:	6011      	str	r1, [r2, #0]
 80065cc:	e79a      	b.n	8006504 <_strtol_l.constprop.0+0x18>
 80065ce:	2430      	movs	r4, #48	; 0x30
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1b5      	bne.n	8006540 <_strtol_l.constprop.0+0x54>
 80065d4:	2308      	movs	r3, #8
 80065d6:	e7b3      	b.n	8006540 <_strtol_l.constprop.0+0x54>
 80065d8:	2c30      	cmp	r4, #48	; 0x30
 80065da:	d0a9      	beq.n	8006530 <_strtol_l.constprop.0+0x44>
 80065dc:	230a      	movs	r3, #10
 80065de:	e7af      	b.n	8006540 <_strtol_l.constprop.0+0x54>
 80065e0:	08009d41 	.word	0x08009d41

080065e4 <_strtol_r>:
 80065e4:	f7ff bf82 	b.w	80064ec <_strtol_l.constprop.0>

080065e8 <_write_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	; (8006608 <_write_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa ffd9 	bl	80015ae <_write>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_write_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_write_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	200002e8 	.word	0x200002e8

0800660c <_close_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d06      	ldr	r5, [pc, #24]	; (8006628 <_close_r+0x1c>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fa ffe5 	bl	80015e6 <_close>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_close_r+0x1a>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_close_r+0x1a>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	200002e8 	.word	0x200002e8

0800662c <quorem>:
 800662c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	6903      	ldr	r3, [r0, #16]
 8006632:	690c      	ldr	r4, [r1, #16]
 8006634:	42a3      	cmp	r3, r4
 8006636:	4607      	mov	r7, r0
 8006638:	db7d      	blt.n	8006736 <quorem+0x10a>
 800663a:	3c01      	subs	r4, #1
 800663c:	f101 0814 	add.w	r8, r1, #20
 8006640:	f100 0514 	add.w	r5, r0, #20
 8006644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800664e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006652:	3301      	adds	r3, #1
 8006654:	429a      	cmp	r2, r3
 8006656:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800665a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800665e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006662:	d32e      	bcc.n	80066c2 <quorem+0x96>
 8006664:	f04f 0e00 	mov.w	lr, #0
 8006668:	4640      	mov	r0, r8
 800666a:	46ac      	mov	ip, r5
 800666c:	46f2      	mov	sl, lr
 800666e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006672:	b293      	uxth	r3, r2
 8006674:	fb06 e303 	mla	r3, r6, r3, lr
 8006678:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	b29b      	uxth	r3, r3
 8006680:	fb06 e202 	mla	r2, r6, r2, lr
 8006684:	ebaa 0303 	sub.w	r3, sl, r3
 8006688:	f8dc a000 	ldr.w	sl, [ip]
 800668c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006690:	b292      	uxth	r2, r2
 8006692:	fa13 f38a 	uxtah	r3, r3, sl
 8006696:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800669a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a4:	4581      	cmp	r9, r0
 80066a6:	f84c 3b04 	str.w	r3, [ip], #4
 80066aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066ae:	d2de      	bcs.n	800666e <quorem+0x42>
 80066b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80066b4:	b92b      	cbnz	r3, 80066c2 <quorem+0x96>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	3b04      	subs	r3, #4
 80066ba:	429d      	cmp	r5, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	d32e      	bcc.n	800671e <quorem+0xf2>
 80066c0:	613c      	str	r4, [r7, #16]
 80066c2:	4638      	mov	r0, r7
 80066c4:	f001 fc96 	bl	8007ff4 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	db24      	blt.n	8006716 <quorem+0xea>
 80066cc:	3601      	adds	r6, #1
 80066ce:	4628      	mov	r0, r5
 80066d0:	f04f 0c00 	mov.w	ip, #0
 80066d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80066d8:	f8d0 e000 	ldr.w	lr, [r0]
 80066dc:	b293      	uxth	r3, r2
 80066de:	ebac 0303 	sub.w	r3, ip, r3
 80066e2:	0c12      	lsrs	r2, r2, #16
 80066e4:	fa13 f38e 	uxtah	r3, r3, lr
 80066e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f6:	45c1      	cmp	r9, r8
 80066f8:	f840 3b04 	str.w	r3, [r0], #4
 80066fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006700:	d2e8      	bcs.n	80066d4 <quorem+0xa8>
 8006702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	b922      	cbnz	r2, 8006716 <quorem+0xea>
 800670c:	3b04      	subs	r3, #4
 800670e:	429d      	cmp	r5, r3
 8006710:	461a      	mov	r2, r3
 8006712:	d30a      	bcc.n	800672a <quorem+0xfe>
 8006714:	613c      	str	r4, [r7, #16]
 8006716:	4630      	mov	r0, r6
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	3b04      	subs	r3, #4
 8006722:	2a00      	cmp	r2, #0
 8006724:	d1cc      	bne.n	80066c0 <quorem+0x94>
 8006726:	3c01      	subs	r4, #1
 8006728:	e7c7      	b.n	80066ba <quorem+0x8e>
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	3b04      	subs	r3, #4
 800672e:	2a00      	cmp	r2, #0
 8006730:	d1f0      	bne.n	8006714 <quorem+0xe8>
 8006732:	3c01      	subs	r4, #1
 8006734:	e7eb      	b.n	800670e <quorem+0xe2>
 8006736:	2000      	movs	r0, #0
 8006738:	e7ee      	b.n	8006718 <quorem+0xec>
 800673a:	0000      	movs	r0, r0
 800673c:	0000      	movs	r0, r0
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006746:	b099      	sub	sp, #100	; 0x64
 8006748:	4616      	mov	r6, r2
 800674a:	461f      	mov	r7, r3
 800674c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006750:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006754:	4605      	mov	r5, r0
 8006756:	b974      	cbnz	r4, 8006776 <_dtoa_r+0x36>
 8006758:	2010      	movs	r0, #16
 800675a:	f001 f95b 	bl	8007a14 <malloc>
 800675e:	4602      	mov	r2, r0
 8006760:	6268      	str	r0, [r5, #36]	; 0x24
 8006762:	b920      	cbnz	r0, 800676e <_dtoa_r+0x2e>
 8006764:	4ba8      	ldr	r3, [pc, #672]	; (8006a08 <_dtoa_r+0x2c8>)
 8006766:	21ea      	movs	r1, #234	; 0xea
 8006768:	48a8      	ldr	r0, [pc, #672]	; (8006a0c <_dtoa_r+0x2cc>)
 800676a:	f002 fcd1 	bl	8009110 <__assert_func>
 800676e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006772:	6004      	str	r4, [r0, #0]
 8006774:	60c4      	str	r4, [r0, #12]
 8006776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006778:	6819      	ldr	r1, [r3, #0]
 800677a:	b151      	cbz	r1, 8006792 <_dtoa_r+0x52>
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	604a      	str	r2, [r1, #4]
 8006780:	2301      	movs	r3, #1
 8006782:	4093      	lsls	r3, r2
 8006784:	608b      	str	r3, [r1, #8]
 8006786:	4628      	mov	r0, r5
 8006788:	f001 f9ac 	bl	8007ae4 <_Bfree>
 800678c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	1e3b      	subs	r3, r7, #0
 8006794:	bfb9      	ittee	lt
 8006796:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800679a:	9305      	strlt	r3, [sp, #20]
 800679c:	2300      	movge	r3, #0
 800679e:	f8c8 3000 	strge.w	r3, [r8]
 80067a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80067a6:	4b9a      	ldr	r3, [pc, #616]	; (8006a10 <_dtoa_r+0x2d0>)
 80067a8:	bfbc      	itt	lt
 80067aa:	2201      	movlt	r2, #1
 80067ac:	f8c8 2000 	strlt.w	r2, [r8]
 80067b0:	ea33 0309 	bics.w	r3, r3, r9
 80067b4:	d119      	bne.n	80067ea <_dtoa_r+0xaa>
 80067b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067c2:	4333      	orrs	r3, r6
 80067c4:	f000 8580 	beq.w	80072c8 <_dtoa_r+0xb88>
 80067c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067ca:	b953      	cbnz	r3, 80067e2 <_dtoa_r+0xa2>
 80067cc:	4b91      	ldr	r3, [pc, #580]	; (8006a14 <_dtoa_r+0x2d4>)
 80067ce:	e022      	b.n	8006816 <_dtoa_r+0xd6>
 80067d0:	4b91      	ldr	r3, [pc, #580]	; (8006a18 <_dtoa_r+0x2d8>)
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	3308      	adds	r3, #8
 80067d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	9803      	ldr	r0, [sp, #12]
 80067dc:	b019      	add	sp, #100	; 0x64
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <_dtoa_r+0x2d4>)
 80067e4:	9303      	str	r3, [sp, #12]
 80067e6:	3303      	adds	r3, #3
 80067e8:	e7f5      	b.n	80067d6 <_dtoa_r+0x96>
 80067ea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80067ee:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80067f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	f7fa f93d 	bl	8000a78 <__aeabi_dcmpeq>
 80067fe:	4680      	mov	r8, r0
 8006800:	b158      	cbz	r0, 800681a <_dtoa_r+0xda>
 8006802:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006804:	2301      	movs	r3, #1
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8559 	beq.w	80072c2 <_dtoa_r+0xb82>
 8006810:	4882      	ldr	r0, [pc, #520]	; (8006a1c <_dtoa_r+0x2dc>)
 8006812:	6018      	str	r0, [r3, #0]
 8006814:	1e43      	subs	r3, r0, #1
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	e7df      	b.n	80067da <_dtoa_r+0x9a>
 800681a:	ab16      	add	r3, sp, #88	; 0x58
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	ab17      	add	r3, sp, #92	; 0x5c
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4628      	mov	r0, r5
 8006824:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006828:	f001 fd02 	bl	8008230 <__d2b>
 800682c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006830:	4683      	mov	fp, r0
 8006832:	2c00      	cmp	r4, #0
 8006834:	d07e      	beq.n	8006934 <_dtoa_r+0x1f4>
 8006836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006838:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800683c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006844:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006848:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800684c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006850:	4b73      	ldr	r3, [pc, #460]	; (8006a20 <_dtoa_r+0x2e0>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7f9 fcf0 	bl	8000238 <__aeabi_dsub>
 8006858:	a365      	add	r3, pc, #404	; (adr r3, 80069f0 <_dtoa_r+0x2b0>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fea3 	bl	80005a8 <__aeabi_dmul>
 8006862:	a365      	add	r3, pc, #404	; (adr r3, 80069f8 <_dtoa_r+0x2b8>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fce8 	bl	800023c <__adddf3>
 800686c:	4606      	mov	r6, r0
 800686e:	4620      	mov	r0, r4
 8006870:	460f      	mov	r7, r1
 8006872:	f7f9 fe2f 	bl	80004d4 <__aeabi_i2d>
 8006876:	a362      	add	r3, pc, #392	; (adr r3, 8006a00 <_dtoa_r+0x2c0>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f7f9 fe94 	bl	80005a8 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7f9 fcd8 	bl	800023c <__adddf3>
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	f7fa f93a 	bl	8000b08 <__aeabi_d2iz>
 8006894:	2200      	movs	r2, #0
 8006896:	4682      	mov	sl, r0
 8006898:	2300      	movs	r3, #0
 800689a:	4630      	mov	r0, r6
 800689c:	4639      	mov	r1, r7
 800689e:	f7fa f8f5 	bl	8000a8c <__aeabi_dcmplt>
 80068a2:	b148      	cbz	r0, 80068b8 <_dtoa_r+0x178>
 80068a4:	4650      	mov	r0, sl
 80068a6:	f7f9 fe15 	bl	80004d4 <__aeabi_i2d>
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	f7fa f8e3 	bl	8000a78 <__aeabi_dcmpeq>
 80068b2:	b908      	cbnz	r0, 80068b8 <_dtoa_r+0x178>
 80068b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068b8:	f1ba 0f16 	cmp.w	sl, #22
 80068bc:	d857      	bhi.n	800696e <_dtoa_r+0x22e>
 80068be:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <_dtoa_r+0x2e4>)
 80068c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068cc:	f7fa f8de 	bl	8000a8c <__aeabi_dcmplt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d04e      	beq.n	8006972 <_dtoa_r+0x232>
 80068d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068d8:	2300      	movs	r3, #0
 80068da:	930f      	str	r3, [sp, #60]	; 0x3c
 80068dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068de:	1b1c      	subs	r4, r3, r4
 80068e0:	1e63      	subs	r3, r4, #1
 80068e2:	9309      	str	r3, [sp, #36]	; 0x24
 80068e4:	bf45      	ittet	mi
 80068e6:	f1c4 0301 	rsbmi	r3, r4, #1
 80068ea:	9306      	strmi	r3, [sp, #24]
 80068ec:	2300      	movpl	r3, #0
 80068ee:	2300      	movmi	r3, #0
 80068f0:	bf4c      	ite	mi
 80068f2:	9309      	strmi	r3, [sp, #36]	; 0x24
 80068f4:	9306      	strpl	r3, [sp, #24]
 80068f6:	f1ba 0f00 	cmp.w	sl, #0
 80068fa:	db3c      	blt.n	8006976 <_dtoa_r+0x236>
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006902:	4453      	add	r3, sl
 8006904:	9309      	str	r3, [sp, #36]	; 0x24
 8006906:	2300      	movs	r3, #0
 8006908:	930a      	str	r3, [sp, #40]	; 0x28
 800690a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800690c:	2b09      	cmp	r3, #9
 800690e:	f200 808d 	bhi.w	8006a2c <_dtoa_r+0x2ec>
 8006912:	2b05      	cmp	r3, #5
 8006914:	bfc4      	itt	gt
 8006916:	3b04      	subgt	r3, #4
 8006918:	9322      	strgt	r3, [sp, #136]	; 0x88
 800691a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800691c:	f1a3 0302 	sub.w	r3, r3, #2
 8006920:	bfcc      	ite	gt
 8006922:	2400      	movgt	r4, #0
 8006924:	2401      	movle	r4, #1
 8006926:	2b03      	cmp	r3, #3
 8006928:	f200 808c 	bhi.w	8006a44 <_dtoa_r+0x304>
 800692c:	e8df f003 	tbb	[pc, r3]
 8006930:	5b4d4f2d 	.word	0x5b4d4f2d
 8006934:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006938:	441c      	add	r4, r3
 800693a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800693e:	2b20      	cmp	r3, #32
 8006940:	bfc3      	ittte	gt
 8006942:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006946:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800694a:	fa09 f303 	lslgt.w	r3, r9, r3
 800694e:	f1c3 0320 	rsble	r3, r3, #32
 8006952:	bfc6      	itte	gt
 8006954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006958:	4318      	orrgt	r0, r3
 800695a:	fa06 f003 	lslle.w	r0, r6, r3
 800695e:	f7f9 fda9 	bl	80004b4 <__aeabi_ui2d>
 8006962:	2301      	movs	r3, #1
 8006964:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006968:	3c01      	subs	r4, #1
 800696a:	9313      	str	r3, [sp, #76]	; 0x4c
 800696c:	e770      	b.n	8006850 <_dtoa_r+0x110>
 800696e:	2301      	movs	r3, #1
 8006970:	e7b3      	b.n	80068da <_dtoa_r+0x19a>
 8006972:	900f      	str	r0, [sp, #60]	; 0x3c
 8006974:	e7b2      	b.n	80068dc <_dtoa_r+0x19c>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	eba3 030a 	sub.w	r3, r3, sl
 800697c:	9306      	str	r3, [sp, #24]
 800697e:	f1ca 0300 	rsb	r3, sl, #0
 8006982:	930a      	str	r3, [sp, #40]	; 0x28
 8006984:	2300      	movs	r3, #0
 8006986:	930e      	str	r3, [sp, #56]	; 0x38
 8006988:	e7bf      	b.n	800690a <_dtoa_r+0x1ca>
 800698a:	2300      	movs	r3, #0
 800698c:	930b      	str	r3, [sp, #44]	; 0x2c
 800698e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc5a      	bgt.n	8006a4a <_dtoa_r+0x30a>
 8006994:	f04f 0901 	mov.w	r9, #1
 8006998:	f8cd 9020 	str.w	r9, [sp, #32]
 800699c:	464b      	mov	r3, r9
 800699e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80069a2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80069a4:	2200      	movs	r2, #0
 80069a6:	6042      	str	r2, [r0, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	f102 0614 	add.w	r6, r2, #20
 80069ae:	429e      	cmp	r6, r3
 80069b0:	6841      	ldr	r1, [r0, #4]
 80069b2:	d950      	bls.n	8006a56 <_dtoa_r+0x316>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f001 f855 	bl	8007a64 <_Balloc>
 80069ba:	9003      	str	r0, [sp, #12]
 80069bc:	2800      	cmp	r0, #0
 80069be:	d14e      	bne.n	8006a5e <_dtoa_r+0x31e>
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <_dtoa_r+0x2e8>)
 80069c2:	4602      	mov	r2, r0
 80069c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069c8:	e6ce      	b.n	8006768 <_dtoa_r+0x28>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7de      	b.n	800698c <_dtoa_r+0x24c>
 80069ce:	2300      	movs	r3, #0
 80069d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069d4:	eb0a 0903 	add.w	r9, sl, r3
 80069d8:	f109 0301 	add.w	r3, r9, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	9308      	str	r3, [sp, #32]
 80069e0:	bfb8      	it	lt
 80069e2:	2301      	movlt	r3, #1
 80069e4:	e7dd      	b.n	80069a2 <_dtoa_r+0x262>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e7f2      	b.n	80069d0 <_dtoa_r+0x290>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	636f4361 	.word	0x636f4361
 80069f4:	3fd287a7 	.word	0x3fd287a7
 80069f8:	8b60c8b3 	.word	0x8b60c8b3
 80069fc:	3fc68a28 	.word	0x3fc68a28
 8006a00:	509f79fb 	.word	0x509f79fb
 8006a04:	3fd34413 	.word	0x3fd34413
 8006a08:	08009e4e 	.word	0x08009e4e
 8006a0c:	08009e65 	.word	0x08009e65
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	08009e4a 	.word	0x08009e4a
 8006a18:	08009e41 	.word	0x08009e41
 8006a1c:	0800a0ba 	.word	0x0800a0ba
 8006a20:	3ff80000 	.word	0x3ff80000
 8006a24:	08009fd0 	.word	0x08009fd0
 8006a28:	08009ec0 	.word	0x08009ec0
 8006a2c:	2401      	movs	r4, #1
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9322      	str	r3, [sp, #136]	; 0x88
 8006a32:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a34:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a3e:	2312      	movs	r3, #18
 8006a40:	9223      	str	r2, [sp, #140]	; 0x8c
 8006a42:	e7ae      	b.n	80069a2 <_dtoa_r+0x262>
 8006a44:	2301      	movs	r3, #1
 8006a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a48:	e7f4      	b.n	8006a34 <_dtoa_r+0x2f4>
 8006a4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006a4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a52:	464b      	mov	r3, r9
 8006a54:	e7a5      	b.n	80069a2 <_dtoa_r+0x262>
 8006a56:	3101      	adds	r1, #1
 8006a58:	6041      	str	r1, [r0, #4]
 8006a5a:	0052      	lsls	r2, r2, #1
 8006a5c:	e7a5      	b.n	80069aa <_dtoa_r+0x26a>
 8006a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a60:	9a03      	ldr	r2, [sp, #12]
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	2b0e      	cmp	r3, #14
 8006a68:	f200 80a8 	bhi.w	8006bbc <_dtoa_r+0x47c>
 8006a6c:	2c00      	cmp	r4, #0
 8006a6e:	f000 80a5 	beq.w	8006bbc <_dtoa_r+0x47c>
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	dd34      	ble.n	8006ae2 <_dtoa_r+0x3a2>
 8006a78:	4a9a      	ldr	r2, [pc, #616]	; (8006ce4 <_dtoa_r+0x5a4>)
 8006a7a:	f00a 030f 	and.w	r3, sl, #15
 8006a7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a86:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006a92:	d016      	beq.n	8006ac2 <_dtoa_r+0x382>
 8006a94:	4b94      	ldr	r3, [pc, #592]	; (8006ce8 <_dtoa_r+0x5a8>)
 8006a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a9e:	f7f9 fead 	bl	80007fc <__aeabi_ddiv>
 8006aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa6:	f004 040f 	and.w	r4, r4, #15
 8006aaa:	2703      	movs	r7, #3
 8006aac:	4e8e      	ldr	r6, [pc, #568]	; (8006ce8 <_dtoa_r+0x5a8>)
 8006aae:	b954      	cbnz	r4, 8006ac6 <_dtoa_r+0x386>
 8006ab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab8:	f7f9 fea0 	bl	80007fc <__aeabi_ddiv>
 8006abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac0:	e029      	b.n	8006b16 <_dtoa_r+0x3d6>
 8006ac2:	2702      	movs	r7, #2
 8006ac4:	e7f2      	b.n	8006aac <_dtoa_r+0x36c>
 8006ac6:	07e1      	lsls	r1, r4, #31
 8006ac8:	d508      	bpl.n	8006adc <_dtoa_r+0x39c>
 8006aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ace:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ad2:	f7f9 fd69 	bl	80005a8 <__aeabi_dmul>
 8006ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ada:	3701      	adds	r7, #1
 8006adc:	1064      	asrs	r4, r4, #1
 8006ade:	3608      	adds	r6, #8
 8006ae0:	e7e5      	b.n	8006aae <_dtoa_r+0x36e>
 8006ae2:	f000 80a5 	beq.w	8006c30 <_dtoa_r+0x4f0>
 8006ae6:	f1ca 0400 	rsb	r4, sl, #0
 8006aea:	4b7e      	ldr	r3, [pc, #504]	; (8006ce4 <_dtoa_r+0x5a4>)
 8006aec:	4e7e      	ldr	r6, [pc, #504]	; (8006ce8 <_dtoa_r+0x5a8>)
 8006aee:	f004 020f 	and.w	r2, r4, #15
 8006af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006afe:	f7f9 fd53 	bl	80005a8 <__aeabi_dmul>
 8006b02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b06:	1124      	asrs	r4, r4, #4
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2702      	movs	r7, #2
 8006b0c:	2c00      	cmp	r4, #0
 8006b0e:	f040 8084 	bne.w	8006c1a <_dtoa_r+0x4da>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1d2      	bne.n	8006abc <_dtoa_r+0x37c>
 8006b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 808b 	beq.w	8006c34 <_dtoa_r+0x4f4>
 8006b1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b2a:	4b70      	ldr	r3, [pc, #448]	; (8006cec <_dtoa_r+0x5ac>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f7f9 ffad 	bl	8000a8c <__aeabi_dcmplt>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d07e      	beq.n	8006c34 <_dtoa_r+0x4f4>
 8006b36:	9b08      	ldr	r3, [sp, #32]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d07b      	beq.n	8006c34 <_dtoa_r+0x4f4>
 8006b3c:	f1b9 0f00 	cmp.w	r9, #0
 8006b40:	dd38      	ble.n	8006bb4 <_dtoa_r+0x474>
 8006b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <_dtoa_r+0x5b0>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f7f9 fd2d 	bl	80005a8 <__aeabi_dmul>
 8006b4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b52:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006b56:	3701      	adds	r7, #1
 8006b58:	464c      	mov	r4, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	f7f9 fcba 	bl	80004d4 <__aeabi_i2d>
 8006b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b64:	f7f9 fd20 	bl	80005a8 <__aeabi_dmul>
 8006b68:	4b62      	ldr	r3, [pc, #392]	; (8006cf4 <_dtoa_r+0x5b4>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f7f9 fb66 	bl	800023c <__adddf3>
 8006b70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b78:	9611      	str	r6, [sp, #68]	; 0x44
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d15d      	bne.n	8006c3a <_dtoa_r+0x4fa>
 8006b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b82:	4b5d      	ldr	r3, [pc, #372]	; (8006cf8 <_dtoa_r+0x5b8>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	f7f9 fb57 	bl	8000238 <__aeabi_dsub>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b94:	4633      	mov	r3, r6
 8006b96:	f7f9 ff97 	bl	8000ac8 <__aeabi_dcmpgt>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f040 829c 	bne.w	80070d8 <_dtoa_r+0x998>
 8006ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ba6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006baa:	f7f9 ff6f 	bl	8000a8c <__aeabi_dcmplt>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f040 8290 	bne.w	80070d4 <_dtoa_r+0x994>
 8006bb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006bb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f2c0 8152 	blt.w	8006e68 <_dtoa_r+0x728>
 8006bc4:	f1ba 0f0e 	cmp.w	sl, #14
 8006bc8:	f300 814e 	bgt.w	8006e68 <_dtoa_r+0x728>
 8006bcc:	4b45      	ldr	r3, [pc, #276]	; (8006ce4 <_dtoa_r+0x5a4>)
 8006bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f280 80db 	bge.w	8006d98 <_dtoa_r+0x658>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f300 80d7 	bgt.w	8006d98 <_dtoa_r+0x658>
 8006bea:	f040 8272 	bne.w	80070d2 <_dtoa_r+0x992>
 8006bee:	4b42      	ldr	r3, [pc, #264]	; (8006cf8 <_dtoa_r+0x5b8>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf6:	f7f9 fcd7 	bl	80005a8 <__aeabi_dmul>
 8006bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bfe:	f7f9 ff59 	bl	8000ab4 <__aeabi_dcmpge>
 8006c02:	9c08      	ldr	r4, [sp, #32]
 8006c04:	4626      	mov	r6, r4
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 8248 	bne.w	800709c <_dtoa_r+0x95c>
 8006c0c:	9f03      	ldr	r7, [sp, #12]
 8006c0e:	2331      	movs	r3, #49	; 0x31
 8006c10:	f807 3b01 	strb.w	r3, [r7], #1
 8006c14:	f10a 0a01 	add.w	sl, sl, #1
 8006c18:	e244      	b.n	80070a4 <_dtoa_r+0x964>
 8006c1a:	07e2      	lsls	r2, r4, #31
 8006c1c:	d505      	bpl.n	8006c2a <_dtoa_r+0x4ea>
 8006c1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c22:	f7f9 fcc1 	bl	80005a8 <__aeabi_dmul>
 8006c26:	3701      	adds	r7, #1
 8006c28:	2301      	movs	r3, #1
 8006c2a:	1064      	asrs	r4, r4, #1
 8006c2c:	3608      	adds	r6, #8
 8006c2e:	e76d      	b.n	8006b0c <_dtoa_r+0x3cc>
 8006c30:	2702      	movs	r7, #2
 8006c32:	e770      	b.n	8006b16 <_dtoa_r+0x3d6>
 8006c34:	9c08      	ldr	r4, [sp, #32]
 8006c36:	46d0      	mov	r8, sl
 8006c38:	e78f      	b.n	8006b5a <_dtoa_r+0x41a>
 8006c3a:	9903      	ldr	r1, [sp, #12]
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <_dtoa_r+0x5a4>)
 8006c3e:	4421      	add	r1, r4
 8006c40:	9112      	str	r1, [sp, #72]	; 0x48
 8006c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c50:	2900      	cmp	r1, #0
 8006c52:	d055      	beq.n	8006d00 <_dtoa_r+0x5c0>
 8006c54:	4929      	ldr	r1, [pc, #164]	; (8006cfc <_dtoa_r+0x5bc>)
 8006c56:	2000      	movs	r0, #0
 8006c58:	f7f9 fdd0 	bl	80007fc <__aeabi_ddiv>
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4632      	mov	r2, r6
 8006c60:	f7f9 faea 	bl	8000238 <__aeabi_dsub>
 8006c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c68:	9f03      	ldr	r7, [sp, #12]
 8006c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c6e:	f7f9 ff4b 	bl	8000b08 <__aeabi_d2iz>
 8006c72:	4604      	mov	r4, r0
 8006c74:	f7f9 fc2e 	bl	80004d4 <__aeabi_i2d>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c80:	f7f9 fada 	bl	8000238 <__aeabi_dsub>
 8006c84:	3430      	adds	r4, #48	; 0x30
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c8e:	f807 4b01 	strb.w	r4, [r7], #1
 8006c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c96:	f7f9 fef9 	bl	8000a8c <__aeabi_dcmplt>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d174      	bne.n	8006d88 <_dtoa_r+0x648>
 8006c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ca2:	4912      	ldr	r1, [pc, #72]	; (8006cec <_dtoa_r+0x5ac>)
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f7f9 fac7 	bl	8000238 <__aeabi_dsub>
 8006caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cae:	f7f9 feed 	bl	8000a8c <__aeabi_dcmplt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f040 80b7 	bne.w	8006e26 <_dtoa_r+0x6e6>
 8006cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cba:	429f      	cmp	r7, r3
 8006cbc:	f43f af7a 	beq.w	8006bb4 <_dtoa_r+0x474>
 8006cc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <_dtoa_r+0x5b0>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f7f9 fc6e 	bl	80005a8 <__aeabi_dmul>
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <_dtoa_r+0x5b0>)
 8006cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd8:	f7f9 fc66 	bl	80005a8 <__aeabi_dmul>
 8006cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ce0:	e7c3      	b.n	8006c6a <_dtoa_r+0x52a>
 8006ce2:	bf00      	nop
 8006ce4:	08009fd0 	.word	0x08009fd0
 8006ce8:	08009fa8 	.word	0x08009fa8
 8006cec:	3ff00000 	.word	0x3ff00000
 8006cf0:	40240000 	.word	0x40240000
 8006cf4:	401c0000 	.word	0x401c0000
 8006cf8:	40140000 	.word	0x40140000
 8006cfc:	3fe00000 	.word	0x3fe00000
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fc50 	bl	80005a8 <__aeabi_dmul>
 8006d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d0e:	9c03      	ldr	r4, [sp, #12]
 8006d10:	9314      	str	r3, [sp, #80]	; 0x50
 8006d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d16:	f7f9 fef7 	bl	8000b08 <__aeabi_d2iz>
 8006d1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d1c:	f7f9 fbda 	bl	80004d4 <__aeabi_i2d>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d28:	f7f9 fa86 	bl	8000238 <__aeabi_dsub>
 8006d2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d2e:	3330      	adds	r3, #48	; 0x30
 8006d30:	f804 3b01 	strb.w	r3, [r4], #1
 8006d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d36:	429c      	cmp	r4, r3
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	d124      	bne.n	8006d8c <_dtoa_r+0x64c>
 8006d42:	4ba4      	ldr	r3, [pc, #656]	; (8006fd4 <_dtoa_r+0x894>)
 8006d44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d48:	f7f9 fa78 	bl	800023c <__adddf3>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4630      	mov	r0, r6
 8006d52:	4639      	mov	r1, r7
 8006d54:	f7f9 feb8 	bl	8000ac8 <__aeabi_dcmpgt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d163      	bne.n	8006e24 <_dtoa_r+0x6e4>
 8006d5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d60:	499c      	ldr	r1, [pc, #624]	; (8006fd4 <_dtoa_r+0x894>)
 8006d62:	2000      	movs	r0, #0
 8006d64:	f7f9 fa68 	bl	8000238 <__aeabi_dsub>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 fe8c 	bl	8000a8c <__aeabi_dcmplt>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f43f af1d 	beq.w	8006bb4 <_dtoa_r+0x474>
 8006d7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d7c:	1e7b      	subs	r3, r7, #1
 8006d7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006d80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d0f8      	beq.n	8006d7a <_dtoa_r+0x63a>
 8006d88:	46c2      	mov	sl, r8
 8006d8a:	e03b      	b.n	8006e04 <_dtoa_r+0x6c4>
 8006d8c:	4b92      	ldr	r3, [pc, #584]	; (8006fd8 <_dtoa_r+0x898>)
 8006d8e:	f7f9 fc0b 	bl	80005a8 <__aeabi_dmul>
 8006d92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d96:	e7bc      	b.n	8006d12 <_dtoa_r+0x5d2>
 8006d98:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006d9c:	9f03      	ldr	r7, [sp, #12]
 8006d9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006da2:	4640      	mov	r0, r8
 8006da4:	4649      	mov	r1, r9
 8006da6:	f7f9 fd29 	bl	80007fc <__aeabi_ddiv>
 8006daa:	f7f9 fead 	bl	8000b08 <__aeabi_d2iz>
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7f9 fb90 	bl	80004d4 <__aeabi_i2d>
 8006db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006db8:	f7f9 fbf6 	bl	80005a8 <__aeabi_dmul>
 8006dbc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	f7f9 fa36 	bl	8000238 <__aeabi_dsub>
 8006dcc:	f807 6b01 	strb.w	r6, [r7], #1
 8006dd0:	9e03      	ldr	r6, [sp, #12]
 8006dd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006dd6:	1bbe      	subs	r6, r7, r6
 8006dd8:	45b4      	cmp	ip, r6
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	d136      	bne.n	8006e4e <_dtoa_r+0x70e>
 8006de0:	f7f9 fa2c 	bl	800023c <__adddf3>
 8006de4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006de8:	4680      	mov	r8, r0
 8006dea:	4689      	mov	r9, r1
 8006dec:	f7f9 fe6c 	bl	8000ac8 <__aeabi_dcmpgt>
 8006df0:	bb58      	cbnz	r0, 8006e4a <_dtoa_r+0x70a>
 8006df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006df6:	4640      	mov	r0, r8
 8006df8:	4649      	mov	r1, r9
 8006dfa:	f7f9 fe3d 	bl	8000a78 <__aeabi_dcmpeq>
 8006dfe:	b108      	cbz	r0, 8006e04 <_dtoa_r+0x6c4>
 8006e00:	07e1      	lsls	r1, r4, #31
 8006e02:	d422      	bmi.n	8006e4a <_dtoa_r+0x70a>
 8006e04:	4628      	mov	r0, r5
 8006e06:	4659      	mov	r1, fp
 8006e08:	f000 fe6c 	bl	8007ae4 <_Bfree>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	703b      	strb	r3, [r7, #0]
 8006e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e12:	f10a 0001 	add.w	r0, sl, #1
 8006e16:	6018      	str	r0, [r3, #0]
 8006e18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f43f acdd 	beq.w	80067da <_dtoa_r+0x9a>
 8006e20:	601f      	str	r7, [r3, #0]
 8006e22:	e4da      	b.n	80067da <_dtoa_r+0x9a>
 8006e24:	4627      	mov	r7, r4
 8006e26:	463b      	mov	r3, r7
 8006e28:	461f      	mov	r7, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a39      	cmp	r2, #57	; 0x39
 8006e30:	d107      	bne.n	8006e42 <_dtoa_r+0x702>
 8006e32:	9a03      	ldr	r2, [sp, #12]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1f7      	bne.n	8006e28 <_dtoa_r+0x6e8>
 8006e38:	9903      	ldr	r1, [sp, #12]
 8006e3a:	2230      	movs	r2, #48	; 0x30
 8006e3c:	f108 0801 	add.w	r8, r8, #1
 8006e40:	700a      	strb	r2, [r1, #0]
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	3201      	adds	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e79e      	b.n	8006d88 <_dtoa_r+0x648>
 8006e4a:	46d0      	mov	r8, sl
 8006e4c:	e7eb      	b.n	8006e26 <_dtoa_r+0x6e6>
 8006e4e:	4b62      	ldr	r3, [pc, #392]	; (8006fd8 <_dtoa_r+0x898>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f7f9 fba9 	bl	80005a8 <__aeabi_dmul>
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	f7f9 fe0b 	bl	8000a78 <__aeabi_dcmpeq>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d09b      	beq.n	8006d9e <_dtoa_r+0x65e>
 8006e66:	e7cd      	b.n	8006e04 <_dtoa_r+0x6c4>
 8006e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	f000 80d0 	beq.w	8007010 <_dtoa_r+0x8d0>
 8006e70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e72:	2a01      	cmp	r2, #1
 8006e74:	f300 80b2 	bgt.w	8006fdc <_dtoa_r+0x89c>
 8006e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f000 80a6 	beq.w	8006fcc <_dtoa_r+0x88c>
 8006e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e86:	9f06      	ldr	r7, [sp, #24]
 8006e88:	9a06      	ldr	r2, [sp, #24]
 8006e8a:	441a      	add	r2, r3
 8006e8c:	9206      	str	r2, [sp, #24]
 8006e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e90:	2101      	movs	r1, #1
 8006e92:	441a      	add	r2, r3
 8006e94:	4628      	mov	r0, r5
 8006e96:	9209      	str	r2, [sp, #36]	; 0x24
 8006e98:	f000 ff24 	bl	8007ce4 <__i2b>
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	dd0c      	ble.n	8006ebc <_dtoa_r+0x77c>
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd09      	ble.n	8006ebc <_dtoa_r+0x77c>
 8006ea8:	42bb      	cmp	r3, r7
 8006eaa:	9a06      	ldr	r2, [sp, #24]
 8006eac:	bfa8      	it	ge
 8006eae:	463b      	movge	r3, r7
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	9206      	str	r2, [sp, #24]
 8006eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb6:	1aff      	subs	r7, r7, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	9309      	str	r3, [sp, #36]	; 0x24
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	b1f3      	cbz	r3, 8006efe <_dtoa_r+0x7be>
 8006ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80a8 	beq.w	8007018 <_dtoa_r+0x8d8>
 8006ec8:	2c00      	cmp	r4, #0
 8006eca:	dd10      	ble.n	8006eee <_dtoa_r+0x7ae>
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 ffc5 	bl	8007e60 <__pow5mult>
 8006ed6:	465a      	mov	r2, fp
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4606      	mov	r6, r0
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 ff17 	bl	8007d10 <__multiply>
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 fdfc 	bl	8007ae4 <_Bfree>
 8006eec:	46c3      	mov	fp, r8
 8006eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef0:	1b1a      	subs	r2, r3, r4
 8006ef2:	d004      	beq.n	8006efe <_dtoa_r+0x7be>
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 ffb2 	bl	8007e60 <__pow5mult>
 8006efc:	4683      	mov	fp, r0
 8006efe:	2101      	movs	r1, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	f000 feef 	bl	8007ce4 <__i2b>
 8006f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f340 8086 	ble.w	800701c <_dtoa_r+0x8dc>
 8006f10:	461a      	mov	r2, r3
 8006f12:	4601      	mov	r1, r0
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 ffa3 	bl	8007e60 <__pow5mult>
 8006f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	4604      	mov	r4, r0
 8006f20:	dd7f      	ble.n	8007022 <_dtoa_r+0x8e2>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f2c:	6918      	ldr	r0, [r3, #16]
 8006f2e:	f000 fe8b 	bl	8007c48 <__hi0bits>
 8006f32:	f1c0 0020 	rsb	r0, r0, #32
 8006f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f38:	4418      	add	r0, r3
 8006f3a:	f010 001f 	ands.w	r0, r0, #31
 8006f3e:	f000 8092 	beq.w	8007066 <_dtoa_r+0x926>
 8006f42:	f1c0 0320 	rsb	r3, r0, #32
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	f340 808a 	ble.w	8007060 <_dtoa_r+0x920>
 8006f4c:	f1c0 001c 	rsb	r0, r0, #28
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	4403      	add	r3, r0
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	4403      	add	r3, r0
 8006f5a:	4407      	add	r7, r0
 8006f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dd05      	ble.n	8006f70 <_dtoa_r+0x830>
 8006f64:	4659      	mov	r1, fp
 8006f66:	461a      	mov	r2, r3
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 ffd3 	bl	8007f14 <__lshift>
 8006f6e:	4683      	mov	fp, r0
 8006f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd05      	ble.n	8006f82 <_dtoa_r+0x842>
 8006f76:	4621      	mov	r1, r4
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 ffca 	bl	8007f14 <__lshift>
 8006f80:	4604      	mov	r4, r0
 8006f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d070      	beq.n	800706a <_dtoa_r+0x92a>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f001 f832 	bl	8007ff4 <__mcmp>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	da6a      	bge.n	800706a <_dtoa_r+0x92a>
 8006f94:	2300      	movs	r3, #0
 8006f96:	4659      	mov	r1, fp
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 fdc4 	bl	8007b28 <__multadd>
 8006fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fa6:	4683      	mov	fp, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8194 	beq.w	80072d6 <_dtoa_r+0xb96>
 8006fae:	4631      	mov	r1, r6
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 fdb7 	bl	8007b28 <__multadd>
 8006fba:	f1b9 0f00 	cmp.w	r9, #0
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	f300 8093 	bgt.w	80070ea <_dtoa_r+0x9aa>
 8006fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	dc57      	bgt.n	800707a <_dtoa_r+0x93a>
 8006fca:	e08e      	b.n	80070ea <_dtoa_r+0x9aa>
 8006fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fd2:	e757      	b.n	8006e84 <_dtoa_r+0x744>
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	9b08      	ldr	r3, [sp, #32]
 8006fde:	1e5c      	subs	r4, r3, #1
 8006fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	bfbf      	itttt	lt
 8006fe6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006fe8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006fea:	1ae2      	sublt	r2, r4, r3
 8006fec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006fee:	bfb6      	itet	lt
 8006ff0:	189b      	addlt	r3, r3, r2
 8006ff2:	1b1c      	subge	r4, r3, r4
 8006ff4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ff6:	9b08      	ldr	r3, [sp, #32]
 8006ff8:	bfb8      	it	lt
 8006ffa:	2400      	movlt	r4, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfb9      	ittee	lt
 8007000:	9b06      	ldrlt	r3, [sp, #24]
 8007002:	9a08      	ldrlt	r2, [sp, #32]
 8007004:	9f06      	ldrge	r7, [sp, #24]
 8007006:	9b08      	ldrge	r3, [sp, #32]
 8007008:	bfbc      	itt	lt
 800700a:	1a9f      	sublt	r7, r3, r2
 800700c:	2300      	movlt	r3, #0
 800700e:	e73b      	b.n	8006e88 <_dtoa_r+0x748>
 8007010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007012:	9f06      	ldr	r7, [sp, #24]
 8007014:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007016:	e742      	b.n	8006e9e <_dtoa_r+0x75e>
 8007018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701a:	e76b      	b.n	8006ef4 <_dtoa_r+0x7b4>
 800701c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800701e:	2b01      	cmp	r3, #1
 8007020:	dc19      	bgt.n	8007056 <_dtoa_r+0x916>
 8007022:	9b04      	ldr	r3, [sp, #16]
 8007024:	b9bb      	cbnz	r3, 8007056 <_dtoa_r+0x916>
 8007026:	9b05      	ldr	r3, [sp, #20]
 8007028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800702c:	b99b      	cbnz	r3, 8007056 <_dtoa_r+0x916>
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007034:	0d1b      	lsrs	r3, r3, #20
 8007036:	051b      	lsls	r3, r3, #20
 8007038:	b183      	cbz	r3, 800705c <_dtoa_r+0x91c>
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	3301      	adds	r3, #1
 800703e:	9306      	str	r3, [sp, #24]
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	3301      	adds	r3, #1
 8007044:	9309      	str	r3, [sp, #36]	; 0x24
 8007046:	f04f 0801 	mov.w	r8, #1
 800704a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f af6a 	bne.w	8006f26 <_dtoa_r+0x7e6>
 8007052:	2001      	movs	r0, #1
 8007054:	e76f      	b.n	8006f36 <_dtoa_r+0x7f6>
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	e7f6      	b.n	800704a <_dtoa_r+0x90a>
 800705c:	4698      	mov	r8, r3
 800705e:	e7f4      	b.n	800704a <_dtoa_r+0x90a>
 8007060:	f43f af7d 	beq.w	8006f5e <_dtoa_r+0x81e>
 8007064:	4618      	mov	r0, r3
 8007066:	301c      	adds	r0, #28
 8007068:	e772      	b.n	8006f50 <_dtoa_r+0x810>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dc36      	bgt.n	80070de <_dtoa_r+0x99e>
 8007070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007072:	2b02      	cmp	r3, #2
 8007074:	dd33      	ble.n	80070de <_dtoa_r+0x99e>
 8007076:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707a:	f1b9 0f00 	cmp.w	r9, #0
 800707e:	d10d      	bne.n	800709c <_dtoa_r+0x95c>
 8007080:	4621      	mov	r1, r4
 8007082:	464b      	mov	r3, r9
 8007084:	2205      	movs	r2, #5
 8007086:	4628      	mov	r0, r5
 8007088:	f000 fd4e 	bl	8007b28 <__multadd>
 800708c:	4601      	mov	r1, r0
 800708e:	4604      	mov	r4, r0
 8007090:	4658      	mov	r0, fp
 8007092:	f000 ffaf 	bl	8007ff4 <__mcmp>
 8007096:	2800      	cmp	r0, #0
 8007098:	f73f adb8 	bgt.w	8006c0c <_dtoa_r+0x4cc>
 800709c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800709e:	9f03      	ldr	r7, [sp, #12]
 80070a0:	ea6f 0a03 	mvn.w	sl, r3
 80070a4:	f04f 0800 	mov.w	r8, #0
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fd1a 	bl	8007ae4 <_Bfree>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	f43f aea7 	beq.w	8006e04 <_dtoa_r+0x6c4>
 80070b6:	f1b8 0f00 	cmp.w	r8, #0
 80070ba:	d005      	beq.n	80070c8 <_dtoa_r+0x988>
 80070bc:	45b0      	cmp	r8, r6
 80070be:	d003      	beq.n	80070c8 <_dtoa_r+0x988>
 80070c0:	4641      	mov	r1, r8
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 fd0e 	bl	8007ae4 <_Bfree>
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 fd0a 	bl	8007ae4 <_Bfree>
 80070d0:	e698      	b.n	8006e04 <_dtoa_r+0x6c4>
 80070d2:	2400      	movs	r4, #0
 80070d4:	4626      	mov	r6, r4
 80070d6:	e7e1      	b.n	800709c <_dtoa_r+0x95c>
 80070d8:	46c2      	mov	sl, r8
 80070da:	4626      	mov	r6, r4
 80070dc:	e596      	b.n	8006c0c <_dtoa_r+0x4cc>
 80070de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80fd 	beq.w	80072e4 <_dtoa_r+0xba4>
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	dd05      	ble.n	80070fa <_dtoa_r+0x9ba>
 80070ee:	4631      	mov	r1, r6
 80070f0:	463a      	mov	r2, r7
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 ff0e 	bl	8007f14 <__lshift>
 80070f8:	4606      	mov	r6, r0
 80070fa:	f1b8 0f00 	cmp.w	r8, #0
 80070fe:	d05c      	beq.n	80071ba <_dtoa_r+0xa7a>
 8007100:	6871      	ldr	r1, [r6, #4]
 8007102:	4628      	mov	r0, r5
 8007104:	f000 fcae 	bl	8007a64 <_Balloc>
 8007108:	4607      	mov	r7, r0
 800710a:	b928      	cbnz	r0, 8007118 <_dtoa_r+0x9d8>
 800710c:	4b80      	ldr	r3, [pc, #512]	; (8007310 <_dtoa_r+0xbd0>)
 800710e:	4602      	mov	r2, r0
 8007110:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007114:	f7ff bb28 	b.w	8006768 <_dtoa_r+0x28>
 8007118:	6932      	ldr	r2, [r6, #16]
 800711a:	3202      	adds	r2, #2
 800711c:	0092      	lsls	r2, r2, #2
 800711e:	f106 010c 	add.w	r1, r6, #12
 8007122:	300c      	adds	r0, #12
 8007124:	f000 fc90 	bl	8007a48 <memcpy>
 8007128:	2201      	movs	r2, #1
 800712a:	4639      	mov	r1, r7
 800712c:	4628      	mov	r0, r5
 800712e:	f000 fef1 	bl	8007f14 <__lshift>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	444b      	add	r3, r9
 800713c:	930a      	str	r3, [sp, #40]	; 0x28
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	46b0      	mov	r8, r6
 8007146:	9309      	str	r3, [sp, #36]	; 0x24
 8007148:	4606      	mov	r6, r0
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	4621      	mov	r1, r4
 800714e:	3b01      	subs	r3, #1
 8007150:	4658      	mov	r0, fp
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	f7ff fa6a 	bl	800662c <quorem>
 8007158:	4603      	mov	r3, r0
 800715a:	3330      	adds	r3, #48	; 0x30
 800715c:	9006      	str	r0, [sp, #24]
 800715e:	4641      	mov	r1, r8
 8007160:	4658      	mov	r0, fp
 8007162:	930b      	str	r3, [sp, #44]	; 0x2c
 8007164:	f000 ff46 	bl	8007ff4 <__mcmp>
 8007168:	4632      	mov	r2, r6
 800716a:	4681      	mov	r9, r0
 800716c:	4621      	mov	r1, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 ff5c 	bl	800802c <__mdiff>
 8007174:	68c2      	ldr	r2, [r0, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007178:	4607      	mov	r7, r0
 800717a:	bb02      	cbnz	r2, 80071be <_dtoa_r+0xa7e>
 800717c:	4601      	mov	r1, r0
 800717e:	4658      	mov	r0, fp
 8007180:	f000 ff38 	bl	8007ff4 <__mcmp>
 8007184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007186:	4602      	mov	r2, r0
 8007188:	4639      	mov	r1, r7
 800718a:	4628      	mov	r0, r5
 800718c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007190:	f000 fca8 	bl	8007ae4 <_Bfree>
 8007194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007198:	9f08      	ldr	r7, [sp, #32]
 800719a:	ea43 0102 	orr.w	r1, r3, r2
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	430b      	orrs	r3, r1
 80071a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a4:	d10d      	bne.n	80071c2 <_dtoa_r+0xa82>
 80071a6:	2b39      	cmp	r3, #57	; 0x39
 80071a8:	d029      	beq.n	80071fe <_dtoa_r+0xabe>
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	dd01      	ble.n	80071b4 <_dtoa_r+0xa74>
 80071b0:	9b06      	ldr	r3, [sp, #24]
 80071b2:	3331      	adds	r3, #49	; 0x31
 80071b4:	9a04      	ldr	r2, [sp, #16]
 80071b6:	7013      	strb	r3, [r2, #0]
 80071b8:	e776      	b.n	80070a8 <_dtoa_r+0x968>
 80071ba:	4630      	mov	r0, r6
 80071bc:	e7b9      	b.n	8007132 <_dtoa_r+0x9f2>
 80071be:	2201      	movs	r2, #1
 80071c0:	e7e2      	b.n	8007188 <_dtoa_r+0xa48>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	db06      	blt.n	80071d6 <_dtoa_r+0xa96>
 80071c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80071ca:	ea41 0909 	orr.w	r9, r1, r9
 80071ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d0:	ea59 0101 	orrs.w	r1, r9, r1
 80071d4:	d120      	bne.n	8007218 <_dtoa_r+0xad8>
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	ddec      	ble.n	80071b4 <_dtoa_r+0xa74>
 80071da:	4659      	mov	r1, fp
 80071dc:	2201      	movs	r2, #1
 80071de:	4628      	mov	r0, r5
 80071e0:	9308      	str	r3, [sp, #32]
 80071e2:	f000 fe97 	bl	8007f14 <__lshift>
 80071e6:	4621      	mov	r1, r4
 80071e8:	4683      	mov	fp, r0
 80071ea:	f000 ff03 	bl	8007ff4 <__mcmp>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	dc02      	bgt.n	80071fa <_dtoa_r+0xaba>
 80071f4:	d1de      	bne.n	80071b4 <_dtoa_r+0xa74>
 80071f6:	07da      	lsls	r2, r3, #31
 80071f8:	d5dc      	bpl.n	80071b4 <_dtoa_r+0xa74>
 80071fa:	2b39      	cmp	r3, #57	; 0x39
 80071fc:	d1d8      	bne.n	80071b0 <_dtoa_r+0xa70>
 80071fe:	9a04      	ldr	r2, [sp, #16]
 8007200:	2339      	movs	r3, #57	; 0x39
 8007202:	7013      	strb	r3, [r2, #0]
 8007204:	463b      	mov	r3, r7
 8007206:	461f      	mov	r7, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800720e:	2a39      	cmp	r2, #57	; 0x39
 8007210:	d050      	beq.n	80072b4 <_dtoa_r+0xb74>
 8007212:	3201      	adds	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	e747      	b.n	80070a8 <_dtoa_r+0x968>
 8007218:	2a00      	cmp	r2, #0
 800721a:	dd03      	ble.n	8007224 <_dtoa_r+0xae4>
 800721c:	2b39      	cmp	r3, #57	; 0x39
 800721e:	d0ee      	beq.n	80071fe <_dtoa_r+0xabe>
 8007220:	3301      	adds	r3, #1
 8007222:	e7c7      	b.n	80071b4 <_dtoa_r+0xa74>
 8007224:	9a08      	ldr	r2, [sp, #32]
 8007226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007228:	f802 3c01 	strb.w	r3, [r2, #-1]
 800722c:	428a      	cmp	r2, r1
 800722e:	d02a      	beq.n	8007286 <_dtoa_r+0xb46>
 8007230:	4659      	mov	r1, fp
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fc76 	bl	8007b28 <__multadd>
 800723c:	45b0      	cmp	r8, r6
 800723e:	4683      	mov	fp, r0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	f04f 020a 	mov.w	r2, #10
 8007248:	4641      	mov	r1, r8
 800724a:	4628      	mov	r0, r5
 800724c:	d107      	bne.n	800725e <_dtoa_r+0xb1e>
 800724e:	f000 fc6b 	bl	8007b28 <__multadd>
 8007252:	4680      	mov	r8, r0
 8007254:	4606      	mov	r6, r0
 8007256:	9b08      	ldr	r3, [sp, #32]
 8007258:	3301      	adds	r3, #1
 800725a:	9308      	str	r3, [sp, #32]
 800725c:	e775      	b.n	800714a <_dtoa_r+0xa0a>
 800725e:	f000 fc63 	bl	8007b28 <__multadd>
 8007262:	4631      	mov	r1, r6
 8007264:	4680      	mov	r8, r0
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4628      	mov	r0, r5
 800726c:	f000 fc5c 	bl	8007b28 <__multadd>
 8007270:	4606      	mov	r6, r0
 8007272:	e7f0      	b.n	8007256 <_dtoa_r+0xb16>
 8007274:	f1b9 0f00 	cmp.w	r9, #0
 8007278:	9a03      	ldr	r2, [sp, #12]
 800727a:	bfcc      	ite	gt
 800727c:	464f      	movgt	r7, r9
 800727e:	2701      	movle	r7, #1
 8007280:	4417      	add	r7, r2
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	4659      	mov	r1, fp
 8007288:	2201      	movs	r2, #1
 800728a:	4628      	mov	r0, r5
 800728c:	9308      	str	r3, [sp, #32]
 800728e:	f000 fe41 	bl	8007f14 <__lshift>
 8007292:	4621      	mov	r1, r4
 8007294:	4683      	mov	fp, r0
 8007296:	f000 fead 	bl	8007ff4 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	dcb2      	bgt.n	8007204 <_dtoa_r+0xac4>
 800729e:	d102      	bne.n	80072a6 <_dtoa_r+0xb66>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d4ae      	bmi.n	8007204 <_dtoa_r+0xac4>
 80072a6:	463b      	mov	r3, r7
 80072a8:	461f      	mov	r7, r3
 80072aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ae:	2a30      	cmp	r2, #48	; 0x30
 80072b0:	d0fa      	beq.n	80072a8 <_dtoa_r+0xb68>
 80072b2:	e6f9      	b.n	80070a8 <_dtoa_r+0x968>
 80072b4:	9a03      	ldr	r2, [sp, #12]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d1a5      	bne.n	8007206 <_dtoa_r+0xac6>
 80072ba:	f10a 0a01 	add.w	sl, sl, #1
 80072be:	2331      	movs	r3, #49	; 0x31
 80072c0:	e779      	b.n	80071b6 <_dtoa_r+0xa76>
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <_dtoa_r+0xbd4>)
 80072c4:	f7ff baa7 	b.w	8006816 <_dtoa_r+0xd6>
 80072c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f47f aa80 	bne.w	80067d0 <_dtoa_r+0x90>
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <_dtoa_r+0xbd8>)
 80072d2:	f7ff baa0 	b.w	8006816 <_dtoa_r+0xd6>
 80072d6:	f1b9 0f00 	cmp.w	r9, #0
 80072da:	dc03      	bgt.n	80072e4 <_dtoa_r+0xba4>
 80072dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072de:	2b02      	cmp	r3, #2
 80072e0:	f73f aecb 	bgt.w	800707a <_dtoa_r+0x93a>
 80072e4:	9f03      	ldr	r7, [sp, #12]
 80072e6:	4621      	mov	r1, r4
 80072e8:	4658      	mov	r0, fp
 80072ea:	f7ff f99f 	bl	800662c <quorem>
 80072ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072f2:	f807 3b01 	strb.w	r3, [r7], #1
 80072f6:	9a03      	ldr	r2, [sp, #12]
 80072f8:	1aba      	subs	r2, r7, r2
 80072fa:	4591      	cmp	r9, r2
 80072fc:	ddba      	ble.n	8007274 <_dtoa_r+0xb34>
 80072fe:	4659      	mov	r1, fp
 8007300:	2300      	movs	r3, #0
 8007302:	220a      	movs	r2, #10
 8007304:	4628      	mov	r0, r5
 8007306:	f000 fc0f 	bl	8007b28 <__multadd>
 800730a:	4683      	mov	fp, r0
 800730c:	e7eb      	b.n	80072e6 <_dtoa_r+0xba6>
 800730e:	bf00      	nop
 8007310:	08009ec0 	.word	0x08009ec0
 8007314:	0800a0b9 	.word	0x0800a0b9
 8007318:	08009e41 	.word	0x08009e41

0800731c <rshift>:
 800731c:	6903      	ldr	r3, [r0, #16]
 800731e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007326:	ea4f 1261 	mov.w	r2, r1, asr #5
 800732a:	f100 0414 	add.w	r4, r0, #20
 800732e:	dd45      	ble.n	80073bc <rshift+0xa0>
 8007330:	f011 011f 	ands.w	r1, r1, #31
 8007334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800733c:	d10c      	bne.n	8007358 <rshift+0x3c>
 800733e:	f100 0710 	add.w	r7, r0, #16
 8007342:	4629      	mov	r1, r5
 8007344:	42b1      	cmp	r1, r6
 8007346:	d334      	bcc.n	80073b2 <rshift+0x96>
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	1eea      	subs	r2, r5, #3
 800734e:	4296      	cmp	r6, r2
 8007350:	bf38      	it	cc
 8007352:	2300      	movcc	r3, #0
 8007354:	4423      	add	r3, r4
 8007356:	e015      	b.n	8007384 <rshift+0x68>
 8007358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800735c:	f1c1 0820 	rsb	r8, r1, #32
 8007360:	40cf      	lsrs	r7, r1
 8007362:	f105 0e04 	add.w	lr, r5, #4
 8007366:	46a1      	mov	r9, r4
 8007368:	4576      	cmp	r6, lr
 800736a:	46f4      	mov	ip, lr
 800736c:	d815      	bhi.n	800739a <rshift+0x7e>
 800736e:	1a9a      	subs	r2, r3, r2
 8007370:	0092      	lsls	r2, r2, #2
 8007372:	3a04      	subs	r2, #4
 8007374:	3501      	adds	r5, #1
 8007376:	42ae      	cmp	r6, r5
 8007378:	bf38      	it	cc
 800737a:	2200      	movcc	r2, #0
 800737c:	18a3      	adds	r3, r4, r2
 800737e:	50a7      	str	r7, [r4, r2]
 8007380:	b107      	cbz	r7, 8007384 <rshift+0x68>
 8007382:	3304      	adds	r3, #4
 8007384:	1b1a      	subs	r2, r3, r4
 8007386:	42a3      	cmp	r3, r4
 8007388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800738c:	bf08      	it	eq
 800738e:	2300      	moveq	r3, #0
 8007390:	6102      	str	r2, [r0, #16]
 8007392:	bf08      	it	eq
 8007394:	6143      	streq	r3, [r0, #20]
 8007396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800739a:	f8dc c000 	ldr.w	ip, [ip]
 800739e:	fa0c fc08 	lsl.w	ip, ip, r8
 80073a2:	ea4c 0707 	orr.w	r7, ip, r7
 80073a6:	f849 7b04 	str.w	r7, [r9], #4
 80073aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073ae:	40cf      	lsrs	r7, r1
 80073b0:	e7da      	b.n	8007368 <rshift+0x4c>
 80073b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80073b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80073ba:	e7c3      	b.n	8007344 <rshift+0x28>
 80073bc:	4623      	mov	r3, r4
 80073be:	e7e1      	b.n	8007384 <rshift+0x68>

080073c0 <__hexdig_fun>:
 80073c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d802      	bhi.n	80073ce <__hexdig_fun+0xe>
 80073c8:	3820      	subs	r0, #32
 80073ca:	b2c0      	uxtb	r0, r0
 80073cc:	4770      	bx	lr
 80073ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80073d2:	2b05      	cmp	r3, #5
 80073d4:	d801      	bhi.n	80073da <__hexdig_fun+0x1a>
 80073d6:	3847      	subs	r0, #71	; 0x47
 80073d8:	e7f7      	b.n	80073ca <__hexdig_fun+0xa>
 80073da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d801      	bhi.n	80073e6 <__hexdig_fun+0x26>
 80073e2:	3827      	subs	r0, #39	; 0x27
 80073e4:	e7f1      	b.n	80073ca <__hexdig_fun+0xa>
 80073e6:	2000      	movs	r0, #0
 80073e8:	4770      	bx	lr
	...

080073ec <__gethex>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	b08b      	sub	sp, #44	; 0x2c
 80073f2:	468b      	mov	fp, r1
 80073f4:	9305      	str	r3, [sp, #20]
 80073f6:	4bb2      	ldr	r3, [pc, #712]	; (80076c0 <__gethex+0x2d4>)
 80073f8:	9002      	str	r0, [sp, #8]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	4618      	mov	r0, r3
 8007400:	4690      	mov	r8, r2
 8007402:	f7f8 febd 	bl	8000180 <strlen>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	f8db 2000 	ldr.w	r2, [fp]
 800740c:	4403      	add	r3, r0
 800740e:	4682      	mov	sl, r0
 8007410:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	1c93      	adds	r3, r2, #2
 8007418:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800741c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007420:	32fe      	adds	r2, #254	; 0xfe
 8007422:	18d1      	adds	r1, r2, r3
 8007424:	461f      	mov	r7, r3
 8007426:	f813 0b01 	ldrb.w	r0, [r3], #1
 800742a:	9101      	str	r1, [sp, #4]
 800742c:	2830      	cmp	r0, #48	; 0x30
 800742e:	d0f8      	beq.n	8007422 <__gethex+0x36>
 8007430:	f7ff ffc6 	bl	80073c0 <__hexdig_fun>
 8007434:	4604      	mov	r4, r0
 8007436:	2800      	cmp	r0, #0
 8007438:	d13a      	bne.n	80074b0 <__gethex+0xc4>
 800743a:	9903      	ldr	r1, [sp, #12]
 800743c:	4652      	mov	r2, sl
 800743e:	4638      	mov	r0, r7
 8007440:	f001 fd96 	bl	8008f70 <strncmp>
 8007444:	4605      	mov	r5, r0
 8007446:	2800      	cmp	r0, #0
 8007448:	d166      	bne.n	8007518 <__gethex+0x12c>
 800744a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800744e:	eb07 060a 	add.w	r6, r7, sl
 8007452:	f7ff ffb5 	bl	80073c0 <__hexdig_fun>
 8007456:	2800      	cmp	r0, #0
 8007458:	d060      	beq.n	800751c <__gethex+0x130>
 800745a:	4633      	mov	r3, r6
 800745c:	7818      	ldrb	r0, [r3, #0]
 800745e:	2830      	cmp	r0, #48	; 0x30
 8007460:	461f      	mov	r7, r3
 8007462:	f103 0301 	add.w	r3, r3, #1
 8007466:	d0f9      	beq.n	800745c <__gethex+0x70>
 8007468:	f7ff ffaa 	bl	80073c0 <__hexdig_fun>
 800746c:	2301      	movs	r3, #1
 800746e:	fab0 f480 	clz	r4, r0
 8007472:	0964      	lsrs	r4, r4, #5
 8007474:	4635      	mov	r5, r6
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	463a      	mov	r2, r7
 800747a:	4616      	mov	r6, r2
 800747c:	3201      	adds	r2, #1
 800747e:	7830      	ldrb	r0, [r6, #0]
 8007480:	f7ff ff9e 	bl	80073c0 <__hexdig_fun>
 8007484:	2800      	cmp	r0, #0
 8007486:	d1f8      	bne.n	800747a <__gethex+0x8e>
 8007488:	9903      	ldr	r1, [sp, #12]
 800748a:	4652      	mov	r2, sl
 800748c:	4630      	mov	r0, r6
 800748e:	f001 fd6f 	bl	8008f70 <strncmp>
 8007492:	b980      	cbnz	r0, 80074b6 <__gethex+0xca>
 8007494:	b94d      	cbnz	r5, 80074aa <__gethex+0xbe>
 8007496:	eb06 050a 	add.w	r5, r6, sl
 800749a:	462a      	mov	r2, r5
 800749c:	4616      	mov	r6, r2
 800749e:	3201      	adds	r2, #1
 80074a0:	7830      	ldrb	r0, [r6, #0]
 80074a2:	f7ff ff8d 	bl	80073c0 <__hexdig_fun>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1f8      	bne.n	800749c <__gethex+0xb0>
 80074aa:	1bad      	subs	r5, r5, r6
 80074ac:	00ad      	lsls	r5, r5, #2
 80074ae:	e004      	b.n	80074ba <__gethex+0xce>
 80074b0:	2400      	movs	r4, #0
 80074b2:	4625      	mov	r5, r4
 80074b4:	e7e0      	b.n	8007478 <__gethex+0x8c>
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	d1f7      	bne.n	80074aa <__gethex+0xbe>
 80074ba:	7833      	ldrb	r3, [r6, #0]
 80074bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074c0:	2b50      	cmp	r3, #80	; 0x50
 80074c2:	d139      	bne.n	8007538 <__gethex+0x14c>
 80074c4:	7873      	ldrb	r3, [r6, #1]
 80074c6:	2b2b      	cmp	r3, #43	; 0x2b
 80074c8:	d02a      	beq.n	8007520 <__gethex+0x134>
 80074ca:	2b2d      	cmp	r3, #45	; 0x2d
 80074cc:	d02c      	beq.n	8007528 <__gethex+0x13c>
 80074ce:	1c71      	adds	r1, r6, #1
 80074d0:	f04f 0900 	mov.w	r9, #0
 80074d4:	7808      	ldrb	r0, [r1, #0]
 80074d6:	f7ff ff73 	bl	80073c0 <__hexdig_fun>
 80074da:	1e43      	subs	r3, r0, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b18      	cmp	r3, #24
 80074e0:	d82a      	bhi.n	8007538 <__gethex+0x14c>
 80074e2:	f1a0 0210 	sub.w	r2, r0, #16
 80074e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074ea:	f7ff ff69 	bl	80073c0 <__hexdig_fun>
 80074ee:	1e43      	subs	r3, r0, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b18      	cmp	r3, #24
 80074f4:	d91b      	bls.n	800752e <__gethex+0x142>
 80074f6:	f1b9 0f00 	cmp.w	r9, #0
 80074fa:	d000      	beq.n	80074fe <__gethex+0x112>
 80074fc:	4252      	negs	r2, r2
 80074fe:	4415      	add	r5, r2
 8007500:	f8cb 1000 	str.w	r1, [fp]
 8007504:	b1d4      	cbz	r4, 800753c <__gethex+0x150>
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	bf14      	ite	ne
 800750c:	2700      	movne	r7, #0
 800750e:	2706      	moveq	r7, #6
 8007510:	4638      	mov	r0, r7
 8007512:	b00b      	add	sp, #44	; 0x2c
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007518:	463e      	mov	r6, r7
 800751a:	4625      	mov	r5, r4
 800751c:	2401      	movs	r4, #1
 800751e:	e7cc      	b.n	80074ba <__gethex+0xce>
 8007520:	f04f 0900 	mov.w	r9, #0
 8007524:	1cb1      	adds	r1, r6, #2
 8007526:	e7d5      	b.n	80074d4 <__gethex+0xe8>
 8007528:	f04f 0901 	mov.w	r9, #1
 800752c:	e7fa      	b.n	8007524 <__gethex+0x138>
 800752e:	230a      	movs	r3, #10
 8007530:	fb03 0202 	mla	r2, r3, r2, r0
 8007534:	3a10      	subs	r2, #16
 8007536:	e7d6      	b.n	80074e6 <__gethex+0xfa>
 8007538:	4631      	mov	r1, r6
 800753a:	e7e1      	b.n	8007500 <__gethex+0x114>
 800753c:	1bf3      	subs	r3, r6, r7
 800753e:	3b01      	subs	r3, #1
 8007540:	4621      	mov	r1, r4
 8007542:	2b07      	cmp	r3, #7
 8007544:	dc0a      	bgt.n	800755c <__gethex+0x170>
 8007546:	9802      	ldr	r0, [sp, #8]
 8007548:	f000 fa8c 	bl	8007a64 <_Balloc>
 800754c:	4604      	mov	r4, r0
 800754e:	b940      	cbnz	r0, 8007562 <__gethex+0x176>
 8007550:	4b5c      	ldr	r3, [pc, #368]	; (80076c4 <__gethex+0x2d8>)
 8007552:	4602      	mov	r2, r0
 8007554:	21de      	movs	r1, #222	; 0xde
 8007556:	485c      	ldr	r0, [pc, #368]	; (80076c8 <__gethex+0x2dc>)
 8007558:	f001 fdda 	bl	8009110 <__assert_func>
 800755c:	3101      	adds	r1, #1
 800755e:	105b      	asrs	r3, r3, #1
 8007560:	e7ef      	b.n	8007542 <__gethex+0x156>
 8007562:	f100 0914 	add.w	r9, r0, #20
 8007566:	f04f 0b00 	mov.w	fp, #0
 800756a:	f1ca 0301 	rsb	r3, sl, #1
 800756e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007572:	f8cd b004 	str.w	fp, [sp, #4]
 8007576:	9308      	str	r3, [sp, #32]
 8007578:	42b7      	cmp	r7, r6
 800757a:	d33f      	bcc.n	80075fc <__gethex+0x210>
 800757c:	9f04      	ldr	r7, [sp, #16]
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	f847 3b04 	str.w	r3, [r7], #4
 8007584:	eba7 0709 	sub.w	r7, r7, r9
 8007588:	10bf      	asrs	r7, r7, #2
 800758a:	6127      	str	r7, [r4, #16]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fb5b 	bl	8007c48 <__hi0bits>
 8007592:	017f      	lsls	r7, r7, #5
 8007594:	f8d8 6000 	ldr.w	r6, [r8]
 8007598:	1a3f      	subs	r7, r7, r0
 800759a:	42b7      	cmp	r7, r6
 800759c:	dd62      	ble.n	8007664 <__gethex+0x278>
 800759e:	1bbf      	subs	r7, r7, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	4620      	mov	r0, r4
 80075a4:	f000 fef1 	bl	800838a <__any_on>
 80075a8:	4682      	mov	sl, r0
 80075aa:	b1a8      	cbz	r0, 80075d8 <__gethex+0x1ec>
 80075ac:	1e7b      	subs	r3, r7, #1
 80075ae:	1159      	asrs	r1, r3, #5
 80075b0:	f003 021f 	and.w	r2, r3, #31
 80075b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075b8:	f04f 0a01 	mov.w	sl, #1
 80075bc:	fa0a f202 	lsl.w	r2, sl, r2
 80075c0:	420a      	tst	r2, r1
 80075c2:	d009      	beq.n	80075d8 <__gethex+0x1ec>
 80075c4:	4553      	cmp	r3, sl
 80075c6:	dd05      	ble.n	80075d4 <__gethex+0x1e8>
 80075c8:	1eb9      	subs	r1, r7, #2
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fedd 	bl	800838a <__any_on>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d144      	bne.n	800765e <__gethex+0x272>
 80075d4:	f04f 0a02 	mov.w	sl, #2
 80075d8:	4639      	mov	r1, r7
 80075da:	4620      	mov	r0, r4
 80075dc:	f7ff fe9e 	bl	800731c <rshift>
 80075e0:	443d      	add	r5, r7
 80075e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075e6:	42ab      	cmp	r3, r5
 80075e8:	da4a      	bge.n	8007680 <__gethex+0x294>
 80075ea:	9802      	ldr	r0, [sp, #8]
 80075ec:	4621      	mov	r1, r4
 80075ee:	f000 fa79 	bl	8007ae4 <_Bfree>
 80075f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075f4:	2300      	movs	r3, #0
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	27a3      	movs	r7, #163	; 0xa3
 80075fa:	e789      	b.n	8007510 <__gethex+0x124>
 80075fc:	1e73      	subs	r3, r6, #1
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	9307      	str	r3, [sp, #28]
 8007602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007606:	4293      	cmp	r3, r2
 8007608:	d019      	beq.n	800763e <__gethex+0x252>
 800760a:	f1bb 0f20 	cmp.w	fp, #32
 800760e:	d107      	bne.n	8007620 <__gethex+0x234>
 8007610:	9b04      	ldr	r3, [sp, #16]
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	f843 2b04 	str.w	r2, [r3], #4
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	469b      	mov	fp, r3
 8007620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007624:	f7ff fecc 	bl	80073c0 <__hexdig_fun>
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	f000 000f 	and.w	r0, r0, #15
 800762e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007632:	4303      	orrs	r3, r0
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	f10b 0b04 	add.w	fp, fp, #4
 800763a:	9b07      	ldr	r3, [sp, #28]
 800763c:	e00d      	b.n	800765a <__gethex+0x26e>
 800763e:	9a08      	ldr	r2, [sp, #32]
 8007640:	1e73      	subs	r3, r6, #1
 8007642:	4413      	add	r3, r2
 8007644:	42bb      	cmp	r3, r7
 8007646:	d3e0      	bcc.n	800760a <__gethex+0x21e>
 8007648:	4618      	mov	r0, r3
 800764a:	9903      	ldr	r1, [sp, #12]
 800764c:	9309      	str	r3, [sp, #36]	; 0x24
 800764e:	4652      	mov	r2, sl
 8007650:	f001 fc8e 	bl	8008f70 <strncmp>
 8007654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007656:	2800      	cmp	r0, #0
 8007658:	d1d7      	bne.n	800760a <__gethex+0x21e>
 800765a:	461e      	mov	r6, r3
 800765c:	e78c      	b.n	8007578 <__gethex+0x18c>
 800765e:	f04f 0a03 	mov.w	sl, #3
 8007662:	e7b9      	b.n	80075d8 <__gethex+0x1ec>
 8007664:	da09      	bge.n	800767a <__gethex+0x28e>
 8007666:	1bf7      	subs	r7, r6, r7
 8007668:	4621      	mov	r1, r4
 800766a:	9802      	ldr	r0, [sp, #8]
 800766c:	463a      	mov	r2, r7
 800766e:	f000 fc51 	bl	8007f14 <__lshift>
 8007672:	1bed      	subs	r5, r5, r7
 8007674:	4604      	mov	r4, r0
 8007676:	f100 0914 	add.w	r9, r0, #20
 800767a:	f04f 0a00 	mov.w	sl, #0
 800767e:	e7b0      	b.n	80075e2 <__gethex+0x1f6>
 8007680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007684:	42a8      	cmp	r0, r5
 8007686:	dd71      	ble.n	800776c <__gethex+0x380>
 8007688:	1b45      	subs	r5, r0, r5
 800768a:	42ae      	cmp	r6, r5
 800768c:	dc35      	bgt.n	80076fa <__gethex+0x30e>
 800768e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d029      	beq.n	80076ea <__gethex+0x2fe>
 8007696:	2b03      	cmp	r3, #3
 8007698:	d02b      	beq.n	80076f2 <__gethex+0x306>
 800769a:	2b01      	cmp	r3, #1
 800769c:	d11c      	bne.n	80076d8 <__gethex+0x2ec>
 800769e:	42ae      	cmp	r6, r5
 80076a0:	d11a      	bne.n	80076d8 <__gethex+0x2ec>
 80076a2:	2e01      	cmp	r6, #1
 80076a4:	d112      	bne.n	80076cc <__gethex+0x2e0>
 80076a6:	9a05      	ldr	r2, [sp, #20]
 80076a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	2301      	movs	r3, #1
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	f8c9 3000 	str.w	r3, [r9]
 80076b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076b8:	2762      	movs	r7, #98	; 0x62
 80076ba:	601c      	str	r4, [r3, #0]
 80076bc:	e728      	b.n	8007510 <__gethex+0x124>
 80076be:	bf00      	nop
 80076c0:	08009f38 	.word	0x08009f38
 80076c4:	08009ec0 	.word	0x08009ec0
 80076c8:	08009ed1 	.word	0x08009ed1
 80076cc:	1e71      	subs	r1, r6, #1
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fe5b 	bl	800838a <__any_on>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d1e6      	bne.n	80076a6 <__gethex+0x2ba>
 80076d8:	9802      	ldr	r0, [sp, #8]
 80076da:	4621      	mov	r1, r4
 80076dc:	f000 fa02 	bl	8007ae4 <_Bfree>
 80076e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e2:	2300      	movs	r3, #0
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	2750      	movs	r7, #80	; 0x50
 80076e8:	e712      	b.n	8007510 <__gethex+0x124>
 80076ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f3      	bne.n	80076d8 <__gethex+0x2ec>
 80076f0:	e7d9      	b.n	80076a6 <__gethex+0x2ba>
 80076f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1d6      	bne.n	80076a6 <__gethex+0x2ba>
 80076f8:	e7ee      	b.n	80076d8 <__gethex+0x2ec>
 80076fa:	1e6f      	subs	r7, r5, #1
 80076fc:	f1ba 0f00 	cmp.w	sl, #0
 8007700:	d131      	bne.n	8007766 <__gethex+0x37a>
 8007702:	b127      	cbz	r7, 800770e <__gethex+0x322>
 8007704:	4639      	mov	r1, r7
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fe3f 	bl	800838a <__any_on>
 800770c:	4682      	mov	sl, r0
 800770e:	117b      	asrs	r3, r7, #5
 8007710:	2101      	movs	r1, #1
 8007712:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007716:	f007 071f 	and.w	r7, r7, #31
 800771a:	fa01 f707 	lsl.w	r7, r1, r7
 800771e:	421f      	tst	r7, r3
 8007720:	4629      	mov	r1, r5
 8007722:	4620      	mov	r0, r4
 8007724:	bf18      	it	ne
 8007726:	f04a 0a02 	orrne.w	sl, sl, #2
 800772a:	1b76      	subs	r6, r6, r5
 800772c:	f7ff fdf6 	bl	800731c <rshift>
 8007730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007734:	2702      	movs	r7, #2
 8007736:	f1ba 0f00 	cmp.w	sl, #0
 800773a:	d048      	beq.n	80077ce <__gethex+0x3e2>
 800773c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d015      	beq.n	8007770 <__gethex+0x384>
 8007744:	2b03      	cmp	r3, #3
 8007746:	d017      	beq.n	8007778 <__gethex+0x38c>
 8007748:	2b01      	cmp	r3, #1
 800774a:	d109      	bne.n	8007760 <__gethex+0x374>
 800774c:	f01a 0f02 	tst.w	sl, #2
 8007750:	d006      	beq.n	8007760 <__gethex+0x374>
 8007752:	f8d9 0000 	ldr.w	r0, [r9]
 8007756:	ea4a 0a00 	orr.w	sl, sl, r0
 800775a:	f01a 0f01 	tst.w	sl, #1
 800775e:	d10e      	bne.n	800777e <__gethex+0x392>
 8007760:	f047 0710 	orr.w	r7, r7, #16
 8007764:	e033      	b.n	80077ce <__gethex+0x3e2>
 8007766:	f04f 0a01 	mov.w	sl, #1
 800776a:	e7d0      	b.n	800770e <__gethex+0x322>
 800776c:	2701      	movs	r7, #1
 800776e:	e7e2      	b.n	8007736 <__gethex+0x34a>
 8007770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007772:	f1c3 0301 	rsb	r3, r3, #1
 8007776:	9315      	str	r3, [sp, #84]	; 0x54
 8007778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0f0      	beq.n	8007760 <__gethex+0x374>
 800777e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007782:	f104 0314 	add.w	r3, r4, #20
 8007786:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800778a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800778e:	f04f 0c00 	mov.w	ip, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f853 2b04 	ldr.w	r2, [r3], #4
 8007798:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800779c:	d01c      	beq.n	80077d8 <__gethex+0x3ec>
 800779e:	3201      	adds	r2, #1
 80077a0:	6002      	str	r2, [r0, #0]
 80077a2:	2f02      	cmp	r7, #2
 80077a4:	f104 0314 	add.w	r3, r4, #20
 80077a8:	d13d      	bne.n	8007826 <__gethex+0x43a>
 80077aa:	f8d8 2000 	ldr.w	r2, [r8]
 80077ae:	3a01      	subs	r2, #1
 80077b0:	42b2      	cmp	r2, r6
 80077b2:	d10a      	bne.n	80077ca <__gethex+0x3de>
 80077b4:	1171      	asrs	r1, r6, #5
 80077b6:	2201      	movs	r2, #1
 80077b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077bc:	f006 061f 	and.w	r6, r6, #31
 80077c0:	fa02 f606 	lsl.w	r6, r2, r6
 80077c4:	421e      	tst	r6, r3
 80077c6:	bf18      	it	ne
 80077c8:	4617      	movne	r7, r2
 80077ca:	f047 0720 	orr.w	r7, r7, #32
 80077ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d0:	601c      	str	r4, [r3, #0]
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	601d      	str	r5, [r3, #0]
 80077d6:	e69b      	b.n	8007510 <__gethex+0x124>
 80077d8:	4299      	cmp	r1, r3
 80077da:	f843 cc04 	str.w	ip, [r3, #-4]
 80077de:	d8d8      	bhi.n	8007792 <__gethex+0x3a6>
 80077e0:	68a3      	ldr	r3, [r4, #8]
 80077e2:	459b      	cmp	fp, r3
 80077e4:	db17      	blt.n	8007816 <__gethex+0x42a>
 80077e6:	6861      	ldr	r1, [r4, #4]
 80077e8:	9802      	ldr	r0, [sp, #8]
 80077ea:	3101      	adds	r1, #1
 80077ec:	f000 f93a 	bl	8007a64 <_Balloc>
 80077f0:	4681      	mov	r9, r0
 80077f2:	b918      	cbnz	r0, 80077fc <__gethex+0x410>
 80077f4:	4b1a      	ldr	r3, [pc, #104]	; (8007860 <__gethex+0x474>)
 80077f6:	4602      	mov	r2, r0
 80077f8:	2184      	movs	r1, #132	; 0x84
 80077fa:	e6ac      	b.n	8007556 <__gethex+0x16a>
 80077fc:	6922      	ldr	r2, [r4, #16]
 80077fe:	3202      	adds	r2, #2
 8007800:	f104 010c 	add.w	r1, r4, #12
 8007804:	0092      	lsls	r2, r2, #2
 8007806:	300c      	adds	r0, #12
 8007808:	f000 f91e 	bl	8007a48 <memcpy>
 800780c:	4621      	mov	r1, r4
 800780e:	9802      	ldr	r0, [sp, #8]
 8007810:	f000 f968 	bl	8007ae4 <_Bfree>
 8007814:	464c      	mov	r4, r9
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800781e:	6122      	str	r2, [r4, #16]
 8007820:	2201      	movs	r2, #1
 8007822:	615a      	str	r2, [r3, #20]
 8007824:	e7bd      	b.n	80077a2 <__gethex+0x3b6>
 8007826:	6922      	ldr	r2, [r4, #16]
 8007828:	455a      	cmp	r2, fp
 800782a:	dd0b      	ble.n	8007844 <__gethex+0x458>
 800782c:	2101      	movs	r1, #1
 800782e:	4620      	mov	r0, r4
 8007830:	f7ff fd74 	bl	800731c <rshift>
 8007834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007838:	3501      	adds	r5, #1
 800783a:	42ab      	cmp	r3, r5
 800783c:	f6ff aed5 	blt.w	80075ea <__gethex+0x1fe>
 8007840:	2701      	movs	r7, #1
 8007842:	e7c2      	b.n	80077ca <__gethex+0x3de>
 8007844:	f016 061f 	ands.w	r6, r6, #31
 8007848:	d0fa      	beq.n	8007840 <__gethex+0x454>
 800784a:	4453      	add	r3, sl
 800784c:	f1c6 0620 	rsb	r6, r6, #32
 8007850:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007854:	f000 f9f8 	bl	8007c48 <__hi0bits>
 8007858:	42b0      	cmp	r0, r6
 800785a:	dbe7      	blt.n	800782c <__gethex+0x440>
 800785c:	e7f0      	b.n	8007840 <__gethex+0x454>
 800785e:	bf00      	nop
 8007860:	08009ec0 	.word	0x08009ec0

08007864 <L_shift>:
 8007864:	f1c2 0208 	rsb	r2, r2, #8
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	f1c2 0620 	rsb	r6, r2, #32
 8007870:	6843      	ldr	r3, [r0, #4]
 8007872:	6804      	ldr	r4, [r0, #0]
 8007874:	fa03 f506 	lsl.w	r5, r3, r6
 8007878:	432c      	orrs	r4, r5
 800787a:	40d3      	lsrs	r3, r2
 800787c:	6004      	str	r4, [r0, #0]
 800787e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007882:	4288      	cmp	r0, r1
 8007884:	d3f4      	bcc.n	8007870 <L_shift+0xc>
 8007886:	bd70      	pop	{r4, r5, r6, pc}

08007888 <__match>:
 8007888:	b530      	push	{r4, r5, lr}
 800788a:	6803      	ldr	r3, [r0, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007892:	b914      	cbnz	r4, 800789a <__match+0x12>
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	2001      	movs	r0, #1
 8007898:	bd30      	pop	{r4, r5, pc}
 800789a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078a2:	2d19      	cmp	r5, #25
 80078a4:	bf98      	it	ls
 80078a6:	3220      	addls	r2, #32
 80078a8:	42a2      	cmp	r2, r4
 80078aa:	d0f0      	beq.n	800788e <__match+0x6>
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7f3      	b.n	8007898 <__match+0x10>

080078b0 <__hexnan>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	680b      	ldr	r3, [r1, #0]
 80078b6:	115e      	asrs	r6, r3, #5
 80078b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078bc:	f013 031f 	ands.w	r3, r3, #31
 80078c0:	b087      	sub	sp, #28
 80078c2:	bf18      	it	ne
 80078c4:	3604      	addne	r6, #4
 80078c6:	2500      	movs	r5, #0
 80078c8:	1f37      	subs	r7, r6, #4
 80078ca:	4690      	mov	r8, r2
 80078cc:	6802      	ldr	r2, [r0, #0]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	4682      	mov	sl, r0
 80078d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80078d6:	46b9      	mov	r9, r7
 80078d8:	463c      	mov	r4, r7
 80078da:	9502      	str	r5, [sp, #8]
 80078dc:	46ab      	mov	fp, r5
 80078de:	7851      	ldrb	r1, [r2, #1]
 80078e0:	1c53      	adds	r3, r2, #1
 80078e2:	9303      	str	r3, [sp, #12]
 80078e4:	b341      	cbz	r1, 8007938 <__hexnan+0x88>
 80078e6:	4608      	mov	r0, r1
 80078e8:	9205      	str	r2, [sp, #20]
 80078ea:	9104      	str	r1, [sp, #16]
 80078ec:	f7ff fd68 	bl	80073c0 <__hexdig_fun>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d14f      	bne.n	8007994 <__hexnan+0xe4>
 80078f4:	9904      	ldr	r1, [sp, #16]
 80078f6:	9a05      	ldr	r2, [sp, #20]
 80078f8:	2920      	cmp	r1, #32
 80078fa:	d818      	bhi.n	800792e <__hexnan+0x7e>
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	459b      	cmp	fp, r3
 8007900:	dd13      	ble.n	800792a <__hexnan+0x7a>
 8007902:	454c      	cmp	r4, r9
 8007904:	d206      	bcs.n	8007914 <__hexnan+0x64>
 8007906:	2d07      	cmp	r5, #7
 8007908:	dc04      	bgt.n	8007914 <__hexnan+0x64>
 800790a:	462a      	mov	r2, r5
 800790c:	4649      	mov	r1, r9
 800790e:	4620      	mov	r0, r4
 8007910:	f7ff ffa8 	bl	8007864 <L_shift>
 8007914:	4544      	cmp	r4, r8
 8007916:	d950      	bls.n	80079ba <__hexnan+0x10a>
 8007918:	2300      	movs	r3, #0
 800791a:	f1a4 0904 	sub.w	r9, r4, #4
 800791e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007922:	f8cd b008 	str.w	fp, [sp, #8]
 8007926:	464c      	mov	r4, r9
 8007928:	461d      	mov	r5, r3
 800792a:	9a03      	ldr	r2, [sp, #12]
 800792c:	e7d7      	b.n	80078de <__hexnan+0x2e>
 800792e:	2929      	cmp	r1, #41	; 0x29
 8007930:	d156      	bne.n	80079e0 <__hexnan+0x130>
 8007932:	3202      	adds	r2, #2
 8007934:	f8ca 2000 	str.w	r2, [sl]
 8007938:	f1bb 0f00 	cmp.w	fp, #0
 800793c:	d050      	beq.n	80079e0 <__hexnan+0x130>
 800793e:	454c      	cmp	r4, r9
 8007940:	d206      	bcs.n	8007950 <__hexnan+0xa0>
 8007942:	2d07      	cmp	r5, #7
 8007944:	dc04      	bgt.n	8007950 <__hexnan+0xa0>
 8007946:	462a      	mov	r2, r5
 8007948:	4649      	mov	r1, r9
 800794a:	4620      	mov	r0, r4
 800794c:	f7ff ff8a 	bl	8007864 <L_shift>
 8007950:	4544      	cmp	r4, r8
 8007952:	d934      	bls.n	80079be <__hexnan+0x10e>
 8007954:	f1a8 0204 	sub.w	r2, r8, #4
 8007958:	4623      	mov	r3, r4
 800795a:	f853 1b04 	ldr.w	r1, [r3], #4
 800795e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007962:	429f      	cmp	r7, r3
 8007964:	d2f9      	bcs.n	800795a <__hexnan+0xaa>
 8007966:	1b3b      	subs	r3, r7, r4
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	3304      	adds	r3, #4
 800796e:	3401      	adds	r4, #1
 8007970:	3e03      	subs	r6, #3
 8007972:	42b4      	cmp	r4, r6
 8007974:	bf88      	it	hi
 8007976:	2304      	movhi	r3, #4
 8007978:	4443      	add	r3, r8
 800797a:	2200      	movs	r2, #0
 800797c:	f843 2b04 	str.w	r2, [r3], #4
 8007980:	429f      	cmp	r7, r3
 8007982:	d2fb      	bcs.n	800797c <__hexnan+0xcc>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	b91b      	cbnz	r3, 8007990 <__hexnan+0xe0>
 8007988:	4547      	cmp	r7, r8
 800798a:	d127      	bne.n	80079dc <__hexnan+0x12c>
 800798c:	2301      	movs	r3, #1
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	2005      	movs	r0, #5
 8007992:	e026      	b.n	80079e2 <__hexnan+0x132>
 8007994:	3501      	adds	r5, #1
 8007996:	2d08      	cmp	r5, #8
 8007998:	f10b 0b01 	add.w	fp, fp, #1
 800799c:	dd06      	ble.n	80079ac <__hexnan+0xfc>
 800799e:	4544      	cmp	r4, r8
 80079a0:	d9c3      	bls.n	800792a <__hexnan+0x7a>
 80079a2:	2300      	movs	r3, #0
 80079a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80079a8:	2501      	movs	r5, #1
 80079aa:	3c04      	subs	r4, #4
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	f000 000f 	and.w	r0, r0, #15
 80079b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	e7b7      	b.n	800792a <__hexnan+0x7a>
 80079ba:	2508      	movs	r5, #8
 80079bc:	e7b5      	b.n	800792a <__hexnan+0x7a>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0df      	beq.n	8007984 <__hexnan+0xd4>
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079c8:	f1c3 0320 	rsb	r3, r3, #32
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079d4:	401a      	ands	r2, r3
 80079d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80079da:	e7d3      	b.n	8007984 <__hexnan+0xd4>
 80079dc:	3f04      	subs	r7, #4
 80079de:	e7d1      	b.n	8007984 <__hexnan+0xd4>
 80079e0:	2004      	movs	r0, #4
 80079e2:	b007      	add	sp, #28
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079e8 <_localeconv_r>:
 80079e8:	4800      	ldr	r0, [pc, #0]	; (80079ec <_localeconv_r+0x4>)
 80079ea:	4770      	bx	lr
 80079ec:	20000164 	.word	0x20000164

080079f0 <_lseek_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d07      	ldr	r5, [pc, #28]	; (8007a10 <_lseek_r+0x20>)
 80079f4:	4604      	mov	r4, r0
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	f7f9 fe15 	bl	800162e <_lseek>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_lseek_r+0x1e>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_lseek_r+0x1e>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200002e8 	.word	0x200002e8

08007a14 <malloc>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <malloc+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f000 bd55 	b.w	80084c8 <_malloc_r>
 8007a1e:	bf00      	nop
 8007a20:	2000000c 	.word	0x2000000c

08007a24 <__ascii_mbtowc>:
 8007a24:	b082      	sub	sp, #8
 8007a26:	b901      	cbnz	r1, 8007a2a <__ascii_mbtowc+0x6>
 8007a28:	a901      	add	r1, sp, #4
 8007a2a:	b142      	cbz	r2, 8007a3e <__ascii_mbtowc+0x1a>
 8007a2c:	b14b      	cbz	r3, 8007a42 <__ascii_mbtowc+0x1e>
 8007a2e:	7813      	ldrb	r3, [r2, #0]
 8007a30:	600b      	str	r3, [r1, #0]
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	1e10      	subs	r0, r2, #0
 8007a36:	bf18      	it	ne
 8007a38:	2001      	movne	r0, #1
 8007a3a:	b002      	add	sp, #8
 8007a3c:	4770      	bx	lr
 8007a3e:	4610      	mov	r0, r2
 8007a40:	e7fb      	b.n	8007a3a <__ascii_mbtowc+0x16>
 8007a42:	f06f 0001 	mvn.w	r0, #1
 8007a46:	e7f8      	b.n	8007a3a <__ascii_mbtowc+0x16>

08007a48 <memcpy>:
 8007a48:	440a      	add	r2, r1
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a50:	d100      	bne.n	8007a54 <memcpy+0xc>
 8007a52:	4770      	bx	lr
 8007a54:	b510      	push	{r4, lr}
 8007a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	d1f9      	bne.n	8007a56 <memcpy+0xe>
 8007a62:	bd10      	pop	{r4, pc}

08007a64 <_Balloc>:
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	b976      	cbnz	r6, 8007a8c <_Balloc+0x28>
 8007a6e:	2010      	movs	r0, #16
 8007a70:	f7ff ffd0 	bl	8007a14 <malloc>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6260      	str	r0, [r4, #36]	; 0x24
 8007a78:	b920      	cbnz	r0, 8007a84 <_Balloc+0x20>
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <_Balloc+0x78>)
 8007a7c:	4818      	ldr	r0, [pc, #96]	; (8007ae0 <_Balloc+0x7c>)
 8007a7e:	2166      	movs	r1, #102	; 0x66
 8007a80:	f001 fb46 	bl	8009110 <__assert_func>
 8007a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a88:	6006      	str	r6, [r0, #0]
 8007a8a:	60c6      	str	r6, [r0, #12]
 8007a8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a8e:	68f3      	ldr	r3, [r6, #12]
 8007a90:	b183      	cbz	r3, 8007ab4 <_Balloc+0x50>
 8007a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a9a:	b9b8      	cbnz	r0, 8007acc <_Balloc+0x68>
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007aa2:	1d72      	adds	r2, r6, #5
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fc90 	bl	80083cc <_calloc_r>
 8007aac:	b160      	cbz	r0, 8007ac8 <_Balloc+0x64>
 8007aae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ab2:	e00e      	b.n	8007ad2 <_Balloc+0x6e>
 8007ab4:	2221      	movs	r2, #33	; 0x21
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 fc87 	bl	80083cc <_calloc_r>
 8007abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac0:	60f0      	str	r0, [r6, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e4      	bne.n	8007a92 <_Balloc+0x2e>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	6802      	ldr	r2, [r0, #0]
 8007ace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad8:	e7f7      	b.n	8007aca <_Balloc+0x66>
 8007ada:	bf00      	nop
 8007adc:	08009e4e 	.word	0x08009e4e
 8007ae0:	08009f4c 	.word	0x08009f4c

08007ae4 <_Bfree>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b976      	cbnz	r6, 8007b0c <_Bfree+0x28>
 8007aee:	2010      	movs	r0, #16
 8007af0:	f7ff ff90 	bl	8007a14 <malloc>
 8007af4:	4602      	mov	r2, r0
 8007af6:	6268      	str	r0, [r5, #36]	; 0x24
 8007af8:	b920      	cbnz	r0, 8007b04 <_Bfree+0x20>
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <_Bfree+0x3c>)
 8007afc:	4809      	ldr	r0, [pc, #36]	; (8007b24 <_Bfree+0x40>)
 8007afe:	218a      	movs	r1, #138	; 0x8a
 8007b00:	f001 fb06 	bl	8009110 <__assert_func>
 8007b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b08:	6006      	str	r6, [r0, #0]
 8007b0a:	60c6      	str	r6, [r0, #12]
 8007b0c:	b13c      	cbz	r4, 8007b1e <_Bfree+0x3a>
 8007b0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b10:	6862      	ldr	r2, [r4, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b18:	6021      	str	r1, [r4, #0]
 8007b1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	08009e4e 	.word	0x08009e4e
 8007b24:	08009f4c 	.word	0x08009f4c

08007b28 <__multadd>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	690d      	ldr	r5, [r1, #16]
 8007b2e:	4607      	mov	r7, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461e      	mov	r6, r3
 8007b34:	f101 0c14 	add.w	ip, r1, #20
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b3e:	b299      	uxth	r1, r3
 8007b40:	fb02 6101 	mla	r1, r2, r1, r6
 8007b44:	0c1e      	lsrs	r6, r3, #16
 8007b46:	0c0b      	lsrs	r3, r1, #16
 8007b48:	fb02 3306 	mla	r3, r2, r6, r3
 8007b4c:	b289      	uxth	r1, r1
 8007b4e:	3001      	adds	r0, #1
 8007b50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b54:	4285      	cmp	r5, r0
 8007b56:	f84c 1b04 	str.w	r1, [ip], #4
 8007b5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b5e:	dcec      	bgt.n	8007b3a <__multadd+0x12>
 8007b60:	b30e      	cbz	r6, 8007ba6 <__multadd+0x7e>
 8007b62:	68a3      	ldr	r3, [r4, #8]
 8007b64:	42ab      	cmp	r3, r5
 8007b66:	dc19      	bgt.n	8007b9c <__multadd+0x74>
 8007b68:	6861      	ldr	r1, [r4, #4]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	3101      	adds	r1, #1
 8007b6e:	f7ff ff79 	bl	8007a64 <_Balloc>
 8007b72:	4680      	mov	r8, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__multadd+0x5a>
 8007b76:	4602      	mov	r2, r0
 8007b78:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <__multadd+0x84>)
 8007b7a:	480d      	ldr	r0, [pc, #52]	; (8007bb0 <__multadd+0x88>)
 8007b7c:	21b5      	movs	r1, #181	; 0xb5
 8007b7e:	f001 fac7 	bl	8009110 <__assert_func>
 8007b82:	6922      	ldr	r2, [r4, #16]
 8007b84:	3202      	adds	r2, #2
 8007b86:	f104 010c 	add.w	r1, r4, #12
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	f7ff ff5b 	bl	8007a48 <memcpy>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4638      	mov	r0, r7
 8007b96:	f7ff ffa5 	bl	8007ae4 <_Bfree>
 8007b9a:	4644      	mov	r4, r8
 8007b9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	615e      	str	r6, [r3, #20]
 8007ba4:	6125      	str	r5, [r4, #16]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	08009ec0 	.word	0x08009ec0
 8007bb0:	08009f4c 	.word	0x08009f4c

08007bb4 <__s2b>:
 8007bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb8:	460c      	mov	r4, r1
 8007bba:	4615      	mov	r5, r2
 8007bbc:	461f      	mov	r7, r3
 8007bbe:	2209      	movs	r2, #9
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bc8:	2100      	movs	r1, #0
 8007bca:	2201      	movs	r2, #1
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	db09      	blt.n	8007be4 <__s2b+0x30>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff ff47 	bl	8007a64 <_Balloc>
 8007bd6:	b940      	cbnz	r0, 8007bea <__s2b+0x36>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b19      	ldr	r3, [pc, #100]	; (8007c40 <__s2b+0x8c>)
 8007bdc:	4819      	ldr	r0, [pc, #100]	; (8007c44 <__s2b+0x90>)
 8007bde:	21ce      	movs	r1, #206	; 0xce
 8007be0:	f001 fa96 	bl	8009110 <__assert_func>
 8007be4:	0052      	lsls	r2, r2, #1
 8007be6:	3101      	adds	r1, #1
 8007be8:	e7f0      	b.n	8007bcc <__s2b+0x18>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	6143      	str	r3, [r0, #20]
 8007bee:	2d09      	cmp	r5, #9
 8007bf0:	f04f 0301 	mov.w	r3, #1
 8007bf4:	6103      	str	r3, [r0, #16]
 8007bf6:	dd16      	ble.n	8007c26 <__s2b+0x72>
 8007bf8:	f104 0909 	add.w	r9, r4, #9
 8007bfc:	46c8      	mov	r8, r9
 8007bfe:	442c      	add	r4, r5
 8007c00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c04:	4601      	mov	r1, r0
 8007c06:	3b30      	subs	r3, #48	; 0x30
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ff8c 	bl	8007b28 <__multadd>
 8007c10:	45a0      	cmp	r8, r4
 8007c12:	d1f5      	bne.n	8007c00 <__s2b+0x4c>
 8007c14:	f1a5 0408 	sub.w	r4, r5, #8
 8007c18:	444c      	add	r4, r9
 8007c1a:	1b2d      	subs	r5, r5, r4
 8007c1c:	1963      	adds	r3, r4, r5
 8007c1e:	42bb      	cmp	r3, r7
 8007c20:	db04      	blt.n	8007c2c <__s2b+0x78>
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	340a      	adds	r4, #10
 8007c28:	2509      	movs	r5, #9
 8007c2a:	e7f6      	b.n	8007c1a <__s2b+0x66>
 8007c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c30:	4601      	mov	r1, r0
 8007c32:	3b30      	subs	r3, #48	; 0x30
 8007c34:	220a      	movs	r2, #10
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff ff76 	bl	8007b28 <__multadd>
 8007c3c:	e7ee      	b.n	8007c1c <__s2b+0x68>
 8007c3e:	bf00      	nop
 8007c40:	08009ec0 	.word	0x08009ec0
 8007c44:	08009f4c 	.word	0x08009f4c

08007c48 <__hi0bits>:
 8007c48:	0c02      	lsrs	r2, r0, #16
 8007c4a:	0412      	lsls	r2, r2, #16
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	b9ca      	cbnz	r2, 8007c84 <__hi0bits+0x3c>
 8007c50:	0403      	lsls	r3, r0, #16
 8007c52:	2010      	movs	r0, #16
 8007c54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c58:	bf04      	itt	eq
 8007c5a:	021b      	lsleq	r3, r3, #8
 8007c5c:	3008      	addeq	r0, #8
 8007c5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c62:	bf04      	itt	eq
 8007c64:	011b      	lsleq	r3, r3, #4
 8007c66:	3004      	addeq	r0, #4
 8007c68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c6c:	bf04      	itt	eq
 8007c6e:	009b      	lsleq	r3, r3, #2
 8007c70:	3002      	addeq	r0, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	db05      	blt.n	8007c82 <__hi0bits+0x3a>
 8007c76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c7a:	f100 0001 	add.w	r0, r0, #1
 8007c7e:	bf08      	it	eq
 8007c80:	2020      	moveq	r0, #32
 8007c82:	4770      	bx	lr
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7e5      	b.n	8007c54 <__hi0bits+0xc>

08007c88 <__lo0bits>:
 8007c88:	6803      	ldr	r3, [r0, #0]
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	f013 0007 	ands.w	r0, r3, #7
 8007c90:	d00b      	beq.n	8007caa <__lo0bits+0x22>
 8007c92:	07d9      	lsls	r1, r3, #31
 8007c94:	d421      	bmi.n	8007cda <__lo0bits+0x52>
 8007c96:	0798      	lsls	r0, r3, #30
 8007c98:	bf49      	itett	mi
 8007c9a:	085b      	lsrmi	r3, r3, #1
 8007c9c:	089b      	lsrpl	r3, r3, #2
 8007c9e:	2001      	movmi	r0, #1
 8007ca0:	6013      	strmi	r3, [r2, #0]
 8007ca2:	bf5c      	itt	pl
 8007ca4:	6013      	strpl	r3, [r2, #0]
 8007ca6:	2002      	movpl	r0, #2
 8007ca8:	4770      	bx	lr
 8007caa:	b299      	uxth	r1, r3
 8007cac:	b909      	cbnz	r1, 8007cb2 <__lo0bits+0x2a>
 8007cae:	0c1b      	lsrs	r3, r3, #16
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	b2d9      	uxtb	r1, r3
 8007cb4:	b909      	cbnz	r1, 8007cba <__lo0bits+0x32>
 8007cb6:	3008      	adds	r0, #8
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	0719      	lsls	r1, r3, #28
 8007cbc:	bf04      	itt	eq
 8007cbe:	091b      	lsreq	r3, r3, #4
 8007cc0:	3004      	addeq	r0, #4
 8007cc2:	0799      	lsls	r1, r3, #30
 8007cc4:	bf04      	itt	eq
 8007cc6:	089b      	lsreq	r3, r3, #2
 8007cc8:	3002      	addeq	r0, #2
 8007cca:	07d9      	lsls	r1, r3, #31
 8007ccc:	d403      	bmi.n	8007cd6 <__lo0bits+0x4e>
 8007cce:	085b      	lsrs	r3, r3, #1
 8007cd0:	f100 0001 	add.w	r0, r0, #1
 8007cd4:	d003      	beq.n	8007cde <__lo0bits+0x56>
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4770      	bx	lr
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4770      	bx	lr
 8007cde:	2020      	movs	r0, #32
 8007ce0:	4770      	bx	lr
	...

08007ce4 <__i2b>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	2101      	movs	r1, #1
 8007cea:	f7ff febb 	bl	8007a64 <_Balloc>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <__i2b+0x1a>
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <__i2b+0x24>)
 8007cf4:	4805      	ldr	r0, [pc, #20]	; (8007d0c <__i2b+0x28>)
 8007cf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cfa:	f001 fa09 	bl	8009110 <__assert_func>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	6144      	str	r4, [r0, #20]
 8007d02:	6103      	str	r3, [r0, #16]
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	bf00      	nop
 8007d08:	08009ec0 	.word	0x08009ec0
 8007d0c:	08009f4c 	.word	0x08009f4c

08007d10 <__multiply>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	4691      	mov	r9, r2
 8007d16:	690a      	ldr	r2, [r1, #16]
 8007d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	bfb8      	it	lt
 8007d20:	460b      	movlt	r3, r1
 8007d22:	460c      	mov	r4, r1
 8007d24:	bfbc      	itt	lt
 8007d26:	464c      	movlt	r4, r9
 8007d28:	4699      	movlt	r9, r3
 8007d2a:	6927      	ldr	r7, [r4, #16]
 8007d2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	6861      	ldr	r1, [r4, #4]
 8007d34:	eb07 060a 	add.w	r6, r7, sl
 8007d38:	42b3      	cmp	r3, r6
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	bfb8      	it	lt
 8007d3e:	3101      	addlt	r1, #1
 8007d40:	f7ff fe90 	bl	8007a64 <_Balloc>
 8007d44:	b930      	cbnz	r0, 8007d54 <__multiply+0x44>
 8007d46:	4602      	mov	r2, r0
 8007d48:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <__multiply+0x148>)
 8007d4a:	4844      	ldr	r0, [pc, #272]	; (8007e5c <__multiply+0x14c>)
 8007d4c:	f240 115d 	movw	r1, #349	; 0x15d
 8007d50:	f001 f9de 	bl	8009110 <__assert_func>
 8007d54:	f100 0514 	add.w	r5, r0, #20
 8007d58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4543      	cmp	r3, r8
 8007d62:	d321      	bcc.n	8007da8 <__multiply+0x98>
 8007d64:	f104 0314 	add.w	r3, r4, #20
 8007d68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d6c:	f109 0314 	add.w	r3, r9, #20
 8007d70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	1b3a      	subs	r2, r7, r4
 8007d78:	3a15      	subs	r2, #21
 8007d7a:	f022 0203 	bic.w	r2, r2, #3
 8007d7e:	3204      	adds	r2, #4
 8007d80:	f104 0115 	add.w	r1, r4, #21
 8007d84:	428f      	cmp	r7, r1
 8007d86:	bf38      	it	cc
 8007d88:	2204      	movcc	r2, #4
 8007d8a:	9201      	str	r2, [sp, #4]
 8007d8c:	9a02      	ldr	r2, [sp, #8]
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d80c      	bhi.n	8007dae <__multiply+0x9e>
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	dd03      	ble.n	8007da0 <__multiply+0x90>
 8007d98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d059      	beq.n	8007e54 <__multiply+0x144>
 8007da0:	6106      	str	r6, [r0, #16]
 8007da2:	b005      	add	sp, #20
 8007da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da8:	f843 2b04 	str.w	r2, [r3], #4
 8007dac:	e7d8      	b.n	8007d60 <__multiply+0x50>
 8007dae:	f8b3 a000 	ldrh.w	sl, [r3]
 8007db2:	f1ba 0f00 	cmp.w	sl, #0
 8007db6:	d023      	beq.n	8007e00 <__multiply+0xf0>
 8007db8:	f104 0e14 	add.w	lr, r4, #20
 8007dbc:	46a9      	mov	r9, r5
 8007dbe:	f04f 0c00 	mov.w	ip, #0
 8007dc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dc6:	f8d9 1000 	ldr.w	r1, [r9]
 8007dca:	fa1f fb82 	uxth.w	fp, r2
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007dd4:	4461      	add	r1, ip
 8007dd6:	f8d9 c000 	ldr.w	ip, [r9]
 8007dda:	0c12      	lsrs	r2, r2, #16
 8007ddc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007de0:	fb0a c202 	mla	r2, sl, r2, ip
 8007de4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007de8:	b289      	uxth	r1, r1
 8007dea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dee:	4577      	cmp	r7, lr
 8007df0:	f849 1b04 	str.w	r1, [r9], #4
 8007df4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007df8:	d8e3      	bhi.n	8007dc2 <__multiply+0xb2>
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	f845 c002 	str.w	ip, [r5, r2]
 8007e00:	9a03      	ldr	r2, [sp, #12]
 8007e02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e06:	3304      	adds	r3, #4
 8007e08:	f1b9 0f00 	cmp.w	r9, #0
 8007e0c:	d020      	beq.n	8007e50 <__multiply+0x140>
 8007e0e:	6829      	ldr	r1, [r5, #0]
 8007e10:	f104 0c14 	add.w	ip, r4, #20
 8007e14:	46ae      	mov	lr, r5
 8007e16:	f04f 0a00 	mov.w	sl, #0
 8007e1a:	f8bc b000 	ldrh.w	fp, [ip]
 8007e1e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e22:	fb09 220b 	mla	r2, r9, fp, r2
 8007e26:	4492      	add	sl, r2
 8007e28:	b289      	uxth	r1, r1
 8007e2a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e2e:	f84e 1b04 	str.w	r1, [lr], #4
 8007e32:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e36:	f8be 1000 	ldrh.w	r1, [lr]
 8007e3a:	0c12      	lsrs	r2, r2, #16
 8007e3c:	fb09 1102 	mla	r1, r9, r2, r1
 8007e40:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e44:	4567      	cmp	r7, ip
 8007e46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e4a:	d8e6      	bhi.n	8007e1a <__multiply+0x10a>
 8007e4c:	9a01      	ldr	r2, [sp, #4]
 8007e4e:	50a9      	str	r1, [r5, r2]
 8007e50:	3504      	adds	r5, #4
 8007e52:	e79b      	b.n	8007d8c <__multiply+0x7c>
 8007e54:	3e01      	subs	r6, #1
 8007e56:	e79d      	b.n	8007d94 <__multiply+0x84>
 8007e58:	08009ec0 	.word	0x08009ec0
 8007e5c:	08009f4c 	.word	0x08009f4c

08007e60 <__pow5mult>:
 8007e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e64:	4615      	mov	r5, r2
 8007e66:	f012 0203 	ands.w	r2, r2, #3
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	d007      	beq.n	8007e80 <__pow5mult+0x20>
 8007e70:	4c25      	ldr	r4, [pc, #148]	; (8007f08 <__pow5mult+0xa8>)
 8007e72:	3a01      	subs	r2, #1
 8007e74:	2300      	movs	r3, #0
 8007e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e7a:	f7ff fe55 	bl	8007b28 <__multadd>
 8007e7e:	4607      	mov	r7, r0
 8007e80:	10ad      	asrs	r5, r5, #2
 8007e82:	d03d      	beq.n	8007f00 <__pow5mult+0xa0>
 8007e84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e86:	b97c      	cbnz	r4, 8007ea8 <__pow5mult+0x48>
 8007e88:	2010      	movs	r0, #16
 8007e8a:	f7ff fdc3 	bl	8007a14 <malloc>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6270      	str	r0, [r6, #36]	; 0x24
 8007e92:	b928      	cbnz	r0, 8007ea0 <__pow5mult+0x40>
 8007e94:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <__pow5mult+0xac>)
 8007e96:	481e      	ldr	r0, [pc, #120]	; (8007f10 <__pow5mult+0xb0>)
 8007e98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e9c:	f001 f938 	bl	8009110 <__assert_func>
 8007ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ea4:	6004      	str	r4, [r0, #0]
 8007ea6:	60c4      	str	r4, [r0, #12]
 8007ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007eb0:	b94c      	cbnz	r4, 8007ec6 <__pow5mult+0x66>
 8007eb2:	f240 2171 	movw	r1, #625	; 0x271
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f7ff ff14 	bl	8007ce4 <__i2b>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	6003      	str	r3, [r0, #0]
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	07eb      	lsls	r3, r5, #31
 8007ecc:	d50a      	bpl.n	8007ee4 <__pow5mult+0x84>
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ff1c 	bl	8007d10 <__multiply>
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4680      	mov	r8, r0
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff fe01 	bl	8007ae4 <_Bfree>
 8007ee2:	4647      	mov	r7, r8
 8007ee4:	106d      	asrs	r5, r5, #1
 8007ee6:	d00b      	beq.n	8007f00 <__pow5mult+0xa0>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	b938      	cbnz	r0, 8007efc <__pow5mult+0x9c>
 8007eec:	4622      	mov	r2, r4
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff ff0d 	bl	8007d10 <__multiply>
 8007ef6:	6020      	str	r0, [r4, #0]
 8007ef8:	f8c0 9000 	str.w	r9, [r0]
 8007efc:	4604      	mov	r4, r0
 8007efe:	e7e4      	b.n	8007eca <__pow5mult+0x6a>
 8007f00:	4638      	mov	r0, r7
 8007f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f06:	bf00      	nop
 8007f08:	0800a098 	.word	0x0800a098
 8007f0c:	08009e4e 	.word	0x08009e4e
 8007f10:	08009f4c 	.word	0x08009f4c

08007f14 <__lshift>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	460c      	mov	r4, r1
 8007f1a:	6849      	ldr	r1, [r1, #4]
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f22:	68a3      	ldr	r3, [r4, #8]
 8007f24:	4607      	mov	r7, r0
 8007f26:	4691      	mov	r9, r2
 8007f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f2c:	f108 0601 	add.w	r6, r8, #1
 8007f30:	42b3      	cmp	r3, r6
 8007f32:	db0b      	blt.n	8007f4c <__lshift+0x38>
 8007f34:	4638      	mov	r0, r7
 8007f36:	f7ff fd95 	bl	8007a64 <_Balloc>
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	b948      	cbnz	r0, 8007f52 <__lshift+0x3e>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4b2a      	ldr	r3, [pc, #168]	; (8007fec <__lshift+0xd8>)
 8007f42:	482b      	ldr	r0, [pc, #172]	; (8007ff0 <__lshift+0xdc>)
 8007f44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f48:	f001 f8e2 	bl	8009110 <__assert_func>
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	e7ee      	b.n	8007f30 <__lshift+0x1c>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f100 0114 	add.w	r1, r0, #20
 8007f58:	f100 0210 	add.w	r2, r0, #16
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	4553      	cmp	r3, sl
 8007f60:	db37      	blt.n	8007fd2 <__lshift+0xbe>
 8007f62:	6920      	ldr	r0, [r4, #16]
 8007f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f68:	f104 0314 	add.w	r3, r4, #20
 8007f6c:	f019 091f 	ands.w	r9, r9, #31
 8007f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f78:	d02f      	beq.n	8007fda <__lshift+0xc6>
 8007f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f7e:	468a      	mov	sl, r1
 8007f80:	f04f 0c00 	mov.w	ip, #0
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	fa02 f209 	lsl.w	r2, r2, r9
 8007f8a:	ea42 020c 	orr.w	r2, r2, ip
 8007f8e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	4298      	cmp	r0, r3
 8007f98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f9c:	d8f2      	bhi.n	8007f84 <__lshift+0x70>
 8007f9e:	1b03      	subs	r3, r0, r4
 8007fa0:	3b15      	subs	r3, #21
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	f104 0215 	add.w	r2, r4, #21
 8007fac:	4290      	cmp	r0, r2
 8007fae:	bf38      	it	cc
 8007fb0:	2304      	movcc	r3, #4
 8007fb2:	f841 c003 	str.w	ip, [r1, r3]
 8007fb6:	f1bc 0f00 	cmp.w	ip, #0
 8007fba:	d001      	beq.n	8007fc0 <__lshift+0xac>
 8007fbc:	f108 0602 	add.w	r6, r8, #2
 8007fc0:	3e01      	subs	r6, #1
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	612e      	str	r6, [r5, #16]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f7ff fd8c 	bl	8007ae4 <_Bfree>
 8007fcc:	4628      	mov	r0, r5
 8007fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	e7c1      	b.n	8007f5e <__lshift+0x4a>
 8007fda:	3904      	subs	r1, #4
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fe4:	4298      	cmp	r0, r3
 8007fe6:	d8f9      	bhi.n	8007fdc <__lshift+0xc8>
 8007fe8:	e7ea      	b.n	8007fc0 <__lshift+0xac>
 8007fea:	bf00      	nop
 8007fec:	08009ec0 	.word	0x08009ec0
 8007ff0:	08009f4c 	.word	0x08009f4c

08007ff4 <__mcmp>:
 8007ff4:	690a      	ldr	r2, [r1, #16]
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6900      	ldr	r0, [r0, #16]
 8007ffa:	1a80      	subs	r0, r0, r2
 8007ffc:	b530      	push	{r4, r5, lr}
 8007ffe:	d10d      	bne.n	800801c <__mcmp+0x28>
 8008000:	3314      	adds	r3, #20
 8008002:	3114      	adds	r1, #20
 8008004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800800c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008014:	4295      	cmp	r5, r2
 8008016:	d002      	beq.n	800801e <__mcmp+0x2a>
 8008018:	d304      	bcc.n	8008024 <__mcmp+0x30>
 800801a:	2001      	movs	r0, #1
 800801c:	bd30      	pop	{r4, r5, pc}
 800801e:	42a3      	cmp	r3, r4
 8008020:	d3f4      	bcc.n	800800c <__mcmp+0x18>
 8008022:	e7fb      	b.n	800801c <__mcmp+0x28>
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008028:	e7f8      	b.n	800801c <__mcmp+0x28>
	...

0800802c <__mdiff>:
 800802c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	460d      	mov	r5, r1
 8008032:	4607      	mov	r7, r0
 8008034:	4611      	mov	r1, r2
 8008036:	4628      	mov	r0, r5
 8008038:	4614      	mov	r4, r2
 800803a:	f7ff ffdb 	bl	8007ff4 <__mcmp>
 800803e:	1e06      	subs	r6, r0, #0
 8008040:	d111      	bne.n	8008066 <__mdiff+0x3a>
 8008042:	4631      	mov	r1, r6
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fd0d 	bl	8007a64 <_Balloc>
 800804a:	4602      	mov	r2, r0
 800804c:	b928      	cbnz	r0, 800805a <__mdiff+0x2e>
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <__mdiff+0x108>)
 8008050:	f240 2132 	movw	r1, #562	; 0x232
 8008054:	4838      	ldr	r0, [pc, #224]	; (8008138 <__mdiff+0x10c>)
 8008056:	f001 f85b 	bl	8009110 <__assert_func>
 800805a:	2301      	movs	r3, #1
 800805c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008060:	4610      	mov	r0, r2
 8008062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	bfa4      	itt	ge
 8008068:	4623      	movge	r3, r4
 800806a:	462c      	movge	r4, r5
 800806c:	4638      	mov	r0, r7
 800806e:	6861      	ldr	r1, [r4, #4]
 8008070:	bfa6      	itte	ge
 8008072:	461d      	movge	r5, r3
 8008074:	2600      	movge	r6, #0
 8008076:	2601      	movlt	r6, #1
 8008078:	f7ff fcf4 	bl	8007a64 <_Balloc>
 800807c:	4602      	mov	r2, r0
 800807e:	b918      	cbnz	r0, 8008088 <__mdiff+0x5c>
 8008080:	4b2c      	ldr	r3, [pc, #176]	; (8008134 <__mdiff+0x108>)
 8008082:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008086:	e7e5      	b.n	8008054 <__mdiff+0x28>
 8008088:	6927      	ldr	r7, [r4, #16]
 800808a:	60c6      	str	r6, [r0, #12]
 800808c:	692e      	ldr	r6, [r5, #16]
 800808e:	f104 0014 	add.w	r0, r4, #20
 8008092:	f105 0914 	add.w	r9, r5, #20
 8008096:	f102 0e14 	add.w	lr, r2, #20
 800809a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800809e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080a2:	3410      	adds	r4, #16
 80080a4:	46f2      	mov	sl, lr
 80080a6:	2100      	movs	r1, #0
 80080a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80080ac:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80080b0:	fa1f f883 	uxth.w	r8, r3
 80080b4:	fa11 f18b 	uxtah	r1, r1, fp
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	eba1 0808 	sub.w	r8, r1, r8
 80080be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080c6:	fa1f f888 	uxth.w	r8, r8
 80080ca:	1419      	asrs	r1, r3, #16
 80080cc:	454e      	cmp	r6, r9
 80080ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080d2:	f84a 3b04 	str.w	r3, [sl], #4
 80080d6:	d8e7      	bhi.n	80080a8 <__mdiff+0x7c>
 80080d8:	1b73      	subs	r3, r6, r5
 80080da:	3b15      	subs	r3, #21
 80080dc:	f023 0303 	bic.w	r3, r3, #3
 80080e0:	3304      	adds	r3, #4
 80080e2:	3515      	adds	r5, #21
 80080e4:	42ae      	cmp	r6, r5
 80080e6:	bf38      	it	cc
 80080e8:	2304      	movcc	r3, #4
 80080ea:	4418      	add	r0, r3
 80080ec:	4473      	add	r3, lr
 80080ee:	469e      	mov	lr, r3
 80080f0:	4606      	mov	r6, r0
 80080f2:	4566      	cmp	r6, ip
 80080f4:	d30e      	bcc.n	8008114 <__mdiff+0xe8>
 80080f6:	f10c 0103 	add.w	r1, ip, #3
 80080fa:	1a09      	subs	r1, r1, r0
 80080fc:	f021 0103 	bic.w	r1, r1, #3
 8008100:	3803      	subs	r0, #3
 8008102:	4584      	cmp	ip, r0
 8008104:	bf38      	it	cc
 8008106:	2100      	movcc	r1, #0
 8008108:	4419      	add	r1, r3
 800810a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800810e:	b17b      	cbz	r3, 8008130 <__mdiff+0x104>
 8008110:	6117      	str	r7, [r2, #16]
 8008112:	e7a5      	b.n	8008060 <__mdiff+0x34>
 8008114:	f856 8b04 	ldr.w	r8, [r6], #4
 8008118:	fa11 f488 	uxtah	r4, r1, r8
 800811c:	1425      	asrs	r5, r4, #16
 800811e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008122:	b2a4      	uxth	r4, r4
 8008124:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008128:	f84e 4b04 	str.w	r4, [lr], #4
 800812c:	1429      	asrs	r1, r5, #16
 800812e:	e7e0      	b.n	80080f2 <__mdiff+0xc6>
 8008130:	3f01      	subs	r7, #1
 8008132:	e7ea      	b.n	800810a <__mdiff+0xde>
 8008134:	08009ec0 	.word	0x08009ec0
 8008138:	08009f4c 	.word	0x08009f4c

0800813c <__ulp>:
 800813c:	4b11      	ldr	r3, [pc, #68]	; (8008184 <__ulp+0x48>)
 800813e:	400b      	ands	r3, r1
 8008140:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008144:	2b00      	cmp	r3, #0
 8008146:	dd02      	ble.n	800814e <__ulp+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	4619      	mov	r1, r3
 800814c:	4770      	bx	lr
 800814e:	425b      	negs	r3, r3
 8008150:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008154:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008158:	f04f 0000 	mov.w	r0, #0
 800815c:	f04f 0100 	mov.w	r1, #0
 8008160:	da04      	bge.n	800816c <__ulp+0x30>
 8008162:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008166:	fa43 f102 	asr.w	r1, r3, r2
 800816a:	4770      	bx	lr
 800816c:	f1a2 0314 	sub.w	r3, r2, #20
 8008170:	2b1e      	cmp	r3, #30
 8008172:	bfda      	itte	le
 8008174:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008178:	fa22 f303 	lsrle.w	r3, r2, r3
 800817c:	2301      	movgt	r3, #1
 800817e:	4618      	mov	r0, r3
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	7ff00000 	.word	0x7ff00000

08008188 <__b2d>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	6907      	ldr	r7, [r0, #16]
 800818e:	f100 0914 	add.w	r9, r0, #20
 8008192:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008196:	f1a7 0804 	sub.w	r8, r7, #4
 800819a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff fd52 	bl	8007c48 <__hi0bits>
 80081a4:	f1c0 0320 	rsb	r3, r0, #32
 80081a8:	280a      	cmp	r0, #10
 80081aa:	600b      	str	r3, [r1, #0]
 80081ac:	491f      	ldr	r1, [pc, #124]	; (800822c <__b2d+0xa4>)
 80081ae:	dc17      	bgt.n	80081e0 <__b2d+0x58>
 80081b0:	f1c0 0c0b 	rsb	ip, r0, #11
 80081b4:	45c1      	cmp	r9, r8
 80081b6:	fa26 f30c 	lsr.w	r3, r6, ip
 80081ba:	bf38      	it	cc
 80081bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80081c0:	ea43 0501 	orr.w	r5, r3, r1
 80081c4:	bf28      	it	cs
 80081c6:	2200      	movcs	r2, #0
 80081c8:	f100 0315 	add.w	r3, r0, #21
 80081cc:	fa06 f303 	lsl.w	r3, r6, r3
 80081d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80081d4:	ea43 0402 	orr.w	r4, r3, r2
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e0:	45c1      	cmp	r9, r8
 80081e2:	bf3a      	itte	cc
 80081e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80081e8:	f1a7 0808 	subcc.w	r8, r7, #8
 80081ec:	2200      	movcs	r2, #0
 80081ee:	f1b0 030b 	subs.w	r3, r0, #11
 80081f2:	d016      	beq.n	8008222 <__b2d+0x9a>
 80081f4:	f1c3 0720 	rsb	r7, r3, #32
 80081f8:	fa22 f107 	lsr.w	r1, r2, r7
 80081fc:	45c8      	cmp	r8, r9
 80081fe:	fa06 f603 	lsl.w	r6, r6, r3
 8008202:	ea46 0601 	orr.w	r6, r6, r1
 8008206:	bf8c      	ite	hi
 8008208:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800820c:	2100      	movls	r1, #0
 800820e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008212:	fa02 f003 	lsl.w	r0, r2, r3
 8008216:	40f9      	lsrs	r1, r7
 8008218:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800821c:	ea40 0401 	orr.w	r4, r0, r1
 8008220:	e7da      	b.n	80081d8 <__b2d+0x50>
 8008222:	ea46 0501 	orr.w	r5, r6, r1
 8008226:	4614      	mov	r4, r2
 8008228:	e7d6      	b.n	80081d8 <__b2d+0x50>
 800822a:	bf00      	nop
 800822c:	3ff00000 	.word	0x3ff00000

08008230 <__d2b>:
 8008230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008234:	2101      	movs	r1, #1
 8008236:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800823a:	4690      	mov	r8, r2
 800823c:	461d      	mov	r5, r3
 800823e:	f7ff fc11 	bl	8007a64 <_Balloc>
 8008242:	4604      	mov	r4, r0
 8008244:	b930      	cbnz	r0, 8008254 <__d2b+0x24>
 8008246:	4602      	mov	r2, r0
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <__d2b+0xb0>)
 800824a:	4826      	ldr	r0, [pc, #152]	; (80082e4 <__d2b+0xb4>)
 800824c:	f240 310a 	movw	r1, #778	; 0x30a
 8008250:	f000 ff5e 	bl	8009110 <__assert_func>
 8008254:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008258:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800825c:	bb2d      	cbnz	r5, 80082aa <__d2b+0x7a>
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f1b8 0300 	subs.w	r3, r8, #0
 8008264:	d026      	beq.n	80082b4 <__d2b+0x84>
 8008266:	4668      	mov	r0, sp
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f7ff fd0d 	bl	8007c88 <__lo0bits>
 800826e:	9900      	ldr	r1, [sp, #0]
 8008270:	b1f0      	cbz	r0, 80082b0 <__d2b+0x80>
 8008272:	9a01      	ldr	r2, [sp, #4]
 8008274:	f1c0 0320 	rsb	r3, r0, #32
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	430b      	orrs	r3, r1
 800827e:	40c2      	lsrs	r2, r0
 8008280:	6163      	str	r3, [r4, #20]
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9b01      	ldr	r3, [sp, #4]
 8008286:	61a3      	str	r3, [r4, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf14      	ite	ne
 800828c:	2102      	movne	r1, #2
 800828e:	2101      	moveq	r1, #1
 8008290:	6121      	str	r1, [r4, #16]
 8008292:	b1c5      	cbz	r5, 80082c6 <__d2b+0x96>
 8008294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008298:	4405      	add	r5, r0
 800829a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800829e:	603d      	str	r5, [r7, #0]
 80082a0:	6030      	str	r0, [r6, #0]
 80082a2:	4620      	mov	r0, r4
 80082a4:	b002      	add	sp, #8
 80082a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ae:	e7d6      	b.n	800825e <__d2b+0x2e>
 80082b0:	6161      	str	r1, [r4, #20]
 80082b2:	e7e7      	b.n	8008284 <__d2b+0x54>
 80082b4:	a801      	add	r0, sp, #4
 80082b6:	f7ff fce7 	bl	8007c88 <__lo0bits>
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	6163      	str	r3, [r4, #20]
 80082be:	2101      	movs	r1, #1
 80082c0:	6121      	str	r1, [r4, #16]
 80082c2:	3020      	adds	r0, #32
 80082c4:	e7e5      	b.n	8008292 <__d2b+0x62>
 80082c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80082ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082ce:	6038      	str	r0, [r7, #0]
 80082d0:	6918      	ldr	r0, [r3, #16]
 80082d2:	f7ff fcb9 	bl	8007c48 <__hi0bits>
 80082d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80082da:	6031      	str	r1, [r6, #0]
 80082dc:	e7e1      	b.n	80082a2 <__d2b+0x72>
 80082de:	bf00      	nop
 80082e0:	08009ec0 	.word	0x08009ec0
 80082e4:	08009f4c 	.word	0x08009f4c

080082e8 <__ratio>:
 80082e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	4688      	mov	r8, r1
 80082ee:	4669      	mov	r1, sp
 80082f0:	4681      	mov	r9, r0
 80082f2:	f7ff ff49 	bl	8008188 <__b2d>
 80082f6:	460f      	mov	r7, r1
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	4640      	mov	r0, r8
 80082fe:	a901      	add	r1, sp, #4
 8008300:	f7ff ff42 	bl	8008188 <__b2d>
 8008304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008308:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800830c:	eba3 0c02 	sub.w	ip, r3, r2
 8008310:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfd5      	itete	le
 800831e:	460a      	movle	r2, r1
 8008320:	462a      	movgt	r2, r5
 8008322:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008326:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800832a:	468b      	mov	fp, r1
 800832c:	bfd8      	it	le
 800832e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008332:	465b      	mov	r3, fp
 8008334:	4602      	mov	r2, r0
 8008336:	4639      	mov	r1, r7
 8008338:	4620      	mov	r0, r4
 800833a:	f7f8 fa5f 	bl	80007fc <__aeabi_ddiv>
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008344 <__copybits>:
 8008344:	3901      	subs	r1, #1
 8008346:	b570      	push	{r4, r5, r6, lr}
 8008348:	1149      	asrs	r1, r1, #5
 800834a:	6914      	ldr	r4, [r2, #16]
 800834c:	3101      	adds	r1, #1
 800834e:	f102 0314 	add.w	r3, r2, #20
 8008352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800835a:	1f05      	subs	r5, r0, #4
 800835c:	42a3      	cmp	r3, r4
 800835e:	d30c      	bcc.n	800837a <__copybits+0x36>
 8008360:	1aa3      	subs	r3, r4, r2
 8008362:	3b11      	subs	r3, #17
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	3211      	adds	r2, #17
 800836a:	42a2      	cmp	r2, r4
 800836c:	bf88      	it	hi
 800836e:	2300      	movhi	r3, #0
 8008370:	4418      	add	r0, r3
 8008372:	2300      	movs	r3, #0
 8008374:	4288      	cmp	r0, r1
 8008376:	d305      	bcc.n	8008384 <__copybits+0x40>
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	f853 6b04 	ldr.w	r6, [r3], #4
 800837e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008382:	e7eb      	b.n	800835c <__copybits+0x18>
 8008384:	f840 3b04 	str.w	r3, [r0], #4
 8008388:	e7f4      	b.n	8008374 <__copybits+0x30>

0800838a <__any_on>:
 800838a:	f100 0214 	add.w	r2, r0, #20
 800838e:	6900      	ldr	r0, [r0, #16]
 8008390:	114b      	asrs	r3, r1, #5
 8008392:	4298      	cmp	r0, r3
 8008394:	b510      	push	{r4, lr}
 8008396:	db11      	blt.n	80083bc <__any_on+0x32>
 8008398:	dd0a      	ble.n	80083b0 <__any_on+0x26>
 800839a:	f011 011f 	ands.w	r1, r1, #31
 800839e:	d007      	beq.n	80083b0 <__any_on+0x26>
 80083a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083a4:	fa24 f001 	lsr.w	r0, r4, r1
 80083a8:	fa00 f101 	lsl.w	r1, r0, r1
 80083ac:	428c      	cmp	r4, r1
 80083ae:	d10b      	bne.n	80083c8 <__any_on+0x3e>
 80083b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d803      	bhi.n	80083c0 <__any_on+0x36>
 80083b8:	2000      	movs	r0, #0
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	4603      	mov	r3, r0
 80083be:	e7f7      	b.n	80083b0 <__any_on+0x26>
 80083c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0f5      	beq.n	80083b4 <__any_on+0x2a>
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7f6      	b.n	80083ba <__any_on+0x30>

080083cc <_calloc_r>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	fba1 5402 	umull	r5, r4, r1, r2
 80083d2:	b934      	cbnz	r4, 80083e2 <_calloc_r+0x16>
 80083d4:	4629      	mov	r1, r5
 80083d6:	f000 f877 	bl	80084c8 <_malloc_r>
 80083da:	4606      	mov	r6, r0
 80083dc:	b928      	cbnz	r0, 80083ea <_calloc_r+0x1e>
 80083de:	4630      	mov	r0, r6
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	220c      	movs	r2, #12
 80083e4:	6002      	str	r2, [r0, #0]
 80083e6:	2600      	movs	r6, #0
 80083e8:	e7f9      	b.n	80083de <_calloc_r+0x12>
 80083ea:	462a      	mov	r2, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7fc fb55 	bl	8004a9c <memset>
 80083f2:	e7f4      	b.n	80083de <_calloc_r+0x12>

080083f4 <_free_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4605      	mov	r5, r0
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d041      	beq.n	8008480 <_free_r+0x8c>
 80083fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008400:	1f0c      	subs	r4, r1, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfb8      	it	lt
 8008406:	18e4      	addlt	r4, r4, r3
 8008408:	f001 f882 	bl	8009510 <__malloc_lock>
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <_free_r+0x90>)
 800840e:	6813      	ldr	r3, [r2, #0]
 8008410:	b933      	cbnz	r3, 8008420 <_free_r+0x2c>
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	6014      	str	r4, [r2, #0]
 8008416:	4628      	mov	r0, r5
 8008418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800841c:	f001 b87e 	b.w	800951c <__malloc_unlock>
 8008420:	42a3      	cmp	r3, r4
 8008422:	d908      	bls.n	8008436 <_free_r+0x42>
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	1821      	adds	r1, r4, r0
 8008428:	428b      	cmp	r3, r1
 800842a:	bf01      	itttt	eq
 800842c:	6819      	ldreq	r1, [r3, #0]
 800842e:	685b      	ldreq	r3, [r3, #4]
 8008430:	1809      	addeq	r1, r1, r0
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	e7ed      	b.n	8008412 <_free_r+0x1e>
 8008436:	461a      	mov	r2, r3
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	b10b      	cbz	r3, 8008440 <_free_r+0x4c>
 800843c:	42a3      	cmp	r3, r4
 800843e:	d9fa      	bls.n	8008436 <_free_r+0x42>
 8008440:	6811      	ldr	r1, [r2, #0]
 8008442:	1850      	adds	r0, r2, r1
 8008444:	42a0      	cmp	r0, r4
 8008446:	d10b      	bne.n	8008460 <_free_r+0x6c>
 8008448:	6820      	ldr	r0, [r4, #0]
 800844a:	4401      	add	r1, r0
 800844c:	1850      	adds	r0, r2, r1
 800844e:	4283      	cmp	r3, r0
 8008450:	6011      	str	r1, [r2, #0]
 8008452:	d1e0      	bne.n	8008416 <_free_r+0x22>
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	6053      	str	r3, [r2, #4]
 800845a:	4401      	add	r1, r0
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	e7da      	b.n	8008416 <_free_r+0x22>
 8008460:	d902      	bls.n	8008468 <_free_r+0x74>
 8008462:	230c      	movs	r3, #12
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	e7d6      	b.n	8008416 <_free_r+0x22>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	bf04      	itt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	6063      	str	r3, [r4, #4]
 8008476:	bf04      	itt	eq
 8008478:	1809      	addeq	r1, r1, r0
 800847a:	6021      	streq	r1, [r4, #0]
 800847c:	6054      	str	r4, [r2, #4]
 800847e:	e7ca      	b.n	8008416 <_free_r+0x22>
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	200002e0 	.word	0x200002e0

08008488 <sbrk_aligned>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4e0e      	ldr	r6, [pc, #56]	; (80084c4 <sbrk_aligned+0x3c>)
 800848c:	460c      	mov	r4, r1
 800848e:	6831      	ldr	r1, [r6, #0]
 8008490:	4605      	mov	r5, r0
 8008492:	b911      	cbnz	r1, 800849a <sbrk_aligned+0x12>
 8008494:	f000 fd24 	bl	8008ee0 <_sbrk_r>
 8008498:	6030      	str	r0, [r6, #0]
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f000 fd1f 	bl	8008ee0 <_sbrk_r>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	d00a      	beq.n	80084bc <sbrk_aligned+0x34>
 80084a6:	1cc4      	adds	r4, r0, #3
 80084a8:	f024 0403 	bic.w	r4, r4, #3
 80084ac:	42a0      	cmp	r0, r4
 80084ae:	d007      	beq.n	80084c0 <sbrk_aligned+0x38>
 80084b0:	1a21      	subs	r1, r4, r0
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 fd14 	bl	8008ee0 <_sbrk_r>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d101      	bne.n	80084c0 <sbrk_aligned+0x38>
 80084bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084c0:	4620      	mov	r0, r4
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	200002e4 	.word	0x200002e4

080084c8 <_malloc_r>:
 80084c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084cc:	1ccd      	adds	r5, r1, #3
 80084ce:	f025 0503 	bic.w	r5, r5, #3
 80084d2:	3508      	adds	r5, #8
 80084d4:	2d0c      	cmp	r5, #12
 80084d6:	bf38      	it	cc
 80084d8:	250c      	movcc	r5, #12
 80084da:	2d00      	cmp	r5, #0
 80084dc:	4607      	mov	r7, r0
 80084de:	db01      	blt.n	80084e4 <_malloc_r+0x1c>
 80084e0:	42a9      	cmp	r1, r5
 80084e2:	d905      	bls.n	80084f0 <_malloc_r+0x28>
 80084e4:	230c      	movs	r3, #12
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	2600      	movs	r6, #0
 80084ea:	4630      	mov	r0, r6
 80084ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f0:	4e2e      	ldr	r6, [pc, #184]	; (80085ac <_malloc_r+0xe4>)
 80084f2:	f001 f80d 	bl	8009510 <__malloc_lock>
 80084f6:	6833      	ldr	r3, [r6, #0]
 80084f8:	461c      	mov	r4, r3
 80084fa:	bb34      	cbnz	r4, 800854a <_malloc_r+0x82>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4638      	mov	r0, r7
 8008500:	f7ff ffc2 	bl	8008488 <sbrk_aligned>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	4604      	mov	r4, r0
 8008508:	d14d      	bne.n	80085a6 <_malloc_r+0xde>
 800850a:	6834      	ldr	r4, [r6, #0]
 800850c:	4626      	mov	r6, r4
 800850e:	2e00      	cmp	r6, #0
 8008510:	d140      	bne.n	8008594 <_malloc_r+0xcc>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	4631      	mov	r1, r6
 8008516:	4638      	mov	r0, r7
 8008518:	eb04 0803 	add.w	r8, r4, r3
 800851c:	f000 fce0 	bl	8008ee0 <_sbrk_r>
 8008520:	4580      	cmp	r8, r0
 8008522:	d13a      	bne.n	800859a <_malloc_r+0xd2>
 8008524:	6821      	ldr	r1, [r4, #0]
 8008526:	3503      	adds	r5, #3
 8008528:	1a6d      	subs	r5, r5, r1
 800852a:	f025 0503 	bic.w	r5, r5, #3
 800852e:	3508      	adds	r5, #8
 8008530:	2d0c      	cmp	r5, #12
 8008532:	bf38      	it	cc
 8008534:	250c      	movcc	r5, #12
 8008536:	4629      	mov	r1, r5
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ffa5 	bl	8008488 <sbrk_aligned>
 800853e:	3001      	adds	r0, #1
 8008540:	d02b      	beq.n	800859a <_malloc_r+0xd2>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	442b      	add	r3, r5
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	e00e      	b.n	8008568 <_malloc_r+0xa0>
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	1b52      	subs	r2, r2, r5
 800854e:	d41e      	bmi.n	800858e <_malloc_r+0xc6>
 8008550:	2a0b      	cmp	r2, #11
 8008552:	d916      	bls.n	8008582 <_malloc_r+0xba>
 8008554:	1961      	adds	r1, r4, r5
 8008556:	42a3      	cmp	r3, r4
 8008558:	6025      	str	r5, [r4, #0]
 800855a:	bf18      	it	ne
 800855c:	6059      	strne	r1, [r3, #4]
 800855e:	6863      	ldr	r3, [r4, #4]
 8008560:	bf08      	it	eq
 8008562:	6031      	streq	r1, [r6, #0]
 8008564:	5162      	str	r2, [r4, r5]
 8008566:	604b      	str	r3, [r1, #4]
 8008568:	4638      	mov	r0, r7
 800856a:	f104 060b 	add.w	r6, r4, #11
 800856e:	f000 ffd5 	bl	800951c <__malloc_unlock>
 8008572:	f026 0607 	bic.w	r6, r6, #7
 8008576:	1d23      	adds	r3, r4, #4
 8008578:	1af2      	subs	r2, r6, r3
 800857a:	d0b6      	beq.n	80084ea <_malloc_r+0x22>
 800857c:	1b9b      	subs	r3, r3, r6
 800857e:	50a3      	str	r3, [r4, r2]
 8008580:	e7b3      	b.n	80084ea <_malloc_r+0x22>
 8008582:	6862      	ldr	r2, [r4, #4]
 8008584:	42a3      	cmp	r3, r4
 8008586:	bf0c      	ite	eq
 8008588:	6032      	streq	r2, [r6, #0]
 800858a:	605a      	strne	r2, [r3, #4]
 800858c:	e7ec      	b.n	8008568 <_malloc_r+0xa0>
 800858e:	4623      	mov	r3, r4
 8008590:	6864      	ldr	r4, [r4, #4]
 8008592:	e7b2      	b.n	80084fa <_malloc_r+0x32>
 8008594:	4634      	mov	r4, r6
 8008596:	6876      	ldr	r6, [r6, #4]
 8008598:	e7b9      	b.n	800850e <_malloc_r+0x46>
 800859a:	230c      	movs	r3, #12
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	4638      	mov	r0, r7
 80085a0:	f000 ffbc 	bl	800951c <__malloc_unlock>
 80085a4:	e7a1      	b.n	80084ea <_malloc_r+0x22>
 80085a6:	6025      	str	r5, [r4, #0]
 80085a8:	e7de      	b.n	8008568 <_malloc_r+0xa0>
 80085aa:	bf00      	nop
 80085ac:	200002e0 	.word	0x200002e0

080085b0 <__ssputs_r>:
 80085b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b4:	688e      	ldr	r6, [r1, #8]
 80085b6:	429e      	cmp	r6, r3
 80085b8:	4682      	mov	sl, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	4690      	mov	r8, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	d838      	bhi.n	8008634 <__ssputs_r+0x84>
 80085c2:	898a      	ldrh	r2, [r1, #12]
 80085c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c8:	d032      	beq.n	8008630 <__ssputs_r+0x80>
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	6909      	ldr	r1, [r1, #16]
 80085ce:	eba5 0901 	sub.w	r9, r5, r1
 80085d2:	6965      	ldr	r5, [r4, #20]
 80085d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085dc:	3301      	adds	r3, #1
 80085de:	444b      	add	r3, r9
 80085e0:	106d      	asrs	r5, r5, #1
 80085e2:	429d      	cmp	r5, r3
 80085e4:	bf38      	it	cc
 80085e6:	461d      	movcc	r5, r3
 80085e8:	0553      	lsls	r3, r2, #21
 80085ea:	d531      	bpl.n	8008650 <__ssputs_r+0xa0>
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7ff ff6b 	bl	80084c8 <_malloc_r>
 80085f2:	4606      	mov	r6, r0
 80085f4:	b950      	cbnz	r0, 800860c <__ssputs_r+0x5c>
 80085f6:	230c      	movs	r3, #12
 80085f8:	f8ca 3000 	str.w	r3, [sl]
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008602:	81a3      	strh	r3, [r4, #12]
 8008604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	6921      	ldr	r1, [r4, #16]
 800860e:	464a      	mov	r2, r9
 8008610:	f7ff fa1a 	bl	8007a48 <memcpy>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	6126      	str	r6, [r4, #16]
 8008622:	6165      	str	r5, [r4, #20]
 8008624:	444e      	add	r6, r9
 8008626:	eba5 0509 	sub.w	r5, r5, r9
 800862a:	6026      	str	r6, [r4, #0]
 800862c:	60a5      	str	r5, [r4, #8]
 800862e:	463e      	mov	r6, r7
 8008630:	42be      	cmp	r6, r7
 8008632:	d900      	bls.n	8008636 <__ssputs_r+0x86>
 8008634:	463e      	mov	r6, r7
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	4632      	mov	r2, r6
 800863a:	4641      	mov	r1, r8
 800863c:	f000 ff4e 	bl	80094dc <memmove>
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	1b9b      	subs	r3, r3, r6
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	4433      	add	r3, r6
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2000      	movs	r0, #0
 800864e:	e7db      	b.n	8008608 <__ssputs_r+0x58>
 8008650:	462a      	mov	r2, r5
 8008652:	f000 ff69 	bl	8009528 <_realloc_r>
 8008656:	4606      	mov	r6, r0
 8008658:	2800      	cmp	r0, #0
 800865a:	d1e1      	bne.n	8008620 <__ssputs_r+0x70>
 800865c:	6921      	ldr	r1, [r4, #16]
 800865e:	4650      	mov	r0, sl
 8008660:	f7ff fec8 	bl	80083f4 <_free_r>
 8008664:	e7c7      	b.n	80085f6 <__ssputs_r+0x46>
	...

08008668 <_svfiprintf_r>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4698      	mov	r8, r3
 800866e:	898b      	ldrh	r3, [r1, #12]
 8008670:	061b      	lsls	r3, r3, #24
 8008672:	b09d      	sub	sp, #116	; 0x74
 8008674:	4607      	mov	r7, r0
 8008676:	460d      	mov	r5, r1
 8008678:	4614      	mov	r4, r2
 800867a:	d50e      	bpl.n	800869a <_svfiprintf_r+0x32>
 800867c:	690b      	ldr	r3, [r1, #16]
 800867e:	b963      	cbnz	r3, 800869a <_svfiprintf_r+0x32>
 8008680:	2140      	movs	r1, #64	; 0x40
 8008682:	f7ff ff21 	bl	80084c8 <_malloc_r>
 8008686:	6028      	str	r0, [r5, #0]
 8008688:	6128      	str	r0, [r5, #16]
 800868a:	b920      	cbnz	r0, 8008696 <_svfiprintf_r+0x2e>
 800868c:	230c      	movs	r3, #12
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008694:	e0d1      	b.n	800883a <_svfiprintf_r+0x1d2>
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	616b      	str	r3, [r5, #20]
 800869a:	2300      	movs	r3, #0
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	2320      	movs	r3, #32
 80086a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a8:	2330      	movs	r3, #48	; 0x30
 80086aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008854 <_svfiprintf_r+0x1ec>
 80086ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b2:	f04f 0901 	mov.w	r9, #1
 80086b6:	4623      	mov	r3, r4
 80086b8:	469a      	mov	sl, r3
 80086ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086be:	b10a      	cbz	r2, 80086c4 <_svfiprintf_r+0x5c>
 80086c0:	2a25      	cmp	r2, #37	; 0x25
 80086c2:	d1f9      	bne.n	80086b8 <_svfiprintf_r+0x50>
 80086c4:	ebba 0b04 	subs.w	fp, sl, r4
 80086c8:	d00b      	beq.n	80086e2 <_svfiprintf_r+0x7a>
 80086ca:	465b      	mov	r3, fp
 80086cc:	4622      	mov	r2, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7ff ff6d 	bl	80085b0 <__ssputs_r>
 80086d6:	3001      	adds	r0, #1
 80086d8:	f000 80aa 	beq.w	8008830 <_svfiprintf_r+0x1c8>
 80086dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086de:	445a      	add	r2, fp
 80086e0:	9209      	str	r2, [sp, #36]	; 0x24
 80086e2:	f89a 3000 	ldrb.w	r3, [sl]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80a2 	beq.w	8008830 <_svfiprintf_r+0x1c8>
 80086ec:	2300      	movs	r3, #0
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f6:	f10a 0a01 	add.w	sl, sl, #1
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	9307      	str	r3, [sp, #28]
 80086fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008702:	931a      	str	r3, [sp, #104]	; 0x68
 8008704:	4654      	mov	r4, sl
 8008706:	2205      	movs	r2, #5
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	4851      	ldr	r0, [pc, #324]	; (8008854 <_svfiprintf_r+0x1ec>)
 800870e:	f7f7 fd3f 	bl	8000190 <memchr>
 8008712:	9a04      	ldr	r2, [sp, #16]
 8008714:	b9d8      	cbnz	r0, 800874e <_svfiprintf_r+0xe6>
 8008716:	06d0      	lsls	r0, r2, #27
 8008718:	bf44      	itt	mi
 800871a:	2320      	movmi	r3, #32
 800871c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008720:	0711      	lsls	r1, r2, #28
 8008722:	bf44      	itt	mi
 8008724:	232b      	movmi	r3, #43	; 0x2b
 8008726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872a:	f89a 3000 	ldrb.w	r3, [sl]
 800872e:	2b2a      	cmp	r3, #42	; 0x2a
 8008730:	d015      	beq.n	800875e <_svfiprintf_r+0xf6>
 8008732:	9a07      	ldr	r2, [sp, #28]
 8008734:	4654      	mov	r4, sl
 8008736:	2000      	movs	r0, #0
 8008738:	f04f 0c0a 	mov.w	ip, #10
 800873c:	4621      	mov	r1, r4
 800873e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008742:	3b30      	subs	r3, #48	; 0x30
 8008744:	2b09      	cmp	r3, #9
 8008746:	d94e      	bls.n	80087e6 <_svfiprintf_r+0x17e>
 8008748:	b1b0      	cbz	r0, 8008778 <_svfiprintf_r+0x110>
 800874a:	9207      	str	r2, [sp, #28]
 800874c:	e014      	b.n	8008778 <_svfiprintf_r+0x110>
 800874e:	eba0 0308 	sub.w	r3, r0, r8
 8008752:	fa09 f303 	lsl.w	r3, r9, r3
 8008756:	4313      	orrs	r3, r2
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	46a2      	mov	sl, r4
 800875c:	e7d2      	b.n	8008704 <_svfiprintf_r+0x9c>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	1d19      	adds	r1, r3, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	9103      	str	r1, [sp, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	bfbb      	ittet	lt
 800876a:	425b      	neglt	r3, r3
 800876c:	f042 0202 	orrlt.w	r2, r2, #2
 8008770:	9307      	strge	r3, [sp, #28]
 8008772:	9307      	strlt	r3, [sp, #28]
 8008774:	bfb8      	it	lt
 8008776:	9204      	strlt	r2, [sp, #16]
 8008778:	7823      	ldrb	r3, [r4, #0]
 800877a:	2b2e      	cmp	r3, #46	; 0x2e
 800877c:	d10c      	bne.n	8008798 <_svfiprintf_r+0x130>
 800877e:	7863      	ldrb	r3, [r4, #1]
 8008780:	2b2a      	cmp	r3, #42	; 0x2a
 8008782:	d135      	bne.n	80087f0 <_svfiprintf_r+0x188>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	1d1a      	adds	r2, r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	9203      	str	r2, [sp, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	bfb8      	it	lt
 8008790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008794:	3402      	adds	r4, #2
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008858 <_svfiprintf_r+0x1f0>
 800879c:	7821      	ldrb	r1, [r4, #0]
 800879e:	2203      	movs	r2, #3
 80087a0:	4650      	mov	r0, sl
 80087a2:	f7f7 fcf5 	bl	8000190 <memchr>
 80087a6:	b140      	cbz	r0, 80087ba <_svfiprintf_r+0x152>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	eba0 000a 	sub.w	r0, r0, sl
 80087ae:	fa03 f000 	lsl.w	r0, r3, r0
 80087b2:	9b04      	ldr	r3, [sp, #16]
 80087b4:	4303      	orrs	r3, r0
 80087b6:	3401      	adds	r4, #1
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087be:	4827      	ldr	r0, [pc, #156]	; (800885c <_svfiprintf_r+0x1f4>)
 80087c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c4:	2206      	movs	r2, #6
 80087c6:	f7f7 fce3 	bl	8000190 <memchr>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d038      	beq.n	8008840 <_svfiprintf_r+0x1d8>
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <_svfiprintf_r+0x1f8>)
 80087d0:	bb1b      	cbnz	r3, 800881a <_svfiprintf_r+0x1b2>
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	3307      	adds	r3, #7
 80087d6:	f023 0307 	bic.w	r3, r3, #7
 80087da:	3308      	adds	r3, #8
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e0:	4433      	add	r3, r6
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	e767      	b.n	80086b6 <_svfiprintf_r+0x4e>
 80087e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ea:	460c      	mov	r4, r1
 80087ec:	2001      	movs	r0, #1
 80087ee:	e7a5      	b.n	800873c <_svfiprintf_r+0xd4>
 80087f0:	2300      	movs	r3, #0
 80087f2:	3401      	adds	r4, #1
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	4619      	mov	r1, r3
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008802:	3a30      	subs	r2, #48	; 0x30
 8008804:	2a09      	cmp	r2, #9
 8008806:	d903      	bls.n	8008810 <_svfiprintf_r+0x1a8>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0c5      	beq.n	8008798 <_svfiprintf_r+0x130>
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	e7c3      	b.n	8008798 <_svfiprintf_r+0x130>
 8008810:	fb0c 2101 	mla	r1, ip, r1, r2
 8008814:	4604      	mov	r4, r0
 8008816:	2301      	movs	r3, #1
 8008818:	e7f0      	b.n	80087fc <_svfiprintf_r+0x194>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b10      	ldr	r3, [pc, #64]	; (8008864 <_svfiprintf_r+0x1fc>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4638      	mov	r0, r7
 8008826:	f7fc f9df 	bl	8004be8 <_printf_float>
 800882a:	1c42      	adds	r2, r0, #1
 800882c:	4606      	mov	r6, r0
 800882e:	d1d6      	bne.n	80087de <_svfiprintf_r+0x176>
 8008830:	89ab      	ldrh	r3, [r5, #12]
 8008832:	065b      	lsls	r3, r3, #25
 8008834:	f53f af2c 	bmi.w	8008690 <_svfiprintf_r+0x28>
 8008838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883a:	b01d      	add	sp, #116	; 0x74
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <_svfiprintf_r+0x1fc>)
 8008848:	a904      	add	r1, sp, #16
 800884a:	4638      	mov	r0, r7
 800884c:	f7fc fc64 	bl	8005118 <_printf_i>
 8008850:	e7eb      	b.n	800882a <_svfiprintf_r+0x1c2>
 8008852:	bf00      	nop
 8008854:	0800a0a4 	.word	0x0800a0a4
 8008858:	0800a0aa 	.word	0x0800a0aa
 800885c:	0800a0ae 	.word	0x0800a0ae
 8008860:	08004be9 	.word	0x08004be9
 8008864:	080085b1 	.word	0x080085b1

08008868 <_sungetc_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	1c4b      	adds	r3, r1, #1
 800886c:	4614      	mov	r4, r2
 800886e:	d103      	bne.n	8008878 <_sungetc_r+0x10>
 8008870:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008874:	4628      	mov	r0, r5
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	8993      	ldrh	r3, [r2, #12]
 800887a:	f023 0320 	bic.w	r3, r3, #32
 800887e:	8193      	strh	r3, [r2, #12]
 8008880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008882:	6852      	ldr	r2, [r2, #4]
 8008884:	b2cd      	uxtb	r5, r1
 8008886:	b18b      	cbz	r3, 80088ac <_sungetc_r+0x44>
 8008888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800888a:	4293      	cmp	r3, r2
 800888c:	dd08      	ble.n	80088a0 <_sungetc_r+0x38>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	6022      	str	r2, [r4, #0]
 8008894:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	3301      	adds	r3, #1
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	e7e9      	b.n	8008874 <_sungetc_r+0xc>
 80088a0:	4621      	mov	r1, r4
 80088a2:	f000 fbed 	bl	8009080 <__submore>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d0f1      	beq.n	800888e <_sungetc_r+0x26>
 80088aa:	e7e1      	b.n	8008870 <_sungetc_r+0x8>
 80088ac:	6921      	ldr	r1, [r4, #16]
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	b151      	cbz	r1, 80088c8 <_sungetc_r+0x60>
 80088b2:	4299      	cmp	r1, r3
 80088b4:	d208      	bcs.n	80088c8 <_sungetc_r+0x60>
 80088b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80088ba:	42a9      	cmp	r1, r5
 80088bc:	d104      	bne.n	80088c8 <_sungetc_r+0x60>
 80088be:	3b01      	subs	r3, #1
 80088c0:	3201      	adds	r2, #1
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	6062      	str	r2, [r4, #4]
 80088c6:	e7d5      	b.n	8008874 <_sungetc_r+0xc>
 80088c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80088cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d0:	6363      	str	r3, [r4, #52]	; 0x34
 80088d2:	2303      	movs	r3, #3
 80088d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80088d6:	4623      	mov	r3, r4
 80088d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2301      	movs	r3, #1
 80088e0:	e7dc      	b.n	800889c <_sungetc_r+0x34>

080088e2 <__ssrefill_r>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088e8:	b169      	cbz	r1, 8008906 <__ssrefill_r+0x24>
 80088ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d001      	beq.n	80088f6 <__ssrefill_r+0x14>
 80088f2:	f7ff fd7f 	bl	80083f4 <_free_r>
 80088f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	2000      	movs	r0, #0
 80088fc:	6360      	str	r0, [r4, #52]	; 0x34
 80088fe:	b113      	cbz	r3, 8008906 <__ssrefill_r+0x24>
 8008900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	bd10      	pop	{r4, pc}
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800891a:	e7f3      	b.n	8008904 <__ssrefill_r+0x22>

0800891c <__ssvfiscanf_r>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008926:	2100      	movs	r1, #0
 8008928:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800892c:	49a6      	ldr	r1, [pc, #664]	; (8008bc8 <__ssvfiscanf_r+0x2ac>)
 800892e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008930:	f10d 0804 	add.w	r8, sp, #4
 8008934:	49a5      	ldr	r1, [pc, #660]	; (8008bcc <__ssvfiscanf_r+0x2b0>)
 8008936:	4fa6      	ldr	r7, [pc, #664]	; (8008bd0 <__ssvfiscanf_r+0x2b4>)
 8008938:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008bd4 <__ssvfiscanf_r+0x2b8>
 800893c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008940:	4606      	mov	r6, r0
 8008942:	91a1      	str	r1, [sp, #644]	; 0x284
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	7813      	ldrb	r3, [r2, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 815a 	beq.w	8008c02 <__ssvfiscanf_r+0x2e6>
 800894e:	5dd9      	ldrb	r1, [r3, r7]
 8008950:	f011 0108 	ands.w	r1, r1, #8
 8008954:	f102 0501 	add.w	r5, r2, #1
 8008958:	d019      	beq.n	800898e <__ssvfiscanf_r+0x72>
 800895a:	6863      	ldr	r3, [r4, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	dd0f      	ble.n	8008980 <__ssvfiscanf_r+0x64>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	5cba      	ldrb	r2, [r7, r2]
 8008966:	0712      	lsls	r2, r2, #28
 8008968:	d401      	bmi.n	800896e <__ssvfiscanf_r+0x52>
 800896a:	462a      	mov	r2, r5
 800896c:	e7eb      	b.n	8008946 <__ssvfiscanf_r+0x2a>
 800896e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008970:	3201      	adds	r2, #1
 8008972:	9245      	str	r2, [sp, #276]	; 0x114
 8008974:	6862      	ldr	r2, [r4, #4]
 8008976:	3301      	adds	r3, #1
 8008978:	3a01      	subs	r2, #1
 800897a:	6062      	str	r2, [r4, #4]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	e7ec      	b.n	800895a <__ssvfiscanf_r+0x3e>
 8008980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008982:	4621      	mov	r1, r4
 8008984:	4630      	mov	r0, r6
 8008986:	4798      	blx	r3
 8008988:	2800      	cmp	r0, #0
 800898a:	d0e9      	beq.n	8008960 <__ssvfiscanf_r+0x44>
 800898c:	e7ed      	b.n	800896a <__ssvfiscanf_r+0x4e>
 800898e:	2b25      	cmp	r3, #37	; 0x25
 8008990:	d012      	beq.n	80089b8 <__ssvfiscanf_r+0x9c>
 8008992:	469a      	mov	sl, r3
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f340 8091 	ble.w	8008abe <__ssvfiscanf_r+0x1a2>
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	7813      	ldrb	r3, [r2, #0]
 80089a0:	4553      	cmp	r3, sl
 80089a2:	f040 812e 	bne.w	8008c02 <__ssvfiscanf_r+0x2e6>
 80089a6:	6863      	ldr	r3, [r4, #4]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	6063      	str	r3, [r4, #4]
 80089ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80089ae:	3201      	adds	r2, #1
 80089b0:	3301      	adds	r3, #1
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	9345      	str	r3, [sp, #276]	; 0x114
 80089b6:	e7d8      	b.n	800896a <__ssvfiscanf_r+0x4e>
 80089b8:	9141      	str	r1, [sp, #260]	; 0x104
 80089ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80089bc:	7853      	ldrb	r3, [r2, #1]
 80089be:	2b2a      	cmp	r3, #42	; 0x2a
 80089c0:	bf02      	ittt	eq
 80089c2:	2310      	moveq	r3, #16
 80089c4:	1c95      	addeq	r5, r2, #2
 80089c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80089c8:	220a      	movs	r2, #10
 80089ca:	46aa      	mov	sl, r5
 80089cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80089d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d91d      	bls.n	8008a14 <__ssvfiscanf_r+0xf8>
 80089d8:	487e      	ldr	r0, [pc, #504]	; (8008bd4 <__ssvfiscanf_r+0x2b8>)
 80089da:	2203      	movs	r2, #3
 80089dc:	f7f7 fbd8 	bl	8000190 <memchr>
 80089e0:	b140      	cbz	r0, 80089f4 <__ssvfiscanf_r+0xd8>
 80089e2:	2301      	movs	r3, #1
 80089e4:	eba0 0009 	sub.w	r0, r0, r9
 80089e8:	fa03 f000 	lsl.w	r0, r3, r0
 80089ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089ee:	4318      	orrs	r0, r3
 80089f0:	9041      	str	r0, [sp, #260]	; 0x104
 80089f2:	4655      	mov	r5, sl
 80089f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089f8:	2b78      	cmp	r3, #120	; 0x78
 80089fa:	d806      	bhi.n	8008a0a <__ssvfiscanf_r+0xee>
 80089fc:	2b57      	cmp	r3, #87	; 0x57
 80089fe:	d810      	bhi.n	8008a22 <__ssvfiscanf_r+0x106>
 8008a00:	2b25      	cmp	r3, #37	; 0x25
 8008a02:	d0c6      	beq.n	8008992 <__ssvfiscanf_r+0x76>
 8008a04:	d856      	bhi.n	8008ab4 <__ssvfiscanf_r+0x198>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d064      	beq.n	8008ad4 <__ssvfiscanf_r+0x1b8>
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a0e:	230a      	movs	r3, #10
 8008a10:	9342      	str	r3, [sp, #264]	; 0x108
 8008a12:	e071      	b.n	8008af8 <__ssvfiscanf_r+0x1dc>
 8008a14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008a16:	fb02 1103 	mla	r1, r2, r3, r1
 8008a1a:	3930      	subs	r1, #48	; 0x30
 8008a1c:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a1e:	4655      	mov	r5, sl
 8008a20:	e7d3      	b.n	80089ca <__ssvfiscanf_r+0xae>
 8008a22:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008a26:	2a20      	cmp	r2, #32
 8008a28:	d8ef      	bhi.n	8008a0a <__ssvfiscanf_r+0xee>
 8008a2a:	a101      	add	r1, pc, #4	; (adr r1, 8008a30 <__ssvfiscanf_r+0x114>)
 8008a2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a30:	08008ae3 	.word	0x08008ae3
 8008a34:	08008a0b 	.word	0x08008a0b
 8008a38:	08008a0b 	.word	0x08008a0b
 8008a3c:	08008b41 	.word	0x08008b41
 8008a40:	08008a0b 	.word	0x08008a0b
 8008a44:	08008a0b 	.word	0x08008a0b
 8008a48:	08008a0b 	.word	0x08008a0b
 8008a4c:	08008a0b 	.word	0x08008a0b
 8008a50:	08008a0b 	.word	0x08008a0b
 8008a54:	08008a0b 	.word	0x08008a0b
 8008a58:	08008a0b 	.word	0x08008a0b
 8008a5c:	08008b57 	.word	0x08008b57
 8008a60:	08008b2d 	.word	0x08008b2d
 8008a64:	08008abb 	.word	0x08008abb
 8008a68:	08008abb 	.word	0x08008abb
 8008a6c:	08008abb 	.word	0x08008abb
 8008a70:	08008a0b 	.word	0x08008a0b
 8008a74:	08008b31 	.word	0x08008b31
 8008a78:	08008a0b 	.word	0x08008a0b
 8008a7c:	08008a0b 	.word	0x08008a0b
 8008a80:	08008a0b 	.word	0x08008a0b
 8008a84:	08008a0b 	.word	0x08008a0b
 8008a88:	08008b67 	.word	0x08008b67
 8008a8c:	08008b39 	.word	0x08008b39
 8008a90:	08008adb 	.word	0x08008adb
 8008a94:	08008a0b 	.word	0x08008a0b
 8008a98:	08008a0b 	.word	0x08008a0b
 8008a9c:	08008b63 	.word	0x08008b63
 8008aa0:	08008a0b 	.word	0x08008a0b
 8008aa4:	08008b2d 	.word	0x08008b2d
 8008aa8:	08008a0b 	.word	0x08008a0b
 8008aac:	08008a0b 	.word	0x08008a0b
 8008ab0:	08008ae3 	.word	0x08008ae3
 8008ab4:	3b45      	subs	r3, #69	; 0x45
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d8a7      	bhi.n	8008a0a <__ssvfiscanf_r+0xee>
 8008aba:	2305      	movs	r3, #5
 8008abc:	e01b      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008abe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4798      	blx	r3
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f43f af68 	beq.w	800899c <__ssvfiscanf_r+0x80>
 8008acc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f040 808d 	bne.w	8008bee <__ssvfiscanf_r+0x2d2>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad8:	e08f      	b.n	8008bfa <__ssvfiscanf_r+0x2de>
 8008ada:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008adc:	f042 0220 	orr.w	r2, r2, #32
 8008ae0:	9241      	str	r2, [sp, #260]	; 0x104
 8008ae2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ae8:	9241      	str	r2, [sp, #260]	; 0x104
 8008aea:	2210      	movs	r2, #16
 8008aec:	2b6f      	cmp	r3, #111	; 0x6f
 8008aee:	9242      	str	r2, [sp, #264]	; 0x108
 8008af0:	bf34      	ite	cc
 8008af2:	2303      	movcc	r3, #3
 8008af4:	2304      	movcs	r3, #4
 8008af6:	9347      	str	r3, [sp, #284]	; 0x11c
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dd42      	ble.n	8008b84 <__ssvfiscanf_r+0x268>
 8008afe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b00:	0659      	lsls	r1, r3, #25
 8008b02:	d404      	bmi.n	8008b0e <__ssvfiscanf_r+0x1f2>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	781a      	ldrb	r2, [r3, #0]
 8008b08:	5cba      	ldrb	r2, [r7, r2]
 8008b0a:	0712      	lsls	r2, r2, #28
 8008b0c:	d441      	bmi.n	8008b92 <__ssvfiscanf_r+0x276>
 8008b0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	dc50      	bgt.n	8008bb6 <__ssvfiscanf_r+0x29a>
 8008b14:	466b      	mov	r3, sp
 8008b16:	4622      	mov	r2, r4
 8008b18:	a941      	add	r1, sp, #260	; 0x104
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 f876 	bl	8008c0c <_scanf_chars>
 8008b20:	2801      	cmp	r0, #1
 8008b22:	d06e      	beq.n	8008c02 <__ssvfiscanf_r+0x2e6>
 8008b24:	2802      	cmp	r0, #2
 8008b26:	f47f af20 	bne.w	800896a <__ssvfiscanf_r+0x4e>
 8008b2a:	e7cf      	b.n	8008acc <__ssvfiscanf_r+0x1b0>
 8008b2c:	220a      	movs	r2, #10
 8008b2e:	e7dd      	b.n	8008aec <__ssvfiscanf_r+0x1d0>
 8008b30:	2300      	movs	r3, #0
 8008b32:	9342      	str	r3, [sp, #264]	; 0x108
 8008b34:	2303      	movs	r3, #3
 8008b36:	e7de      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	9342      	str	r3, [sp, #264]	; 0x108
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	e7da      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4640      	mov	r0, r8
 8008b44:	f000 f9dc 	bl	8008f00 <__sccl>
 8008b48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4e:	9341      	str	r3, [sp, #260]	; 0x104
 8008b50:	4605      	mov	r5, r0
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7cf      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008b56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b5c:	9341      	str	r3, [sp, #260]	; 0x104
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e7c9      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e7c7      	b.n	8008af6 <__ssvfiscanf_r+0x1da>
 8008b66:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008b68:	06c3      	lsls	r3, r0, #27
 8008b6a:	f53f aefe 	bmi.w	800896a <__ssvfiscanf_r+0x4e>
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b72:	1d19      	adds	r1, r3, #4
 8008b74:	9100      	str	r1, [sp, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f010 0f01 	tst.w	r0, #1
 8008b7c:	bf14      	ite	ne
 8008b7e:	801a      	strhne	r2, [r3, #0]
 8008b80:	601a      	streq	r2, [r3, #0]
 8008b82:	e6f2      	b.n	800896a <__ssvfiscanf_r+0x4e>
 8008b84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b86:	4621      	mov	r1, r4
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4798      	blx	r3
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d0b6      	beq.n	8008afe <__ssvfiscanf_r+0x1e2>
 8008b90:	e79c      	b.n	8008acc <__ssvfiscanf_r+0x1b0>
 8008b92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b94:	3201      	adds	r2, #1
 8008b96:	9245      	str	r2, [sp, #276]	; 0x114
 8008b98:	6862      	ldr	r2, [r4, #4]
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	6062      	str	r2, [r4, #4]
 8008ba0:	dd02      	ble.n	8008ba8 <__ssvfiscanf_r+0x28c>
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	e7ad      	b.n	8008b04 <__ssvfiscanf_r+0x1e8>
 8008ba8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008baa:	4621      	mov	r1, r4
 8008bac:	4630      	mov	r0, r6
 8008bae:	4798      	blx	r3
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d0a7      	beq.n	8008b04 <__ssvfiscanf_r+0x1e8>
 8008bb4:	e78a      	b.n	8008acc <__ssvfiscanf_r+0x1b0>
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	dc0e      	bgt.n	8008bd8 <__ssvfiscanf_r+0x2bc>
 8008bba:	466b      	mov	r3, sp
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	a941      	add	r1, sp, #260	; 0x104
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 f87d 	bl	8008cc0 <_scanf_i>
 8008bc6:	e7ab      	b.n	8008b20 <__ssvfiscanf_r+0x204>
 8008bc8:	08008869 	.word	0x08008869
 8008bcc:	080088e3 	.word	0x080088e3
 8008bd0:	08009d41 	.word	0x08009d41
 8008bd4:	0800a0aa 	.word	0x0800a0aa
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <__ssvfiscanf_r+0x2ec>)
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f43f aec5 	beq.w	800896a <__ssvfiscanf_r+0x4e>
 8008be0:	466b      	mov	r3, sp
 8008be2:	4622      	mov	r2, r4
 8008be4:	a941      	add	r1, sp, #260	; 0x104
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7fc fbbc 	bl	8005364 <_scanf_float>
 8008bec:	e798      	b.n	8008b20 <__ssvfiscanf_r+0x204>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008bf4:	bf18      	it	ne
 8008bf6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008bfa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c04:	e7f9      	b.n	8008bfa <__ssvfiscanf_r+0x2de>
 8008c06:	bf00      	nop
 8008c08:	08005365 	.word	0x08005365

08008c0c <_scanf_chars>:
 8008c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	4615      	mov	r5, r2
 8008c12:	688a      	ldr	r2, [r1, #8]
 8008c14:	4680      	mov	r8, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	b932      	cbnz	r2, 8008c28 <_scanf_chars+0x1c>
 8008c1a:	698a      	ldr	r2, [r1, #24]
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	bf0c      	ite	eq
 8008c20:	2201      	moveq	r2, #1
 8008c22:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008c26:	608a      	str	r2, [r1, #8]
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008cbc <_scanf_chars+0xb0>
 8008c2e:	06d1      	lsls	r1, r2, #27
 8008c30:	bf5f      	itttt	pl
 8008c32:	681a      	ldrpl	r2, [r3, #0]
 8008c34:	1d11      	addpl	r1, r2, #4
 8008c36:	6019      	strpl	r1, [r3, #0]
 8008c38:	6816      	ldrpl	r6, [r2, #0]
 8008c3a:	2700      	movs	r7, #0
 8008c3c:	69a0      	ldr	r0, [r4, #24]
 8008c3e:	b188      	cbz	r0, 8008c64 <_scanf_chars+0x58>
 8008c40:	2801      	cmp	r0, #1
 8008c42:	d107      	bne.n	8008c54 <_scanf_chars+0x48>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	6963      	ldr	r3, [r4, #20]
 8008c4a:	5c9b      	ldrb	r3, [r3, r2]
 8008c4c:	b953      	cbnz	r3, 8008c64 <_scanf_chars+0x58>
 8008c4e:	2f00      	cmp	r7, #0
 8008c50:	d031      	beq.n	8008cb6 <_scanf_chars+0xaa>
 8008c52:	e022      	b.n	8008c9a <_scanf_chars+0x8e>
 8008c54:	2802      	cmp	r0, #2
 8008c56:	d120      	bne.n	8008c9a <_scanf_chars+0x8e>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008c60:	071b      	lsls	r3, r3, #28
 8008c62:	d41a      	bmi.n	8008c9a <_scanf_chars+0x8e>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	06da      	lsls	r2, r3, #27
 8008c68:	bf5e      	ittt	pl
 8008c6a:	682b      	ldrpl	r3, [r5, #0]
 8008c6c:	781b      	ldrbpl	r3, [r3, #0]
 8008c6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008c72:	682a      	ldr	r2, [r5, #0]
 8008c74:	686b      	ldr	r3, [r5, #4]
 8008c76:	3201      	adds	r2, #1
 8008c78:	602a      	str	r2, [r5, #0]
 8008c7a:	68a2      	ldr	r2, [r4, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	3a01      	subs	r2, #1
 8008c80:	606b      	str	r3, [r5, #4]
 8008c82:	3701      	adds	r7, #1
 8008c84:	60a2      	str	r2, [r4, #8]
 8008c86:	b142      	cbz	r2, 8008c9a <_scanf_chars+0x8e>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dcd7      	bgt.n	8008c3c <_scanf_chars+0x30>
 8008c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c90:	4629      	mov	r1, r5
 8008c92:	4640      	mov	r0, r8
 8008c94:	4798      	blx	r3
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0d0      	beq.n	8008c3c <_scanf_chars+0x30>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	f013 0310 	ands.w	r3, r3, #16
 8008ca0:	d105      	bne.n	8008cae <_scanf_chars+0xa2>
 8008ca2:	68e2      	ldr	r2, [r4, #12]
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	60e2      	str	r2, [r4, #12]
 8008ca8:	69a2      	ldr	r2, [r4, #24]
 8008caa:	b102      	cbz	r2, 8008cae <_scanf_chars+0xa2>
 8008cac:	7033      	strb	r3, [r6, #0]
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	443b      	add	r3, r7
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cba:	bf00      	nop
 8008cbc:	08009d41 	.word	0x08009d41

08008cc0 <_scanf_i>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	4698      	mov	r8, r3
 8008cc6:	4b76      	ldr	r3, [pc, #472]	; (8008ea0 <_scanf_i+0x1e0>)
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4682      	mov	sl, r0
 8008ccc:	4616      	mov	r6, r2
 8008cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	ab03      	add	r3, sp, #12
 8008cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008cda:	4b72      	ldr	r3, [pc, #456]	; (8008ea4 <_scanf_i+0x1e4>)
 8008cdc:	69a1      	ldr	r1, [r4, #24]
 8008cde:	4a72      	ldr	r2, [pc, #456]	; (8008ea8 <_scanf_i+0x1e8>)
 8008ce0:	2903      	cmp	r1, #3
 8008ce2:	bf18      	it	ne
 8008ce4:	461a      	movne	r2, r3
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	9201      	str	r2, [sp, #4]
 8008cea:	1e5a      	subs	r2, r3, #1
 8008cec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cf0:	bf88      	it	hi
 8008cf2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cf6:	4627      	mov	r7, r4
 8008cf8:	bf82      	ittt	hi
 8008cfa:	eb03 0905 	addhi.w	r9, r3, r5
 8008cfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d02:	60a3      	strhi	r3, [r4, #8]
 8008d04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d0c:	bf98      	it	ls
 8008d0e:	f04f 0900 	movls.w	r9, #0
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	463d      	mov	r5, r7
 8008d16:	f04f 0b00 	mov.w	fp, #0
 8008d1a:	6831      	ldr	r1, [r6, #0]
 8008d1c:	ab03      	add	r3, sp, #12
 8008d1e:	7809      	ldrb	r1, [r1, #0]
 8008d20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f7f7 fa33 	bl	8000190 <memchr>
 8008d2a:	b328      	cbz	r0, 8008d78 <_scanf_i+0xb8>
 8008d2c:	f1bb 0f01 	cmp.w	fp, #1
 8008d30:	d159      	bne.n	8008de6 <_scanf_i+0x126>
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	b92a      	cbnz	r2, 8008d42 <_scanf_i+0x82>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008d48:	6022      	str	r2, [r4, #0]
 8008d4a:	68a2      	ldr	r2, [r4, #8]
 8008d4c:	1e51      	subs	r1, r2, #1
 8008d4e:	60a1      	str	r1, [r4, #8]
 8008d50:	b192      	cbz	r2, 8008d78 <_scanf_i+0xb8>
 8008d52:	6832      	ldr	r2, [r6, #0]
 8008d54:	1c51      	adds	r1, r2, #1
 8008d56:	6031      	str	r1, [r6, #0]
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	f805 2b01 	strb.w	r2, [r5], #1
 8008d5e:	6872      	ldr	r2, [r6, #4]
 8008d60:	3a01      	subs	r2, #1
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	6072      	str	r2, [r6, #4]
 8008d66:	dc07      	bgt.n	8008d78 <_scanf_i+0xb8>
 8008d68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4650      	mov	r0, sl
 8008d70:	4790      	blx	r2
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f040 8085 	bne.w	8008e82 <_scanf_i+0x1c2>
 8008d78:	f10b 0b01 	add.w	fp, fp, #1
 8008d7c:	f1bb 0f03 	cmp.w	fp, #3
 8008d80:	d1cb      	bne.n	8008d1a <_scanf_i+0x5a>
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	b90b      	cbnz	r3, 8008d8a <_scanf_i+0xca>
 8008d86:	230a      	movs	r3, #10
 8008d88:	6063      	str	r3, [r4, #4]
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	4947      	ldr	r1, [pc, #284]	; (8008eac <_scanf_i+0x1ec>)
 8008d8e:	6960      	ldr	r0, [r4, #20]
 8008d90:	1ac9      	subs	r1, r1, r3
 8008d92:	f000 f8b5 	bl	8008f00 <__sccl>
 8008d96:	f04f 0b00 	mov.w	fp, #0
 8008d9a:	68a3      	ldr	r3, [r4, #8]
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03d      	beq.n	8008e1e <_scanf_i+0x15e>
 8008da2:	6831      	ldr	r1, [r6, #0]
 8008da4:	6960      	ldr	r0, [r4, #20]
 8008da6:	f891 c000 	ldrb.w	ip, [r1]
 8008daa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d035      	beq.n	8008e1e <_scanf_i+0x15e>
 8008db2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008db6:	d124      	bne.n	8008e02 <_scanf_i+0x142>
 8008db8:	0510      	lsls	r0, r2, #20
 8008dba:	d522      	bpl.n	8008e02 <_scanf_i+0x142>
 8008dbc:	f10b 0b01 	add.w	fp, fp, #1
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	d003      	beq.n	8008dce <_scanf_i+0x10e>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	6873      	ldr	r3, [r6, #4]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	6073      	str	r3, [r6, #4]
 8008dd6:	dd1b      	ble.n	8008e10 <_scanf_i+0x150>
 8008dd8:	6833      	ldr	r3, [r6, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	60a3      	str	r3, [r4, #8]
 8008de4:	e7d9      	b.n	8008d9a <_scanf_i+0xda>
 8008de6:	f1bb 0f02 	cmp.w	fp, #2
 8008dea:	d1ae      	bne.n	8008d4a <_scanf_i+0x8a>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008df2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008df6:	d1bf      	bne.n	8008d78 <_scanf_i+0xb8>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	6063      	str	r3, [r4, #4]
 8008dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e00:	e7a2      	b.n	8008d48 <_scanf_i+0x88>
 8008e02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e06:	6022      	str	r2, [r4, #0]
 8008e08:	780b      	ldrb	r3, [r1, #0]
 8008e0a:	f805 3b01 	strb.w	r3, [r5], #1
 8008e0e:	e7de      	b.n	8008dce <_scanf_i+0x10e>
 8008e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e14:	4631      	mov	r1, r6
 8008e16:	4650      	mov	r0, sl
 8008e18:	4798      	blx	r3
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d0df      	beq.n	8008dde <_scanf_i+0x11e>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	05db      	lsls	r3, r3, #23
 8008e22:	d50d      	bpl.n	8008e40 <_scanf_i+0x180>
 8008e24:	42bd      	cmp	r5, r7
 8008e26:	d909      	bls.n	8008e3c <_scanf_i+0x17c>
 8008e28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e30:	4632      	mov	r2, r6
 8008e32:	4650      	mov	r0, sl
 8008e34:	4798      	blx	r3
 8008e36:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008e3a:	464d      	mov	r5, r9
 8008e3c:	42bd      	cmp	r5, r7
 8008e3e:	d02d      	beq.n	8008e9c <_scanf_i+0x1dc>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f012 0210 	ands.w	r2, r2, #16
 8008e46:	d113      	bne.n	8008e70 <_scanf_i+0x1b0>
 8008e48:	702a      	strb	r2, [r5, #0]
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	9e01      	ldr	r6, [sp, #4]
 8008e4e:	4639      	mov	r1, r7
 8008e50:	4650      	mov	r0, sl
 8008e52:	47b0      	blx	r6
 8008e54:	6821      	ldr	r1, [r4, #0]
 8008e56:	f8d8 3000 	ldr.w	r3, [r8]
 8008e5a:	f011 0f20 	tst.w	r1, #32
 8008e5e:	d013      	beq.n	8008e88 <_scanf_i+0x1c8>
 8008e60:	1d1a      	adds	r2, r3, #4
 8008e62:	f8c8 2000 	str.w	r2, [r8]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6018      	str	r0, [r3, #0]
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60e3      	str	r3, [r4, #12]
 8008e70:	1bed      	subs	r5, r5, r7
 8008e72:	44ab      	add	fp, r5
 8008e74:	6925      	ldr	r5, [r4, #16]
 8008e76:	445d      	add	r5, fp
 8008e78:	6125      	str	r5, [r4, #16]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	b007      	add	sp, #28
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	f04f 0b00 	mov.w	fp, #0
 8008e86:	e7ca      	b.n	8008e1e <_scanf_i+0x15e>
 8008e88:	1d1a      	adds	r2, r3, #4
 8008e8a:	f8c8 2000 	str.w	r2, [r8]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f011 0f01 	tst.w	r1, #1
 8008e94:	bf14      	ite	ne
 8008e96:	8018      	strhne	r0, [r3, #0]
 8008e98:	6018      	streq	r0, [r3, #0]
 8008e9a:	e7e6      	b.n	8008e6a <_scanf_i+0x1aa>
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	e7ed      	b.n	8008e7c <_scanf_i+0x1bc>
 8008ea0:	08009be0 	.word	0x08009be0
 8008ea4:	0800907d 	.word	0x0800907d
 8008ea8:	080065e5 	.word	0x080065e5
 8008eac:	0800a0ce 	.word	0x0800a0ce

08008eb0 <_read_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d07      	ldr	r5, [pc, #28]	; (8008ed0 <_read_r+0x20>)
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	602a      	str	r2, [r5, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f7f8 fb58 	bl	8001574 <_read>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_read_r+0x1e>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_read_r+0x1e>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200002e8 	.word	0x200002e8

08008ed4 <nan>:
 8008ed4:	4901      	ldr	r1, [pc, #4]	; (8008edc <nan+0x8>)
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	7ff80000 	.word	0x7ff80000

08008ee0 <_sbrk_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_sbrk_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f8 fbac 	bl	8001648 <_sbrk>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_sbrk_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_sbrk_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	200002e8 	.word	0x200002e8

08008f00 <__sccl>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	780b      	ldrb	r3, [r1, #0]
 8008f04:	4604      	mov	r4, r0
 8008f06:	2b5e      	cmp	r3, #94	; 0x5e
 8008f08:	bf0b      	itete	eq
 8008f0a:	784b      	ldrbeq	r3, [r1, #1]
 8008f0c:	1c48      	addne	r0, r1, #1
 8008f0e:	1c88      	addeq	r0, r1, #2
 8008f10:	2200      	movne	r2, #0
 8008f12:	bf08      	it	eq
 8008f14:	2201      	moveq	r2, #1
 8008f16:	1e61      	subs	r1, r4, #1
 8008f18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008f1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008f20:	42a9      	cmp	r1, r5
 8008f22:	d1fb      	bne.n	8008f1c <__sccl+0x1c>
 8008f24:	b90b      	cbnz	r3, 8008f2a <__sccl+0x2a>
 8008f26:	3801      	subs	r0, #1
 8008f28:	bd70      	pop	{r4, r5, r6, pc}
 8008f2a:	f082 0201 	eor.w	r2, r2, #1
 8008f2e:	54e2      	strb	r2, [r4, r3]
 8008f30:	4605      	mov	r5, r0
 8008f32:	4628      	mov	r0, r5
 8008f34:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008f38:	292d      	cmp	r1, #45	; 0x2d
 8008f3a:	d006      	beq.n	8008f4a <__sccl+0x4a>
 8008f3c:	295d      	cmp	r1, #93	; 0x5d
 8008f3e:	d0f3      	beq.n	8008f28 <__sccl+0x28>
 8008f40:	b909      	cbnz	r1, 8008f46 <__sccl+0x46>
 8008f42:	4628      	mov	r0, r5
 8008f44:	e7f0      	b.n	8008f28 <__sccl+0x28>
 8008f46:	460b      	mov	r3, r1
 8008f48:	e7f1      	b.n	8008f2e <__sccl+0x2e>
 8008f4a:	786e      	ldrb	r6, [r5, #1]
 8008f4c:	2e5d      	cmp	r6, #93	; 0x5d
 8008f4e:	d0fa      	beq.n	8008f46 <__sccl+0x46>
 8008f50:	42b3      	cmp	r3, r6
 8008f52:	dcf8      	bgt.n	8008f46 <__sccl+0x46>
 8008f54:	3502      	adds	r5, #2
 8008f56:	4619      	mov	r1, r3
 8008f58:	3101      	adds	r1, #1
 8008f5a:	428e      	cmp	r6, r1
 8008f5c:	5462      	strb	r2, [r4, r1]
 8008f5e:	dcfb      	bgt.n	8008f58 <__sccl+0x58>
 8008f60:	1af1      	subs	r1, r6, r3
 8008f62:	3901      	subs	r1, #1
 8008f64:	1c58      	adds	r0, r3, #1
 8008f66:	42b3      	cmp	r3, r6
 8008f68:	bfa8      	it	ge
 8008f6a:	2100      	movge	r1, #0
 8008f6c:	1843      	adds	r3, r0, r1
 8008f6e:	e7e0      	b.n	8008f32 <__sccl+0x32>

08008f70 <strncmp>:
 8008f70:	b510      	push	{r4, lr}
 8008f72:	4603      	mov	r3, r0
 8008f74:	b172      	cbz	r2, 8008f94 <strncmp+0x24>
 8008f76:	3901      	subs	r1, #1
 8008f78:	1884      	adds	r4, r0, r2
 8008f7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f82:	4290      	cmp	r0, r2
 8008f84:	d101      	bne.n	8008f8a <strncmp+0x1a>
 8008f86:	42a3      	cmp	r3, r4
 8008f88:	d101      	bne.n	8008f8e <strncmp+0x1e>
 8008f8a:	1a80      	subs	r0, r0, r2
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1f3      	bne.n	8008f7a <strncmp+0xa>
 8008f92:	e7fa      	b.n	8008f8a <strncmp+0x1a>
 8008f94:	4610      	mov	r0, r2
 8008f96:	e7f9      	b.n	8008f8c <strncmp+0x1c>

08008f98 <_strtoul_l.constprop.0>:
 8008f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	4f36      	ldr	r7, [pc, #216]	; (8009078 <_strtoul_l.constprop.0+0xe0>)
 8008f9e:	4686      	mov	lr, r0
 8008fa0:	460d      	mov	r5, r1
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fa8:	5de6      	ldrb	r6, [r4, r7]
 8008faa:	f016 0608 	ands.w	r6, r6, #8
 8008fae:	d1f8      	bne.n	8008fa2 <_strtoul_l.constprop.0+0xa>
 8008fb0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fb2:	d12f      	bne.n	8009014 <_strtoul_l.constprop.0+0x7c>
 8008fb4:	782c      	ldrb	r4, [r5, #0]
 8008fb6:	2601      	movs	r6, #1
 8008fb8:	1c85      	adds	r5, r0, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d057      	beq.n	800906e <_strtoul_l.constprop.0+0xd6>
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	d109      	bne.n	8008fd6 <_strtoul_l.constprop.0+0x3e>
 8008fc2:	2c30      	cmp	r4, #48	; 0x30
 8008fc4:	d107      	bne.n	8008fd6 <_strtoul_l.constprop.0+0x3e>
 8008fc6:	7828      	ldrb	r0, [r5, #0]
 8008fc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008fcc:	2858      	cmp	r0, #88	; 0x58
 8008fce:	d149      	bne.n	8009064 <_strtoul_l.constprop.0+0xcc>
 8008fd0:	786c      	ldrb	r4, [r5, #1]
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	3502      	adds	r5, #2
 8008fd6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008fda:	2700      	movs	r7, #0
 8008fdc:	fbb8 f8f3 	udiv	r8, r8, r3
 8008fe0:	fb03 f908 	mul.w	r9, r3, r8
 8008fe4:	ea6f 0909 	mvn.w	r9, r9
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fee:	f1bc 0f09 	cmp.w	ip, #9
 8008ff2:	d814      	bhi.n	800901e <_strtoul_l.constprop.0+0x86>
 8008ff4:	4664      	mov	r4, ip
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	dd22      	ble.n	8009040 <_strtoul_l.constprop.0+0xa8>
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	db1d      	blt.n	800903a <_strtoul_l.constprop.0+0xa2>
 8008ffe:	4580      	cmp	r8, r0
 8009000:	d31b      	bcc.n	800903a <_strtoul_l.constprop.0+0xa2>
 8009002:	d101      	bne.n	8009008 <_strtoul_l.constprop.0+0x70>
 8009004:	45a1      	cmp	r9, r4
 8009006:	db18      	blt.n	800903a <_strtoul_l.constprop.0+0xa2>
 8009008:	fb00 4003 	mla	r0, r0, r3, r4
 800900c:	2701      	movs	r7, #1
 800900e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009012:	e7ea      	b.n	8008fea <_strtoul_l.constprop.0+0x52>
 8009014:	2c2b      	cmp	r4, #43	; 0x2b
 8009016:	bf04      	itt	eq
 8009018:	782c      	ldrbeq	r4, [r5, #0]
 800901a:	1c85      	addeq	r5, r0, #2
 800901c:	e7cd      	b.n	8008fba <_strtoul_l.constprop.0+0x22>
 800901e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009022:	f1bc 0f19 	cmp.w	ip, #25
 8009026:	d801      	bhi.n	800902c <_strtoul_l.constprop.0+0x94>
 8009028:	3c37      	subs	r4, #55	; 0x37
 800902a:	e7e4      	b.n	8008ff6 <_strtoul_l.constprop.0+0x5e>
 800902c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009030:	f1bc 0f19 	cmp.w	ip, #25
 8009034:	d804      	bhi.n	8009040 <_strtoul_l.constprop.0+0xa8>
 8009036:	3c57      	subs	r4, #87	; 0x57
 8009038:	e7dd      	b.n	8008ff6 <_strtoul_l.constprop.0+0x5e>
 800903a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800903e:	e7e6      	b.n	800900e <_strtoul_l.constprop.0+0x76>
 8009040:	2f00      	cmp	r7, #0
 8009042:	da07      	bge.n	8009054 <_strtoul_l.constprop.0+0xbc>
 8009044:	2322      	movs	r3, #34	; 0x22
 8009046:	f8ce 3000 	str.w	r3, [lr]
 800904a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800904e:	b932      	cbnz	r2, 800905e <_strtoul_l.constprop.0+0xc6>
 8009050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009054:	b106      	cbz	r6, 8009058 <_strtoul_l.constprop.0+0xc0>
 8009056:	4240      	negs	r0, r0
 8009058:	2a00      	cmp	r2, #0
 800905a:	d0f9      	beq.n	8009050 <_strtoul_l.constprop.0+0xb8>
 800905c:	b107      	cbz	r7, 8009060 <_strtoul_l.constprop.0+0xc8>
 800905e:	1e69      	subs	r1, r5, #1
 8009060:	6011      	str	r1, [r2, #0]
 8009062:	e7f5      	b.n	8009050 <_strtoul_l.constprop.0+0xb8>
 8009064:	2430      	movs	r4, #48	; 0x30
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1b5      	bne.n	8008fd6 <_strtoul_l.constprop.0+0x3e>
 800906a:	2308      	movs	r3, #8
 800906c:	e7b3      	b.n	8008fd6 <_strtoul_l.constprop.0+0x3e>
 800906e:	2c30      	cmp	r4, #48	; 0x30
 8009070:	d0a9      	beq.n	8008fc6 <_strtoul_l.constprop.0+0x2e>
 8009072:	230a      	movs	r3, #10
 8009074:	e7af      	b.n	8008fd6 <_strtoul_l.constprop.0+0x3e>
 8009076:	bf00      	nop
 8009078:	08009d41 	.word	0x08009d41

0800907c <_strtoul_r>:
 800907c:	f7ff bf8c 	b.w	8008f98 <_strtoul_l.constprop.0>

08009080 <__submore>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	460c      	mov	r4, r1
 8009086:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800908c:	4299      	cmp	r1, r3
 800908e:	d11d      	bne.n	80090cc <__submore+0x4c>
 8009090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009094:	f7ff fa18 	bl	80084c8 <_malloc_r>
 8009098:	b918      	cbnz	r0, 80090a2 <__submore+0x22>
 800909a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800909e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80090a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80090ac:	6360      	str	r0, [r4, #52]	; 0x34
 80090ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80090b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80090b6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80090ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80090be:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80090c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7e8      	b.n	800909e <__submore+0x1e>
 80090cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80090ce:	0077      	lsls	r7, r6, #1
 80090d0:	463a      	mov	r2, r7
 80090d2:	f000 fa29 	bl	8009528 <_realloc_r>
 80090d6:	4605      	mov	r5, r0
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0de      	beq.n	800909a <__submore+0x1a>
 80090dc:	eb00 0806 	add.w	r8, r0, r6
 80090e0:	4601      	mov	r1, r0
 80090e2:	4632      	mov	r2, r6
 80090e4:	4640      	mov	r0, r8
 80090e6:	f7fe fcaf 	bl	8007a48 <memcpy>
 80090ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80090ee:	f8c4 8000 	str.w	r8, [r4]
 80090f2:	e7e9      	b.n	80090c8 <__submore+0x48>

080090f4 <__ascii_wctomb>:
 80090f4:	4603      	mov	r3, r0
 80090f6:	4608      	mov	r0, r1
 80090f8:	b141      	cbz	r1, 800910c <__ascii_wctomb+0x18>
 80090fa:	2aff      	cmp	r2, #255	; 0xff
 80090fc:	d904      	bls.n	8009108 <__ascii_wctomb+0x14>
 80090fe:	228a      	movs	r2, #138	; 0x8a
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009106:	4770      	bx	lr
 8009108:	700a      	strb	r2, [r1, #0]
 800910a:	2001      	movs	r0, #1
 800910c:	4770      	bx	lr
	...

08009110 <__assert_func>:
 8009110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009112:	4614      	mov	r4, r2
 8009114:	461a      	mov	r2, r3
 8009116:	4b09      	ldr	r3, [pc, #36]	; (800913c <__assert_func+0x2c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4605      	mov	r5, r0
 800911c:	68d8      	ldr	r0, [r3, #12]
 800911e:	b14c      	cbz	r4, 8009134 <__assert_func+0x24>
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <__assert_func+0x30>)
 8009122:	9100      	str	r1, [sp, #0]
 8009124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009128:	4906      	ldr	r1, [pc, #24]	; (8009144 <__assert_func+0x34>)
 800912a:	462b      	mov	r3, r5
 800912c:	f000 f9a2 	bl	8009474 <fiprintf>
 8009130:	f000 fc40 	bl	80099b4 <abort>
 8009134:	4b04      	ldr	r3, [pc, #16]	; (8009148 <__assert_func+0x38>)
 8009136:	461c      	mov	r4, r3
 8009138:	e7f3      	b.n	8009122 <__assert_func+0x12>
 800913a:	bf00      	nop
 800913c:	2000000c 	.word	0x2000000c
 8009140:	0800a0d0 	.word	0x0800a0d0
 8009144:	0800a0dd 	.word	0x0800a0dd
 8009148:	0800a10b 	.word	0x0800a10b

0800914c <__sflush_r>:
 800914c:	898a      	ldrh	r2, [r1, #12]
 800914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009150:	4605      	mov	r5, r0
 8009152:	0710      	lsls	r0, r2, #28
 8009154:	460c      	mov	r4, r1
 8009156:	d457      	bmi.n	8009208 <__sflush_r+0xbc>
 8009158:	684b      	ldr	r3, [r1, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc04      	bgt.n	8009168 <__sflush_r+0x1c>
 800915e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	dc01      	bgt.n	8009168 <__sflush_r+0x1c>
 8009164:	2000      	movs	r0, #0
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916a:	2e00      	cmp	r6, #0
 800916c:	d0fa      	beq.n	8009164 <__sflush_r+0x18>
 800916e:	2300      	movs	r3, #0
 8009170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009174:	682f      	ldr	r7, [r5, #0]
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	d032      	beq.n	80091e0 <__sflush_r+0x94>
 800917a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	075a      	lsls	r2, r3, #29
 8009180:	d505      	bpl.n	800918e <__sflush_r+0x42>
 8009182:	6863      	ldr	r3, [r4, #4]
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009188:	b10b      	cbz	r3, 800918e <__sflush_r+0x42>
 800918a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800918c:	1ac0      	subs	r0, r0, r3
 800918e:	2300      	movs	r3, #0
 8009190:	4602      	mov	r2, r0
 8009192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009194:	6a21      	ldr	r1, [r4, #32]
 8009196:	4628      	mov	r0, r5
 8009198:	47b0      	blx	r6
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	d106      	bne.n	80091ae <__sflush_r+0x62>
 80091a0:	6829      	ldr	r1, [r5, #0]
 80091a2:	291d      	cmp	r1, #29
 80091a4:	d82c      	bhi.n	8009200 <__sflush_r+0xb4>
 80091a6:	4a29      	ldr	r2, [pc, #164]	; (800924c <__sflush_r+0x100>)
 80091a8:	40ca      	lsrs	r2, r1
 80091aa:	07d6      	lsls	r6, r2, #31
 80091ac:	d528      	bpl.n	8009200 <__sflush_r+0xb4>
 80091ae:	2200      	movs	r2, #0
 80091b0:	6062      	str	r2, [r4, #4]
 80091b2:	04d9      	lsls	r1, r3, #19
 80091b4:	6922      	ldr	r2, [r4, #16]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	d504      	bpl.n	80091c4 <__sflush_r+0x78>
 80091ba:	1c42      	adds	r2, r0, #1
 80091bc:	d101      	bne.n	80091c2 <__sflush_r+0x76>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b903      	cbnz	r3, 80091c4 <__sflush_r+0x78>
 80091c2:	6560      	str	r0, [r4, #84]	; 0x54
 80091c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c6:	602f      	str	r7, [r5, #0]
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d0cb      	beq.n	8009164 <__sflush_r+0x18>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__sflush_r+0x8e>
 80091d4:	4628      	mov	r0, r5
 80091d6:	f7ff f90d 	bl	80083f4 <_free_r>
 80091da:	2000      	movs	r0, #0
 80091dc:	6360      	str	r0, [r4, #52]	; 0x34
 80091de:	e7c2      	b.n	8009166 <__sflush_r+0x1a>
 80091e0:	6a21      	ldr	r1, [r4, #32]
 80091e2:	2301      	movs	r3, #1
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b0      	blx	r6
 80091e8:	1c41      	adds	r1, r0, #1
 80091ea:	d1c7      	bne.n	800917c <__sflush_r+0x30>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0c4      	beq.n	800917c <__sflush_r+0x30>
 80091f2:	2b1d      	cmp	r3, #29
 80091f4:	d001      	beq.n	80091fa <__sflush_r+0xae>
 80091f6:	2b16      	cmp	r3, #22
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0xb2>
 80091fa:	602f      	str	r7, [r5, #0]
 80091fc:	e7b2      	b.n	8009164 <__sflush_r+0x18>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e7ae      	b.n	8009166 <__sflush_r+0x1a>
 8009208:	690f      	ldr	r7, [r1, #16]
 800920a:	2f00      	cmp	r7, #0
 800920c:	d0aa      	beq.n	8009164 <__sflush_r+0x18>
 800920e:	0793      	lsls	r3, r2, #30
 8009210:	680e      	ldr	r6, [r1, #0]
 8009212:	bf08      	it	eq
 8009214:	694b      	ldreq	r3, [r1, #20]
 8009216:	600f      	str	r7, [r1, #0]
 8009218:	bf18      	it	ne
 800921a:	2300      	movne	r3, #0
 800921c:	1bf6      	subs	r6, r6, r7
 800921e:	608b      	str	r3, [r1, #8]
 8009220:	2e00      	cmp	r6, #0
 8009222:	dd9f      	ble.n	8009164 <__sflush_r+0x18>
 8009224:	6a21      	ldr	r1, [r4, #32]
 8009226:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800922a:	4633      	mov	r3, r6
 800922c:	463a      	mov	r2, r7
 800922e:	4628      	mov	r0, r5
 8009230:	47e0      	blx	ip
 8009232:	2800      	cmp	r0, #0
 8009234:	dc06      	bgt.n	8009244 <__sflush_r+0xf8>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009242:	e790      	b.n	8009166 <__sflush_r+0x1a>
 8009244:	4407      	add	r7, r0
 8009246:	1a36      	subs	r6, r6, r0
 8009248:	e7ea      	b.n	8009220 <__sflush_r+0xd4>
 800924a:	bf00      	nop
 800924c:	20400001 	.word	0x20400001

08009250 <_fflush_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b913      	cbnz	r3, 8009260 <_fflush_r+0x10>
 800925a:	2500      	movs	r5, #0
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	b118      	cbz	r0, 800926a <_fflush_r+0x1a>
 8009262:	6983      	ldr	r3, [r0, #24]
 8009264:	b90b      	cbnz	r3, 800926a <_fflush_r+0x1a>
 8009266:	f000 f887 	bl	8009378 <__sinit>
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <_fflush_r+0x6c>)
 800926c:	429c      	cmp	r4, r3
 800926e:	d11b      	bne.n	80092a8 <_fflush_r+0x58>
 8009270:	686c      	ldr	r4, [r5, #4]
 8009272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <_fflush_r+0xa>
 800927a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800927c:	07d0      	lsls	r0, r2, #31
 800927e:	d404      	bmi.n	800928a <_fflush_r+0x3a>
 8009280:	0599      	lsls	r1, r3, #22
 8009282:	d402      	bmi.n	800928a <_fflush_r+0x3a>
 8009284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009286:	f000 f927 	bl	80094d8 <__retarget_lock_acquire_recursive>
 800928a:	4628      	mov	r0, r5
 800928c:	4621      	mov	r1, r4
 800928e:	f7ff ff5d 	bl	800914c <__sflush_r>
 8009292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009294:	07da      	lsls	r2, r3, #31
 8009296:	4605      	mov	r5, r0
 8009298:	d4e0      	bmi.n	800925c <_fflush_r+0xc>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	059b      	lsls	r3, r3, #22
 800929e:	d4dd      	bmi.n	800925c <_fflush_r+0xc>
 80092a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092a2:	f000 f91a 	bl	80094da <__retarget_lock_release_recursive>
 80092a6:	e7d9      	b.n	800925c <_fflush_r+0xc>
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_fflush_r+0x70>)
 80092aa:	429c      	cmp	r4, r3
 80092ac:	d101      	bne.n	80092b2 <_fflush_r+0x62>
 80092ae:	68ac      	ldr	r4, [r5, #8]
 80092b0:	e7df      	b.n	8009272 <_fflush_r+0x22>
 80092b2:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <_fflush_r+0x74>)
 80092b4:	429c      	cmp	r4, r3
 80092b6:	bf08      	it	eq
 80092b8:	68ec      	ldreq	r4, [r5, #12]
 80092ba:	e7da      	b.n	8009272 <_fflush_r+0x22>
 80092bc:	0800a12c 	.word	0x0800a12c
 80092c0:	0800a14c 	.word	0x0800a14c
 80092c4:	0800a10c 	.word	0x0800a10c

080092c8 <std>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	e9c0 3300 	strd	r3, r3, [r0]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6183      	str	r3, [r0, #24]
 80092e0:	4619      	mov	r1, r3
 80092e2:	2208      	movs	r2, #8
 80092e4:	305c      	adds	r0, #92	; 0x5c
 80092e6:	f7fb fbd9 	bl	8004a9c <memset>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x38>)
 80092ec:	6263      	str	r3, [r4, #36]	; 0x24
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x3c>)
 80092f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x40>)
 80092f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x44>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6323      	str	r3, [r4, #48]	; 0x30
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	08005819 	.word	0x08005819
 8009304:	0800583f 	.word	0x0800583f
 8009308:	08005877 	.word	0x08005877
 800930c:	0800589b 	.word	0x0800589b

08009310 <_cleanup_r>:
 8009310:	4901      	ldr	r1, [pc, #4]	; (8009318 <_cleanup_r+0x8>)
 8009312:	f000 b8c1 	b.w	8009498 <_fwalk_reent>
 8009316:	bf00      	nop
 8009318:	08009251 	.word	0x08009251

0800931c <__sfmoreglue>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	2268      	movs	r2, #104	; 0x68
 8009320:	1e4d      	subs	r5, r1, #1
 8009322:	4355      	muls	r5, r2
 8009324:	460e      	mov	r6, r1
 8009326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932a:	f7ff f8cd 	bl	80084c8 <_malloc_r>
 800932e:	4604      	mov	r4, r0
 8009330:	b140      	cbz	r0, 8009344 <__sfmoreglue+0x28>
 8009332:	2100      	movs	r1, #0
 8009334:	e9c0 1600 	strd	r1, r6, [r0]
 8009338:	300c      	adds	r0, #12
 800933a:	60a0      	str	r0, [r4, #8]
 800933c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009340:	f7fb fbac 	bl	8004a9c <memset>
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__sfp_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sfp_lock_acquire+0x8>)
 800934a:	f000 b8c5 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	200002ed 	.word	0x200002ed

08009354 <__sfp_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_release+0x8>)
 8009356:	f000 b8c0 	b.w	80094da <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	200002ed 	.word	0x200002ed

08009360 <__sinit_lock_acquire>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sinit_lock_acquire+0x8>)
 8009362:	f000 b8b9 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	200002ee 	.word	0x200002ee

0800936c <__sinit_lock_release>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_release+0x8>)
 800936e:	f000 b8b4 	b.w	80094da <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	200002ee 	.word	0x200002ee

08009378 <__sinit>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	f7ff fff0 	bl	8009360 <__sinit_lock_acquire>
 8009380:	69a3      	ldr	r3, [r4, #24]
 8009382:	b11b      	cbz	r3, 800938c <__sinit+0x14>
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bff0 	b.w	800936c <__sinit_lock_release>
 800938c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009390:	6523      	str	r3, [r4, #80]	; 0x50
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <__sinit+0x68>)
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <__sinit+0x6c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	62a2      	str	r2, [r4, #40]	; 0x28
 800939a:	42a3      	cmp	r3, r4
 800939c:	bf04      	itt	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	61a3      	streq	r3, [r4, #24]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f820 	bl	80093e8 <__sfp>
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f81c 	bl	80093e8 <__sfp>
 80093b0:	60a0      	str	r0, [r4, #8]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f818 	bl	80093e8 <__sfp>
 80093b8:	2200      	movs	r2, #0
 80093ba:	60e0      	str	r0, [r4, #12]
 80093bc:	2104      	movs	r1, #4
 80093be:	6860      	ldr	r0, [r4, #4]
 80093c0:	f7ff ff82 	bl	80092c8 <std>
 80093c4:	68a0      	ldr	r0, [r4, #8]
 80093c6:	2201      	movs	r2, #1
 80093c8:	2109      	movs	r1, #9
 80093ca:	f7ff ff7d 	bl	80092c8 <std>
 80093ce:	68e0      	ldr	r0, [r4, #12]
 80093d0:	2202      	movs	r2, #2
 80093d2:	2112      	movs	r1, #18
 80093d4:	f7ff ff78 	bl	80092c8 <std>
 80093d8:	2301      	movs	r3, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	e7d2      	b.n	8009384 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	08009cb4 	.word	0x08009cb4
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfp>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	f7ff ffac 	bl	8009348 <__sfp_lock_acquire>
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <__sfp+0x84>)
 80093f2:	681e      	ldr	r6, [r3, #0]
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	b913      	cbnz	r3, 80093fe <__sfp+0x16>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbd 	bl	8009378 <__sinit>
 80093fe:	3648      	adds	r6, #72	; 0x48
 8009400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	d503      	bpl.n	8009410 <__sfp+0x28>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	b30b      	cbz	r3, 8009450 <__sfp+0x68>
 800940c:	6836      	ldr	r6, [r6, #0]
 800940e:	e7f7      	b.n	8009400 <__sfp+0x18>
 8009410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009414:	b9d5      	cbnz	r5, 800944c <__sfp+0x64>
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <__sfp+0x88>)
 8009418:	60e3      	str	r3, [r4, #12]
 800941a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941e:	6665      	str	r5, [r4, #100]	; 0x64
 8009420:	f000 f859 	bl	80094d6 <__retarget_lock_init_recursive>
 8009424:	f7ff ff96 	bl	8009354 <__sfp_lock_release>
 8009428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800942c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	61a5      	str	r5, [r4, #24]
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800943c:	f7fb fb2e 	bl	8004a9c <memset>
 8009440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009448:	4620      	mov	r0, r4
 800944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944c:	3468      	adds	r4, #104	; 0x68
 800944e:	e7d9      	b.n	8009404 <__sfp+0x1c>
 8009450:	2104      	movs	r1, #4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ff62 	bl	800931c <__sfmoreglue>
 8009458:	4604      	mov	r4, r0
 800945a:	6030      	str	r0, [r6, #0]
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d5      	bne.n	800940c <__sfp+0x24>
 8009460:	f7ff ff78 	bl	8009354 <__sfp_lock_release>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7ee      	b.n	8009448 <__sfp+0x60>
 800946a:	bf00      	nop
 800946c:	08009cb4 	.word	0x08009cb4
 8009470:	ffff0001 	.word	0xffff0001

08009474 <fiprintf>:
 8009474:	b40e      	push	{r1, r2, r3}
 8009476:	b503      	push	{r0, r1, lr}
 8009478:	4601      	mov	r1, r0
 800947a:	ab03      	add	r3, sp, #12
 800947c:	4805      	ldr	r0, [pc, #20]	; (8009494 <fiprintf+0x20>)
 800947e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009482:	6800      	ldr	r0, [r0, #0]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	f000 f8a5 	bl	80095d4 <_vfiprintf_r>
 800948a:	b002      	add	sp, #8
 800948c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009490:	b003      	add	sp, #12
 8009492:	4770      	bx	lr
 8009494:	2000000c 	.word	0x2000000c

08009498 <_fwalk_reent>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4606      	mov	r6, r0
 800949e:	4688      	mov	r8, r1
 80094a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094a4:	2700      	movs	r7, #0
 80094a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094aa:	f1b9 0901 	subs.w	r9, r9, #1
 80094ae:	d505      	bpl.n	80094bc <_fwalk_reent+0x24>
 80094b0:	6824      	ldr	r4, [r4, #0]
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d1f7      	bne.n	80094a6 <_fwalk_reent+0xe>
 80094b6:	4638      	mov	r0, r7
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d907      	bls.n	80094d2 <_fwalk_reent+0x3a>
 80094c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c6:	3301      	adds	r3, #1
 80094c8:	d003      	beq.n	80094d2 <_fwalk_reent+0x3a>
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	47c0      	blx	r8
 80094d0:	4307      	orrs	r7, r0
 80094d2:	3568      	adds	r5, #104	; 0x68
 80094d4:	e7e9      	b.n	80094aa <_fwalk_reent+0x12>

080094d6 <__retarget_lock_init_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <__retarget_lock_acquire_recursive>:
 80094d8:	4770      	bx	lr

080094da <__retarget_lock_release_recursive>:
 80094da:	4770      	bx	lr

080094dc <memmove>:
 80094dc:	4288      	cmp	r0, r1
 80094de:	b510      	push	{r4, lr}
 80094e0:	eb01 0402 	add.w	r4, r1, r2
 80094e4:	d902      	bls.n	80094ec <memmove+0x10>
 80094e6:	4284      	cmp	r4, r0
 80094e8:	4623      	mov	r3, r4
 80094ea:	d807      	bhi.n	80094fc <memmove+0x20>
 80094ec:	1e43      	subs	r3, r0, #1
 80094ee:	42a1      	cmp	r1, r4
 80094f0:	d008      	beq.n	8009504 <memmove+0x28>
 80094f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094fa:	e7f8      	b.n	80094ee <memmove+0x12>
 80094fc:	4402      	add	r2, r0
 80094fe:	4601      	mov	r1, r0
 8009500:	428a      	cmp	r2, r1
 8009502:	d100      	bne.n	8009506 <memmove+0x2a>
 8009504:	bd10      	pop	{r4, pc}
 8009506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800950e:	e7f7      	b.n	8009500 <memmove+0x24>

08009510 <__malloc_lock>:
 8009510:	4801      	ldr	r0, [pc, #4]	; (8009518 <__malloc_lock+0x8>)
 8009512:	f7ff bfe1 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8009516:	bf00      	nop
 8009518:	200002ec 	.word	0x200002ec

0800951c <__malloc_unlock>:
 800951c:	4801      	ldr	r0, [pc, #4]	; (8009524 <__malloc_unlock+0x8>)
 800951e:	f7ff bfdc 	b.w	80094da <__retarget_lock_release_recursive>
 8009522:	bf00      	nop
 8009524:	200002ec 	.word	0x200002ec

08009528 <_realloc_r>:
 8009528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952c:	4680      	mov	r8, r0
 800952e:	4614      	mov	r4, r2
 8009530:	460e      	mov	r6, r1
 8009532:	b921      	cbnz	r1, 800953e <_realloc_r+0x16>
 8009534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009538:	4611      	mov	r1, r2
 800953a:	f7fe bfc5 	b.w	80084c8 <_malloc_r>
 800953e:	b92a      	cbnz	r2, 800954c <_realloc_r+0x24>
 8009540:	f7fe ff58 	bl	80083f4 <_free_r>
 8009544:	4625      	mov	r5, r4
 8009546:	4628      	mov	r0, r5
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	f000 fa9e 	bl	8009a8c <_malloc_usable_size_r>
 8009550:	4284      	cmp	r4, r0
 8009552:	4607      	mov	r7, r0
 8009554:	d802      	bhi.n	800955c <_realloc_r+0x34>
 8009556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800955a:	d812      	bhi.n	8009582 <_realloc_r+0x5a>
 800955c:	4621      	mov	r1, r4
 800955e:	4640      	mov	r0, r8
 8009560:	f7fe ffb2 	bl	80084c8 <_malloc_r>
 8009564:	4605      	mov	r5, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	d0ed      	beq.n	8009546 <_realloc_r+0x1e>
 800956a:	42bc      	cmp	r4, r7
 800956c:	4622      	mov	r2, r4
 800956e:	4631      	mov	r1, r6
 8009570:	bf28      	it	cs
 8009572:	463a      	movcs	r2, r7
 8009574:	f7fe fa68 	bl	8007a48 <memcpy>
 8009578:	4631      	mov	r1, r6
 800957a:	4640      	mov	r0, r8
 800957c:	f7fe ff3a 	bl	80083f4 <_free_r>
 8009580:	e7e1      	b.n	8009546 <_realloc_r+0x1e>
 8009582:	4635      	mov	r5, r6
 8009584:	e7df      	b.n	8009546 <_realloc_r+0x1e>

08009586 <__sfputc_r>:
 8009586:	6893      	ldr	r3, [r2, #8]
 8009588:	3b01      	subs	r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	b410      	push	{r4}
 800958e:	6093      	str	r3, [r2, #8]
 8009590:	da07      	bge.n	80095a2 <__sfputc_r+0x1c>
 8009592:	6994      	ldr	r4, [r2, #24]
 8009594:	42a3      	cmp	r3, r4
 8009596:	db01      	blt.n	800959c <__sfputc_r+0x16>
 8009598:	290a      	cmp	r1, #10
 800959a:	d102      	bne.n	80095a2 <__sfputc_r+0x1c>
 800959c:	bc10      	pop	{r4}
 800959e:	f000 b949 	b.w	8009834 <__swbuf_r>
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	1c58      	adds	r0, r3, #1
 80095a6:	6010      	str	r0, [r2, #0]
 80095a8:	7019      	strb	r1, [r3, #0]
 80095aa:	4608      	mov	r0, r1
 80095ac:	bc10      	pop	{r4}
 80095ae:	4770      	bx	lr

080095b0 <__sfputs_r>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	4606      	mov	r6, r0
 80095b4:	460f      	mov	r7, r1
 80095b6:	4614      	mov	r4, r2
 80095b8:	18d5      	adds	r5, r2, r3
 80095ba:	42ac      	cmp	r4, r5
 80095bc:	d101      	bne.n	80095c2 <__sfputs_r+0x12>
 80095be:	2000      	movs	r0, #0
 80095c0:	e007      	b.n	80095d2 <__sfputs_r+0x22>
 80095c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c6:	463a      	mov	r2, r7
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7ff ffdc 	bl	8009586 <__sfputc_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d1f3      	bne.n	80095ba <__sfputs_r+0xa>
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095d4 <_vfiprintf_r>:
 80095d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	460d      	mov	r5, r1
 80095da:	b09d      	sub	sp, #116	; 0x74
 80095dc:	4614      	mov	r4, r2
 80095de:	4698      	mov	r8, r3
 80095e0:	4606      	mov	r6, r0
 80095e2:	b118      	cbz	r0, 80095ec <_vfiprintf_r+0x18>
 80095e4:	6983      	ldr	r3, [r0, #24]
 80095e6:	b90b      	cbnz	r3, 80095ec <_vfiprintf_r+0x18>
 80095e8:	f7ff fec6 	bl	8009378 <__sinit>
 80095ec:	4b89      	ldr	r3, [pc, #548]	; (8009814 <_vfiprintf_r+0x240>)
 80095ee:	429d      	cmp	r5, r3
 80095f0:	d11b      	bne.n	800962a <_vfiprintf_r+0x56>
 80095f2:	6875      	ldr	r5, [r6, #4]
 80095f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f6:	07d9      	lsls	r1, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_vfiprintf_r+0x32>
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	059a      	lsls	r2, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_vfiprintf_r+0x32>
 8009600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009602:	f7ff ff69 	bl	80094d8 <__retarget_lock_acquire_recursive>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	071b      	lsls	r3, r3, #28
 800960a:	d501      	bpl.n	8009610 <_vfiprintf_r+0x3c>
 800960c:	692b      	ldr	r3, [r5, #16]
 800960e:	b9eb      	cbnz	r3, 800964c <_vfiprintf_r+0x78>
 8009610:	4629      	mov	r1, r5
 8009612:	4630      	mov	r0, r6
 8009614:	f000 f960 	bl	80098d8 <__swsetup_r>
 8009618:	b1c0      	cbz	r0, 800964c <_vfiprintf_r+0x78>
 800961a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800961c:	07dc      	lsls	r4, r3, #31
 800961e:	d50e      	bpl.n	800963e <_vfiprintf_r+0x6a>
 8009620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009624:	b01d      	add	sp, #116	; 0x74
 8009626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962a:	4b7b      	ldr	r3, [pc, #492]	; (8009818 <_vfiprintf_r+0x244>)
 800962c:	429d      	cmp	r5, r3
 800962e:	d101      	bne.n	8009634 <_vfiprintf_r+0x60>
 8009630:	68b5      	ldr	r5, [r6, #8]
 8009632:	e7df      	b.n	80095f4 <_vfiprintf_r+0x20>
 8009634:	4b79      	ldr	r3, [pc, #484]	; (800981c <_vfiprintf_r+0x248>)
 8009636:	429d      	cmp	r5, r3
 8009638:	bf08      	it	eq
 800963a:	68f5      	ldreq	r5, [r6, #12]
 800963c:	e7da      	b.n	80095f4 <_vfiprintf_r+0x20>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	0598      	lsls	r0, r3, #22
 8009642:	d4ed      	bmi.n	8009620 <_vfiprintf_r+0x4c>
 8009644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009646:	f7ff ff48 	bl	80094da <__retarget_lock_release_recursive>
 800964a:	e7e9      	b.n	8009620 <_vfiprintf_r+0x4c>
 800964c:	2300      	movs	r3, #0
 800964e:	9309      	str	r3, [sp, #36]	; 0x24
 8009650:	2320      	movs	r3, #32
 8009652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009656:	f8cd 800c 	str.w	r8, [sp, #12]
 800965a:	2330      	movs	r3, #48	; 0x30
 800965c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009820 <_vfiprintf_r+0x24c>
 8009660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009664:	f04f 0901 	mov.w	r9, #1
 8009668:	4623      	mov	r3, r4
 800966a:	469a      	mov	sl, r3
 800966c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009670:	b10a      	cbz	r2, 8009676 <_vfiprintf_r+0xa2>
 8009672:	2a25      	cmp	r2, #37	; 0x25
 8009674:	d1f9      	bne.n	800966a <_vfiprintf_r+0x96>
 8009676:	ebba 0b04 	subs.w	fp, sl, r4
 800967a:	d00b      	beq.n	8009694 <_vfiprintf_r+0xc0>
 800967c:	465b      	mov	r3, fp
 800967e:	4622      	mov	r2, r4
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ff94 	bl	80095b0 <__sfputs_r>
 8009688:	3001      	adds	r0, #1
 800968a:	f000 80aa 	beq.w	80097e2 <_vfiprintf_r+0x20e>
 800968e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009690:	445a      	add	r2, fp
 8009692:	9209      	str	r2, [sp, #36]	; 0x24
 8009694:	f89a 3000 	ldrb.w	r3, [sl]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80a2 	beq.w	80097e2 <_vfiprintf_r+0x20e>
 800969e:	2300      	movs	r3, #0
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a8:	f10a 0a01 	add.w	sl, sl, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	9307      	str	r3, [sp, #28]
 80096b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096b4:	931a      	str	r3, [sp, #104]	; 0x68
 80096b6:	4654      	mov	r4, sl
 80096b8:	2205      	movs	r2, #5
 80096ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096be:	4858      	ldr	r0, [pc, #352]	; (8009820 <_vfiprintf_r+0x24c>)
 80096c0:	f7f6 fd66 	bl	8000190 <memchr>
 80096c4:	9a04      	ldr	r2, [sp, #16]
 80096c6:	b9d8      	cbnz	r0, 8009700 <_vfiprintf_r+0x12c>
 80096c8:	06d1      	lsls	r1, r2, #27
 80096ca:	bf44      	itt	mi
 80096cc:	2320      	movmi	r3, #32
 80096ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d2:	0713      	lsls	r3, r2, #28
 80096d4:	bf44      	itt	mi
 80096d6:	232b      	movmi	r3, #43	; 0x2b
 80096d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096dc:	f89a 3000 	ldrb.w	r3, [sl]
 80096e0:	2b2a      	cmp	r3, #42	; 0x2a
 80096e2:	d015      	beq.n	8009710 <_vfiprintf_r+0x13c>
 80096e4:	9a07      	ldr	r2, [sp, #28]
 80096e6:	4654      	mov	r4, sl
 80096e8:	2000      	movs	r0, #0
 80096ea:	f04f 0c0a 	mov.w	ip, #10
 80096ee:	4621      	mov	r1, r4
 80096f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f4:	3b30      	subs	r3, #48	; 0x30
 80096f6:	2b09      	cmp	r3, #9
 80096f8:	d94e      	bls.n	8009798 <_vfiprintf_r+0x1c4>
 80096fa:	b1b0      	cbz	r0, 800972a <_vfiprintf_r+0x156>
 80096fc:	9207      	str	r2, [sp, #28]
 80096fe:	e014      	b.n	800972a <_vfiprintf_r+0x156>
 8009700:	eba0 0308 	sub.w	r3, r0, r8
 8009704:	fa09 f303 	lsl.w	r3, r9, r3
 8009708:	4313      	orrs	r3, r2
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	46a2      	mov	sl, r4
 800970e:	e7d2      	b.n	80096b6 <_vfiprintf_r+0xe2>
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	1d19      	adds	r1, r3, #4
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	9103      	str	r1, [sp, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	bfbb      	ittet	lt
 800971c:	425b      	neglt	r3, r3
 800971e:	f042 0202 	orrlt.w	r2, r2, #2
 8009722:	9307      	strge	r3, [sp, #28]
 8009724:	9307      	strlt	r3, [sp, #28]
 8009726:	bfb8      	it	lt
 8009728:	9204      	strlt	r2, [sp, #16]
 800972a:	7823      	ldrb	r3, [r4, #0]
 800972c:	2b2e      	cmp	r3, #46	; 0x2e
 800972e:	d10c      	bne.n	800974a <_vfiprintf_r+0x176>
 8009730:	7863      	ldrb	r3, [r4, #1]
 8009732:	2b2a      	cmp	r3, #42	; 0x2a
 8009734:	d135      	bne.n	80097a2 <_vfiprintf_r+0x1ce>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	1d1a      	adds	r2, r3, #4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	9203      	str	r2, [sp, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	bfb8      	it	lt
 8009742:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009746:	3402      	adds	r4, #2
 8009748:	9305      	str	r3, [sp, #20]
 800974a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009824 <_vfiprintf_r+0x250>
 800974e:	7821      	ldrb	r1, [r4, #0]
 8009750:	2203      	movs	r2, #3
 8009752:	4650      	mov	r0, sl
 8009754:	f7f6 fd1c 	bl	8000190 <memchr>
 8009758:	b140      	cbz	r0, 800976c <_vfiprintf_r+0x198>
 800975a:	2340      	movs	r3, #64	; 0x40
 800975c:	eba0 000a 	sub.w	r0, r0, sl
 8009760:	fa03 f000 	lsl.w	r0, r3, r0
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	4303      	orrs	r3, r0
 8009768:	3401      	adds	r4, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009770:	482d      	ldr	r0, [pc, #180]	; (8009828 <_vfiprintf_r+0x254>)
 8009772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009776:	2206      	movs	r2, #6
 8009778:	f7f6 fd0a 	bl	8000190 <memchr>
 800977c:	2800      	cmp	r0, #0
 800977e:	d03f      	beq.n	8009800 <_vfiprintf_r+0x22c>
 8009780:	4b2a      	ldr	r3, [pc, #168]	; (800982c <_vfiprintf_r+0x258>)
 8009782:	bb1b      	cbnz	r3, 80097cc <_vfiprintf_r+0x1f8>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	3307      	adds	r3, #7
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	3308      	adds	r3, #8
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009792:	443b      	add	r3, r7
 8009794:	9309      	str	r3, [sp, #36]	; 0x24
 8009796:	e767      	b.n	8009668 <_vfiprintf_r+0x94>
 8009798:	fb0c 3202 	mla	r2, ip, r2, r3
 800979c:	460c      	mov	r4, r1
 800979e:	2001      	movs	r0, #1
 80097a0:	e7a5      	b.n	80096ee <_vfiprintf_r+0x11a>
 80097a2:	2300      	movs	r3, #0
 80097a4:	3401      	adds	r4, #1
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	4619      	mov	r1, r3
 80097aa:	f04f 0c0a 	mov.w	ip, #10
 80097ae:	4620      	mov	r0, r4
 80097b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b4:	3a30      	subs	r2, #48	; 0x30
 80097b6:	2a09      	cmp	r2, #9
 80097b8:	d903      	bls.n	80097c2 <_vfiprintf_r+0x1ee>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c5      	beq.n	800974a <_vfiprintf_r+0x176>
 80097be:	9105      	str	r1, [sp, #20]
 80097c0:	e7c3      	b.n	800974a <_vfiprintf_r+0x176>
 80097c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c6:	4604      	mov	r4, r0
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7f0      	b.n	80097ae <_vfiprintf_r+0x1da>
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	462a      	mov	r2, r5
 80097d2:	4b17      	ldr	r3, [pc, #92]	; (8009830 <_vfiprintf_r+0x25c>)
 80097d4:	a904      	add	r1, sp, #16
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7fb fa06 	bl	8004be8 <_printf_float>
 80097dc:	4607      	mov	r7, r0
 80097de:	1c78      	adds	r0, r7, #1
 80097e0:	d1d6      	bne.n	8009790 <_vfiprintf_r+0x1bc>
 80097e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e4:	07d9      	lsls	r1, r3, #31
 80097e6:	d405      	bmi.n	80097f4 <_vfiprintf_r+0x220>
 80097e8:	89ab      	ldrh	r3, [r5, #12]
 80097ea:	059a      	lsls	r2, r3, #22
 80097ec:	d402      	bmi.n	80097f4 <_vfiprintf_r+0x220>
 80097ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097f0:	f7ff fe73 	bl	80094da <__retarget_lock_release_recursive>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	065b      	lsls	r3, r3, #25
 80097f8:	f53f af12 	bmi.w	8009620 <_vfiprintf_r+0x4c>
 80097fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fe:	e711      	b.n	8009624 <_vfiprintf_r+0x50>
 8009800:	ab03      	add	r3, sp, #12
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	462a      	mov	r2, r5
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <_vfiprintf_r+0x25c>)
 8009808:	a904      	add	r1, sp, #16
 800980a:	4630      	mov	r0, r6
 800980c:	f7fb fc84 	bl	8005118 <_printf_i>
 8009810:	e7e4      	b.n	80097dc <_vfiprintf_r+0x208>
 8009812:	bf00      	nop
 8009814:	0800a12c 	.word	0x0800a12c
 8009818:	0800a14c 	.word	0x0800a14c
 800981c:	0800a10c 	.word	0x0800a10c
 8009820:	0800a0a4 	.word	0x0800a0a4
 8009824:	0800a0aa 	.word	0x0800a0aa
 8009828:	0800a0ae 	.word	0x0800a0ae
 800982c:	08004be9 	.word	0x08004be9
 8009830:	080095b1 	.word	0x080095b1

08009834 <__swbuf_r>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	460e      	mov	r6, r1
 8009838:	4614      	mov	r4, r2
 800983a:	4605      	mov	r5, r0
 800983c:	b118      	cbz	r0, 8009846 <__swbuf_r+0x12>
 800983e:	6983      	ldr	r3, [r0, #24]
 8009840:	b90b      	cbnz	r3, 8009846 <__swbuf_r+0x12>
 8009842:	f7ff fd99 	bl	8009378 <__sinit>
 8009846:	4b21      	ldr	r3, [pc, #132]	; (80098cc <__swbuf_r+0x98>)
 8009848:	429c      	cmp	r4, r3
 800984a:	d12b      	bne.n	80098a4 <__swbuf_r+0x70>
 800984c:	686c      	ldr	r4, [r5, #4]
 800984e:	69a3      	ldr	r3, [r4, #24]
 8009850:	60a3      	str	r3, [r4, #8]
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	071a      	lsls	r2, r3, #28
 8009856:	d52f      	bpl.n	80098b8 <__swbuf_r+0x84>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	b36b      	cbz	r3, 80098b8 <__swbuf_r+0x84>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	6820      	ldr	r0, [r4, #0]
 8009860:	1ac0      	subs	r0, r0, r3
 8009862:	6963      	ldr	r3, [r4, #20]
 8009864:	b2f6      	uxtb	r6, r6
 8009866:	4283      	cmp	r3, r0
 8009868:	4637      	mov	r7, r6
 800986a:	dc04      	bgt.n	8009876 <__swbuf_r+0x42>
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f7ff fcee 	bl	8009250 <_fflush_r>
 8009874:	bb30      	cbnz	r0, 80098c4 <__swbuf_r+0x90>
 8009876:	68a3      	ldr	r3, [r4, #8]
 8009878:	3b01      	subs	r3, #1
 800987a:	60a3      	str	r3, [r4, #8]
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	6022      	str	r2, [r4, #0]
 8009882:	701e      	strb	r6, [r3, #0]
 8009884:	6963      	ldr	r3, [r4, #20]
 8009886:	3001      	adds	r0, #1
 8009888:	4283      	cmp	r3, r0
 800988a:	d004      	beq.n	8009896 <__swbuf_r+0x62>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	07db      	lsls	r3, r3, #31
 8009890:	d506      	bpl.n	80098a0 <__swbuf_r+0x6c>
 8009892:	2e0a      	cmp	r6, #10
 8009894:	d104      	bne.n	80098a0 <__swbuf_r+0x6c>
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f7ff fcd9 	bl	8009250 <_fflush_r>
 800989e:	b988      	cbnz	r0, 80098c4 <__swbuf_r+0x90>
 80098a0:	4638      	mov	r0, r7
 80098a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a4:	4b0a      	ldr	r3, [pc, #40]	; (80098d0 <__swbuf_r+0x9c>)
 80098a6:	429c      	cmp	r4, r3
 80098a8:	d101      	bne.n	80098ae <__swbuf_r+0x7a>
 80098aa:	68ac      	ldr	r4, [r5, #8]
 80098ac:	e7cf      	b.n	800984e <__swbuf_r+0x1a>
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <__swbuf_r+0xa0>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	bf08      	it	eq
 80098b4:	68ec      	ldreq	r4, [r5, #12]
 80098b6:	e7ca      	b.n	800984e <__swbuf_r+0x1a>
 80098b8:	4621      	mov	r1, r4
 80098ba:	4628      	mov	r0, r5
 80098bc:	f000 f80c 	bl	80098d8 <__swsetup_r>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0cb      	beq.n	800985c <__swbuf_r+0x28>
 80098c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80098c8:	e7ea      	b.n	80098a0 <__swbuf_r+0x6c>
 80098ca:	bf00      	nop
 80098cc:	0800a12c 	.word	0x0800a12c
 80098d0:	0800a14c 	.word	0x0800a14c
 80098d4:	0800a10c 	.word	0x0800a10c

080098d8 <__swsetup_r>:
 80098d8:	4b32      	ldr	r3, [pc, #200]	; (80099a4 <__swsetup_r+0xcc>)
 80098da:	b570      	push	{r4, r5, r6, lr}
 80098dc:	681d      	ldr	r5, [r3, #0]
 80098de:	4606      	mov	r6, r0
 80098e0:	460c      	mov	r4, r1
 80098e2:	b125      	cbz	r5, 80098ee <__swsetup_r+0x16>
 80098e4:	69ab      	ldr	r3, [r5, #24]
 80098e6:	b913      	cbnz	r3, 80098ee <__swsetup_r+0x16>
 80098e8:	4628      	mov	r0, r5
 80098ea:	f7ff fd45 	bl	8009378 <__sinit>
 80098ee:	4b2e      	ldr	r3, [pc, #184]	; (80099a8 <__swsetup_r+0xd0>)
 80098f0:	429c      	cmp	r4, r3
 80098f2:	d10f      	bne.n	8009914 <__swsetup_r+0x3c>
 80098f4:	686c      	ldr	r4, [r5, #4]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098fc:	0719      	lsls	r1, r3, #28
 80098fe:	d42c      	bmi.n	800995a <__swsetup_r+0x82>
 8009900:	06dd      	lsls	r5, r3, #27
 8009902:	d411      	bmi.n	8009928 <__swsetup_r+0x50>
 8009904:	2309      	movs	r3, #9
 8009906:	6033      	str	r3, [r6, #0]
 8009908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009912:	e03e      	b.n	8009992 <__swsetup_r+0xba>
 8009914:	4b25      	ldr	r3, [pc, #148]	; (80099ac <__swsetup_r+0xd4>)
 8009916:	429c      	cmp	r4, r3
 8009918:	d101      	bne.n	800991e <__swsetup_r+0x46>
 800991a:	68ac      	ldr	r4, [r5, #8]
 800991c:	e7eb      	b.n	80098f6 <__swsetup_r+0x1e>
 800991e:	4b24      	ldr	r3, [pc, #144]	; (80099b0 <__swsetup_r+0xd8>)
 8009920:	429c      	cmp	r4, r3
 8009922:	bf08      	it	eq
 8009924:	68ec      	ldreq	r4, [r5, #12]
 8009926:	e7e6      	b.n	80098f6 <__swsetup_r+0x1e>
 8009928:	0758      	lsls	r0, r3, #29
 800992a:	d512      	bpl.n	8009952 <__swsetup_r+0x7a>
 800992c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800992e:	b141      	cbz	r1, 8009942 <__swsetup_r+0x6a>
 8009930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009934:	4299      	cmp	r1, r3
 8009936:	d002      	beq.n	800993e <__swsetup_r+0x66>
 8009938:	4630      	mov	r0, r6
 800993a:	f7fe fd5b 	bl	80083f4 <_free_r>
 800993e:	2300      	movs	r3, #0
 8009940:	6363      	str	r3, [r4, #52]	; 0x34
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	2300      	movs	r3, #0
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f043 0308 	orr.w	r3, r3, #8
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	b94b      	cbnz	r3, 8009972 <__swsetup_r+0x9a>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009968:	d003      	beq.n	8009972 <__swsetup_r+0x9a>
 800996a:	4621      	mov	r1, r4
 800996c:	4630      	mov	r0, r6
 800996e:	f000 f84d 	bl	8009a0c <__smakebuf_r>
 8009972:	89a0      	ldrh	r0, [r4, #12]
 8009974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009978:	f010 0301 	ands.w	r3, r0, #1
 800997c:	d00a      	beq.n	8009994 <__swsetup_r+0xbc>
 800997e:	2300      	movs	r3, #0
 8009980:	60a3      	str	r3, [r4, #8]
 8009982:	6963      	ldr	r3, [r4, #20]
 8009984:	425b      	negs	r3, r3
 8009986:	61a3      	str	r3, [r4, #24]
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	b943      	cbnz	r3, 800999e <__swsetup_r+0xc6>
 800998c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009990:	d1ba      	bne.n	8009908 <__swsetup_r+0x30>
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	0781      	lsls	r1, r0, #30
 8009996:	bf58      	it	pl
 8009998:	6963      	ldrpl	r3, [r4, #20]
 800999a:	60a3      	str	r3, [r4, #8]
 800999c:	e7f4      	b.n	8009988 <__swsetup_r+0xb0>
 800999e:	2000      	movs	r0, #0
 80099a0:	e7f7      	b.n	8009992 <__swsetup_r+0xba>
 80099a2:	bf00      	nop
 80099a4:	2000000c 	.word	0x2000000c
 80099a8:	0800a12c 	.word	0x0800a12c
 80099ac:	0800a14c 	.word	0x0800a14c
 80099b0:	0800a10c 	.word	0x0800a10c

080099b4 <abort>:
 80099b4:	b508      	push	{r3, lr}
 80099b6:	2006      	movs	r0, #6
 80099b8:	f000 f898 	bl	8009aec <raise>
 80099bc:	2001      	movs	r0, #1
 80099be:	f7f7 fdcf 	bl	8001560 <_exit>

080099c2 <__swhatbuf_r>:
 80099c2:	b570      	push	{r4, r5, r6, lr}
 80099c4:	460e      	mov	r6, r1
 80099c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ca:	2900      	cmp	r1, #0
 80099cc:	b096      	sub	sp, #88	; 0x58
 80099ce:	4614      	mov	r4, r2
 80099d0:	461d      	mov	r5, r3
 80099d2:	da08      	bge.n	80099e6 <__swhatbuf_r+0x24>
 80099d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	602a      	str	r2, [r5, #0]
 80099dc:	061a      	lsls	r2, r3, #24
 80099de:	d410      	bmi.n	8009a02 <__swhatbuf_r+0x40>
 80099e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e4:	e00e      	b.n	8009a04 <__swhatbuf_r+0x42>
 80099e6:	466a      	mov	r2, sp
 80099e8:	f000 f89c 	bl	8009b24 <_fstat_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	dbf1      	blt.n	80099d4 <__swhatbuf_r+0x12>
 80099f0:	9a01      	ldr	r2, [sp, #4]
 80099f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099fa:	425a      	negs	r2, r3
 80099fc:	415a      	adcs	r2, r3
 80099fe:	602a      	str	r2, [r5, #0]
 8009a00:	e7ee      	b.n	80099e0 <__swhatbuf_r+0x1e>
 8009a02:	2340      	movs	r3, #64	; 0x40
 8009a04:	2000      	movs	r0, #0
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	b016      	add	sp, #88	; 0x58
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}

08009a0c <__smakebuf_r>:
 8009a0c:	898b      	ldrh	r3, [r1, #12]
 8009a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a10:	079d      	lsls	r5, r3, #30
 8009a12:	4606      	mov	r6, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	d507      	bpl.n	8009a28 <__smakebuf_r+0x1c>
 8009a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	2301      	movs	r3, #1
 8009a22:	6163      	str	r3, [r4, #20]
 8009a24:	b002      	add	sp, #8
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	ab01      	add	r3, sp, #4
 8009a2a:	466a      	mov	r2, sp
 8009a2c:	f7ff ffc9 	bl	80099c2 <__swhatbuf_r>
 8009a30:	9900      	ldr	r1, [sp, #0]
 8009a32:	4605      	mov	r5, r0
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7fe fd47 	bl	80084c8 <_malloc_r>
 8009a3a:	b948      	cbnz	r0, 8009a50 <__smakebuf_r+0x44>
 8009a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d4ef      	bmi.n	8009a24 <__smakebuf_r+0x18>
 8009a44:	f023 0303 	bic.w	r3, r3, #3
 8009a48:	f043 0302 	orr.w	r3, r3, #2
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	e7e3      	b.n	8009a18 <__smakebuf_r+0xc>
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <__smakebuf_r+0x7c>)
 8009a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	6163      	str	r3, [r4, #20]
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	6120      	str	r0, [r4, #16]
 8009a66:	b15b      	cbz	r3, 8009a80 <__smakebuf_r+0x74>
 8009a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f86b 	bl	8009b48 <_isatty_r>
 8009a72:	b128      	cbz	r0, 8009a80 <__smakebuf_r+0x74>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	89a0      	ldrh	r0, [r4, #12]
 8009a82:	4305      	orrs	r5, r0
 8009a84:	81a5      	strh	r5, [r4, #12]
 8009a86:	e7cd      	b.n	8009a24 <__smakebuf_r+0x18>
 8009a88:	08009311 	.word	0x08009311

08009a8c <_malloc_usable_size_r>:
 8009a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a90:	1f18      	subs	r0, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bfbc      	itt	lt
 8009a96:	580b      	ldrlt	r3, [r1, r0]
 8009a98:	18c0      	addlt	r0, r0, r3
 8009a9a:	4770      	bx	lr

08009a9c <_raise_r>:
 8009a9c:	291f      	cmp	r1, #31
 8009a9e:	b538      	push	{r3, r4, r5, lr}
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	d904      	bls.n	8009ab0 <_raise_r+0x14>
 8009aa6:	2316      	movs	r3, #22
 8009aa8:	6003      	str	r3, [r0, #0]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ab2:	b112      	cbz	r2, 8009aba <_raise_r+0x1e>
 8009ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ab8:	b94b      	cbnz	r3, 8009ace <_raise_r+0x32>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 f830 	bl	8009b20 <_getpid_r>
 8009ac0:	462a      	mov	r2, r5
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aca:	f000 b817 	b.w	8009afc <_kill_r>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d00a      	beq.n	8009ae8 <_raise_r+0x4c>
 8009ad2:	1c59      	adds	r1, r3, #1
 8009ad4:	d103      	bne.n	8009ade <_raise_r+0x42>
 8009ad6:	2316      	movs	r3, #22
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7e7      	b.n	8009aae <_raise_r+0x12>
 8009ade:	2400      	movs	r4, #0
 8009ae0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	4798      	blx	r3
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e7e0      	b.n	8009aae <_raise_r+0x12>

08009aec <raise>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <raise+0xc>)
 8009aee:	4601      	mov	r1, r0
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f7ff bfd3 	b.w	8009a9c <_raise_r>
 8009af6:	bf00      	nop
 8009af8:	2000000c 	.word	0x2000000c

08009afc <_kill_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_kill_r+0x20>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	4611      	mov	r1, r2
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	f7f7 fd19 	bl	8001540 <_kill>
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	d102      	bne.n	8009b18 <_kill_r+0x1c>
 8009b12:	682b      	ldr	r3, [r5, #0]
 8009b14:	b103      	cbz	r3, 8009b18 <_kill_r+0x1c>
 8009b16:	6023      	str	r3, [r4, #0]
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200002e8 	.word	0x200002e8

08009b20 <_getpid_r>:
 8009b20:	f7f7 bd07 	b.w	8001532 <_getpid>

08009b24 <_fstat_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	; (8009b44 <_fstat_r+0x20>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f7 fd63 	bl	80015fc <_fstat>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d102      	bne.n	8009b40 <_fstat_r+0x1c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	b103      	cbz	r3, 8009b40 <_fstat_r+0x1c>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	200002e8 	.word	0x200002e8

08009b48 <_isatty_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d06      	ldr	r5, [pc, #24]	; (8009b64 <_isatty_r+0x1c>)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4608      	mov	r0, r1
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	f7f7 fd61 	bl	800161a <_isatty>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_isatty_r+0x1a>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_isatty_r+0x1a>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	200002e8 	.word	0x200002e8

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
