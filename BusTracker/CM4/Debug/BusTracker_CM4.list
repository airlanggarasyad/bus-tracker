
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a180  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800a2c0  0800a2c0  0001a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8d4  0800a8d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8dc  0800a8dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  0800aac4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800aac4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012566  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266c  00000000  00000000  00032770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3f9  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd4  00000000  00000000  00054681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4069  00000000  00000000  00067255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b2be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  0011b310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a2a8 	.word	0x0800a2a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800a2a8 	.word	0x0800a2a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001108:	f000 b9ac 	b.w	8001464 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83e 	bl	8001194 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4628      	mov	r0, r5
 800112c:	4621      	mov	r1, r4
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	f7ff fcab 	bl	8000a8c <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__aeabi_d2ulz+0x34>)
 800115c:	2200      	movs	r2, #0
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff fa21 	bl	80005a8 <__aeabi_dmul>
 8001166:	f7ff fcf7 	bl	8000b58 <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f9a2 	bl	80004b4 <__aeabi_ui2d>
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff fa18 	bl	80005a8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7ff f85a 	bl	8000238 <__aeabi_dsub>
 8001184:	f7ff fce8 	bl	8000b58 <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <__udivmoddi4>:
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001198:	9e08      	ldr	r6, [sp, #32]
 800119a:	460d      	mov	r5, r1
 800119c:	4604      	mov	r4, r0
 800119e:	4688      	mov	r8, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14d      	bne.n	8001240 <__udivmoddi4+0xac>
 80011a4:	428a      	cmp	r2, r1
 80011a6:	4694      	mov	ip, r2
 80011a8:	d968      	bls.n	800127c <__udivmoddi4+0xe8>
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b152      	cbz	r2, 80011c6 <__udivmoddi4+0x32>
 80011b0:	fa01 f302 	lsl.w	r3, r1, r2
 80011b4:	f1c2 0120 	rsb	r1, r2, #32
 80011b8:	fa20 f101 	lsr.w	r1, r0, r1
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	ea41 0803 	orr.w	r8, r1, r3
 80011c4:	4094      	lsls	r4, r2
 80011c6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ca:	0c21      	lsrs	r1, r4, #16
 80011cc:	fbb8 fef5 	udiv	lr, r8, r5
 80011d0:	fa1f f78c 	uxth.w	r7, ip
 80011d4:	fb05 831e 	mls	r3, r5, lr, r8
 80011d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011dc:	fb0e f107 	mul.w	r1, lr, r7
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x68>
 80011e4:	eb1c 0303 	adds.w	r3, ip, r3
 80011e8:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80011ec:	f080 811e 	bcs.w	800142c <__udivmoddi4+0x298>
 80011f0:	4299      	cmp	r1, r3
 80011f2:	f240 811b 	bls.w	800142c <__udivmoddi4+0x298>
 80011f6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fa:	4463      	add	r3, ip
 80011fc:	1a5b      	subs	r3, r3, r1
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	fbb3 f0f5 	udiv	r0, r3, r5
 8001204:	fb05 3310 	mls	r3, r5, r0, r3
 8001208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120c:	fb00 f707 	mul.w	r7, r0, r7
 8001210:	42a7      	cmp	r7, r4
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x96>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800121c:	f080 8108 	bcs.w	8001430 <__udivmoddi4+0x29c>
 8001220:	42a7      	cmp	r7, r4
 8001222:	f240 8105 	bls.w	8001430 <__udivmoddi4+0x29c>
 8001226:	4464      	add	r4, ip
 8001228:	3802      	subs	r0, #2
 800122a:	1be4      	subs	r4, r4, r7
 800122c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001230:	2100      	movs	r1, #0
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa8>
 8001234:	40d4      	lsrs	r4, r2
 8001236:	2300      	movs	r3, #0
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	428b      	cmp	r3, r1
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0xc2>
 8001244:	2e00      	cmp	r6, #0
 8001246:	f000 80ee 	beq.w	8001426 <__udivmoddi4+0x292>
 800124a:	2100      	movs	r1, #0
 800124c:	e9c6 0500 	strd	r0, r5, [r6]
 8001250:	4608      	mov	r0, r1
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	fab3 f183 	clz	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	d14a      	bne.n	80012f4 <__udivmoddi4+0x160>
 800125e:	42ab      	cmp	r3, r5
 8001260:	d302      	bcc.n	8001268 <__udivmoddi4+0xd4>
 8001262:	4282      	cmp	r2, r0
 8001264:	f200 80f9 	bhi.w	800145a <__udivmoddi4+0x2c6>
 8001268:	1a84      	subs	r4, r0, r2
 800126a:	eb65 0303 	sbc.w	r3, r5, r3
 800126e:	2001      	movs	r0, #1
 8001270:	4698      	mov	r8, r3
 8001272:	2e00      	cmp	r6, #0
 8001274:	d0e2      	beq.n	800123c <__udivmoddi4+0xa8>
 8001276:	e9c6 4800 	strd	r4, r8, [r6]
 800127a:	e7df      	b.n	800123c <__udivmoddi4+0xa8>
 800127c:	b902      	cbnz	r2, 8001280 <__udivmoddi4+0xec>
 800127e:	deff      	udf	#255	; 0xff
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8091 	bne.w	80013ac <__udivmoddi4+0x218>
 800128a:	eba1 050c 	sub.w	r5, r1, ip
 800128e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001292:	fa1f fe8c 	uxth.w	lr, ip
 8001296:	2101      	movs	r1, #1
 8001298:	fbb5 f3f7 	udiv	r3, r5, r7
 800129c:	fb07 5013 	mls	r0, r7, r3, r5
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012a6:	fb0e f003 	mul.w	r0, lr, r3
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x12c>
 80012ae:	eb1c 0505 	adds.w	r5, ip, r5
 80012b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x12a>
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	f200 80cb 	bhi.w	8001454 <__udivmoddi4+0x2c0>
 80012be:	4643      	mov	r3, r8
 80012c0:	1a2d      	subs	r5, r5, r0
 80012c2:	b2a4      	uxth	r4, r4
 80012c4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012c8:	fb07 5510 	mls	r5, r7, r0, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb0e fe00 	mul.w	lr, lr, r0
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0x156>
 80012d8:	eb1c 0404 	adds.w	r4, ip, r4
 80012dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x154>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f200 80bb 	bhi.w	800145e <__udivmoddi4+0x2ca>
 80012e8:	4628      	mov	r0, r5
 80012ea:	eba4 040e 	sub.w	r4, r4, lr
 80012ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x9e>
 80012f4:	f1c1 0720 	rsb	r7, r1, #32
 80012f8:	408b      	lsls	r3, r1
 80012fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa20 f407 	lsr.w	r4, r0, r7
 8001306:	fa05 f301 	lsl.w	r3, r5, r1
 800130a:	431c      	orrs	r4, r3
 800130c:	40fd      	lsrs	r5, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fa00 f301 	lsl.w	r3, r0, r1
 8001316:	fbb5 f8f9 	udiv	r8, r5, r9
 800131a:	0c20      	lsrs	r0, r4, #16
 800131c:	fa1f fe8c 	uxth.w	lr, ip
 8001320:	fb09 5518 	mls	r5, r9, r8, r5
 8001324:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	42a8      	cmp	r0, r5
 800132e:	fa02 f201 	lsl.w	r2, r2, r1
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b8>
 8001334:	eb1c 0505 	adds.w	r5, ip, r5
 8001338:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2bc>
 8001340:	42a8      	cmp	r0, r5
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2bc>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	4465      	add	r5, ip
 800134c:	1a2d      	subs	r5, r5, r0
 800134e:	b2a4      	uxth	r4, r4
 8001350:	fbb5 f0f9 	udiv	r0, r5, r9
 8001354:	fb09 5510 	mls	r5, r9, r0, r5
 8001358:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800135c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001360:	45ae      	cmp	lr, r5
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x1e2>
 8001364:	eb1c 0505 	adds.w	r5, ip, r5
 8001368:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800136c:	d26c      	bcs.n	8001448 <__udivmoddi4+0x2b4>
 800136e:	45ae      	cmp	lr, r5
 8001370:	d96a      	bls.n	8001448 <__udivmoddi4+0x2b4>
 8001372:	3802      	subs	r0, #2
 8001374:	4465      	add	r5, ip
 8001376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800137a:	fba0 9402 	umull	r9, r4, r0, r2
 800137e:	eba5 050e 	sub.w	r5, r5, lr
 8001382:	42a5      	cmp	r5, r4
 8001384:	46c8      	mov	r8, r9
 8001386:	46a6      	mov	lr, r4
 8001388:	d356      	bcc.n	8001438 <__udivmoddi4+0x2a4>
 800138a:	d053      	beq.n	8001434 <__udivmoddi4+0x2a0>
 800138c:	b15e      	cbz	r6, 80013a6 <__udivmoddi4+0x212>
 800138e:	ebb3 0208 	subs.w	r2, r3, r8
 8001392:	eb65 050e 	sbc.w	r5, r5, lr
 8001396:	fa05 f707 	lsl.w	r7, r5, r7
 800139a:	fa22 f301 	lsr.w	r3, r2, r1
 800139e:	40cd      	lsrs	r5, r1
 80013a0:	431f      	orrs	r7, r3
 80013a2:	e9c6 7500 	strd	r7, r5, [r6]
 80013a6:	2100      	movs	r1, #0
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	f1c2 0320 	rsb	r3, r2, #32
 80013b0:	fa20 f103 	lsr.w	r1, r0, r3
 80013b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b8:	fa25 f303 	lsr.w	r3, r5, r3
 80013bc:	4095      	lsls	r5, r2
 80013be:	430d      	orrs	r5, r1
 80013c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013cc:	fb07 3011 	mls	r0, r7, r1, r3
 80013d0:	0c2b      	lsrs	r3, r5, #16
 80013d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013d6:	fb01 f00e 	mul.w	r0, r1, lr
 80013da:	4298      	cmp	r0, r3
 80013dc:	fa04 f402 	lsl.w	r4, r4, r2
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x260>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013ea:	d22f      	bcs.n	800144c <__udivmoddi4+0x2b8>
 80013ec:	4298      	cmp	r0, r3
 80013ee:	d92d      	bls.n	800144c <__udivmoddi4+0x2b8>
 80013f0:	3902      	subs	r1, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013fc:	fb07 3310 	mls	r3, r7, r0, r3
 8001400:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001404:	fb00 f30e 	mul.w	r3, r0, lr
 8001408:	42ab      	cmp	r3, r5
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x28a>
 800140c:	eb1c 0505 	adds.w	r5, ip, r5
 8001410:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001414:	d216      	bcs.n	8001444 <__udivmoddi4+0x2b0>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d914      	bls.n	8001444 <__udivmoddi4+0x2b0>
 800141a:	3802      	subs	r0, #2
 800141c:	4465      	add	r5, ip
 800141e:	1aed      	subs	r5, r5, r3
 8001420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001424:	e738      	b.n	8001298 <__udivmoddi4+0x104>
 8001426:	4631      	mov	r1, r6
 8001428:	4630      	mov	r0, r6
 800142a:	e707      	b.n	800123c <__udivmoddi4+0xa8>
 800142c:	4686      	mov	lr, r0
 800142e:	e6e5      	b.n	80011fc <__udivmoddi4+0x68>
 8001430:	4618      	mov	r0, r3
 8001432:	e6fa      	b.n	800122a <__udivmoddi4+0x96>
 8001434:	454b      	cmp	r3, r9
 8001436:	d2a9      	bcs.n	800138c <__udivmoddi4+0x1f8>
 8001438:	ebb9 0802 	subs.w	r8, r9, r2
 800143c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001440:	3801      	subs	r0, #1
 8001442:	e7a3      	b.n	800138c <__udivmoddi4+0x1f8>
 8001444:	4640      	mov	r0, r8
 8001446:	e7ea      	b.n	800141e <__udivmoddi4+0x28a>
 8001448:	4620      	mov	r0, r4
 800144a:	e794      	b.n	8001376 <__udivmoddi4+0x1e2>
 800144c:	4641      	mov	r1, r8
 800144e:	e7d1      	b.n	80013f4 <__udivmoddi4+0x260>
 8001450:	46d0      	mov	r8, sl
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b8>
 8001454:	3b02      	subs	r3, #2
 8001456:	4465      	add	r5, ip
 8001458:	e732      	b.n	80012c0 <__udivmoddi4+0x12c>
 800145a:	4608      	mov	r0, r1
 800145c:	e709      	b.n	8001272 <__udivmoddi4+0xde>
 800145e:	4464      	add	r4, ip
 8001460:	3802      	subs	r0, #2
 8001462:	e742      	b.n	80012ea <__udivmoddi4+0x156>

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f023 0218 	bic.w	r2, r3, #24
 8001488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <DDM_To_DD>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
float DDM_To_DD(float ddm) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    float degree = floor(ddm/100);
 80014d8:	4920      	ldr	r1, [pc, #128]	; (800155c <DDM_To_DD+0x8c>)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd6e 	bl	8000fbc <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f808 	bl	80004f8 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f008 fe5a 	bl	800a1a8 <floor>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb4c 	bl	8000b98 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	617b      	str	r3, [r7, #20]
    float minute = ddm - ((degree * 100));
 8001504:	4915      	ldr	r1, [pc, #84]	; (800155c <DDM_To_DD+0x8c>)
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff fca4 	bl	8000e54 <__aeabi_fmul>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fb95 	bl	8000c40 <__aeabi_fsub>
 8001516:	4603      	mov	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

    float dd = degree + minute / 60.0;
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7fe ffec 	bl	80004f8 <__aeabi_f2d>
 8001520:	4604      	mov	r4, r0
 8001522:	460d      	mov	r5, r1
 8001524:	6938      	ldr	r0, [r7, #16]
 8001526:	f7fe ffe7 	bl	80004f8 <__aeabi_f2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <DDM_To_DD+0x90>)
 8001530:	f7ff f964 	bl	80007fc <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe7e 	bl	800023c <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb26 	bl	8000b98 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]

    return dd;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
 800155a:	bf00      	nop
 800155c:	42c80000 	.word	0x42c80000
 8001560:	404e0000 	.word	0x404e0000

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001568:	f5ad 6d2c 	sub.w	sp, sp, #2752	; 0xac0
 800156c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f000 fbbd 	bl	8001cec <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t receivedData[1000];
  uint8_t buff[100];

  const char* desiredNMEA = "$GPGGA";
 8001572:	4b71      	ldr	r3, [pc, #452]	; (8001738 <main+0x1d4>)
 8001574:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f8ee 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 f9d0 	bl	8001920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001580:	f000 f982 	bl	8001888 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001584:	f000 f942 	bl	800180c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8001588:	2001      	movs	r0, #1
 800158a:	f001 fc0b 	bl	8002da4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 800158e:	2374      	movs	r3, #116	; 0x74
 8001590:	b299      	uxth	r1, r3
 8001592:	230a      	movs	r3, #10
 8001594:	2202      	movs	r2, #2
 8001596:	4869      	ldr	r0, [pc, #420]	; (800173c <main+0x1d8>)
 8001598:	f001 f80a 	bl	80025b0 <HAL_I2C_IsDeviceReady>
 800159c:	4603      	mov	r3, r0
 800159e:	f887 3aa3 	strb.w	r3, [r7, #2723]	; 0xaa3

	  if (ret != HAL_OK) {
 80015a2:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <main+0x54>
		  sprintf((char*)buff, "Device is not ready \r\n");
 80015aa:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80015ae:	4964      	ldr	r1, [pc, #400]	; (8001740 <main+0x1dc>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 fbfd 	bl	8005db0 <siprintf>
 80015b6:	e018      	b.n	80015ea <main+0x86>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 80015b8:	2374      	movs	r3, #116	; 0x74
 80015ba:	b299      	uxth	r1, r3
 80015bc:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	485c      	ldr	r0, [pc, #368]	; (800173c <main+0x1d8>)
 80015cc:	f000 fefa 	bl	80023c4 <HAL_I2C_Master_Receive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 3aa3 	strb.w	r3, [r7, #2723]	; 0xaa3

		  if (ret != HAL_OK) {
 80015d6:	f897 3aa3 	ldrb.w	r3, [r7, #2723]	; 0xaa3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <main+0x86>
			  sprintf((char*)buff, "Error Rx \r\n");
 80015de:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80015e2:	4958      	ldr	r1, [pc, #352]	; (8001744 <main+0x1e0>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fbe3 	bl	8005db0 <siprintf>
		  }
	  }

	  char *desiredNMEA = "GPGGA";
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <main+0x1e4>)
 80015ec:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
	  char filteredMessage[512];
	  char *ptr;

	  float time, latitude, longitude;

	  strcpy(stringData, (char*)receivedData);
 80015f0:	f507 62d6 	add.w	r2, r7, #1712	; 0x6b0
 80015f4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fc67 	bl	8005ece <strcpy>
	  ptr = strstr(stringData, desiredNMEA);
 8001600:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001604:	f8d7 1a9c 	ldr.w	r1, [r7, #2716]	; 0xa9c
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fc68 	bl	8005ede <strstr>
 800160e:	f8c7 0a98 	str.w	r0, [r7, #2712]	; 0xa98

	  int position = ptr - stringData;
 8001612:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001616:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
	  int i = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8

	  while(stringData[position] != '\n') {
 8001626:	e01a      	b.n	800165e <main+0xfa>
		  filteredMessage[i] = stringData[position];
 8001628:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800162c:	f5a3 6207 	sub.w	r2, r3, #2160	; 0x870
 8001630:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001634:	4413      	add	r3, r2
 8001636:	7819      	ldrb	r1, [r3, #0]
 8001638:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800163c:	f5a3 6227 	sub.w	r2, r3, #2672	; 0xa70
 8001640:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
		  i++;
 800164a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800164e:	3301      	adds	r3, #1
 8001650:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
		  position++;
 8001654:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001658:	3301      	adds	r3, #1
 800165a:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
	  while(stringData[position] != '\n') {
 800165e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001662:	f5a3 6207 	sub.w	r2, r3, #2160	; 0x870
 8001666:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d1da      	bne.n	8001628 <main+0xc4>
	  }

	  char data[64];

	  sscanf(filteredMessage, "GPGGA,%f,%f,S,%f,E,", &time, &latitude, &longitude);
 8001672:	f207 6144 	addw	r1, r7, #1604	; 0x644
 8001676:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 800167a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800167e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	460b      	mov	r3, r1
 8001686:	4931      	ldr	r1, [pc, #196]	; (800174c <main+0x1e8>)
 8001688:	f004 fbb2 	bl	8005df0 <siscanf>

	  longitude = DDM_To_DD(longitude);
 800168c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001690:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff1a 	bl	80014d0 <DDM_To_DD>
 800169c:	4602      	mov	r2, r0
 800169e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016a2:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80016a6:	601a      	str	r2, [r3, #0]
	  latitude = -1 * DDM_To_DD(latitude);
 80016a8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016ac:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff0c 	bl	80014d0 <DDM_To_DD>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80016be:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016c2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80016c6:	601a      	str	r2, [r3, #0]

	  sprintf(data, "Time: %.3f Lat: %.6f Lon:%.6f\r\n", time, latitude, longitude);
 80016c8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016cc:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff10 	bl	80004f8 <__aeabi_f2d>
 80016d8:	4680      	mov	r8, r0
 80016da:	4689      	mov	r9, r1
 80016dc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016e0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff06 	bl	80004f8 <__aeabi_f2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80016f4:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fefc 	bl	80004f8 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4638      	mov	r0, r7
 8001706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800170a:	e9cd 4500 	strd	r4, r5, [sp]
 800170e:	4642      	mov	r2, r8
 8001710:	464b      	mov	r3, r9
 8001712:	490f      	ldr	r1, [pc, #60]	; (8001750 <main+0x1ec>)
 8001714:	f004 fb4c 	bl	8005db0 <siprintf>

	  HAL_Delay(500);
 8001718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800171c:	f000 fb5c 	bl	8001dd8 <HAL_Delay>

	 HAL_UART_Transmit(&huart2, data, sizeof data, HAL_MAX_DELAY);
 8001720:	4639      	mov	r1, r7
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	2240      	movs	r2, #64	; 0x40
 8001728:	480a      	ldr	r0, [pc, #40]	; (8001754 <main+0x1f0>)
 800172a:	f002 fee4 	bl	80044f6 <HAL_UART_Transmit>
	 HAL_Delay(500);
 800172e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001732:	f000 fb51 	bl	8001dd8 <HAL_Delay>
  {
 8001736:	e72a      	b.n	800158e <main+0x2a>
 8001738:	0800a2c0 	.word	0x0800a2c0
 800173c:	200001fc 	.word	0x200001fc
 8001740:	0800a2c8 	.word	0x0800a2c8
 8001744:	0800a2e0 	.word	0x0800a2e0
 8001748:	0800a2ec 	.word	0x0800a2ec
 800174c:	0800a2f4 	.word	0x0800a2f4
 8001750:	0800a308 	.word	0x0800a308
 8001754:	20000248 	.word	0x20000248

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b09a      	sub	sp, #104	; 0x68
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2248      	movs	r2, #72	; 0x48
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fcae 	bl	80050c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800177e:	f001 fae9 	bl	8002d54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fe76 	bl	8001474 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <SystemClock_Config+0xb0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001790:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <SystemClock_Config+0xb0>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <SystemClock_Config+0xb0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017a4:	2324      	movs	r3, #36	; 0x24
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017a8:	2381      	movs	r3, #129	; 0x81
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 fdb1 	bl	8003328 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80017cc:	f000 f8b5 	bl	800193a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80017d0:	236f      	movs	r3, #111	; 0x6f
 80017d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f935 	bl	8003a60 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80017fc:	f000 f89d 	bl	800193a <Error_Handler>
  }
}
 8001800:	bf00      	nop
 8001802:	3768      	adds	r7, #104	; 0x68
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	58000400 	.word	0x58000400

0800180c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_I2C1_Init+0x74>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <MX_I2C1_Init+0x78>)
 8001814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_I2C1_Init+0x74>)
 8001818:	f640 6214 	movw	r2, #3604	; 0xe14
 800181c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_I2C1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_I2C1_Init+0x74>)
 8001826:	2201      	movs	r2, #1
 8001828:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_I2C1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_I2C1_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C1_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_I2C1_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C1_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_I2C1_Init+0x74>)
 800184a:	f000 fd2b 	bl	80022a4 <HAL_I2C_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001854:	f000 f871 	bl	800193a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001858:	2100      	movs	r1, #0
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_I2C1_Init+0x74>)
 800185c:	f001 f9e4 	bl	8002c28 <HAL_I2CEx_ConfigAnalogFilter>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001866:	f000 f868 	bl	800193a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800186a:	2100      	movs	r1, #0
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_I2C1_Init+0x74>)
 800186e:	f001 fa25 	bl	8002cbc <HAL_I2CEx_ConfigDigitalFilter>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001878:	f000 f85f 	bl	800193a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001fc 	.word	0x200001fc
 8001884:	40005400 	.word	0x40005400

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_USART2_UART_Init+0x90>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_USART2_UART_Init+0x94>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_USART2_UART_Init+0x90>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_USART2_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018d2:	f002 fdc0 	bl	8004456 <HAL_UART_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018dc:	f000 f82d 	bl	800193a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018e4:	f003 fafe 	bl	8004ee4 <HAL_UARTEx_SetTxFifoThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ee:	f000 f824 	bl	800193a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018f6:	f003 fb33 	bl	8004f60 <HAL_UARTEx_SetRxFifoThreshold>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001900:	f000 f81b 	bl	800193a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_USART2_UART_Init+0x90>)
 8001906:	f003 fab5 	bl	8004e74 <HAL_UARTEx_DisableFifoMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001910:	f000 f813 	bl	800193a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000248 	.word	0x20000248
 800191c:	40004400 	.word	0x40004400

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff fdba 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2004      	movs	r0, #4
 800192c:	f7ff fdb7 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	2002      	movs	r0, #2
 8001932:	f7ff fdb4 	bl	800149e <LL_AHB2_GRP1_EnableClock>

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193e:	b672      	cpsid	i
}
 8001940:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001942:	e7fe      	b.n	8001942 <Error_Handler+0x8>

08001944 <LL_AHB2_GRP1_EnableClock>:
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4313      	orrs	r3, r2
 800198a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001998:	68fb      	ldr	r3, [r7, #12]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b096      	sub	sp, #88	; 0x58
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2238      	movs	r2, #56	; 0x38
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fb79 	bl	80050c8 <memset>
  if(hi2c->Instance==I2C1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_I2C_MspInit+0x84>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d125      	bne.n	8001a2c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80019e8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fbf6 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019fa:	f7ff ff9e 	bl	800193a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff ffa0 	bl	8001944 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a14:	2304      	movs	r3, #4
 8001a16:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a20:	f000 fae0 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a28:	f7ff ffa4 	bl	8001974 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3758      	adds	r7, #88	; 0x58
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40005400 	.word	0x40005400
 8001a38:	48000400 	.word	0x48000400

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b096      	sub	sp, #88	; 0x58
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2238      	movs	r2, #56	; 0x38
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fb33 	bl	80050c8 <memset>
  if(huart->Instance==USART2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d126      	bne.n	8001aba <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a70:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a74:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fbb0 	bl	80041e0 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a86:	f7ff ff58 	bl	800193a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a8e:	f7ff ff71 	bl	8001974 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff ff56 	bl	8001944 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f000 fa95 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3758      	adds	r7, #88	; 0x58
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004400 	.word	0x40004400

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f947 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
	return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_kill>:

int _kill(int pid, int sig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b2e:	f003 faa1 	bl	8005074 <__errno>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2216      	movs	r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
	return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_exit>:

void _exit (int status)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffe7 	bl	8001b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b56:	e7fe      	b.n	8001b56 <_exit+0x12>

08001b58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e00a      	b.n	8001b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6a:	f3af 8000 	nop.w
 8001b6e:	4601      	mov	r1, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf0      	blt.n	8001b6a <_read+0x12>
	}

return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e009      	b.n	8001bb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf1      	blt.n	8001ba4 <_write+0x12>
	}
	return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf0:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <_isatty>:

int _isatty(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return 1;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f003 fa0a 	bl	8005074 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20008000 	.word	0x20008000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	200002d8 	.word	0x200002d8
 8001c94:	200002f0 	.word	0x200002f0

08001c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c9c:	f7ff fbe4 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <LoopForever+0xe>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ce4 <LoopForever+0x16>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cc6:	f003 f9db 	bl	8005080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cca:	f7ff fc4b 	bl	8001564 <main>

08001cce <LoopForever>:

LoopForever:
    b LoopForever
 8001cce:	e7fe      	b.n	8001cce <LoopForever>
  ldr   r0, =_estack
 8001cd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cdc:	0800a8e4 	.word	0x0800a8e4
  ldr r2, =_sbss
 8001ce0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ce4:	200002f0 	.word	0x200002f0

08001ce8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f000 f942 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cfc:	f002 f892 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_Init+0x3c>)
 8001d04:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f810 	bl	8001d2c <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e001      	b.n	8001d1c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d18:	f7ff fe44 	bl	80019a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d024      	beq.n	8001d8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d40:	f002 f870 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f936 	bl	8001fca <HAL_SYSTICK_Config>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	d809      	bhi.n	8001d7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d72:	f000 f910 	bl	8001f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_InitTick+0x70>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e004      	b.n	8001d8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_IncTick+0x1c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_IncTick+0x20>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_IncTick+0x20>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	200002dc 	.word	0x200002dc

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <HAL_GetTick+0x10>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	200002dc 	.word	0x200002dc

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fff0 	bl	8001dc4 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffe0 	bl	8001dc4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f60:	f7ff ff90 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff49 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff60 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff92 	bl	8001ed8 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff61 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb2 	bl	8001f3c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	e140      	b.n	8002276 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8132 	beq.w	8002270 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x40>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 808c 	beq.w	8002270 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x1bc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_GPIO_Init+0x2b4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1b8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a43      	ldr	r2, [pc, #268]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x1b4>
 8002194:	2302      	movs	r3, #2
 8002196:	e004      	b.n	80021a2 <HAL_GPIO_Init+0x1be>
 8002198:	2307      	movs	r3, #7
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x1be>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_GPIO_Init+0x1be>
 80021a0:	2300      	movs	r3, #0
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	f002 0203 	and.w	r2, r2, #3
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	4093      	lsls	r3, r2
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021b2:	4938      	ldr	r1, [pc, #224]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 8002216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800221a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 8002244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002248:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	f47f aeb7 	bne.w	8001ff4 <HAL_GPIO_Init+0x10>
  }
}
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	48000400 	.word	0x48000400
 800229c:	48000800 	.word	0x48000800
 80022a0:	58000800 	.word	0x58000800

080022a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e081      	b.n	80023ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fb70 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	e006      	b.n	800232c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800232a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d104      	bne.n	800233e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 80db 	bne.w	800259c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2C_Master_Receive+0x30>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0d4      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023fc:	f7ff fce2 	bl	8001dc4 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2319      	movs	r3, #25
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9f8 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0bf      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2222      	movs	r2, #34	; 0x22
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2bff      	cmp	r3, #255	; 0xff
 800244e:	d90e      	bls.n	800246e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fbae 	bl	8002bc8 <I2C_TransferConfig>
 800246c:	e06d      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fb9d 	bl	8002bc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800248e:	e05c      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6a39      	ldr	r1, [r7, #32]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fa31 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07c      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d034      	beq.n	800254a <HAL_I2C_Master_Receive+0x186>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d130      	bne.n	800254a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2200      	movs	r2, #0
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f986 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04d      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d90e      	bls.n	800252a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fb50 	bl	8002bc8 <I2C_TransferConfig>
 8002528:	e00f      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fb3f 	bl	8002bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d19d      	bne.n	8002490 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6a39      	ldr	r1, [r7, #32]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f993 	bl	8002884 <I2C_WaitOnSTOPFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e01a      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_I2C_Master_Receive+0x1e8>)
 800257c:	400b      	ands	r3, r1
 800257e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	80002400 	.word	0x80002400
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	f040 80f1 	bne.w	80027b4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_IsDeviceReady+0x44>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0e0      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2224      	movs	r2, #36	; 0x24
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_I2C_IsDeviceReady+0x72>
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800261c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002620:	e004      	b.n	800262c <HAL_I2C_IsDeviceReady+0x7c>
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002632:	f7ff fbc7 	bl	8001dc4 <HAL_GetTick>
 8002636:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b20      	cmp	r3, #32
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002664:	e034      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266c:	d01a      	beq.n	80026a4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7ff fba9 	bl	8001dc4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <HAL_I2C_IsDeviceReady+0xd4>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10f      	bne.n	80026a4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e088      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_I2C_IsDeviceReady+0x12c>
 80026d6:	7fbb      	ldrb	r3, [r7, #30]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0c4      	beq.n	8002666 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d01a      	beq.n	8002720 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2120      	movs	r1, #32
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f885 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e058      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e04a      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	2120      	movs	r1, #32
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f86a 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e03d      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2220      	movs	r2, #32
 8002748:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d118      	bne.n	8002784 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002760:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	2120      	movs	r1, #32
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f849 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e01c      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2220      	movs	r2, #32
 8002782:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	f63f af3b 	bhi.w	800260a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d103      	bne.n	80027dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d007      	beq.n	80027fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	619a      	str	r2, [r3, #24]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002814:	e022      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281c:	d01e      	beq.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff fad1 	bl	8001dc4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d113      	bne.n	800285c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e00f      	b.n	800287c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4013      	ands	r3, r2
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	429a      	cmp	r2, r3
 8002878:	d0cd      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002890:	e028      	b.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8aa 	bl	80029f0 <I2C_IsErrorOccurred>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e026      	b.n	80028f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a6:	f7ff fa8d 	bl	8001dc4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d302      	bcc.n	80028bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d113      	bne.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d1cf      	bne.n	8002892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002908:	e064      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f86e 	bl	80029f0 <I2C_IsErrorOccurred>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e062      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b20      	cmp	r3, #32
 800292a:	d138      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d105      	bne.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e04e      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b10      	cmp	r3, #16
 8002952:	d107      	bne.n	8002964 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2204      	movs	r2, #4
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
 8002962:	e002      	b.n	800296a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2220      	movs	r2, #32
 8002970:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800297e:	400b      	ands	r3, r1
 8002980:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e022      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7ff fa11 	bl	8001dc4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10f      	bne.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e007      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d193      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	fe00e800 	.word	0xfe00e800

080029f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d075      	beq.n	8002b08 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2210      	movs	r2, #16
 8002a22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a24:	e056      	b.n	8002ad4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2c:	d052      	beq.n	8002ad4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7ff f9c9 	bl	8001dc4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_IsErrorOccurred+0x54>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d147      	bne.n	8002ad4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a66:	d12e      	bne.n	8002ac6 <I2C_IsErrorOccurred+0xd6>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6e:	d02a      	beq.n	8002ac6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d027      	beq.n	8002ac6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a84:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a86:	f7ff f99d 	bl	8001dc4 <HAL_GetTick>
 8002a8a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8c:	e01b      	b.n	8002ac6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a8e:	f7ff f999 	bl	8001dc4 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b19      	cmp	r3, #25
 8002a9a:	d914      	bls.n	8002ac6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d1dc      	bne.n	8002a8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d003      	beq.n	8002aea <I2C_IsErrorOccurred+0xfa>
 8002ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d09d      	beq.n	8002a26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2220      	movs	r2, #32
 8002af8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01c      	beq.n	8002bb8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff fe1d 	bl	80027be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <I2C_IsErrorOccurred+0x1d4>)
 8002b90:	400b      	ands	r3, r1
 8002b92:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	fe00e800 	.word	0xfe00e800

08002bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002be0:	7a7b      	ldrb	r3, [r7, #9]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <I2C_TransferConfig+0x5c>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	ea02 0103 	and.w	r1, r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	03ff63ff 	.word	0x03ff63ff

08002c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d138      	bne.n	8002cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e032      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	; 0x24
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d139      	bne.n	8002d46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e033      	b.n	8002d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	58000400 	.word	0x58000400

08002d70 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <LL_PWR_EnableBootC2+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a03      	ldr	r2, [pc, #12]	; (8002d88 <LL_PWR_EnableBootC2+0x18>)
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	58000400 	.word	0x58000400

08002d8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_PWREx_GetVoltageRange+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	58000400 	.word	0x58000400

08002da4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002dac:	f7ff ffe0 	bl	8002d70 <LL_PWR_EnableBootC2>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d101      	bne.n	8002dce <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	58000400 	.word	0x58000400

08002ddc <LL_RCC_HSE_EnableTcxo>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_HSE_DisableTcxo>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e26:	d101      	bne.n	8002e2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_HSE_Enable>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_HSE_Disable>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_HSE_IsReady>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e80:	d101      	bne.n	8002e86 <LL_RCC_HSE_IsReady+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_RCC_HSE_IsReady+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <LL_RCC_HSI_Enable>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_HSI_Disable>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_HSI_IsReady>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d101      	bne.n	8002ee0 <LL_RCC_HSI_IsReady+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_RCC_HSI_IsReady+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_HSI_SetCalibTrimming>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d101      	bne.n	8002f2a <LL_RCC_LSE_IsReady+0x18>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <LL_RCC_LSE_IsReady+0x1a>
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d101      	bne.n	8002f8c <LL_RCC_LSI_IsReady+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_RCC_LSI_IsReady+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d101      	bne.n	8002fe4 <LL_RCC_MSI_IsReady+0x16>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_RCC_MSI_IsReady+0x18>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d101      	bne.n	8003004 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003100:	f023 020f 	bic.w	r2, r3, #15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320e:	d101      	bne.n	8003214 <LL_RCC_PLL_IsReady+0x18>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <LL_RCC_PLL_IsReady+0x1a>
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0303 	and.w	r3, r3, #3
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800327c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d101      	bne.n	8003290 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ae:	d101      	bne.n	80032b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d101      	bne.n	80032d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f4:	d101      	bne.n	80032fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003316:	d101      	bne.n	800331c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e38b      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333a:	f7ff fea6 	bl	800308a <LL_RCC_GetSysClkSource>
 800333e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003340:	f7ff ff8f 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003344:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80c9 	beq.w	80034e6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x3e>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d17b      	bne.n	8003458 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d178      	bne.n	8003458 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003366:	f7ff fe32 	bl	8002fce <LL_RCC_MSI_IsReady>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x54>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e36a      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x72>
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	e006      	b.n	80033a8 <HAL_RCC_OscConfig+0x80>
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d222      	bcs.n	80033f2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fd6f 	bl	8003e94 <RCC_SetFlashLatencyFromMSIRange>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e348      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ca:	f043 0308 	orr.w	r3, r3, #8
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fe26 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>
 80033f0:	e021      	b.n	8003436 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fe0d 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd34 	bl	8003e94 <RCC_SetFlashLatencyFromMSIRange>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e30d      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003436:	f000 fcf5 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 800343a:	4603      	mov	r3, r0
 800343c:	4aa1      	ldr	r2, [pc, #644]	; (80036c4 <HAL_RCC_OscConfig+0x39c>)
 800343e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003440:	4ba1      	ldr	r3, [pc, #644]	; (80036c8 <HAL_RCC_OscConfig+0x3a0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fc71 	bl	8001d2c <HAL_InitTick>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d047      	beq.n	80034e4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	e2fc      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02c      	beq.n	80034ba <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003460:	f7ff fd99 	bl	8002f96 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003464:	f7fe fcae 	bl	8001dc4 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800346c:	f7fe fcaa 	bl	8001dc4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2e9      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800347e:	f7ff fda6 	bl	8002fce <LL_RCC_MSI_IsReady>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f1      	beq.n	800346c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fdc2 	bl	800303c <LL_RCC_MSI_SetCalibTrimming>
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ba:	f7ff fd7a 	bl	8002fb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034be:	f7fe fc81 	bl	8001dc4 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c6:	f7fe fc7d 	bl	8001dc4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e2bc      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034d8:	f7ff fd79 	bl	8002fce <LL_RCC_MSI_IsReady>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f1      	bne.n	80034c6 <HAL_RCC_OscConfig+0x19e>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d05f      	beq.n	80035b2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_OscConfig+0x1dc>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d10d      	bne.n	800351a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d10a      	bne.n	800351a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	f7ff fcb3 	bl	8002e6e <LL_RCC_HSE_IsReady>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d050      	beq.n	80035b0 <HAL_RCC_OscConfig+0x288>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d14c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e29b      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x218>
 800353a:	f7ff fc7c 	bl	8002e36 <LL_RCC_HSE_Enable>
 800353e:	e00d      	b.n	800355c <HAL_RCC_OscConfig+0x234>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003548:	d104      	bne.n	8003554 <HAL_RCC_OscConfig+0x22c>
 800354a:	f7ff fc47 	bl	8002ddc <LL_RCC_HSE_EnableTcxo>
 800354e:	f7ff fc72 	bl	8002e36 <LL_RCC_HSE_Enable>
 8003552:	e003      	b.n	800355c <HAL_RCC_OscConfig+0x234>
 8003554:	f7ff fc7d 	bl	8002e52 <LL_RCC_HSE_Disable>
 8003558:	f7ff fc4e 	bl	8002df8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fc2e 	bl	8001dc4 <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fc2a 	bl	8001dc4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e269      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800357e:	f7ff fc76 	bl	8002e6e <LL_RCC_HSE_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f1      	beq.n	800356c <HAL_RCC_OscConfig+0x244>
 8003588:	e013      	b.n	80035b2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fc1b 	bl	8001dc4 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003592:	f7fe fc17 	bl	8001dc4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b64      	cmp	r3, #100	; 0x64
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e256      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80035a4:	f7ff fc63 	bl	8002e6e <LL_RCC_HSE_IsReady>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x26a>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04b      	beq.n	8003656 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2a8>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d113      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d110      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d0:	f7ff fc7a 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2be>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e235      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fc7d 	bl	8002eea <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f0:	e031      	b.n	8003656 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d019      	beq.n	800362e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fa:	f7ff fc49 	bl	8002e90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fbe1 	bl	8001dc4 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fbdd 	bl	8001dc4 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e21c      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003618:	f7ff fc56 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f1      	beq.n	8003606 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fc5f 	bl	8002eea <LL_RCC_HSI_SetCalibTrimming>
 800362c:	e013      	b.n	8003656 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	f7ff fc3d 	bl	8002eac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe fbc7 	bl	8001dc4 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7fe fbc3 	bl	8001dc4 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e202      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800364c:	f7ff fc3c 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f1      	bne.n	800363a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06f      	beq.n	8003742 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d057      	beq.n	800371a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	429a      	cmp	r2, r3
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1db      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80036a4:	f7ff fc56 	bl	8002f54 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a8:	f7fe fb8c 	bl	8001dc4 <HAL_GetTick>
 80036ac:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80036ae:	e00d      	b.n	80036cc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fe fb88 	bl	8001dc4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b11      	cmp	r3, #17
 80036bc:	d906      	bls.n	80036cc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80036cc:	f7ff fc52 	bl	8002f74 <LL_RCC_LSI_IsReady>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ec      	bne.n	80036b0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036de:	f023 0210 	bic.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f0:	f7ff fc20 	bl	8002f34 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe fb66 	bl	8001dc4 <HAL_GetTick>
 80036f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe fb62 	bl	8001dc4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b11      	cmp	r3, #17
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1a1      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800370e:	f7ff fc31 	bl	8002f74 <LL_RCC_LSI_IsReady>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f1      	beq.n	80036fc <HAL_RCC_OscConfig+0x3d4>
 8003718:	e013      	b.n	8003742 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371a:	f7ff fc1b 	bl	8002f54 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fe fb51 	bl	8001dc4 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe fb4d 	bl	8001dc4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b11      	cmp	r3, #17
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e18c      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003738:	f7ff fc1c 	bl	8002f74 <LL_RCC_LSI_IsReady>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f1      	bne.n	8003726 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80d8 	beq.w	8003900 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003750:	f7ff fb32 	bl	8002db8 <LL_PWR_IsEnabledBkUpAccess>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800375a:	f7ff fafb 	bl	8002d54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fe fb31 	bl	8001dc4 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7fe fb2d 	bl	8001dc4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e16c      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003778:	f7ff fb1e 	bl	8002db8 <LL_PWR_IsEnabledBkUpAccess>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f1      	beq.n	8003766 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d07b      	beq.n	8003882 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b85      	cmp	r3, #133	; 0x85
 8003790:	d003      	beq.n	800379a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d109      	bne.n	80037ae <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fb09 	bl	8001dc4 <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fe fafb 	bl	8001dc4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e138      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037e0:	f7ff fb97 	bl	8002f12 <LL_RCC_LSE_IsReady>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ef      	beq.n	80037ca <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b81      	cmp	r3, #129	; 0x81
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b85      	cmp	r3, #133	; 0x85
 80037f8:	d121      	bne.n	800383e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fae3 	bl	8001dc4 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe fad5 	bl	8001dc4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e112      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ec      	beq.n	8003816 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800383c:	e060      	b.n	8003900 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fac1 	bl	8001dc4 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fe fab3 	bl	8001dc4 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0f0      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ec      	bne.n	800385a <HAL_RCC_OscConfig+0x532>
 8003880:	e03e      	b.n	8003900 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fe fa9f 	bl	8001dc4 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fa91 	bl	8001dc4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0ce      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ec      	bne.n	800389e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fa7e 	bl	8001dc4 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fe fa70 	bl	8001dc4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0ad      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80038f6:	f7ff fb0c 	bl	8002f12 <LL_RCC_LSE_IsReady>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ef      	bne.n	80038e0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a3 	beq.w	8003a50 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d076      	beq.n	80039fe <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2b02      	cmp	r3, #2
 8003916:	d14b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	f7ff fc62 	bl	80031e0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fa52 	bl	8001dc4 <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fa4e 	bl	8001dc4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b0a      	cmp	r3, #10
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e08d      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003936:	f7ff fc61 	bl	80031fc <LL_RCC_PLL_IsReady>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f1      	bne.n	8003924 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_RCC_OscConfig+0x734>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003958:	0212      	lsls	r2, r2, #8
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003966:	4311      	orrs	r1, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800396c:	430a      	orrs	r2, r1
 800396e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003976:	f7ff fc25 	bl	80031c4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fa1b 	bl	8001dc4 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fa17 	bl	8001dc4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b0a      	cmp	r3, #10
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e056      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80039a4:	f7ff fc2a 	bl	80031fc <LL_RCC_PLL_IsReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f1      	beq.n	8003992 <HAL_RCC_OscConfig+0x66a>
 80039ae:	e04f      	b.n	8003a50 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	f7ff fc16 	bl	80031e0 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ce:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe f9f4 	bl	8001dc4 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe f9f0 	bl	8001dc4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b0a      	cmp	r3, #10
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e02f      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80039f2:	f7ff fc03 	bl	80031fc <LL_RCC_PLL_IsReady>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f1      	bne.n	80039e0 <HAL_RCC_OscConfig+0x6b8>
 80039fc:	e028      	b.n	8003a50 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e023      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0203 	and.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d115      	bne.n	8003a4c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d10e      	bne.n	8003a4c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	11c1808c 	.word	0x11c1808c

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e12c      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b98      	ldr	r3, [pc, #608]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d91b      	bls.n	8003aba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b95      	ldr	r3, [pc, #596]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 0207 	bic.w	r2, r3, #7
 8003a8a:	4993      	ldr	r1, [pc, #588]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a92:	f7fe f997 	bl	8001dc4 <HAL_GetTick>
 8003a96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a9a:	f7fe f993 	bl	8001dc4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e110      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aac:	4b8a      	ldr	r3, [pc, #552]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d1ef      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fae8 	bl	80030a0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe f978 	bl	8001dc4 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ad8:	f7fe f974 	bl	8001dc4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0f1      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aea:	f7ff fbc5 	bl	8003278 <LL_RCC_IsActiveFlag_HPRE>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f1      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fade 	bl	80030c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b0a:	f7fe f95b 	bl	8001dc4 <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b12:	f7fe f957 	bl	8001dc4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0d4      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b24:	f7ff fbb9 	bl	800329a <LL_RCC_IsActiveFlag_C2HPRE>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f1      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fad6 	bl	80030f0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b44:	f7fe f93e 	bl	8001dc4 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b4c:	f7fe f93a 	bl	8001dc4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0b7      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b5e:	f7ff fbae 	bl	80032be <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f1      	beq.n	8003b4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d016      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff facf 	bl	800311c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b7e:	f7fe f921 	bl	8001dc4 <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b86:	f7fe f91d 	bl	8001dc4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e09a      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b98:	f7ff fba3 	bl	80032e2 <LL_RCC_IsActiveFlag_PPRE1>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f1      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fac4 	bl	8003142 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bba:	f7fe f903 	bl	8001dc4 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bc2:	f7fe f8ff 	bl	8001dc4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e07c      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bd4:	f7ff fb96 	bl	8003304 <LL_RCC_IsActiveFlag_PPRE2>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f1      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d043      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bf2:	f7ff f93c 	bl	8002e6e <LL_RCC_HSE_IsReady>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11e      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e066      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c08:	f7ff faf8 	bl	80031fc <LL_RCC_PLL_IsReady>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e05b      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c1e:	f7ff f9d6 	bl	8002fce <LL_RCC_MSI_IsReady>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e050      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c2c:	f7ff f94c 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e049      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fa10 	bl	8003064 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fe f8be 	bl	8001dc4 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe f8ba 	bl	8001dc4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e035      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	f7ff fa12 	bl	800308a <LL_RCC_GetSysClkSource>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d1ec      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d21b      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 0207 	bic.w	r2, r3, #7
 8003c88:	4913      	ldr	r1, [pc, #76]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fe f898 	bl	8001dc4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c98:	f7fe f894 	bl	8001dc4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e011      	b.n	8003cce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x278>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1ef      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cb8:	f000 f8b4 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <HAL_RCC_ClockConfig+0x27c>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_RCC_ClockConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f830 	bl	8001d2c <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	58004000 	.word	0x58004000
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf2:	f7ff f9ca 	bl	800308a <LL_RCC_GetSysClkSource>
 8003cf6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf8:	f7ff fab3 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003cfc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x2c>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d139      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d136      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d10:	f7ff f96d 	bl	8002fee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x62>
 8003d1a:	f7ff f968 	bl	8002fee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x4e>
 8003d24:	f7ff f973 	bl	800300e <LL_RCC_MSI_GetRange>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	e005      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x5a>
 8003d32:	f7ff f977 	bl	8003024 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d36:	4603      	mov	r3, r0
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	e014      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x8c>
 8003d46:	f7ff f952 	bl	8002fee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x7a>
 8003d50:	f7ff f95d 	bl	800300e <LL_RCC_MSI_GetRange>
 8003d54:	4603      	mov	r3, r0
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	e005      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x86>
 8003d5e:	f7ff f961 	bl	8003024 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d62:	4603      	mov	r3, r0
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d115      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d7c:	e012      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e00c      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d90:	f7ff f840 	bl	8002e14 <LL_RCC_HSE_IsEnabledDiv2>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e001      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003da2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	f7ff f971 	bl	800308a <LL_RCC_GetSysClkSource>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d12f      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003dae:	f7ff fa58 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003db2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0xde>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xe4>
 8003dc0:	e00d      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003dc4:	60fb      	str	r3, [r7, #12]
        break;
 8003dc6:	e00d      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dc8:	f7ff f824 	bl	8002e14 <LL_RCC_HSE_IsEnabledDiv2>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x138>)
 8003dd4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003dd6:	e005      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003dda:	60fb      	str	r3, [r7, #12]
        break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003de4:	f7ff fa1b 	bl	800321e <LL_RCC_PLL_GetN>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	fb03 f402 	mul.w	r4, r3, r2
 8003df0:	f7ff fa2c 	bl	800324c <LL_RCC_PLL_GetDivider>
 8003df4:	4603      	mov	r3, r0
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	3301      	adds	r3, #1
 8003dfa:	fbb4 f4f3 	udiv	r4, r4, r3
 8003dfe:	f7ff fa1a 	bl	8003236 <LL_RCC_PLL_GetR>
 8003e02:	4603      	mov	r3, r0
 8003e04:	0f5b      	lsrs	r3, r3, #29
 8003e06:	3301      	adds	r3, #1
 8003e08:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e0c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	0800a3b0 	.word	0x0800a3b0
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	01e84800 	.word	0x01e84800

08003e24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b598      	push	{r3, r4, r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e28:	f7ff ff5c 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	f7ff f99b 	bl	8003168 <LL_RCC_GetAHBPrescaler>
 8003e32:	4603      	mov	r3, r0
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a03      	ldr	r2, [pc, #12]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd98      	pop	{r3, r4, r7, pc}
 8003e48:	0800a350 	.word	0x0800a350

08003e4c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b598      	push	{r3, r4, r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e50:	f7ff ffe8 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e54:	4604      	mov	r4, r0
 8003e56:	f7ff f99f 	bl	8003198 <LL_RCC_GetAPB1Prescaler>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd98      	pop	{r3, r4, r7, pc}
 8003e6c:	0800a390 	.word	0x0800a390

08003e70 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b598      	push	{r3, r4, r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e74:	f7ff ffd6 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	f7ff f998 	bl	80031ae <LL_RCC_GetAPB2Prescaler>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	0adb      	lsrs	r3, r3, #11
 8003e82:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd98      	pop	{r3, r4, r7, pc}
 8003e90:	0800a390 	.word	0x0800a390

08003e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003eac:	f7ff f967 	bl	800317e <LL_RCC_GetAHB3Prescaler>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	091b      	lsrs	r3, r3, #4
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9c      	lsrs	r4, r3, #18
 8003ed0:	f7fe ff5c 	bl	8002d8c <HAL_PWREx_GetVoltageRange>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f80b 	bl	8003ef4 <RCC_SetFlashLatency>
 8003ede:	4603      	mov	r3, r0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	0800a3b0 	.word	0x0800a3b0
 8003eec:	0800a350 	.word	0x0800a350
 8003ef0:	431bde83 	.word	0x431bde83

08003ef4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08e      	sub	sp, #56	; 0x38
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003efe:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <RCC_SetFlashLatency+0xf4>)
 8003f00:	f107 0320 	add.w	r3, r7, #32
 8003f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f08:	6018      	str	r0, [r3, #0]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003f0e:	4a37      	ldr	r2, [pc, #220]	; (8003fec <RCC_SetFlashLatency+0xf8>)
 8003f10:	f107 0318 	add.w	r3, r7, #24
 8003f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f18:	6018      	str	r0, [r3, #0]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003f1e:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <RCC_SetFlashLatency+0xfc>)
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f34:	d11b      	bne.n	8003f6e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3a:	e014      	b.n	8003f66 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	3338      	adds	r3, #56	; 0x38
 8003f42:	443b      	add	r3, r7
 8003f44:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d807      	bhi.n	8003f60 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	443b      	add	r3, r7
 8003f58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f5e:	e021      	b.n	8003fa4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	3301      	adds	r3, #1
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d9e7      	bls.n	8003f3c <RCC_SetFlashLatency+0x48>
 8003f6c:	e01a      	b.n	8003fa4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f72:	e014      	b.n	8003f9e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	443b      	add	r3, r7
 8003f7c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d807      	bhi.n	8003f98 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3338      	adds	r3, #56	; 0x38
 8003f8e:	443b      	add	r3, r7
 8003f90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f96:	e005      	b.n	8003fa4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d9e7      	bls.n	8003f74 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <RCC_SetFlashLatency+0x100>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	4911      	ldr	r1, [pc, #68]	; (8003ff4 <RCC_SetFlashLatency+0x100>)
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fb4:	f7fd ff06 	bl	8001dc4 <HAL_GetTick>
 8003fb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fba:	e008      	b.n	8003fce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fbc:	f7fd ff02 	bl	8001dc4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e007      	b.n	8003fde <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <RCC_SetFlashLatency+0x100>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1ef      	bne.n	8003fbc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3738      	adds	r7, #56	; 0x38
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	0800a328 	.word	0x0800a328
 8003fec:	0800a330 	.word	0x0800a330
 8003ff0:	0800a338 	.word	0x0800a338
 8003ff4:	58004000 	.word	0x58004000

08003ff8 <LL_RCC_LSE_IsReady>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d101      	bne.n	8004010 <LL_RCC_LSE_IsReady+0x18>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <LL_RCC_LSE_IsReady+0x1a>
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <LL_RCC_SetUSARTClockSource>:
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	43db      	mvns	r3, r3
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <LL_RCC_SetI2SClockSource>:
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <LL_RCC_SetLPUARTClockSource>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800407c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <LL_RCC_SetI2CClockSource>:
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040b6:	43db      	mvns	r3, r3
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_SetLPTIMClockSource>:
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <LL_RCC_SetRNGClockSource>:
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800411c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_RCC_SetADCClockSource>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <LL_RCC_SetRTCClockSource>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <LL_RCC_GetRTCClockSource>:
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <LL_RCC_ForceBackupDomainReset>:
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <LL_RCC_ReleaseBackupDomainReset>:
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80041ec:	2300      	movs	r3, #0
 80041ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041f0:	2300      	movs	r3, #0
 80041f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d058      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004200:	f7fe fda8 	bl	8002d54 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004204:	f7fd fdde 	bl	8001dc4 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800420a:	e009      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fd fdda 	bl	8001dc4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	74fb      	strb	r3, [r7, #19]
        break;
 800421e:	e006      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004220:	4b7b      	ldr	r3, [pc, #492]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d1ee      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d13c      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004234:	f7ff ffa7 	bl	8004186 <LL_RCC_GetRTCClockSource>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	429a      	cmp	r2, r3
 8004240:	d00f      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004250:	f7ff ffa5 	bl	800419e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	f7ff ffb3 	bl	80041be <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d014      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fdaa 	bl	8001dc4 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004272:	e00b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fda6 	bl	8001dc4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	74fb      	strb	r3, [r7, #19]
            break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800428c:	f7ff feb4 	bl	8003ff8 <LL_RCC_LSE_IsReady>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d1ee      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff5b 	bl	800415c <LL_RCC_SetRTCClockSource>
 80042a6:	e004      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
 80042ac:	e001      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fea9 	bl	800401a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fe9e 	bl	800401a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fec0 	bl	8004074 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fee6 	bl	80040d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fedb 	bl	80040d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fed0 	bl	80040d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fea9 	bl	800409e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fe9e 	bl	800409e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fe93 	bl	800409e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d011      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fe5e 	bl	800404a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d107      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fea5 	bl	8004108 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d011      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fea3 	bl	8004132 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004406:	7cbb      	ldrb	r3, [r7, #18]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	58000400 	.word	0x58000400

08004414 <LL_RCC_GetUSARTClockSource>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	4313      	orrs	r3, r2
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <LL_RCC_GetLPUARTClockSource>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4013      	ands	r3, r2
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e042      	b.n	80044ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd fade 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8c3 	bl	8004624 <UART_SetConfig>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e022      	b.n	80044ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fb2b 	bl	8004b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fbb1 	bl	8004c4e <UART_CheckIdleState>
 80044ec:	4603      	mov	r3, r0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b08a      	sub	sp, #40	; 0x28
 80044fa:	af02      	add	r7, sp, #8
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 8083 	bne.w	8004618 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_Transmit+0x28>
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07b      	b.n	800461a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_UART_Transmit+0x3a>
 800452c:	2302      	movs	r3, #2
 800452e:	e074      	b.n	800461a <HAL_UART_Transmit+0x124>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2221      	movs	r2, #33	; 0x21
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004548:	f7fd fc3c 	bl	8001dc4 <HAL_GetTick>
 800454c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d108      	bne.n	800457a <HAL_UART_Transmit+0x84>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e003      	b.n	8004582 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800458a:	e02c      	b.n	80045e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fba4 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e039      	b.n	800461a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	3302      	adds	r3, #2
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e007      	b.n	80045d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1cc      	bne.n	800458c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fb71 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004618:	2302      	movs	r3, #2
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b08c      	sub	sp, #48	; 0x30
 800462a:	af00      	add	r7, sp, #0
 800462c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	431a      	orrs	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4313      	orrs	r3, r2
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b94      	ldr	r3, [pc, #592]	; (80048a4 <UART_SetConfig+0x280>)
 8004654:	4013      	ands	r3, r2
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465c:	430b      	orrs	r3, r1
 800465e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a89      	ldr	r2, [pc, #548]	; (80048a8 <UART_SetConfig+0x284>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468c:	4313      	orrs	r3, r2
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800469a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	f023 010f 	bic.w	r1, r3, #15
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <UART_SetConfig+0x288>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d127      	bne.n	8004718 <UART_SetConfig+0xf4>
 80046c8:	2003      	movs	r0, #3
 80046ca:	f7ff fea3 	bl	8004414 <LL_RCC_GetUSARTClockSource>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d81b      	bhi.n	8004710 <UART_SetConfig+0xec>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0xbc>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	08004701 	.word	0x08004701
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	08004709 	.word	0x08004709
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f6:	e080      	b.n	80047fa <UART_SetConfig+0x1d6>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fe:	e07c      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004706:	e078      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470e:	e074      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004716:	e070      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a64      	ldr	r2, [pc, #400]	; (80048b0 <UART_SetConfig+0x28c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d138      	bne.n	8004794 <UART_SetConfig+0x170>
 8004722:	200c      	movs	r0, #12
 8004724:	f7ff fe76 	bl	8004414 <LL_RCC_GetUSARTClockSource>
 8004728:	4603      	mov	r3, r0
 800472a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d82c      	bhi.n	800478c <UART_SetConfig+0x168>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x114>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	0800478d 	.word	0x0800478d
 8004740:	0800478d 	.word	0x0800478d
 8004744:	0800478d 	.word	0x0800478d
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800478d 	.word	0x0800478d
 8004750:	0800478d 	.word	0x0800478d
 8004754:	0800478d 	.word	0x0800478d
 8004758:	08004775 	.word	0x08004775
 800475c:	0800478d 	.word	0x0800478d
 8004760:	0800478d 	.word	0x0800478d
 8004764:	0800478d 	.word	0x0800478d
 8004768:	08004785 	.word	0x08004785
 800476c:	2300      	movs	r3, #0
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004772:	e042      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004774:	2302      	movs	r3, #2
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800477a:	e03e      	b.n	80047fa <UART_SetConfig+0x1d6>
 800477c:	2304      	movs	r3, #4
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004782:	e03a      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004784:	2308      	movs	r3, #8
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478a:	e036      	b.n	80047fa <UART_SetConfig+0x1d6>
 800478c:	2310      	movs	r3, #16
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004792:	e032      	b.n	80047fa <UART_SetConfig+0x1d6>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a43      	ldr	r2, [pc, #268]	; (80048a8 <UART_SetConfig+0x284>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d12a      	bne.n	80047f4 <UART_SetConfig+0x1d0>
 800479e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80047a2:	f7ff fe49 	bl	8004438 <LL_RCC_GetLPUARTClockSource>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ac:	d01a      	beq.n	80047e4 <UART_SetConfig+0x1c0>
 80047ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047b2:	d81b      	bhi.n	80047ec <UART_SetConfig+0x1c8>
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d00c      	beq.n	80047d4 <UART_SetConfig+0x1b0>
 80047ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047be:	d815      	bhi.n	80047ec <UART_SetConfig+0x1c8>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <UART_SetConfig+0x1a8>
 80047c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c8:	d008      	beq.n	80047dc <UART_SetConfig+0x1b8>
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x1c8>
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e012      	b.n	80047fa <UART_SetConfig+0x1d6>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047da:	e00e      	b.n	80047fa <UART_SetConfig+0x1d6>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e00a      	b.n	80047fa <UART_SetConfig+0x1d6>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e006      	b.n	80047fa <UART_SetConfig+0x1d6>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e002      	b.n	80047fa <UART_SetConfig+0x1d6>
 80047f4:	2310      	movs	r3, #16
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <UART_SetConfig+0x284>)
 8004800:	4293      	cmp	r3, r2
 8004802:	f040 80a4 	bne.w	800494e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800480a:	2b08      	cmp	r3, #8
 800480c:	d823      	bhi.n	8004856 <UART_SetConfig+0x232>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0x1f0>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004839 	.word	0x08004839
 8004818:	08004857 	.word	0x08004857
 800481c:	08004841 	.word	0x08004841
 8004820:	08004857 	.word	0x08004857
 8004824:	08004847 	.word	0x08004847
 8004828:	08004857 	.word	0x08004857
 800482c:	08004857 	.word	0x08004857
 8004830:	08004857 	.word	0x08004857
 8004834:	0800484f 	.word	0x0800484f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7ff fb08 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800483e:	e010      	b.n	8004862 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <UART_SetConfig+0x290>)
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004844:	e00d      	b.n	8004862 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004846:	f7ff fa4d 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004854:	e005      	b.n	8004862 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8137 	beq.w	8004ad8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <UART_SetConfig+0x294>)
 8004870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004874:	461a      	mov	r2, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	fbb3 f3f2 	udiv	r3, r3, r2
 800487c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	429a      	cmp	r2, r3
 800488c:	d305      	bcc.n	800489a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d910      	bls.n	80048bc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048a0:	e11a      	b.n	8004ad8 <UART_SetConfig+0x4b4>
 80048a2:	bf00      	nop
 80048a4:	cfff69f3 	.word	0xcfff69f3
 80048a8:	40008000 	.word	0x40008000
 80048ac:	40013800 	.word	0x40013800
 80048b0:	40004400 	.word	0x40004400
 80048b4:	00f42400 	.word	0x00f42400
 80048b8:	0800a3f0 	.word	0x0800a3f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	2200      	movs	r2, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	60fa      	str	r2, [r7, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	4a8e      	ldr	r2, [pc, #568]	; (8004b04 <UART_SetConfig+0x4e0>)
 80048ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048de:	f7fc fc09 	bl	80010f4 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	020b      	lsls	r3, r1, #8
 80048f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048f8:	0202      	lsls	r2, r0, #8
 80048fa:	6979      	ldr	r1, [r7, #20]
 80048fc:	6849      	ldr	r1, [r1, #4]
 80048fe:	0849      	lsrs	r1, r1, #1
 8004900:	2000      	movs	r0, #0
 8004902:	460c      	mov	r4, r1
 8004904:	4605      	mov	r5, r0
 8004906:	eb12 0804 	adds.w	r8, r2, r4
 800490a:	eb43 0905 	adc.w	r9, r3, r5
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	469a      	mov	sl, r3
 8004916:	4693      	mov	fp, r2
 8004918:	4652      	mov	r2, sl
 800491a:	465b      	mov	r3, fp
 800491c:	4640      	mov	r0, r8
 800491e:	4649      	mov	r1, r9
 8004920:	f7fc fbe8 	bl	80010f4 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004932:	d308      	bcc.n	8004946 <UART_SetConfig+0x322>
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493a:	d204      	bcs.n	8004946 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e0c8      	b.n	8004ad8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800494c:	e0c4      	b.n	8004ad8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d168      	bne.n	8004a2a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800495c:	2b08      	cmp	r3, #8
 800495e:	d828      	bhi.n	80049b2 <UART_SetConfig+0x38e>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x344>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7ff fa5e 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004992:	e014      	b.n	80049be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7ff fa6c 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800499a:	e010      	b.n	80049be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b5a      	ldr	r3, [pc, #360]	; (8004b08 <UART_SetConfig+0x4e4>)
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049a0:	e00d      	b.n	80049be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7ff f99f 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 80049a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a8:	e009      	b.n	80049be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b0:	e005      	b.n	80049be <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8089 	beq.w	8004ad8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <UART_SetConfig+0x4e0>)
 80049cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d8:	005a      	lsls	r2, r3, #1
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	441a      	add	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	2b0f      	cmp	r3, #15
 80049f2:	d916      	bls.n	8004a22 <UART_SetConfig+0x3fe>
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fa:	d212      	bcs.n	8004a22 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f023 030f 	bic.w	r3, r3, #15
 8004a04:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	8bfb      	ldrh	r3, [r7, #30]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	8bfa      	ldrh	r2, [r7, #30]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	e05a      	b.n	8004ad8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a28:	e056      	b.n	8004ad8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d827      	bhi.n	8004a82 <UART_SetConfig+0x45e>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <UART_SetConfig+0x414>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a83 	.word	0x08004a83
 8004a48:	08004a73 	.word	0x08004a73
 8004a4c:	08004a83 	.word	0x08004a83
 8004a50:	08004a83 	.word	0x08004a83
 8004a54:	08004a83 	.word	0x08004a83
 8004a58:	08004a7b 	.word	0x08004a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5c:	f7ff f9f6 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a62:	e014      	b.n	8004a8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff fa04 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8004a68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a6a:	e010      	b.n	8004a8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <UART_SetConfig+0x4e4>)
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a70:	e00d      	b.n	8004a8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a72:	f7ff f937 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a78:	e009      	b.n	8004a8e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a80:	e005      	b.n	8004a8e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d021      	beq.n	8004ad8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <UART_SetConfig+0x4e0>)
 8004a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	441a      	add	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	2b0f      	cmp	r3, #15
 8004abe:	d908      	bls.n	8004ad2 <UART_SetConfig+0x4ae>
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d204      	bcs.n	8004ad2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e002      	b.n	8004ad8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004af4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3730      	adds	r7, #48	; 0x30
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b02:	bf00      	nop
 8004b04:	0800a3f0 	.word	0x0800a3f0
 8004b08:	00f42400 	.word	0x00f42400

08004b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0a:	d10a      	bne.n	8004c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af02      	add	r7, sp, #8
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c5e:	f7fd f8b1 	bl	8001dc4 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d10e      	bne.n	8004c90 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f82f 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e025      	b.n	8004cdc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d10e      	bne.n	8004cbc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f819 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e00f      	b.n	8004cdc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b09c      	sub	sp, #112	; 0x70
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	e0a9      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfc:	f000 80a5 	beq.w	8004e4a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fd f860 	bl	8001dc4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d140      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d36:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e6      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d68:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e069      	b.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d051      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db4:	d149      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e12:	623a      	str	r2, [r7, #32]
 8004e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e010      	b.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f43f af46 	beq.w	8004cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3770      	adds	r7, #112	; 0x70
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e027      	b.n	8004eda <HAL_UARTEx_DisableFifoMode+0x66>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2224      	movs	r2, #36	; 0x24
 8004e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e02d      	b.n	8004f58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f84f 	bl	8004fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e02d      	b.n	8004fd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f811 	bl	8004fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ffc:	e031      	b.n	8005062 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ffe:	2308      	movs	r3, #8
 8005000:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005002:	2308      	movs	r3, #8
 8005004:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	0e5b      	lsrs	r3, r3, #25
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	0f5b      	lsrs	r3, r3, #29
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	7b3a      	ldrb	r2, [r7, #12]
 800502a:	4910      	ldr	r1, [pc, #64]	; (800506c <UARTEx_SetNbDataToProcess+0x90>)
 800502c:	5c8a      	ldrb	r2, [r1, r2]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005032:	7b3a      	ldrb	r2, [r7, #12]
 8005034:	490e      	ldr	r1, [pc, #56]	; (8005070 <UARTEx_SetNbDataToProcess+0x94>)
 8005036:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005038:	fb93 f3f2 	sdiv	r3, r3, r2
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	7b7a      	ldrb	r2, [r7, #13]
 8005048:	4908      	ldr	r1, [pc, #32]	; (800506c <UARTEx_SetNbDataToProcess+0x90>)
 800504a:	5c8a      	ldrb	r2, [r1, r2]
 800504c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005050:	7b7a      	ldrb	r2, [r7, #13]
 8005052:	4907      	ldr	r1, [pc, #28]	; (8005070 <UARTEx_SetNbDataToProcess+0x94>)
 8005054:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005056:	fb93 f3f2 	sdiv	r3, r3, r2
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	0800a408 	.word	0x0800a408
 8005070:	0800a410 	.word	0x0800a410

08005074 <__errno>:
 8005074:	4b01      	ldr	r3, [pc, #4]	; (800507c <__errno+0x8>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000000c 	.word	0x2000000c

08005080 <__libc_init_array>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	4d0d      	ldr	r5, [pc, #52]	; (80050b8 <__libc_init_array+0x38>)
 8005084:	4c0d      	ldr	r4, [pc, #52]	; (80050bc <__libc_init_array+0x3c>)
 8005086:	1b64      	subs	r4, r4, r5
 8005088:	10a4      	asrs	r4, r4, #2
 800508a:	2600      	movs	r6, #0
 800508c:	42a6      	cmp	r6, r4
 800508e:	d109      	bne.n	80050a4 <__libc_init_array+0x24>
 8005090:	4d0b      	ldr	r5, [pc, #44]	; (80050c0 <__libc_init_array+0x40>)
 8005092:	4c0c      	ldr	r4, [pc, #48]	; (80050c4 <__libc_init_array+0x44>)
 8005094:	f005 f908 	bl	800a2a8 <_init>
 8005098:	1b64      	subs	r4, r4, r5
 800509a:	10a4      	asrs	r4, r4, #2
 800509c:	2600      	movs	r6, #0
 800509e:	42a6      	cmp	r6, r4
 80050a0:	d105      	bne.n	80050ae <__libc_init_array+0x2e>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a8:	4798      	blx	r3
 80050aa:	3601      	adds	r6, #1
 80050ac:	e7ee      	b.n	800508c <__libc_init_array+0xc>
 80050ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b2:	4798      	blx	r3
 80050b4:	3601      	adds	r6, #1
 80050b6:	e7f2      	b.n	800509e <__libc_init_array+0x1e>
 80050b8:	0800a8dc 	.word	0x0800a8dc
 80050bc:	0800a8dc 	.word	0x0800a8dc
 80050c0:	0800a8dc 	.word	0x0800a8dc
 80050c4:	0800a8e0 	.word	0x0800a8e0

080050c8 <memset>:
 80050c8:	4402      	add	r2, r0
 80050ca:	4603      	mov	r3, r0
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d100      	bne.n	80050d2 <memset+0xa>
 80050d0:	4770      	bx	lr
 80050d2:	f803 1b01 	strb.w	r1, [r3], #1
 80050d6:	e7f9      	b.n	80050cc <memset+0x4>

080050d8 <__cvt>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	b088      	sub	sp, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	461f      	mov	r7, r3
 80050e2:	4614      	mov	r4, r2
 80050e4:	bfb8      	it	lt
 80050e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050ee:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80050f2:	bfb6      	itet	lt
 80050f4:	461f      	movlt	r7, r3
 80050f6:	2300      	movge	r3, #0
 80050f8:	232d      	movlt	r3, #45	; 0x2d
 80050fa:	7013      	strb	r3, [r2, #0]
 80050fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050fe:	f023 0820 	bic.w	r8, r3, #32
 8005102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005106:	d005      	beq.n	8005114 <__cvt+0x3c>
 8005108:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800510c:	d100      	bne.n	8005110 <__cvt+0x38>
 800510e:	3501      	adds	r5, #1
 8005110:	2302      	movs	r3, #2
 8005112:	e000      	b.n	8005116 <__cvt+0x3e>
 8005114:	2303      	movs	r3, #3
 8005116:	aa07      	add	r2, sp, #28
 8005118:	9204      	str	r2, [sp, #16]
 800511a:	aa06      	add	r2, sp, #24
 800511c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005120:	e9cd 3500 	strd	r3, r5, [sp]
 8005124:	4622      	mov	r2, r4
 8005126:	463b      	mov	r3, r7
 8005128:	f001 fe2a 	bl	8006d80 <_dtoa_r>
 800512c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005130:	4606      	mov	r6, r0
 8005132:	d102      	bne.n	800513a <__cvt+0x62>
 8005134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005136:	07db      	lsls	r3, r3, #31
 8005138:	d522      	bpl.n	8005180 <__cvt+0xa8>
 800513a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800513e:	eb06 0905 	add.w	r9, r6, r5
 8005142:	d110      	bne.n	8005166 <__cvt+0x8e>
 8005144:	7833      	ldrb	r3, [r6, #0]
 8005146:	2b30      	cmp	r3, #48	; 0x30
 8005148:	d10a      	bne.n	8005160 <__cvt+0x88>
 800514a:	2200      	movs	r2, #0
 800514c:	2300      	movs	r3, #0
 800514e:	4620      	mov	r0, r4
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb fc91 	bl	8000a78 <__aeabi_dcmpeq>
 8005156:	b918      	cbnz	r0, 8005160 <__cvt+0x88>
 8005158:	f1c5 0501 	rsb	r5, r5, #1
 800515c:	f8ca 5000 	str.w	r5, [sl]
 8005160:	f8da 3000 	ldr.w	r3, [sl]
 8005164:	4499      	add	r9, r3
 8005166:	2200      	movs	r2, #0
 8005168:	2300      	movs	r3, #0
 800516a:	4620      	mov	r0, r4
 800516c:	4639      	mov	r1, r7
 800516e:	f7fb fc83 	bl	8000a78 <__aeabi_dcmpeq>
 8005172:	b108      	cbz	r0, 8005178 <__cvt+0xa0>
 8005174:	f8cd 901c 	str.w	r9, [sp, #28]
 8005178:	2230      	movs	r2, #48	; 0x30
 800517a:	9b07      	ldr	r3, [sp, #28]
 800517c:	454b      	cmp	r3, r9
 800517e:	d307      	bcc.n	8005190 <__cvt+0xb8>
 8005180:	9b07      	ldr	r3, [sp, #28]
 8005182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005184:	1b9b      	subs	r3, r3, r6
 8005186:	4630      	mov	r0, r6
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	b008      	add	sp, #32
 800518c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	9107      	str	r1, [sp, #28]
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e7f0      	b.n	800517a <__cvt+0xa2>

08005198 <__exponent>:
 8005198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800519a:	4603      	mov	r3, r0
 800519c:	2900      	cmp	r1, #0
 800519e:	bfb8      	it	lt
 80051a0:	4249      	neglt	r1, r1
 80051a2:	f803 2b02 	strb.w	r2, [r3], #2
 80051a6:	bfb4      	ite	lt
 80051a8:	222d      	movlt	r2, #45	; 0x2d
 80051aa:	222b      	movge	r2, #43	; 0x2b
 80051ac:	2909      	cmp	r1, #9
 80051ae:	7042      	strb	r2, [r0, #1]
 80051b0:	dd2a      	ble.n	8005208 <__exponent+0x70>
 80051b2:	f10d 0407 	add.w	r4, sp, #7
 80051b6:	46a4      	mov	ip, r4
 80051b8:	270a      	movs	r7, #10
 80051ba:	46a6      	mov	lr, r4
 80051bc:	460a      	mov	r2, r1
 80051be:	fb91 f6f7 	sdiv	r6, r1, r7
 80051c2:	fb07 1516 	mls	r5, r7, r6, r1
 80051c6:	3530      	adds	r5, #48	; 0x30
 80051c8:	2a63      	cmp	r2, #99	; 0x63
 80051ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80051ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051d2:	4631      	mov	r1, r6
 80051d4:	dcf1      	bgt.n	80051ba <__exponent+0x22>
 80051d6:	3130      	adds	r1, #48	; 0x30
 80051d8:	f1ae 0502 	sub.w	r5, lr, #2
 80051dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051e0:	1c44      	adds	r4, r0, #1
 80051e2:	4629      	mov	r1, r5
 80051e4:	4561      	cmp	r1, ip
 80051e6:	d30a      	bcc.n	80051fe <__exponent+0x66>
 80051e8:	f10d 0209 	add.w	r2, sp, #9
 80051ec:	eba2 020e 	sub.w	r2, r2, lr
 80051f0:	4565      	cmp	r5, ip
 80051f2:	bf88      	it	hi
 80051f4:	2200      	movhi	r2, #0
 80051f6:	4413      	add	r3, r2
 80051f8:	1a18      	subs	r0, r3, r0
 80051fa:	b003      	add	sp, #12
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005202:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005206:	e7ed      	b.n	80051e4 <__exponent+0x4c>
 8005208:	2330      	movs	r3, #48	; 0x30
 800520a:	3130      	adds	r1, #48	; 0x30
 800520c:	7083      	strb	r3, [r0, #2]
 800520e:	70c1      	strb	r1, [r0, #3]
 8005210:	1d03      	adds	r3, r0, #4
 8005212:	e7f1      	b.n	80051f8 <__exponent+0x60>

08005214 <_printf_float>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	b091      	sub	sp, #68	; 0x44
 800521a:	460c      	mov	r4, r1
 800521c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005220:	4616      	mov	r6, r2
 8005222:	461f      	mov	r7, r3
 8005224:	4605      	mov	r5, r0
 8005226:	f002 feff 	bl	8008028 <_localeconv_r>
 800522a:	6803      	ldr	r3, [r0, #0]
 800522c:	9309      	str	r3, [sp, #36]	; 0x24
 800522e:	4618      	mov	r0, r3
 8005230:	f7fa ffa6 	bl	8000180 <strlen>
 8005234:	2300      	movs	r3, #0
 8005236:	930e      	str	r3, [sp, #56]	; 0x38
 8005238:	f8d8 3000 	ldr.w	r3, [r8]
 800523c:	900a      	str	r0, [sp, #40]	; 0x28
 800523e:	3307      	adds	r3, #7
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	f894 9018 	ldrb.w	r9, [r4, #24]
 800524c:	f8d4 b000 	ldr.w	fp, [r4]
 8005250:	f8c8 2000 	str.w	r2, [r8]
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800525c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005260:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005264:	930b      	str	r3, [sp, #44]	; 0x2c
 8005266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005268:	4b9c      	ldr	r3, [pc, #624]	; (80054dc <_printf_float+0x2c8>)
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526e:	4640      	mov	r0, r8
 8005270:	f7fb fc34 	bl	8000adc <__aeabi_dcmpun>
 8005274:	bb70      	cbnz	r0, 80052d4 <_printf_float+0xc0>
 8005276:	4b99      	ldr	r3, [pc, #612]	; (80054dc <_printf_float+0x2c8>)
 8005278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800527a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800527e:	4640      	mov	r0, r8
 8005280:	f7fb fc0e 	bl	8000aa0 <__aeabi_dcmple>
 8005284:	bb30      	cbnz	r0, 80052d4 <_printf_float+0xc0>
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	4640      	mov	r0, r8
 800528c:	4651      	mov	r1, sl
 800528e:	f7fb fbfd 	bl	8000a8c <__aeabi_dcmplt>
 8005292:	b110      	cbz	r0, 800529a <_printf_float+0x86>
 8005294:	232d      	movs	r3, #45	; 0x2d
 8005296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529a:	4b91      	ldr	r3, [pc, #580]	; (80054e0 <_printf_float+0x2cc>)
 800529c:	4891      	ldr	r0, [pc, #580]	; (80054e4 <_printf_float+0x2d0>)
 800529e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052a2:	bf94      	ite	ls
 80052a4:	4698      	movls	r8, r3
 80052a6:	4680      	movhi	r8, r0
 80052a8:	2303      	movs	r3, #3
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	f02b 0304 	bic.w	r3, fp, #4
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	f04f 0a00 	mov.w	sl, #0
 80052b6:	9700      	str	r7, [sp, #0]
 80052b8:	4633      	mov	r3, r6
 80052ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f9d2 	bl	8005668 <_printf_common>
 80052c4:	3001      	adds	r0, #1
 80052c6:	f040 808f 	bne.w	80053e8 <_printf_float+0x1d4>
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ce:	b011      	add	sp, #68	; 0x44
 80052d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d4:	4642      	mov	r2, r8
 80052d6:	4653      	mov	r3, sl
 80052d8:	4640      	mov	r0, r8
 80052da:	4651      	mov	r1, sl
 80052dc:	f7fb fbfe 	bl	8000adc <__aeabi_dcmpun>
 80052e0:	b140      	cbz	r0, 80052f4 <_printf_float+0xe0>
 80052e2:	f1ba 0f00 	cmp.w	sl, #0
 80052e6:	bfbc      	itt	lt
 80052e8:	232d      	movlt	r3, #45	; 0x2d
 80052ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052ee:	487e      	ldr	r0, [pc, #504]	; (80054e8 <_printf_float+0x2d4>)
 80052f0:	4b7e      	ldr	r3, [pc, #504]	; (80054ec <_printf_float+0x2d8>)
 80052f2:	e7d4      	b.n	800529e <_printf_float+0x8a>
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80052fc:	d142      	bne.n	8005384 <_printf_float+0x170>
 80052fe:	2306      	movs	r3, #6
 8005300:	6063      	str	r3, [r4, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	9206      	str	r2, [sp, #24]
 8005306:	aa0e      	add	r2, sp, #56	; 0x38
 8005308:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800530c:	aa0d      	add	r2, sp, #52	; 0x34
 800530e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005312:	9203      	str	r2, [sp, #12]
 8005314:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005318:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	4642      	mov	r2, r8
 8005324:	4653      	mov	r3, sl
 8005326:	4628      	mov	r0, r5
 8005328:	910b      	str	r1, [sp, #44]	; 0x2c
 800532a:	f7ff fed5 	bl	80050d8 <__cvt>
 800532e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005330:	2947      	cmp	r1, #71	; 0x47
 8005332:	4680      	mov	r8, r0
 8005334:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005336:	d108      	bne.n	800534a <_printf_float+0x136>
 8005338:	1cc8      	adds	r0, r1, #3
 800533a:	db02      	blt.n	8005342 <_printf_float+0x12e>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	dd40      	ble.n	80053c4 <_printf_float+0x1b0>
 8005342:	f1a9 0902 	sub.w	r9, r9, #2
 8005346:	fa5f f989 	uxtb.w	r9, r9
 800534a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800534e:	d81f      	bhi.n	8005390 <_printf_float+0x17c>
 8005350:	3901      	subs	r1, #1
 8005352:	464a      	mov	r2, r9
 8005354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005358:	910d      	str	r1, [sp, #52]	; 0x34
 800535a:	f7ff ff1d 	bl	8005198 <__exponent>
 800535e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005360:	1813      	adds	r3, r2, r0
 8005362:	2a01      	cmp	r2, #1
 8005364:	4682      	mov	sl, r0
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	dc02      	bgt.n	8005370 <_printf_float+0x15c>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	07d2      	lsls	r2, r2, #31
 800536e:	d501      	bpl.n	8005374 <_printf_float+0x160>
 8005370:	3301      	adds	r3, #1
 8005372:	6123      	str	r3, [r4, #16]
 8005374:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005378:	2b00      	cmp	r3, #0
 800537a:	d09c      	beq.n	80052b6 <_printf_float+0xa2>
 800537c:	232d      	movs	r3, #45	; 0x2d
 800537e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005382:	e798      	b.n	80052b6 <_printf_float+0xa2>
 8005384:	2947      	cmp	r1, #71	; 0x47
 8005386:	d1bc      	bne.n	8005302 <_printf_float+0xee>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ba      	bne.n	8005302 <_printf_float+0xee>
 800538c:	2301      	movs	r3, #1
 800538e:	e7b7      	b.n	8005300 <_printf_float+0xec>
 8005390:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005394:	d118      	bne.n	80053c8 <_printf_float+0x1b4>
 8005396:	2900      	cmp	r1, #0
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	dd0b      	ble.n	80053b4 <_printf_float+0x1a0>
 800539c:	6121      	str	r1, [r4, #16]
 800539e:	b913      	cbnz	r3, 80053a6 <_printf_float+0x192>
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	07d0      	lsls	r0, r2, #31
 80053a4:	d502      	bpl.n	80053ac <_printf_float+0x198>
 80053a6:	3301      	adds	r3, #1
 80053a8:	440b      	add	r3, r1
 80053aa:	6123      	str	r3, [r4, #16]
 80053ac:	65a1      	str	r1, [r4, #88]	; 0x58
 80053ae:	f04f 0a00 	mov.w	sl, #0
 80053b2:	e7df      	b.n	8005374 <_printf_float+0x160>
 80053b4:	b913      	cbnz	r3, 80053bc <_printf_float+0x1a8>
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	07d2      	lsls	r2, r2, #31
 80053ba:	d501      	bpl.n	80053c0 <_printf_float+0x1ac>
 80053bc:	3302      	adds	r3, #2
 80053be:	e7f4      	b.n	80053aa <_printf_float+0x196>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e7f2      	b.n	80053aa <_printf_float+0x196>
 80053c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80053c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ca:	4299      	cmp	r1, r3
 80053cc:	db05      	blt.n	80053da <_printf_float+0x1c6>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	6121      	str	r1, [r4, #16]
 80053d2:	07d8      	lsls	r0, r3, #31
 80053d4:	d5ea      	bpl.n	80053ac <_printf_float+0x198>
 80053d6:	1c4b      	adds	r3, r1, #1
 80053d8:	e7e7      	b.n	80053aa <_printf_float+0x196>
 80053da:	2900      	cmp	r1, #0
 80053dc:	bfd4      	ite	le
 80053de:	f1c1 0202 	rsble	r2, r1, #2
 80053e2:	2201      	movgt	r2, #1
 80053e4:	4413      	add	r3, r2
 80053e6:	e7e0      	b.n	80053aa <_printf_float+0x196>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	055a      	lsls	r2, r3, #21
 80053ec:	d407      	bmi.n	80053fe <_printf_float+0x1ea>
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	4642      	mov	r2, r8
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	d12b      	bne.n	8005454 <_printf_float+0x240>
 80053fc:	e765      	b.n	80052ca <_printf_float+0xb6>
 80053fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005402:	f240 80dc 	bls.w	80055be <_printf_float+0x3aa>
 8005406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	f7fb fb33 	bl	8000a78 <__aeabi_dcmpeq>
 8005412:	2800      	cmp	r0, #0
 8005414:	d033      	beq.n	800547e <_printf_float+0x26a>
 8005416:	4a36      	ldr	r2, [pc, #216]	; (80054f0 <_printf_float+0x2dc>)
 8005418:	2301      	movs	r3, #1
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f af52 	beq.w	80052ca <_printf_float+0xb6>
 8005426:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800542a:	429a      	cmp	r2, r3
 800542c:	db02      	blt.n	8005434 <_printf_float+0x220>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	07d8      	lsls	r0, r3, #31
 8005432:	d50f      	bpl.n	8005454 <_printf_float+0x240>
 8005434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af43 	beq.w	80052ca <_printf_float+0xb6>
 8005444:	f04f 0800 	mov.w	r8, #0
 8005448:	f104 091a 	add.w	r9, r4, #26
 800544c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800544e:	3b01      	subs	r3, #1
 8005450:	4543      	cmp	r3, r8
 8005452:	dc09      	bgt.n	8005468 <_printf_float+0x254>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	079b      	lsls	r3, r3, #30
 8005458:	f100 8101 	bmi.w	800565e <_printf_float+0x44a>
 800545c:	68e0      	ldr	r0, [r4, #12]
 800545e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005460:	4298      	cmp	r0, r3
 8005462:	bfb8      	it	lt
 8005464:	4618      	movlt	r0, r3
 8005466:	e732      	b.n	80052ce <_printf_float+0xba>
 8005468:	2301      	movs	r3, #1
 800546a:	464a      	mov	r2, r9
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	f43f af29 	beq.w	80052ca <_printf_float+0xb6>
 8005478:	f108 0801 	add.w	r8, r8, #1
 800547c:	e7e6      	b.n	800544c <_printf_float+0x238>
 800547e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005480:	2b00      	cmp	r3, #0
 8005482:	dc37      	bgt.n	80054f4 <_printf_float+0x2e0>
 8005484:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <_printf_float+0x2dc>)
 8005486:	2301      	movs	r3, #1
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f af1b 	beq.w	80052ca <_printf_float+0xb6>
 8005494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005498:	4313      	orrs	r3, r2
 800549a:	d102      	bne.n	80054a2 <_printf_float+0x28e>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	07d9      	lsls	r1, r3, #31
 80054a0:	d5d8      	bpl.n	8005454 <_printf_float+0x240>
 80054a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054a6:	4631      	mov	r1, r6
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	f43f af0c 	beq.w	80052ca <_printf_float+0xb6>
 80054b2:	f04f 0900 	mov.w	r9, #0
 80054b6:	f104 0a1a 	add.w	sl, r4, #26
 80054ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054bc:	425b      	negs	r3, r3
 80054be:	454b      	cmp	r3, r9
 80054c0:	dc01      	bgt.n	80054c6 <_printf_float+0x2b2>
 80054c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c4:	e794      	b.n	80053f0 <_printf_float+0x1dc>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f aefa 	beq.w	80052ca <_printf_float+0xb6>
 80054d6:	f109 0901 	add.w	r9, r9, #1
 80054da:	e7ee      	b.n	80054ba <_printf_float+0x2a6>
 80054dc:	7fefffff 	.word	0x7fefffff
 80054e0:	0800a41c 	.word	0x0800a41c
 80054e4:	0800a420 	.word	0x0800a420
 80054e8:	0800a428 	.word	0x0800a428
 80054ec:	0800a424 	.word	0x0800a424
 80054f0:	0800a821 	.word	0x0800a821
 80054f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bfa8      	it	ge
 80054fc:	461a      	movge	r2, r3
 80054fe:	2a00      	cmp	r2, #0
 8005500:	4691      	mov	r9, r2
 8005502:	dc37      	bgt.n	8005574 <_printf_float+0x360>
 8005504:	f04f 0b00 	mov.w	fp, #0
 8005508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800550c:	f104 021a 	add.w	r2, r4, #26
 8005510:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005514:	ebaa 0309 	sub.w	r3, sl, r9
 8005518:	455b      	cmp	r3, fp
 800551a:	dc33      	bgt.n	8005584 <_printf_float+0x370>
 800551c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005520:	429a      	cmp	r2, r3
 8005522:	db3b      	blt.n	800559c <_printf_float+0x388>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	07da      	lsls	r2, r3, #31
 8005528:	d438      	bmi.n	800559c <_printf_float+0x388>
 800552a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800552c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800552e:	eba3 020a 	sub.w	r2, r3, sl
 8005532:	eba3 0901 	sub.w	r9, r3, r1
 8005536:	4591      	cmp	r9, r2
 8005538:	bfa8      	it	ge
 800553a:	4691      	movge	r9, r2
 800553c:	f1b9 0f00 	cmp.w	r9, #0
 8005540:	dc34      	bgt.n	80055ac <_printf_float+0x398>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800554a:	f104 0a1a 	add.w	sl, r4, #26
 800554e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	eba3 0309 	sub.w	r3, r3, r9
 8005558:	4543      	cmp	r3, r8
 800555a:	f77f af7b 	ble.w	8005454 <_printf_float+0x240>
 800555e:	2301      	movs	r3, #1
 8005560:	4652      	mov	r2, sl
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	f43f aeae 	beq.w	80052ca <_printf_float+0xb6>
 800556e:	f108 0801 	add.w	r8, r8, #1
 8005572:	e7ec      	b.n	800554e <_printf_float+0x33a>
 8005574:	4613      	mov	r3, r2
 8005576:	4631      	mov	r1, r6
 8005578:	4642      	mov	r2, r8
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	d1c0      	bne.n	8005504 <_printf_float+0x2f0>
 8005582:	e6a2      	b.n	80052ca <_printf_float+0xb6>
 8005584:	2301      	movs	r3, #1
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	920b      	str	r2, [sp, #44]	; 0x2c
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f ae9b 	beq.w	80052ca <_printf_float+0xb6>
 8005594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005596:	f10b 0b01 	add.w	fp, fp, #1
 800559a:	e7b9      	b.n	8005510 <_printf_float+0x2fc>
 800559c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	d1bf      	bne.n	800552a <_printf_float+0x316>
 80055aa:	e68e      	b.n	80052ca <_printf_float+0xb6>
 80055ac:	464b      	mov	r3, r9
 80055ae:	eb08 020a 	add.w	r2, r8, sl
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	d1c2      	bne.n	8005542 <_printf_float+0x32e>
 80055bc:	e685      	b.n	80052ca <_printf_float+0xb6>
 80055be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055c0:	2a01      	cmp	r2, #1
 80055c2:	dc01      	bgt.n	80055c8 <_printf_float+0x3b4>
 80055c4:	07db      	lsls	r3, r3, #31
 80055c6:	d537      	bpl.n	8005638 <_printf_float+0x424>
 80055c8:	2301      	movs	r3, #1
 80055ca:	4642      	mov	r2, r8
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f ae79 	beq.w	80052ca <_printf_float+0xb6>
 80055d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f ae71 	beq.w	80052ca <_printf_float+0xb6>
 80055e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055ec:	2200      	movs	r2, #0
 80055ee:	2300      	movs	r3, #0
 80055f0:	f7fb fa42 	bl	8000a78 <__aeabi_dcmpeq>
 80055f4:	b9d8      	cbnz	r0, 800562e <_printf_float+0x41a>
 80055f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f8:	f108 0201 	add.w	r2, r8, #1
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4631      	mov	r1, r6
 8005600:	4628      	mov	r0, r5
 8005602:	47b8      	blx	r7
 8005604:	3001      	adds	r0, #1
 8005606:	d10e      	bne.n	8005626 <_printf_float+0x412>
 8005608:	e65f      	b.n	80052ca <_printf_float+0xb6>
 800560a:	2301      	movs	r3, #1
 800560c:	464a      	mov	r2, r9
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	f43f ae58 	beq.w	80052ca <_printf_float+0xb6>
 800561a:	f108 0801 	add.w	r8, r8, #1
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	3b01      	subs	r3, #1
 8005622:	4543      	cmp	r3, r8
 8005624:	dcf1      	bgt.n	800560a <_printf_float+0x3f6>
 8005626:	4653      	mov	r3, sl
 8005628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800562c:	e6e1      	b.n	80053f2 <_printf_float+0x1de>
 800562e:	f04f 0800 	mov.w	r8, #0
 8005632:	f104 091a 	add.w	r9, r4, #26
 8005636:	e7f2      	b.n	800561e <_printf_float+0x40a>
 8005638:	2301      	movs	r3, #1
 800563a:	4642      	mov	r2, r8
 800563c:	e7df      	b.n	80055fe <_printf_float+0x3ea>
 800563e:	2301      	movs	r3, #1
 8005640:	464a      	mov	r2, r9
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	f43f ae3e 	beq.w	80052ca <_printf_float+0xb6>
 800564e:	f108 0801 	add.w	r8, r8, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	4543      	cmp	r3, r8
 800565a:	dcf0      	bgt.n	800563e <_printf_float+0x42a>
 800565c:	e6fe      	b.n	800545c <_printf_float+0x248>
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	f104 0919 	add.w	r9, r4, #25
 8005666:	e7f4      	b.n	8005652 <_printf_float+0x43e>

08005668 <_printf_common>:
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	4616      	mov	r6, r2
 800566e:	4699      	mov	r9, r3
 8005670:	688a      	ldr	r2, [r1, #8]
 8005672:	690b      	ldr	r3, [r1, #16]
 8005674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005678:	4293      	cmp	r3, r2
 800567a:	bfb8      	it	lt
 800567c:	4613      	movlt	r3, r2
 800567e:	6033      	str	r3, [r6, #0]
 8005680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005684:	4607      	mov	r7, r0
 8005686:	460c      	mov	r4, r1
 8005688:	b10a      	cbz	r2, 800568e <_printf_common+0x26>
 800568a:	3301      	adds	r3, #1
 800568c:	6033      	str	r3, [r6, #0]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	0699      	lsls	r1, r3, #26
 8005692:	bf42      	ittt	mi
 8005694:	6833      	ldrmi	r3, [r6, #0]
 8005696:	3302      	addmi	r3, #2
 8005698:	6033      	strmi	r3, [r6, #0]
 800569a:	6825      	ldr	r5, [r4, #0]
 800569c:	f015 0506 	ands.w	r5, r5, #6
 80056a0:	d106      	bne.n	80056b0 <_printf_common+0x48>
 80056a2:	f104 0a19 	add.w	sl, r4, #25
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	6832      	ldr	r2, [r6, #0]
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dc26      	bgt.n	80056fe <_printf_common+0x96>
 80056b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b4:	1e13      	subs	r3, r2, #0
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	bf18      	it	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	0692      	lsls	r2, r2, #26
 80056be:	d42b      	bmi.n	8005718 <_printf_common+0xb0>
 80056c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c4:	4649      	mov	r1, r9
 80056c6:	4638      	mov	r0, r7
 80056c8:	47c0      	blx	r8
 80056ca:	3001      	adds	r0, #1
 80056cc:	d01e      	beq.n	800570c <_printf_common+0xa4>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	68e5      	ldr	r5, [r4, #12]
 80056d2:	6832      	ldr	r2, [r6, #0]
 80056d4:	f003 0306 	and.w	r3, r3, #6
 80056d8:	2b04      	cmp	r3, #4
 80056da:	bf08      	it	eq
 80056dc:	1aad      	subeq	r5, r5, r2
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	6922      	ldr	r2, [r4, #16]
 80056e2:	bf0c      	ite	eq
 80056e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e8:	2500      	movne	r5, #0
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bfc4      	itt	gt
 80056ee:	1a9b      	subgt	r3, r3, r2
 80056f0:	18ed      	addgt	r5, r5, r3
 80056f2:	2600      	movs	r6, #0
 80056f4:	341a      	adds	r4, #26
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	d11a      	bne.n	8005730 <_printf_common+0xc8>
 80056fa:	2000      	movs	r0, #0
 80056fc:	e008      	b.n	8005710 <_printf_common+0xa8>
 80056fe:	2301      	movs	r3, #1
 8005700:	4652      	mov	r2, sl
 8005702:	4649      	mov	r1, r9
 8005704:	4638      	mov	r0, r7
 8005706:	47c0      	blx	r8
 8005708:	3001      	adds	r0, #1
 800570a:	d103      	bne.n	8005714 <_printf_common+0xac>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005714:	3501      	adds	r5, #1
 8005716:	e7c6      	b.n	80056a6 <_printf_common+0x3e>
 8005718:	18e1      	adds	r1, r4, r3
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	2030      	movs	r0, #48	; 0x30
 800571e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005722:	4422      	add	r2, r4
 8005724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572c:	3302      	adds	r3, #2
 800572e:	e7c7      	b.n	80056c0 <_printf_common+0x58>
 8005730:	2301      	movs	r3, #1
 8005732:	4622      	mov	r2, r4
 8005734:	4649      	mov	r1, r9
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d0e6      	beq.n	800570c <_printf_common+0xa4>
 800573e:	3601      	adds	r6, #1
 8005740:	e7d9      	b.n	80056f6 <_printf_common+0x8e>
	...

08005744 <_printf_i>:
 8005744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	7e0f      	ldrb	r7, [r1, #24]
 800574a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800574c:	2f78      	cmp	r7, #120	; 0x78
 800574e:	4691      	mov	r9, r2
 8005750:	4680      	mov	r8, r0
 8005752:	460c      	mov	r4, r1
 8005754:	469a      	mov	sl, r3
 8005756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800575a:	d807      	bhi.n	800576c <_printf_i+0x28>
 800575c:	2f62      	cmp	r7, #98	; 0x62
 800575e:	d80a      	bhi.n	8005776 <_printf_i+0x32>
 8005760:	2f00      	cmp	r7, #0
 8005762:	f000 80d8 	beq.w	8005916 <_printf_i+0x1d2>
 8005766:	2f58      	cmp	r7, #88	; 0x58
 8005768:	f000 80a3 	beq.w	80058b2 <_printf_i+0x16e>
 800576c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005774:	e03a      	b.n	80057ec <_printf_i+0xa8>
 8005776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800577a:	2b15      	cmp	r3, #21
 800577c:	d8f6      	bhi.n	800576c <_printf_i+0x28>
 800577e:	a101      	add	r1, pc, #4	; (adr r1, 8005784 <_printf_i+0x40>)
 8005780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005784:	080057dd 	.word	0x080057dd
 8005788:	080057f1 	.word	0x080057f1
 800578c:	0800576d 	.word	0x0800576d
 8005790:	0800576d 	.word	0x0800576d
 8005794:	0800576d 	.word	0x0800576d
 8005798:	0800576d 	.word	0x0800576d
 800579c:	080057f1 	.word	0x080057f1
 80057a0:	0800576d 	.word	0x0800576d
 80057a4:	0800576d 	.word	0x0800576d
 80057a8:	0800576d 	.word	0x0800576d
 80057ac:	0800576d 	.word	0x0800576d
 80057b0:	080058fd 	.word	0x080058fd
 80057b4:	08005821 	.word	0x08005821
 80057b8:	080058df 	.word	0x080058df
 80057bc:	0800576d 	.word	0x0800576d
 80057c0:	0800576d 	.word	0x0800576d
 80057c4:	0800591f 	.word	0x0800591f
 80057c8:	0800576d 	.word	0x0800576d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800576d 	.word	0x0800576d
 80057d4:	0800576d 	.word	0x0800576d
 80057d8:	080058e7 	.word	0x080058e7
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	1d1a      	adds	r2, r3, #4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	602a      	str	r2, [r5, #0]
 80057e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0a3      	b.n	8005938 <_printf_i+0x1f4>
 80057f0:	6820      	ldr	r0, [r4, #0]
 80057f2:	6829      	ldr	r1, [r5, #0]
 80057f4:	0606      	lsls	r6, r0, #24
 80057f6:	f101 0304 	add.w	r3, r1, #4
 80057fa:	d50a      	bpl.n	8005812 <_printf_i+0xce>
 80057fc:	680e      	ldr	r6, [r1, #0]
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	2e00      	cmp	r6, #0
 8005802:	da03      	bge.n	800580c <_printf_i+0xc8>
 8005804:	232d      	movs	r3, #45	; 0x2d
 8005806:	4276      	negs	r6, r6
 8005808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800580c:	485e      	ldr	r0, [pc, #376]	; (8005988 <_printf_i+0x244>)
 800580e:	230a      	movs	r3, #10
 8005810:	e019      	b.n	8005846 <_printf_i+0x102>
 8005812:	680e      	ldr	r6, [r1, #0]
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800581a:	bf18      	it	ne
 800581c:	b236      	sxthne	r6, r6
 800581e:	e7ef      	b.n	8005800 <_printf_i+0xbc>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	6820      	ldr	r0, [r4, #0]
 8005824:	1d19      	adds	r1, r3, #4
 8005826:	6029      	str	r1, [r5, #0]
 8005828:	0601      	lsls	r1, r0, #24
 800582a:	d501      	bpl.n	8005830 <_printf_i+0xec>
 800582c:	681e      	ldr	r6, [r3, #0]
 800582e:	e002      	b.n	8005836 <_printf_i+0xf2>
 8005830:	0646      	lsls	r6, r0, #25
 8005832:	d5fb      	bpl.n	800582c <_printf_i+0xe8>
 8005834:	881e      	ldrh	r6, [r3, #0]
 8005836:	4854      	ldr	r0, [pc, #336]	; (8005988 <_printf_i+0x244>)
 8005838:	2f6f      	cmp	r7, #111	; 0x6f
 800583a:	bf0c      	ite	eq
 800583c:	2308      	moveq	r3, #8
 800583e:	230a      	movne	r3, #10
 8005840:	2100      	movs	r1, #0
 8005842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005846:	6865      	ldr	r5, [r4, #4]
 8005848:	60a5      	str	r5, [r4, #8]
 800584a:	2d00      	cmp	r5, #0
 800584c:	bfa2      	ittt	ge
 800584e:	6821      	ldrge	r1, [r4, #0]
 8005850:	f021 0104 	bicge.w	r1, r1, #4
 8005854:	6021      	strge	r1, [r4, #0]
 8005856:	b90e      	cbnz	r6, 800585c <_printf_i+0x118>
 8005858:	2d00      	cmp	r5, #0
 800585a:	d04d      	beq.n	80058f8 <_printf_i+0x1b4>
 800585c:	4615      	mov	r5, r2
 800585e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005862:	fb03 6711 	mls	r7, r3, r1, r6
 8005866:	5dc7      	ldrb	r7, [r0, r7]
 8005868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800586c:	4637      	mov	r7, r6
 800586e:	42bb      	cmp	r3, r7
 8005870:	460e      	mov	r6, r1
 8005872:	d9f4      	bls.n	800585e <_printf_i+0x11a>
 8005874:	2b08      	cmp	r3, #8
 8005876:	d10b      	bne.n	8005890 <_printf_i+0x14c>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	07de      	lsls	r6, r3, #31
 800587c:	d508      	bpl.n	8005890 <_printf_i+0x14c>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6861      	ldr	r1, [r4, #4]
 8005882:	4299      	cmp	r1, r3
 8005884:	bfde      	ittt	le
 8005886:	2330      	movle	r3, #48	; 0x30
 8005888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800588c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005890:	1b52      	subs	r2, r2, r5
 8005892:	6122      	str	r2, [r4, #16]
 8005894:	f8cd a000 	str.w	sl, [sp]
 8005898:	464b      	mov	r3, r9
 800589a:	aa03      	add	r2, sp, #12
 800589c:	4621      	mov	r1, r4
 800589e:	4640      	mov	r0, r8
 80058a0:	f7ff fee2 	bl	8005668 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d14c      	bne.n	8005942 <_printf_i+0x1fe>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ac:	b004      	add	sp, #16
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	4835      	ldr	r0, [pc, #212]	; (8005988 <_printf_i+0x244>)
 80058b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058b8:	6829      	ldr	r1, [r5, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058c0:	6029      	str	r1, [r5, #0]
 80058c2:	061d      	lsls	r5, r3, #24
 80058c4:	d514      	bpl.n	80058f0 <_printf_i+0x1ac>
 80058c6:	07df      	lsls	r7, r3, #31
 80058c8:	bf44      	itt	mi
 80058ca:	f043 0320 	orrmi.w	r3, r3, #32
 80058ce:	6023      	strmi	r3, [r4, #0]
 80058d0:	b91e      	cbnz	r6, 80058da <_printf_i+0x196>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f023 0320 	bic.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	2310      	movs	r3, #16
 80058dc:	e7b0      	b.n	8005840 <_printf_i+0xfc>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	2378      	movs	r3, #120	; 0x78
 80058e8:	4828      	ldr	r0, [pc, #160]	; (800598c <_printf_i+0x248>)
 80058ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ee:	e7e3      	b.n	80058b8 <_printf_i+0x174>
 80058f0:	0659      	lsls	r1, r3, #25
 80058f2:	bf48      	it	mi
 80058f4:	b2b6      	uxthmi	r6, r6
 80058f6:	e7e6      	b.n	80058c6 <_printf_i+0x182>
 80058f8:	4615      	mov	r5, r2
 80058fa:	e7bb      	b.n	8005874 <_printf_i+0x130>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6826      	ldr	r6, [r4, #0]
 8005900:	6961      	ldr	r1, [r4, #20]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6028      	str	r0, [r5, #0]
 8005906:	0635      	lsls	r5, r6, #24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	d501      	bpl.n	8005910 <_printf_i+0x1cc>
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	e002      	b.n	8005916 <_printf_i+0x1d2>
 8005910:	0670      	lsls	r0, r6, #25
 8005912:	d5fb      	bpl.n	800590c <_printf_i+0x1c8>
 8005914:	8019      	strh	r1, [r3, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	4615      	mov	r5, r2
 800591c:	e7ba      	b.n	8005894 <_printf_i+0x150>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	602a      	str	r2, [r5, #0]
 8005924:	681d      	ldr	r5, [r3, #0]
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4628      	mov	r0, r5
 800592c:	f7fa fc30 	bl	8000190 <memchr>
 8005930:	b108      	cbz	r0, 8005936 <_printf_i+0x1f2>
 8005932:	1b40      	subs	r0, r0, r5
 8005934:	6060      	str	r0, [r4, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005940:	e7a8      	b.n	8005894 <_printf_i+0x150>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	462a      	mov	r2, r5
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d0ab      	beq.n	80058a8 <_printf_i+0x164>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	d413      	bmi.n	800597e <_printf_i+0x23a>
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	4298      	cmp	r0, r3
 800595c:	bfb8      	it	lt
 800595e:	4618      	movlt	r0, r3
 8005960:	e7a4      	b.n	80058ac <_printf_i+0x168>
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d09b      	beq.n	80058a8 <_printf_i+0x164>
 8005970:	3501      	adds	r5, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	42ab      	cmp	r3, r5
 800597a:	dcf2      	bgt.n	8005962 <_printf_i+0x21e>
 800597c:	e7eb      	b.n	8005956 <_printf_i+0x212>
 800597e:	2500      	movs	r5, #0
 8005980:	f104 0619 	add.w	r6, r4, #25
 8005984:	e7f5      	b.n	8005972 <_printf_i+0x22e>
 8005986:	bf00      	nop
 8005988:	0800a42c 	.word	0x0800a42c
 800598c:	0800a43d 	.word	0x0800a43d

08005990 <_scanf_float>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	b087      	sub	sp, #28
 8005996:	4617      	mov	r7, r2
 8005998:	9303      	str	r3, [sp, #12]
 800599a:	688b      	ldr	r3, [r1, #8]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059a2:	bf83      	ittte	hi
 80059a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059a8:	195b      	addhi	r3, r3, r5
 80059aa:	9302      	strhi	r3, [sp, #8]
 80059ac:	2300      	movls	r3, #0
 80059ae:	bf86      	itte	hi
 80059b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059b4:	608b      	strhi	r3, [r1, #8]
 80059b6:	9302      	strls	r3, [sp, #8]
 80059b8:	680b      	ldr	r3, [r1, #0]
 80059ba:	468b      	mov	fp, r1
 80059bc:	2500      	movs	r5, #0
 80059be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80059c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80059c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059ca:	4680      	mov	r8, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	465e      	mov	r6, fp
 80059d0:	46aa      	mov	sl, r5
 80059d2:	46a9      	mov	r9, r5
 80059d4:	9501      	str	r5, [sp, #4]
 80059d6:	68a2      	ldr	r2, [r4, #8]
 80059d8:	b152      	cbz	r2, 80059f0 <_scanf_float+0x60>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b4e      	cmp	r3, #78	; 0x4e
 80059e0:	d864      	bhi.n	8005aac <_scanf_float+0x11c>
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	d83c      	bhi.n	8005a60 <_scanf_float+0xd0>
 80059e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80059ea:	b2c8      	uxtb	r0, r1
 80059ec:	280e      	cmp	r0, #14
 80059ee:	d93a      	bls.n	8005a66 <_scanf_float+0xd6>
 80059f0:	f1b9 0f00 	cmp.w	r9, #0
 80059f4:	d003      	beq.n	80059fe <_scanf_float+0x6e>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a02:	f1ba 0f01 	cmp.w	sl, #1
 8005a06:	f200 8113 	bhi.w	8005c30 <_scanf_float+0x2a0>
 8005a0a:	455e      	cmp	r6, fp
 8005a0c:	f200 8105 	bhi.w	8005c1a <_scanf_float+0x28a>
 8005a10:	2501      	movs	r5, #1
 8005a12:	4628      	mov	r0, r5
 8005a14:	b007      	add	sp, #28
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a1e:	2a0d      	cmp	r2, #13
 8005a20:	d8e6      	bhi.n	80059f0 <_scanf_float+0x60>
 8005a22:	a101      	add	r1, pc, #4	; (adr r1, 8005a28 <_scanf_float+0x98>)
 8005a24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a28:	08005b67 	.word	0x08005b67
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	080059f1 	.word	0x080059f1
 8005a38:	08005bc7 	.word	0x08005bc7
 8005a3c:	08005b9f 	.word	0x08005b9f
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005b75 	.word	0x08005b75
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	080059f1 	.word	0x080059f1
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b2d 	.word	0x08005b2d
 8005a60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a64:	e7db      	b.n	8005a1e <_scanf_float+0x8e>
 8005a66:	290e      	cmp	r1, #14
 8005a68:	d8c2      	bhi.n	80059f0 <_scanf_float+0x60>
 8005a6a:	a001      	add	r0, pc, #4	; (adr r0, 8005a70 <_scanf_float+0xe0>)
 8005a6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a70:	08005b1f 	.word	0x08005b1f
 8005a74:	080059f1 	.word	0x080059f1
 8005a78:	08005b1f 	.word	0x08005b1f
 8005a7c:	08005bb3 	.word	0x08005bb3
 8005a80:	080059f1 	.word	0x080059f1
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005b09 	.word	0x08005b09
 8005a8c:	08005b09 	.word	0x08005b09
 8005a90:	08005b09 	.word	0x08005b09
 8005a94:	08005b09 	.word	0x08005b09
 8005a98:	08005b09 	.word	0x08005b09
 8005a9c:	08005b09 	.word	0x08005b09
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005b09 	.word	0x08005b09
 8005aa8:	08005b09 	.word	0x08005b09
 8005aac:	2b6e      	cmp	r3, #110	; 0x6e
 8005aae:	d809      	bhi.n	8005ac4 <_scanf_float+0x134>
 8005ab0:	2b60      	cmp	r3, #96	; 0x60
 8005ab2:	d8b2      	bhi.n	8005a1a <_scanf_float+0x8a>
 8005ab4:	2b54      	cmp	r3, #84	; 0x54
 8005ab6:	d077      	beq.n	8005ba8 <_scanf_float+0x218>
 8005ab8:	2b59      	cmp	r3, #89	; 0x59
 8005aba:	d199      	bne.n	80059f0 <_scanf_float+0x60>
 8005abc:	2d07      	cmp	r5, #7
 8005abe:	d197      	bne.n	80059f0 <_scanf_float+0x60>
 8005ac0:	2508      	movs	r5, #8
 8005ac2:	e029      	b.n	8005b18 <_scanf_float+0x188>
 8005ac4:	2b74      	cmp	r3, #116	; 0x74
 8005ac6:	d06f      	beq.n	8005ba8 <_scanf_float+0x218>
 8005ac8:	2b79      	cmp	r3, #121	; 0x79
 8005aca:	e7f6      	b.n	8005aba <_scanf_float+0x12a>
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	05c8      	lsls	r0, r1, #23
 8005ad0:	d51a      	bpl.n	8005b08 <_scanf_float+0x178>
 8005ad2:	9b02      	ldr	r3, [sp, #8]
 8005ad4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ad8:	6021      	str	r1, [r4, #0]
 8005ada:	f109 0901 	add.w	r9, r9, #1
 8005ade:	b11b      	cbz	r3, 8005ae8 <_scanf_float+0x158>
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	3201      	adds	r2, #1
 8005ae4:	9302      	str	r3, [sp, #8]
 8005ae6:	60a2      	str	r2, [r4, #8]
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	607b      	str	r3, [r7, #4]
 8005afc:	f340 8084 	ble.w	8005c08 <_scanf_float+0x278>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	603b      	str	r3, [r7, #0]
 8005b06:	e766      	b.n	80059d6 <_scanf_float+0x46>
 8005b08:	eb1a 0f05 	cmn.w	sl, r5
 8005b0c:	f47f af70 	bne.w	80059f0 <_scanf_float+0x60>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b16:	6022      	str	r2, [r4, #0]
 8005b18:	f806 3b01 	strb.w	r3, [r6], #1
 8005b1c:	e7e4      	b.n	8005ae8 <_scanf_float+0x158>
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	0610      	lsls	r0, r2, #24
 8005b22:	f57f af65 	bpl.w	80059f0 <_scanf_float+0x60>
 8005b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b2a:	e7f4      	b.n	8005b16 <_scanf_float+0x186>
 8005b2c:	f1ba 0f00 	cmp.w	sl, #0
 8005b30:	d10e      	bne.n	8005b50 <_scanf_float+0x1c0>
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	d10e      	bne.n	8005b56 <_scanf_float+0x1c6>
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b42:	d108      	bne.n	8005b56 <_scanf_float+0x1c6>
 8005b44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b48:	6022      	str	r2, [r4, #0]
 8005b4a:	f04f 0a01 	mov.w	sl, #1
 8005b4e:	e7e3      	b.n	8005b18 <_scanf_float+0x188>
 8005b50:	f1ba 0f02 	cmp.w	sl, #2
 8005b54:	d055      	beq.n	8005c02 <_scanf_float+0x272>
 8005b56:	2d01      	cmp	r5, #1
 8005b58:	d002      	beq.n	8005b60 <_scanf_float+0x1d0>
 8005b5a:	2d04      	cmp	r5, #4
 8005b5c:	f47f af48 	bne.w	80059f0 <_scanf_float+0x60>
 8005b60:	3501      	adds	r5, #1
 8005b62:	b2ed      	uxtb	r5, r5
 8005b64:	e7d8      	b.n	8005b18 <_scanf_float+0x188>
 8005b66:	f1ba 0f01 	cmp.w	sl, #1
 8005b6a:	f47f af41 	bne.w	80059f0 <_scanf_float+0x60>
 8005b6e:	f04f 0a02 	mov.w	sl, #2
 8005b72:	e7d1      	b.n	8005b18 <_scanf_float+0x188>
 8005b74:	b97d      	cbnz	r5, 8005b96 <_scanf_float+0x206>
 8005b76:	f1b9 0f00 	cmp.w	r9, #0
 8005b7a:	f47f af3c 	bne.w	80059f6 <_scanf_float+0x66>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b88:	f47f af39 	bne.w	80059fe <_scanf_float+0x6e>
 8005b8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	2501      	movs	r5, #1
 8005b94:	e7c0      	b.n	8005b18 <_scanf_float+0x188>
 8005b96:	2d03      	cmp	r5, #3
 8005b98:	d0e2      	beq.n	8005b60 <_scanf_float+0x1d0>
 8005b9a:	2d05      	cmp	r5, #5
 8005b9c:	e7de      	b.n	8005b5c <_scanf_float+0x1cc>
 8005b9e:	2d02      	cmp	r5, #2
 8005ba0:	f47f af26 	bne.w	80059f0 <_scanf_float+0x60>
 8005ba4:	2503      	movs	r5, #3
 8005ba6:	e7b7      	b.n	8005b18 <_scanf_float+0x188>
 8005ba8:	2d06      	cmp	r5, #6
 8005baa:	f47f af21 	bne.w	80059f0 <_scanf_float+0x60>
 8005bae:	2507      	movs	r5, #7
 8005bb0:	e7b2      	b.n	8005b18 <_scanf_float+0x188>
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	0591      	lsls	r1, r2, #22
 8005bb6:	f57f af1b 	bpl.w	80059f0 <_scanf_float+0x60>
 8005bba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005bbe:	6022      	str	r2, [r4, #0]
 8005bc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bc4:	e7a8      	b.n	8005b18 <_scanf_float+0x188>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005bcc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005bd0:	d006      	beq.n	8005be0 <_scanf_float+0x250>
 8005bd2:	0550      	lsls	r0, r2, #21
 8005bd4:	f57f af0c 	bpl.w	80059f0 <_scanf_float+0x60>
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	f43f af0f 	beq.w	80059fe <_scanf_float+0x6e>
 8005be0:	0591      	lsls	r1, r2, #22
 8005be2:	bf58      	it	pl
 8005be4:	9901      	ldrpl	r1, [sp, #4]
 8005be6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bea:	bf58      	it	pl
 8005bec:	eba9 0101 	subpl.w	r1, r9, r1
 8005bf0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005bf4:	bf58      	it	pl
 8005bf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bfa:	6022      	str	r2, [r4, #0]
 8005bfc:	f04f 0900 	mov.w	r9, #0
 8005c00:	e78a      	b.n	8005b18 <_scanf_float+0x188>
 8005c02:	f04f 0a03 	mov.w	sl, #3
 8005c06:	e787      	b.n	8005b18 <_scanf_float+0x188>
 8005c08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4798      	blx	r3
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f43f aedf 	beq.w	80059d6 <_scanf_float+0x46>
 8005c18:	e6ea      	b.n	80059f0 <_scanf_float+0x60>
 8005c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c22:	463a      	mov	r2, r7
 8005c24:	4640      	mov	r0, r8
 8005c26:	4798      	blx	r3
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	e6ec      	b.n	8005a0a <_scanf_float+0x7a>
 8005c30:	1e6b      	subs	r3, r5, #1
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d825      	bhi.n	8005c82 <_scanf_float+0x2f2>
 8005c36:	2d02      	cmp	r5, #2
 8005c38:	d836      	bhi.n	8005ca8 <_scanf_float+0x318>
 8005c3a:	455e      	cmp	r6, fp
 8005c3c:	f67f aee8 	bls.w	8005a10 <_scanf_float+0x80>
 8005c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c48:	463a      	mov	r2, r7
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4798      	blx	r3
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	e7f1      	b.n	8005c3a <_scanf_float+0x2aa>
 8005c56:	9802      	ldr	r0, [sp, #8]
 8005c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c60:	9002      	str	r0, [sp, #8]
 8005c62:	463a      	mov	r2, r7
 8005c64:	4640      	mov	r0, r8
 8005c66:	4798      	blx	r3
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c72:	fa5f fa8a 	uxtb.w	sl, sl
 8005c76:	f1ba 0f02 	cmp.w	sl, #2
 8005c7a:	d1ec      	bne.n	8005c56 <_scanf_float+0x2c6>
 8005c7c:	3d03      	subs	r5, #3
 8005c7e:	b2ed      	uxtb	r5, r5
 8005c80:	1b76      	subs	r6, r6, r5
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	05da      	lsls	r2, r3, #23
 8005c86:	d52f      	bpl.n	8005ce8 <_scanf_float+0x358>
 8005c88:	055b      	lsls	r3, r3, #21
 8005c8a:	d510      	bpl.n	8005cae <_scanf_float+0x31e>
 8005c8c:	455e      	cmp	r6, fp
 8005c8e:	f67f aebf 	bls.w	8005a10 <_scanf_float+0x80>
 8005c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	4798      	blx	r3
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	e7f1      	b.n	8005c8c <_scanf_float+0x2fc>
 8005ca8:	46aa      	mov	sl, r5
 8005caa:	9602      	str	r6, [sp, #8]
 8005cac:	e7df      	b.n	8005c6e <_scanf_float+0x2de>
 8005cae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	2965      	cmp	r1, #101	; 0x65
 8005cb6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005cba:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	d00c      	beq.n	8005cdc <_scanf_float+0x34c>
 8005cc2:	2945      	cmp	r1, #69	; 0x45
 8005cc4:	d00a      	beq.n	8005cdc <_scanf_float+0x34c>
 8005cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cca:	463a      	mov	r2, r7
 8005ccc:	4640      	mov	r0, r8
 8005cce:	4798      	blx	r3
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	1eb5      	subs	r5, r6, #2
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ce0:	463a      	mov	r2, r7
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	4798      	blx	r3
 8005ce6:	462e      	mov	r6, r5
 8005ce8:	6825      	ldr	r5, [r4, #0]
 8005cea:	f015 0510 	ands.w	r5, r5, #16
 8005cee:	d155      	bne.n	8005d9c <_scanf_float+0x40c>
 8005cf0:	7035      	strb	r5, [r6, #0]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfc:	d11b      	bne.n	8005d36 <_scanf_float+0x3a6>
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	454b      	cmp	r3, r9
 8005d02:	eba3 0209 	sub.w	r2, r3, r9
 8005d06:	d123      	bne.n	8005d50 <_scanf_float+0x3c0>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4659      	mov	r1, fp
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f000 ff07 	bl	8006b20 <_strtod_r>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	f012 0f02 	tst.w	r2, #2
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	d021      	beq.n	8005d66 <_scanf_float+0x3d6>
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	9903      	ldr	r1, [sp, #12]
 8005d26:	600a      	str	r2, [r1, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	e9c3 6700 	strd	r6, r7, [r3]
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60e3      	str	r3, [r4, #12]
 8005d34:	e66d      	b.n	8005a12 <_scanf_float+0x82>
 8005d36:	9b04      	ldr	r3, [sp, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0e5      	beq.n	8005d08 <_scanf_float+0x378>
 8005d3c:	9905      	ldr	r1, [sp, #20]
 8005d3e:	230a      	movs	r3, #10
 8005d40:	462a      	mov	r2, r5
 8005d42:	3101      	adds	r1, #1
 8005d44:	4640      	mov	r0, r8
 8005d46:	f000 ff6d 	bl	8006c24 <_strtol_r>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	9e05      	ldr	r6, [sp, #20]
 8005d4e:	1ac2      	subs	r2, r0, r3
 8005d50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d54:	429e      	cmp	r6, r3
 8005d56:	bf28      	it	cs
 8005d58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d5c:	4910      	ldr	r1, [pc, #64]	; (8005da0 <_scanf_float+0x410>)
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f826 	bl	8005db0 <siprintf>
 8005d64:	e7d0      	b.n	8005d08 <_scanf_float+0x378>
 8005d66:	f012 0f04 	tst.w	r2, #4
 8005d6a:	f103 0204 	add.w	r2, r3, #4
 8005d6e:	d1d9      	bne.n	8005d24 <_scanf_float+0x394>
 8005d70:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005d74:	f8cc 2000 	str.w	r2, [ip]
 8005d78:	f8d3 8000 	ldr.w	r8, [r3]
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	f7fa feac 	bl	8000adc <__aeabi_dcmpun>
 8005d84:	b128      	cbz	r0, 8005d92 <_scanf_float+0x402>
 8005d86:	4807      	ldr	r0, [pc, #28]	; (8005da4 <_scanf_float+0x414>)
 8005d88:	f000 f80e 	bl	8005da8 <nanf>
 8005d8c:	f8c8 0000 	str.w	r0, [r8]
 8005d90:	e7cd      	b.n	8005d2e <_scanf_float+0x39e>
 8005d92:	4630      	mov	r0, r6
 8005d94:	4639      	mov	r1, r7
 8005d96:	f7fa feff 	bl	8000b98 <__aeabi_d2f>
 8005d9a:	e7f7      	b.n	8005d8c <_scanf_float+0x3fc>
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	e638      	b.n	8005a12 <_scanf_float+0x82>
 8005da0:	0800a44e 	.word	0x0800a44e
 8005da4:	0800a873 	.word	0x0800a873

08005da8 <nanf>:
 8005da8:	4800      	ldr	r0, [pc, #0]	; (8005dac <nanf+0x4>)
 8005daa:	4770      	bx	lr
 8005dac:	7fc00000 	.word	0x7fc00000

08005db0 <siprintf>:
 8005db0:	b40e      	push	{r1, r2, r3}
 8005db2:	b500      	push	{lr}
 8005db4:	b09c      	sub	sp, #112	; 0x70
 8005db6:	ab1d      	add	r3, sp, #116	; 0x74
 8005db8:	9002      	str	r0, [sp, #8]
 8005dba:	9006      	str	r0, [sp, #24]
 8005dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dc0:	4809      	ldr	r0, [pc, #36]	; (8005de8 <siprintf+0x38>)
 8005dc2:	9107      	str	r1, [sp, #28]
 8005dc4:	9104      	str	r1, [sp, #16]
 8005dc6:	4909      	ldr	r1, [pc, #36]	; (8005dec <siprintf+0x3c>)
 8005dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dcc:	9105      	str	r1, [sp, #20]
 8005dce:	6800      	ldr	r0, [r0, #0]
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	a902      	add	r1, sp, #8
 8005dd4:	f002 ff68 	bl	8008ca8 <_svfiprintf_r>
 8005dd8:	9b02      	ldr	r3, [sp, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	b01c      	add	sp, #112	; 0x70
 8005de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de4:	b003      	add	sp, #12
 8005de6:	4770      	bx	lr
 8005de8:	2000000c 	.word	0x2000000c
 8005dec:	ffff0208 	.word	0xffff0208

08005df0 <siscanf>:
 8005df0:	b40e      	push	{r1, r2, r3}
 8005df2:	b530      	push	{r4, r5, lr}
 8005df4:	b09c      	sub	sp, #112	; 0x70
 8005df6:	ac1f      	add	r4, sp, #124	; 0x7c
 8005df8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005dfc:	f854 5b04 	ldr.w	r5, [r4], #4
 8005e00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9006      	str	r0, [sp, #24]
 8005e08:	f7fa f9ba 	bl	8000180 <strlen>
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <siscanf+0x4c>)
 8005e0e:	9003      	str	r0, [sp, #12]
 8005e10:	9007      	str	r0, [sp, #28]
 8005e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e14:	480a      	ldr	r0, [pc, #40]	; (8005e40 <siscanf+0x50>)
 8005e16:	9401      	str	r4, [sp, #4]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e1c:	9314      	str	r3, [sp, #80]	; 0x50
 8005e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4623      	mov	r3, r4
 8005e2a:	a902      	add	r1, sp, #8
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f003 f895 	bl	8008f5c <__ssvfiscanf_r>
 8005e32:	b01c      	add	sp, #112	; 0x70
 8005e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e38:	b003      	add	sp, #12
 8005e3a:	4770      	bx	lr
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <__sread>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	460c      	mov	r4, r1
 8005e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4c:	f003 fb50 	bl	80094f0 <_read_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	bfab      	itete	ge
 8005e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e56:	89a3      	ldrhlt	r3, [r4, #12]
 8005e58:	181b      	addge	r3, r3, r0
 8005e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e5e:	bfac      	ite	ge
 8005e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e62:	81a3      	strhlt	r3, [r4, #12]
 8005e64:	bd10      	pop	{r4, pc}

08005e66 <__seofread>:
 8005e66:	2000      	movs	r0, #0
 8005e68:	4770      	bx	lr

08005e6a <__swrite>:
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	461f      	mov	r7, r3
 8005e70:	898b      	ldrh	r3, [r1, #12]
 8005e72:	05db      	lsls	r3, r3, #23
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	4616      	mov	r6, r2
 8005e7a:	d505      	bpl.n	8005e88 <__swrite+0x1e>
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2302      	movs	r3, #2
 8005e82:	2200      	movs	r2, #0
 8005e84:	f002 f8d4 	bl	8008030 <_lseek_r>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	4628      	mov	r0, r5
 8005e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	f000 bec3 	b.w	8006c28 <_write_r>

08005ea2 <__sseek>:
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eaa:	f002 f8c1 	bl	8008030 <_lseek_r>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	bf15      	itete	ne
 8005eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ebe:	81a3      	strheq	r3, [r4, #12]
 8005ec0:	bf18      	it	ne
 8005ec2:	81a3      	strhne	r3, [r4, #12]
 8005ec4:	bd10      	pop	{r4, pc}

08005ec6 <__sclose>:
 8005ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eca:	f000 bebf 	b.w	8006c4c <_close_r>

08005ece <strcpy>:
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ed4:	f803 2b01 	strb.w	r2, [r3], #1
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d1f9      	bne.n	8005ed0 <strcpy+0x2>
 8005edc:	4770      	bx	lr

08005ede <strstr>:
 8005ede:	780a      	ldrb	r2, [r1, #0]
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	b96a      	cbnz	r2, 8005f00 <strstr+0x22>
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d109      	bne.n	8005efe <strstr+0x20>
 8005eea:	460c      	mov	r4, r1
 8005eec:	4605      	mov	r5, r0
 8005eee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f6      	beq.n	8005ee4 <strstr+0x6>
 8005ef6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005efa:	429e      	cmp	r6, r3
 8005efc:	d0f7      	beq.n	8005eee <strstr+0x10>
 8005efe:	3001      	adds	r0, #1
 8005f00:	7803      	ldrb	r3, [r0, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ef      	bne.n	8005ee6 <strstr+0x8>
 8005f06:	4618      	mov	r0, r3
 8005f08:	e7ec      	b.n	8005ee4 <strstr+0x6>

08005f0a <sulp>:
 8005f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	460f      	mov	r7, r1
 8005f10:	4690      	mov	r8, r2
 8005f12:	f002 fc33 	bl	800877c <__ulp>
 8005f16:	4604      	mov	r4, r0
 8005f18:	460d      	mov	r5, r1
 8005f1a:	f1b8 0f00 	cmp.w	r8, #0
 8005f1e:	d011      	beq.n	8005f44 <sulp+0x3a>
 8005f20:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dd0b      	ble.n	8005f44 <sulp+0x3a>
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f32:	2400      	movs	r4, #0
 8005f34:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	f7fa fb34 	bl	80005a8 <__aeabi_dmul>
 8005f40:	4604      	mov	r4, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f4c:	0000      	movs	r0, r0
	...

08005f50 <_strtod_l>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	b09f      	sub	sp, #124	; 0x7c
 8005f56:	469b      	mov	fp, r3
 8005f58:	2300      	movs	r3, #0
 8005f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f5c:	4b9e      	ldr	r3, [pc, #632]	; (80061d8 <_strtod_l+0x288>)
 8005f5e:	9215      	str	r2, [sp, #84]	; 0x54
 8005f60:	681f      	ldr	r7, [r3, #0]
 8005f62:	4682      	mov	sl, r0
 8005f64:	4638      	mov	r0, r7
 8005f66:	460e      	mov	r6, r1
 8005f68:	f7fa f90a 	bl	8000180 <strlen>
 8005f6c:	f04f 0800 	mov.w	r8, #0
 8005f70:	4604      	mov	r4, r0
 8005f72:	f04f 0900 	mov.w	r9, #0
 8005f76:	9619      	str	r6, [sp, #100]	; 0x64
 8005f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8005f7e:	d04c      	beq.n	800601a <_strtod_l+0xca>
 8005f80:	d83a      	bhi.n	8005ff8 <_strtod_l+0xa8>
 8005f82:	2a0d      	cmp	r2, #13
 8005f84:	d833      	bhi.n	8005fee <_strtod_l+0x9e>
 8005f86:	2a08      	cmp	r2, #8
 8005f88:	d833      	bhi.n	8005ff2 <_strtod_l+0xa2>
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d03d      	beq.n	800600a <_strtod_l+0xba>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	930a      	str	r3, [sp, #40]	; 0x28
 8005f92:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005f94:	782b      	ldrb	r3, [r5, #0]
 8005f96:	2b30      	cmp	r3, #48	; 0x30
 8005f98:	f040 80aa 	bne.w	80060f0 <_strtod_l+0x1a0>
 8005f9c:	786b      	ldrb	r3, [r5, #1]
 8005f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fa2:	2b58      	cmp	r3, #88	; 0x58
 8005fa4:	d166      	bne.n	8006074 <_strtod_l+0x124>
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	ab1a      	add	r3, sp, #104	; 0x68
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4a8b      	ldr	r2, [pc, #556]	; (80061dc <_strtod_l+0x28c>)
 8005fb0:	f8cd b008 	str.w	fp, [sp, #8]
 8005fb4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005fb6:	a919      	add	r1, sp, #100	; 0x64
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f001 fd37 	bl	8007a2c <__gethex>
 8005fbe:	f010 0607 	ands.w	r6, r0, #7
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	d005      	beq.n	8005fd2 <_strtod_l+0x82>
 8005fc6:	2e06      	cmp	r6, #6
 8005fc8:	d129      	bne.n	800601e <_strtod_l+0xce>
 8005fca:	3501      	adds	r5, #1
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9519      	str	r5, [sp, #100]	; 0x64
 8005fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 858a 	bne.w	8006aee <_strtod_l+0xb9e>
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	b1d3      	cbz	r3, 8006014 <_strtod_l+0xc4>
 8005fde:	4642      	mov	r2, r8
 8005fe0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	b01f      	add	sp, #124	; 0x7c
 8005fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fee:	2a20      	cmp	r2, #32
 8005ff0:	d1cd      	bne.n	8005f8e <_strtod_l+0x3e>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	9319      	str	r3, [sp, #100]	; 0x64
 8005ff6:	e7bf      	b.n	8005f78 <_strtod_l+0x28>
 8005ff8:	2a2d      	cmp	r2, #45	; 0x2d
 8005ffa:	d1c8      	bne.n	8005f8e <_strtod_l+0x3e>
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	920a      	str	r2, [sp, #40]	; 0x28
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	9219      	str	r2, [sp, #100]	; 0x64
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1c3      	bne.n	8005f92 <_strtod_l+0x42>
 800600a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800600c:	9619      	str	r6, [sp, #100]	; 0x64
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 856b 	bne.w	8006aea <_strtod_l+0xb9a>
 8006014:	4642      	mov	r2, r8
 8006016:	464b      	mov	r3, r9
 8006018:	e7e4      	b.n	8005fe4 <_strtod_l+0x94>
 800601a:	2200      	movs	r2, #0
 800601c:	e7ef      	b.n	8005ffe <_strtod_l+0xae>
 800601e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006020:	b13a      	cbz	r2, 8006032 <_strtod_l+0xe2>
 8006022:	2135      	movs	r1, #53	; 0x35
 8006024:	a81c      	add	r0, sp, #112	; 0x70
 8006026:	f002 fcad 	bl	8008984 <__copybits>
 800602a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800602c:	4650      	mov	r0, sl
 800602e:	f002 f879 	bl	8008124 <_Bfree>
 8006032:	3e01      	subs	r6, #1
 8006034:	2e04      	cmp	r6, #4
 8006036:	d806      	bhi.n	8006046 <_strtod_l+0xf6>
 8006038:	e8df f006 	tbb	[pc, r6]
 800603c:	1714030a 	.word	0x1714030a
 8006040:	0a          	.byte	0x0a
 8006041:	00          	.byte	0x00
 8006042:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006046:	0721      	lsls	r1, r4, #28
 8006048:	d5c3      	bpl.n	8005fd2 <_strtod_l+0x82>
 800604a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800604e:	e7c0      	b.n	8005fd2 <_strtod_l+0x82>
 8006050:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006054:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006056:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800605a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800605e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006062:	e7f0      	b.n	8006046 <_strtod_l+0xf6>
 8006064:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80061e0 <_strtod_l+0x290>
 8006068:	e7ed      	b.n	8006046 <_strtod_l+0xf6>
 800606a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800606e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006072:	e7e8      	b.n	8006046 <_strtod_l+0xf6>
 8006074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	9219      	str	r2, [sp, #100]	; 0x64
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d0f9      	beq.n	8006074 <_strtod_l+0x124>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0a6      	beq.n	8005fd2 <_strtod_l+0x82>
 8006084:	2301      	movs	r3, #1
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800608a:	9308      	str	r3, [sp, #32]
 800608c:	2300      	movs	r3, #0
 800608e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006092:	469b      	mov	fp, r3
 8006094:	220a      	movs	r2, #10
 8006096:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006098:	7805      	ldrb	r5, [r0, #0]
 800609a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800609e:	b2d9      	uxtb	r1, r3
 80060a0:	2909      	cmp	r1, #9
 80060a2:	d927      	bls.n	80060f4 <_strtod_l+0x1a4>
 80060a4:	4622      	mov	r2, r4
 80060a6:	4639      	mov	r1, r7
 80060a8:	f003 fa82 	bl	80095b0 <strncmp>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d033      	beq.n	8006118 <_strtod_l+0x1c8>
 80060b0:	2000      	movs	r0, #0
 80060b2:	462a      	mov	r2, r5
 80060b4:	465c      	mov	r4, fp
 80060b6:	9004      	str	r0, [sp, #16]
 80060b8:	4603      	mov	r3, r0
 80060ba:	2a65      	cmp	r2, #101	; 0x65
 80060bc:	d001      	beq.n	80060c2 <_strtod_l+0x172>
 80060be:	2a45      	cmp	r2, #69	; 0x45
 80060c0:	d114      	bne.n	80060ec <_strtod_l+0x19c>
 80060c2:	b91c      	cbnz	r4, 80060cc <_strtod_l+0x17c>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4302      	orrs	r2, r0
 80060c8:	d09f      	beq.n	800600a <_strtod_l+0xba>
 80060ca:	2400      	movs	r4, #0
 80060cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80060ce:	1c72      	adds	r2, r6, #1
 80060d0:	9219      	str	r2, [sp, #100]	; 0x64
 80060d2:	7872      	ldrb	r2, [r6, #1]
 80060d4:	2a2b      	cmp	r2, #43	; 0x2b
 80060d6:	d079      	beq.n	80061cc <_strtod_l+0x27c>
 80060d8:	2a2d      	cmp	r2, #45	; 0x2d
 80060da:	f000 8083 	beq.w	80061e4 <_strtod_l+0x294>
 80060de:	2700      	movs	r7, #0
 80060e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80060e4:	2909      	cmp	r1, #9
 80060e6:	f240 8083 	bls.w	80061f0 <_strtod_l+0x2a0>
 80060ea:	9619      	str	r6, [sp, #100]	; 0x64
 80060ec:	2500      	movs	r5, #0
 80060ee:	e09f      	b.n	8006230 <_strtod_l+0x2e0>
 80060f0:	2300      	movs	r3, #0
 80060f2:	e7c8      	b.n	8006086 <_strtod_l+0x136>
 80060f4:	f1bb 0f08 	cmp.w	fp, #8
 80060f8:	bfd5      	itete	le
 80060fa:	9906      	ldrle	r1, [sp, #24]
 80060fc:	9905      	ldrgt	r1, [sp, #20]
 80060fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8006102:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006106:	f100 0001 	add.w	r0, r0, #1
 800610a:	bfd4      	ite	le
 800610c:	9306      	strle	r3, [sp, #24]
 800610e:	9305      	strgt	r3, [sp, #20]
 8006110:	f10b 0b01 	add.w	fp, fp, #1
 8006114:	9019      	str	r0, [sp, #100]	; 0x64
 8006116:	e7be      	b.n	8006096 <_strtod_l+0x146>
 8006118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800611a:	191a      	adds	r2, r3, r4
 800611c:	9219      	str	r2, [sp, #100]	; 0x64
 800611e:	5d1a      	ldrb	r2, [r3, r4]
 8006120:	f1bb 0f00 	cmp.w	fp, #0
 8006124:	d036      	beq.n	8006194 <_strtod_l+0x244>
 8006126:	9004      	str	r0, [sp, #16]
 8006128:	465c      	mov	r4, fp
 800612a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800612e:	2b09      	cmp	r3, #9
 8006130:	d912      	bls.n	8006158 <_strtod_l+0x208>
 8006132:	2301      	movs	r3, #1
 8006134:	e7c1      	b.n	80060ba <_strtod_l+0x16a>
 8006136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	9219      	str	r2, [sp, #100]	; 0x64
 800613c:	785a      	ldrb	r2, [r3, #1]
 800613e:	3001      	adds	r0, #1
 8006140:	2a30      	cmp	r2, #48	; 0x30
 8006142:	d0f8      	beq.n	8006136 <_strtod_l+0x1e6>
 8006144:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006148:	2b08      	cmp	r3, #8
 800614a:	f200 84d5 	bhi.w	8006af8 <_strtod_l+0xba8>
 800614e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006150:	9004      	str	r0, [sp, #16]
 8006152:	2000      	movs	r0, #0
 8006154:	9308      	str	r3, [sp, #32]
 8006156:	4604      	mov	r4, r0
 8006158:	3a30      	subs	r2, #48	; 0x30
 800615a:	f100 0301 	add.w	r3, r0, #1
 800615e:	d013      	beq.n	8006188 <_strtod_l+0x238>
 8006160:	9904      	ldr	r1, [sp, #16]
 8006162:	4419      	add	r1, r3
 8006164:	9104      	str	r1, [sp, #16]
 8006166:	4623      	mov	r3, r4
 8006168:	1905      	adds	r5, r0, r4
 800616a:	210a      	movs	r1, #10
 800616c:	42ab      	cmp	r3, r5
 800616e:	d113      	bne.n	8006198 <_strtod_l+0x248>
 8006170:	1823      	adds	r3, r4, r0
 8006172:	2b08      	cmp	r3, #8
 8006174:	f104 0401 	add.w	r4, r4, #1
 8006178:	4404      	add	r4, r0
 800617a:	dc1b      	bgt.n	80061b4 <_strtod_l+0x264>
 800617c:	9906      	ldr	r1, [sp, #24]
 800617e:	230a      	movs	r3, #10
 8006180:	fb03 2301 	mla	r3, r3, r1, r2
 8006184:	9306      	str	r3, [sp, #24]
 8006186:	2300      	movs	r3, #0
 8006188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800618a:	1c51      	adds	r1, r2, #1
 800618c:	9119      	str	r1, [sp, #100]	; 0x64
 800618e:	7852      	ldrb	r2, [r2, #1]
 8006190:	4618      	mov	r0, r3
 8006192:	e7ca      	b.n	800612a <_strtod_l+0x1da>
 8006194:	4658      	mov	r0, fp
 8006196:	e7d3      	b.n	8006140 <_strtod_l+0x1f0>
 8006198:	2b08      	cmp	r3, #8
 800619a:	dc04      	bgt.n	80061a6 <_strtod_l+0x256>
 800619c:	9f06      	ldr	r7, [sp, #24]
 800619e:	434f      	muls	r7, r1
 80061a0:	9706      	str	r7, [sp, #24]
 80061a2:	3301      	adds	r3, #1
 80061a4:	e7e2      	b.n	800616c <_strtod_l+0x21c>
 80061a6:	1c5f      	adds	r7, r3, #1
 80061a8:	2f10      	cmp	r7, #16
 80061aa:	bfde      	ittt	le
 80061ac:	9f05      	ldrle	r7, [sp, #20]
 80061ae:	434f      	mulle	r7, r1
 80061b0:	9705      	strle	r7, [sp, #20]
 80061b2:	e7f6      	b.n	80061a2 <_strtod_l+0x252>
 80061b4:	2c10      	cmp	r4, #16
 80061b6:	bfdf      	itttt	le
 80061b8:	9905      	ldrle	r1, [sp, #20]
 80061ba:	230a      	movle	r3, #10
 80061bc:	fb03 2301 	mlale	r3, r3, r1, r2
 80061c0:	9305      	strle	r3, [sp, #20]
 80061c2:	e7e0      	b.n	8006186 <_strtod_l+0x236>
 80061c4:	2300      	movs	r3, #0
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	2301      	movs	r3, #1
 80061ca:	e77b      	b.n	80060c4 <_strtod_l+0x174>
 80061cc:	2700      	movs	r7, #0
 80061ce:	1cb2      	adds	r2, r6, #2
 80061d0:	9219      	str	r2, [sp, #100]	; 0x64
 80061d2:	78b2      	ldrb	r2, [r6, #2]
 80061d4:	e784      	b.n	80060e0 <_strtod_l+0x190>
 80061d6:	bf00      	nop
 80061d8:	0800a6a0 	.word	0x0800a6a0
 80061dc:	0800a454 	.word	0x0800a454
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	2701      	movs	r7, #1
 80061e6:	e7f2      	b.n	80061ce <_strtod_l+0x27e>
 80061e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061ea:	1c51      	adds	r1, r2, #1
 80061ec:	9119      	str	r1, [sp, #100]	; 0x64
 80061ee:	7852      	ldrb	r2, [r2, #1]
 80061f0:	2a30      	cmp	r2, #48	; 0x30
 80061f2:	d0f9      	beq.n	80061e8 <_strtod_l+0x298>
 80061f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80061f8:	2908      	cmp	r1, #8
 80061fa:	f63f af77 	bhi.w	80060ec <_strtod_l+0x19c>
 80061fe:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006202:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006204:	9209      	str	r2, [sp, #36]	; 0x24
 8006206:	f04f 0e0a 	mov.w	lr, #10
 800620a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800620c:	1c51      	adds	r1, r2, #1
 800620e:	9119      	str	r1, [sp, #100]	; 0x64
 8006210:	7852      	ldrb	r2, [r2, #1]
 8006212:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006216:	2d09      	cmp	r5, #9
 8006218:	d935      	bls.n	8006286 <_strtod_l+0x336>
 800621a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800621c:	1b49      	subs	r1, r1, r5
 800621e:	2908      	cmp	r1, #8
 8006220:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006224:	dc02      	bgt.n	800622c <_strtod_l+0x2dc>
 8006226:	4565      	cmp	r5, ip
 8006228:	bfa8      	it	ge
 800622a:	4665      	movge	r5, ip
 800622c:	b107      	cbz	r7, 8006230 <_strtod_l+0x2e0>
 800622e:	426d      	negs	r5, r5
 8006230:	2c00      	cmp	r4, #0
 8006232:	d14c      	bne.n	80062ce <_strtod_l+0x37e>
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	4301      	orrs	r1, r0
 8006238:	f47f aecb 	bne.w	8005fd2 <_strtod_l+0x82>
 800623c:	2b00      	cmp	r3, #0
 800623e:	f47f aee4 	bne.w	800600a <_strtod_l+0xba>
 8006242:	2a69      	cmp	r2, #105	; 0x69
 8006244:	d026      	beq.n	8006294 <_strtod_l+0x344>
 8006246:	dc23      	bgt.n	8006290 <_strtod_l+0x340>
 8006248:	2a49      	cmp	r2, #73	; 0x49
 800624a:	d023      	beq.n	8006294 <_strtod_l+0x344>
 800624c:	2a4e      	cmp	r2, #78	; 0x4e
 800624e:	f47f aedc 	bne.w	800600a <_strtod_l+0xba>
 8006252:	499d      	ldr	r1, [pc, #628]	; (80064c8 <_strtod_l+0x578>)
 8006254:	a819      	add	r0, sp, #100	; 0x64
 8006256:	f001 fe37 	bl	8007ec8 <__match>
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aed5 	beq.w	800600a <_strtod_l+0xba>
 8006260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d12c      	bne.n	80062c2 <_strtod_l+0x372>
 8006268:	4998      	ldr	r1, [pc, #608]	; (80064cc <_strtod_l+0x57c>)
 800626a:	aa1c      	add	r2, sp, #112	; 0x70
 800626c:	a819      	add	r0, sp, #100	; 0x64
 800626e:	f001 fe3f 	bl	8007ef0 <__hexnan>
 8006272:	2805      	cmp	r0, #5
 8006274:	d125      	bne.n	80062c2 <_strtod_l+0x372>
 8006276:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006278:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800627c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006284:	e6a5      	b.n	8005fd2 <_strtod_l+0x82>
 8006286:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800628a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800628e:	e7bc      	b.n	800620a <_strtod_l+0x2ba>
 8006290:	2a6e      	cmp	r2, #110	; 0x6e
 8006292:	e7dc      	b.n	800624e <_strtod_l+0x2fe>
 8006294:	498e      	ldr	r1, [pc, #568]	; (80064d0 <_strtod_l+0x580>)
 8006296:	a819      	add	r0, sp, #100	; 0x64
 8006298:	f001 fe16 	bl	8007ec8 <__match>
 800629c:	2800      	cmp	r0, #0
 800629e:	f43f aeb4 	beq.w	800600a <_strtod_l+0xba>
 80062a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062a4:	498b      	ldr	r1, [pc, #556]	; (80064d4 <_strtod_l+0x584>)
 80062a6:	3b01      	subs	r3, #1
 80062a8:	a819      	add	r0, sp, #100	; 0x64
 80062aa:	9319      	str	r3, [sp, #100]	; 0x64
 80062ac:	f001 fe0c 	bl	8007ec8 <__match>
 80062b0:	b910      	cbnz	r0, 80062b8 <_strtod_l+0x368>
 80062b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062b4:	3301      	adds	r3, #1
 80062b6:	9319      	str	r3, [sp, #100]	; 0x64
 80062b8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80064d8 <_strtod_l+0x588>
 80062bc:	f04f 0800 	mov.w	r8, #0
 80062c0:	e687      	b.n	8005fd2 <_strtod_l+0x82>
 80062c2:	4886      	ldr	r0, [pc, #536]	; (80064dc <_strtod_l+0x58c>)
 80062c4:	f003 f926 	bl	8009514 <nan>
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	e681      	b.n	8005fd2 <_strtod_l+0x82>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	9806      	ldr	r0, [sp, #24]
 80062d2:	1aeb      	subs	r3, r5, r3
 80062d4:	f1bb 0f00 	cmp.w	fp, #0
 80062d8:	bf08      	it	eq
 80062da:	46a3      	moveq	fp, r4
 80062dc:	2c10      	cmp	r4, #16
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	4626      	mov	r6, r4
 80062e2:	bfa8      	it	ge
 80062e4:	2610      	movge	r6, #16
 80062e6:	f7fa f8e5 	bl	80004b4 <__aeabi_ui2d>
 80062ea:	2c09      	cmp	r4, #9
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	dd13      	ble.n	800631a <_strtod_l+0x3ca>
 80062f2:	4b7b      	ldr	r3, [pc, #492]	; (80064e0 <_strtod_l+0x590>)
 80062f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062fc:	f7fa f954 	bl	80005a8 <__aeabi_dmul>
 8006300:	4680      	mov	r8, r0
 8006302:	9805      	ldr	r0, [sp, #20]
 8006304:	4689      	mov	r9, r1
 8006306:	f7fa f8d5 	bl	80004b4 <__aeabi_ui2d>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7f9 ff93 	bl	800023c <__adddf3>
 8006316:	4680      	mov	r8, r0
 8006318:	4689      	mov	r9, r1
 800631a:	2c0f      	cmp	r4, #15
 800631c:	dc36      	bgt.n	800638c <_strtod_l+0x43c>
 800631e:	9b07      	ldr	r3, [sp, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f43f ae56 	beq.w	8005fd2 <_strtod_l+0x82>
 8006326:	dd22      	ble.n	800636e <_strtod_l+0x41e>
 8006328:	2b16      	cmp	r3, #22
 800632a:	dc09      	bgt.n	8006340 <_strtod_l+0x3f0>
 800632c:	496c      	ldr	r1, [pc, #432]	; (80064e0 <_strtod_l+0x590>)
 800632e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	f7fa f935 	bl	80005a8 <__aeabi_dmul>
 800633e:	e7c3      	b.n	80062c8 <_strtod_l+0x378>
 8006340:	9a07      	ldr	r2, [sp, #28]
 8006342:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006346:	4293      	cmp	r3, r2
 8006348:	db20      	blt.n	800638c <_strtod_l+0x43c>
 800634a:	4d65      	ldr	r5, [pc, #404]	; (80064e0 <_strtod_l+0x590>)
 800634c:	f1c4 040f 	rsb	r4, r4, #15
 8006350:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800635c:	f7fa f924 	bl	80005a8 <__aeabi_dmul>
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	1b1c      	subs	r4, r3, r4
 8006364:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800636c:	e7e5      	b.n	800633a <_strtod_l+0x3ea>
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	3316      	adds	r3, #22
 8006372:	db0b      	blt.n	800638c <_strtod_l+0x43c>
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	1b5d      	subs	r5, r3, r5
 8006378:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <_strtod_l+0x590>)
 800637a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800637e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7fa fa39 	bl	80007fc <__aeabi_ddiv>
 800638a:	e79d      	b.n	80062c8 <_strtod_l+0x378>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	1ba6      	subs	r6, r4, r6
 8006390:	441e      	add	r6, r3
 8006392:	2e00      	cmp	r6, #0
 8006394:	dd74      	ble.n	8006480 <_strtod_l+0x530>
 8006396:	f016 030f 	ands.w	r3, r6, #15
 800639a:	d00a      	beq.n	80063b2 <_strtod_l+0x462>
 800639c:	4950      	ldr	r1, [pc, #320]	; (80064e0 <_strtod_l+0x590>)
 800639e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063a2:	4642      	mov	r2, r8
 80063a4:	464b      	mov	r3, r9
 80063a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063aa:	f7fa f8fd 	bl	80005a8 <__aeabi_dmul>
 80063ae:	4680      	mov	r8, r0
 80063b0:	4689      	mov	r9, r1
 80063b2:	f036 060f 	bics.w	r6, r6, #15
 80063b6:	d052      	beq.n	800645e <_strtod_l+0x50e>
 80063b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80063bc:	dd27      	ble.n	800640e <_strtod_l+0x4be>
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	f8cd b010 	str.w	fp, [sp, #16]
 80063c6:	f8cd b020 	str.w	fp, [sp, #32]
 80063ca:	f8cd b018 	str.w	fp, [sp, #24]
 80063ce:	2322      	movs	r3, #34	; 0x22
 80063d0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80064d8 <_strtod_l+0x588>
 80063d4:	f8ca 3000 	str.w	r3, [sl]
 80063d8:	f04f 0800 	mov.w	r8, #0
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f adf7 	beq.w	8005fd2 <_strtod_l+0x82>
 80063e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063e6:	4650      	mov	r0, sl
 80063e8:	f001 fe9c 	bl	8008124 <_Bfree>
 80063ec:	9906      	ldr	r1, [sp, #24]
 80063ee:	4650      	mov	r0, sl
 80063f0:	f001 fe98 	bl	8008124 <_Bfree>
 80063f4:	9904      	ldr	r1, [sp, #16]
 80063f6:	4650      	mov	r0, sl
 80063f8:	f001 fe94 	bl	8008124 <_Bfree>
 80063fc:	9908      	ldr	r1, [sp, #32]
 80063fe:	4650      	mov	r0, sl
 8006400:	f001 fe90 	bl	8008124 <_Bfree>
 8006404:	4659      	mov	r1, fp
 8006406:	4650      	mov	r0, sl
 8006408:	f001 fe8c 	bl	8008124 <_Bfree>
 800640c:	e5e1      	b.n	8005fd2 <_strtod_l+0x82>
 800640e:	4b35      	ldr	r3, [pc, #212]	; (80064e4 <_strtod_l+0x594>)
 8006410:	9305      	str	r3, [sp, #20]
 8006412:	2300      	movs	r3, #0
 8006414:	1136      	asrs	r6, r6, #4
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	461f      	mov	r7, r3
 800641c:	2e01      	cmp	r6, #1
 800641e:	dc21      	bgt.n	8006464 <_strtod_l+0x514>
 8006420:	b10b      	cbz	r3, 8006426 <_strtod_l+0x4d6>
 8006422:	4680      	mov	r8, r0
 8006424:	4689      	mov	r9, r1
 8006426:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <_strtod_l+0x594>)
 8006428:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800642c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006438:	f7fa f8b6 	bl	80005a8 <__aeabi_dmul>
 800643c:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <_strtod_l+0x588>)
 800643e:	460a      	mov	r2, r1
 8006440:	400b      	ands	r3, r1
 8006442:	4929      	ldr	r1, [pc, #164]	; (80064e8 <_strtod_l+0x598>)
 8006444:	428b      	cmp	r3, r1
 8006446:	4680      	mov	r8, r0
 8006448:	d8b9      	bhi.n	80063be <_strtod_l+0x46e>
 800644a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800644e:	428b      	cmp	r3, r1
 8006450:	bf86      	itte	hi
 8006452:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 80064ec <_strtod_l+0x59c>
 8006456:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800645a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800645e:	2300      	movs	r3, #0
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	e07f      	b.n	8006564 <_strtod_l+0x614>
 8006464:	07f2      	lsls	r2, r6, #31
 8006466:	d505      	bpl.n	8006474 <_strtod_l+0x524>
 8006468:	9b05      	ldr	r3, [sp, #20]
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f89b 	bl	80005a8 <__aeabi_dmul>
 8006472:	2301      	movs	r3, #1
 8006474:	9a05      	ldr	r2, [sp, #20]
 8006476:	3208      	adds	r2, #8
 8006478:	3701      	adds	r7, #1
 800647a:	1076      	asrs	r6, r6, #1
 800647c:	9205      	str	r2, [sp, #20]
 800647e:	e7cd      	b.n	800641c <_strtod_l+0x4cc>
 8006480:	d0ed      	beq.n	800645e <_strtod_l+0x50e>
 8006482:	4276      	negs	r6, r6
 8006484:	f016 020f 	ands.w	r2, r6, #15
 8006488:	d00a      	beq.n	80064a0 <_strtod_l+0x550>
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <_strtod_l+0x590>)
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7fa f9b0 	bl	80007fc <__aeabi_ddiv>
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	1136      	asrs	r6, r6, #4
 80064a2:	d0dc      	beq.n	800645e <_strtod_l+0x50e>
 80064a4:	2e1f      	cmp	r6, #31
 80064a6:	dd23      	ble.n	80064f0 <_strtod_l+0x5a0>
 80064a8:	f04f 0b00 	mov.w	fp, #0
 80064ac:	f8cd b010 	str.w	fp, [sp, #16]
 80064b0:	f8cd b020 	str.w	fp, [sp, #32]
 80064b4:	f8cd b018 	str.w	fp, [sp, #24]
 80064b8:	2322      	movs	r3, #34	; 0x22
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f04f 0900 	mov.w	r9, #0
 80064c2:	f8ca 3000 	str.w	r3, [sl]
 80064c6:	e789      	b.n	80063dc <_strtod_l+0x48c>
 80064c8:	0800a429 	.word	0x0800a429
 80064cc:	0800a468 	.word	0x0800a468
 80064d0:	0800a421 	.word	0x0800a421
 80064d4:	0800a5ac 	.word	0x0800a5ac
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	0800a873 	.word	0x0800a873
 80064e0:	0800a738 	.word	0x0800a738
 80064e4:	0800a710 	.word	0x0800a710
 80064e8:	7ca00000 	.word	0x7ca00000
 80064ec:	7fefffff 	.word	0x7fefffff
 80064f0:	f016 0310 	ands.w	r3, r6, #16
 80064f4:	bf18      	it	ne
 80064f6:	236a      	movne	r3, #106	; 0x6a
 80064f8:	4fb1      	ldr	r7, [pc, #708]	; (80067c0 <_strtod_l+0x870>)
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	2300      	movs	r3, #0
 8006502:	07f2      	lsls	r2, r6, #31
 8006504:	d504      	bpl.n	8006510 <_strtod_l+0x5c0>
 8006506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650a:	f7fa f84d 	bl	80005a8 <__aeabi_dmul>
 800650e:	2301      	movs	r3, #1
 8006510:	1076      	asrs	r6, r6, #1
 8006512:	f107 0708 	add.w	r7, r7, #8
 8006516:	d1f4      	bne.n	8006502 <_strtod_l+0x5b2>
 8006518:	b10b      	cbz	r3, 800651e <_strtod_l+0x5ce>
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	9b05      	ldr	r3, [sp, #20]
 8006520:	b1c3      	cbz	r3, 8006554 <_strtod_l+0x604>
 8006522:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006526:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800652a:	2b00      	cmp	r3, #0
 800652c:	4649      	mov	r1, r9
 800652e:	dd11      	ble.n	8006554 <_strtod_l+0x604>
 8006530:	2b1f      	cmp	r3, #31
 8006532:	f340 8124 	ble.w	800677e <_strtod_l+0x82e>
 8006536:	2b34      	cmp	r3, #52	; 0x34
 8006538:	bfde      	ittt	le
 800653a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800653e:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006542:	fa03 f202 	lslle.w	r2, r3, r2
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	bfcc      	ite	gt
 800654c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006550:	ea02 0901 	andle.w	r9, r2, r1
 8006554:	2200      	movs	r2, #0
 8006556:	2300      	movs	r3, #0
 8006558:	4640      	mov	r0, r8
 800655a:	4649      	mov	r1, r9
 800655c:	f7fa fa8c 	bl	8000a78 <__aeabi_dcmpeq>
 8006560:	2800      	cmp	r0, #0
 8006562:	d1a1      	bne.n	80064a8 <_strtod_l+0x558>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	9908      	ldr	r1, [sp, #32]
 800656a:	4623      	mov	r3, r4
 800656c:	465a      	mov	r2, fp
 800656e:	4650      	mov	r0, sl
 8006570:	f001 fe40 	bl	80081f4 <__s2b>
 8006574:	9008      	str	r0, [sp, #32]
 8006576:	2800      	cmp	r0, #0
 8006578:	f43f af21 	beq.w	80063be <_strtod_l+0x46e>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	1b5d      	subs	r5, r3, r5
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb4      	ite	lt
 8006586:	462b      	movlt	r3, r5
 8006588:	2300      	movge	r3, #0
 800658a:	930e      	str	r3, [sp, #56]	; 0x38
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	f04f 0b00 	mov.w	fp, #0
 8006592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006596:	9314      	str	r3, [sp, #80]	; 0x50
 8006598:	f8cd b010 	str.w	fp, [sp, #16]
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	4650      	mov	r0, sl
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	f001 fd7f 	bl	80080a4 <_Balloc>
 80065a6:	9006      	str	r0, [sp, #24]
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f43f af10 	beq.w	80063ce <_strtod_l+0x47e>
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	3202      	adds	r2, #2
 80065b4:	f103 010c 	add.w	r1, r3, #12
 80065b8:	0092      	lsls	r2, r2, #2
 80065ba:	300c      	adds	r0, #12
 80065bc:	f001 fd64 	bl	8008088 <memcpy>
 80065c0:	ab1c      	add	r3, sp, #112	; 0x70
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	4650      	mov	r0, sl
 80065ce:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80065d2:	f002 f94d 	bl	8008870 <__d2b>
 80065d6:	901a      	str	r0, [sp, #104]	; 0x68
 80065d8:	2800      	cmp	r0, #0
 80065da:	f43f aef8 	beq.w	80063ce <_strtod_l+0x47e>
 80065de:	2101      	movs	r1, #1
 80065e0:	4650      	mov	r0, sl
 80065e2:	f001 fe9f 	bl	8008324 <__i2b>
 80065e6:	9004      	str	r0, [sp, #16]
 80065e8:	4603      	mov	r3, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f43f aeef 	beq.w	80063ce <_strtod_l+0x47e>
 80065f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80065f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	bfab      	itete	ge
 80065f8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80065fa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80065fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80065fe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006600:	bfac      	ite	ge
 8006602:	18ee      	addge	r6, r5, r3
 8006604:	1b5c      	sublt	r4, r3, r5
 8006606:	9b05      	ldr	r3, [sp, #20]
 8006608:	1aed      	subs	r5, r5, r3
 800660a:	4415      	add	r5, r2
 800660c:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <_strtod_l+0x874>)
 800660e:	3d01      	subs	r5, #1
 8006610:	429d      	cmp	r5, r3
 8006612:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006616:	f280 80c4 	bge.w	80067a2 <_strtod_l+0x852>
 800661a:	1b5b      	subs	r3, r3, r5
 800661c:	2b1f      	cmp	r3, #31
 800661e:	eba2 0203 	sub.w	r2, r2, r3
 8006622:	f04f 0701 	mov.w	r7, #1
 8006626:	f300 80b1 	bgt.w	800678c <_strtod_l+0x83c>
 800662a:	fa07 f303 	lsl.w	r3, r7, r3
 800662e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006630:	2500      	movs	r5, #0
 8006632:	18b7      	adds	r7, r6, r2
 8006634:	9b05      	ldr	r3, [sp, #20]
 8006636:	42be      	cmp	r6, r7
 8006638:	4414      	add	r4, r2
 800663a:	441c      	add	r4, r3
 800663c:	4633      	mov	r3, r6
 800663e:	bfa8      	it	ge
 8006640:	463b      	movge	r3, r7
 8006642:	42a3      	cmp	r3, r4
 8006644:	bfa8      	it	ge
 8006646:	4623      	movge	r3, r4
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfc2      	ittt	gt
 800664c:	1aff      	subgt	r7, r7, r3
 800664e:	1ae4      	subgt	r4, r4, r3
 8006650:	1af6      	subgt	r6, r6, r3
 8006652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd17      	ble.n	8006688 <_strtod_l+0x738>
 8006658:	9904      	ldr	r1, [sp, #16]
 800665a:	461a      	mov	r2, r3
 800665c:	4650      	mov	r0, sl
 800665e:	f001 ff1f 	bl	80084a0 <__pow5mult>
 8006662:	9004      	str	r0, [sp, #16]
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f aeb2 	beq.w	80063ce <_strtod_l+0x47e>
 800666a:	4601      	mov	r1, r0
 800666c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800666e:	4650      	mov	r0, sl
 8006670:	f001 fe6e 	bl	8008350 <__multiply>
 8006674:	9009      	str	r0, [sp, #36]	; 0x24
 8006676:	2800      	cmp	r0, #0
 8006678:	f43f aea9 	beq.w	80063ce <_strtod_l+0x47e>
 800667c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800667e:	4650      	mov	r0, sl
 8006680:	f001 fd50 	bl	8008124 <_Bfree>
 8006684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006686:	931a      	str	r3, [sp, #104]	; 0x68
 8006688:	2f00      	cmp	r7, #0
 800668a:	f300 808e 	bgt.w	80067aa <_strtod_l+0x85a>
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	dd08      	ble.n	80066a6 <_strtod_l+0x756>
 8006694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006696:	9906      	ldr	r1, [sp, #24]
 8006698:	4650      	mov	r0, sl
 800669a:	f001 ff01 	bl	80084a0 <__pow5mult>
 800669e:	9006      	str	r0, [sp, #24]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f43f ae94 	beq.w	80063ce <_strtod_l+0x47e>
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	dd08      	ble.n	80066bc <_strtod_l+0x76c>
 80066aa:	9906      	ldr	r1, [sp, #24]
 80066ac:	4622      	mov	r2, r4
 80066ae:	4650      	mov	r0, sl
 80066b0:	f001 ff50 	bl	8008554 <__lshift>
 80066b4:	9006      	str	r0, [sp, #24]
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f ae89 	beq.w	80063ce <_strtod_l+0x47e>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dd08      	ble.n	80066d2 <_strtod_l+0x782>
 80066c0:	9904      	ldr	r1, [sp, #16]
 80066c2:	4632      	mov	r2, r6
 80066c4:	4650      	mov	r0, sl
 80066c6:	f001 ff45 	bl	8008554 <__lshift>
 80066ca:	9004      	str	r0, [sp, #16]
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f ae7e 	beq.w	80063ce <_strtod_l+0x47e>
 80066d2:	9a06      	ldr	r2, [sp, #24]
 80066d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066d6:	4650      	mov	r0, sl
 80066d8:	f001 ffc8 	bl	800866c <__mdiff>
 80066dc:	4683      	mov	fp, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	f43f ae75 	beq.w	80063ce <_strtod_l+0x47e>
 80066e4:	2400      	movs	r4, #0
 80066e6:	68c3      	ldr	r3, [r0, #12]
 80066e8:	9904      	ldr	r1, [sp, #16]
 80066ea:	60c4      	str	r4, [r0, #12]
 80066ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ee:	f001 ffa1 	bl	8008634 <__mcmp>
 80066f2:	42a0      	cmp	r0, r4
 80066f4:	da6c      	bge.n	80067d0 <_strtod_l+0x880>
 80066f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f8:	ea53 0308 	orrs.w	r3, r3, r8
 80066fc:	f040 8092 	bne.w	8006824 <_strtod_l+0x8d4>
 8006700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 808d 	bne.w	8006824 <_strtod_l+0x8d4>
 800670a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800670e:	0d1b      	lsrs	r3, r3, #20
 8006710:	051b      	lsls	r3, r3, #20
 8006712:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006716:	f240 8085 	bls.w	8006824 <_strtod_l+0x8d4>
 800671a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800671e:	b91b      	cbnz	r3, 8006728 <_strtod_l+0x7d8>
 8006720:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006724:	2b01      	cmp	r3, #1
 8006726:	dd7d      	ble.n	8006824 <_strtod_l+0x8d4>
 8006728:	4659      	mov	r1, fp
 800672a:	2201      	movs	r2, #1
 800672c:	4650      	mov	r0, sl
 800672e:	f001 ff11 	bl	8008554 <__lshift>
 8006732:	9904      	ldr	r1, [sp, #16]
 8006734:	4683      	mov	fp, r0
 8006736:	f001 ff7d 	bl	8008634 <__mcmp>
 800673a:	2800      	cmp	r0, #0
 800673c:	dd72      	ble.n	8006824 <_strtod_l+0x8d4>
 800673e:	9905      	ldr	r1, [sp, #20]
 8006740:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <_strtod_l+0x878>)
 8006742:	464b      	mov	r3, r9
 8006744:	2900      	cmp	r1, #0
 8006746:	f000 808d 	beq.w	8006864 <_strtod_l+0x914>
 800674a:	ea02 0109 	and.w	r1, r2, r9
 800674e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006752:	f300 8087 	bgt.w	8006864 <_strtod_l+0x914>
 8006756:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800675a:	f77f aead 	ble.w	80064b8 <_strtod_l+0x568>
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <_strtod_l+0x87c>)
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	2200      	movs	r2, #0
 8006766:	f7f9 ff1f 	bl	80005a8 <__aeabi_dmul>
 800676a:	460b      	mov	r3, r1
 800676c:	4303      	orrs	r3, r0
 800676e:	bf08      	it	eq
 8006770:	2322      	moveq	r3, #34	; 0x22
 8006772:	4680      	mov	r8, r0
 8006774:	4689      	mov	r9, r1
 8006776:	bf08      	it	eq
 8006778:	f8ca 3000 	streq.w	r3, [sl]
 800677c:	e632      	b.n	80063e4 <_strtod_l+0x494>
 800677e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006782:	fa02 f303 	lsl.w	r3, r2, r3
 8006786:	ea03 0808 	and.w	r8, r3, r8
 800678a:	e6e3      	b.n	8006554 <_strtod_l+0x604>
 800678c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006790:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006794:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006798:	35e2      	adds	r5, #226	; 0xe2
 800679a:	fa07 f505 	lsl.w	r5, r7, r5
 800679e:	970f      	str	r7, [sp, #60]	; 0x3c
 80067a0:	e747      	b.n	8006632 <_strtod_l+0x6e2>
 80067a2:	2301      	movs	r3, #1
 80067a4:	2500      	movs	r5, #0
 80067a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80067a8:	e743      	b.n	8006632 <_strtod_l+0x6e2>
 80067aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067ac:	463a      	mov	r2, r7
 80067ae:	4650      	mov	r0, sl
 80067b0:	f001 fed0 	bl	8008554 <__lshift>
 80067b4:	901a      	str	r0, [sp, #104]	; 0x68
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f47f af69 	bne.w	800668e <_strtod_l+0x73e>
 80067bc:	e607      	b.n	80063ce <_strtod_l+0x47e>
 80067be:	bf00      	nop
 80067c0:	0800a480 	.word	0x0800a480
 80067c4:	fffffc02 	.word	0xfffffc02
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	39500000 	.word	0x39500000
 80067d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80067d4:	d165      	bne.n	80068a2 <_strtod_l+0x952>
 80067d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067dc:	b35a      	cbz	r2, 8006836 <_strtod_l+0x8e6>
 80067de:	4a9a      	ldr	r2, [pc, #616]	; (8006a48 <_strtod_l+0xaf8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d12b      	bne.n	800683c <_strtod_l+0x8ec>
 80067e4:	9b05      	ldr	r3, [sp, #20]
 80067e6:	4641      	mov	r1, r8
 80067e8:	b303      	cbz	r3, 800682c <_strtod_l+0x8dc>
 80067ea:	4b98      	ldr	r3, [pc, #608]	; (8006a4c <_strtod_l+0xafc>)
 80067ec:	464a      	mov	r2, r9
 80067ee:	4013      	ands	r3, r2
 80067f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067f8:	d81b      	bhi.n	8006832 <_strtod_l+0x8e2>
 80067fa:	0d1b      	lsrs	r3, r3, #20
 80067fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	4299      	cmp	r1, r3
 8006806:	d119      	bne.n	800683c <_strtod_l+0x8ec>
 8006808:	4b91      	ldr	r3, [pc, #580]	; (8006a50 <_strtod_l+0xb00>)
 800680a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800680c:	429a      	cmp	r2, r3
 800680e:	d102      	bne.n	8006816 <_strtod_l+0x8c6>
 8006810:	3101      	adds	r1, #1
 8006812:	f43f addc 	beq.w	80063ce <_strtod_l+0x47e>
 8006816:	4b8d      	ldr	r3, [pc, #564]	; (8006a4c <_strtod_l+0xafc>)
 8006818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681a:	401a      	ands	r2, r3
 800681c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006820:	f04f 0800 	mov.w	r8, #0
 8006824:	9b05      	ldr	r3, [sp, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d199      	bne.n	800675e <_strtod_l+0x80e>
 800682a:	e5db      	b.n	80063e4 <_strtod_l+0x494>
 800682c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006830:	e7e8      	b.n	8006804 <_strtod_l+0x8b4>
 8006832:	4613      	mov	r3, r2
 8006834:	e7e6      	b.n	8006804 <_strtod_l+0x8b4>
 8006836:	ea53 0308 	orrs.w	r3, r3, r8
 800683a:	d080      	beq.n	800673e <_strtod_l+0x7ee>
 800683c:	b1e5      	cbz	r5, 8006878 <_strtod_l+0x928>
 800683e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006840:	421d      	tst	r5, r3
 8006842:	d0ef      	beq.n	8006824 <_strtod_l+0x8d4>
 8006844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006846:	9a05      	ldr	r2, [sp, #20]
 8006848:	4640      	mov	r0, r8
 800684a:	4649      	mov	r1, r9
 800684c:	b1c3      	cbz	r3, 8006880 <_strtod_l+0x930>
 800684e:	f7ff fb5c 	bl	8005f0a <sulp>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800685a:	f7f9 fcef 	bl	800023c <__adddf3>
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	e7df      	b.n	8006824 <_strtod_l+0x8d4>
 8006864:	4013      	ands	r3, r2
 8006866:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800686a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800686e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006872:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006876:	e7d5      	b.n	8006824 <_strtod_l+0x8d4>
 8006878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687a:	ea13 0f08 	tst.w	r3, r8
 800687e:	e7e0      	b.n	8006842 <_strtod_l+0x8f2>
 8006880:	f7ff fb43 	bl	8005f0a <sulp>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800688c:	f7f9 fcd4 	bl	8000238 <__aeabi_dsub>
 8006890:	2200      	movs	r2, #0
 8006892:	2300      	movs	r3, #0
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	f7fa f8ee 	bl	8000a78 <__aeabi_dcmpeq>
 800689c:	2800      	cmp	r0, #0
 800689e:	d0c1      	beq.n	8006824 <_strtod_l+0x8d4>
 80068a0:	e60a      	b.n	80064b8 <_strtod_l+0x568>
 80068a2:	9904      	ldr	r1, [sp, #16]
 80068a4:	4658      	mov	r0, fp
 80068a6:	f002 f83f 	bl	8008928 <__ratio>
 80068aa:	2200      	movs	r2, #0
 80068ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	f7fa f8f4 	bl	8000aa0 <__aeabi_dcmple>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d070      	beq.n	800699e <_strtod_l+0xa4e>
 80068bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d042      	beq.n	8006948 <_strtod_l+0x9f8>
 80068c2:	4f64      	ldr	r7, [pc, #400]	; (8006a54 <_strtod_l+0xb04>)
 80068c4:	2600      	movs	r6, #0
 80068c6:	4d63      	ldr	r5, [pc, #396]	; (8006a54 <_strtod_l+0xb04>)
 80068c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ce:	0d1b      	lsrs	r3, r3, #20
 80068d0:	051b      	lsls	r3, r3, #20
 80068d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068d6:	4b60      	ldr	r3, [pc, #384]	; (8006a58 <_strtod_l+0xb08>)
 80068d8:	429a      	cmp	r2, r3
 80068da:	f040 80c5 	bne.w	8006a68 <_strtod_l+0xb18>
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f001 ff48 	bl	800877c <__ulp>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7f9 fe58 	bl	80005a8 <__aeabi_dmul>
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	f7f9 fc9e 	bl	800023c <__adddf3>
 8006900:	460b      	mov	r3, r1
 8006902:	4952      	ldr	r1, [pc, #328]	; (8006a4c <_strtod_l+0xafc>)
 8006904:	4a55      	ldr	r2, [pc, #340]	; (8006a5c <_strtod_l+0xb0c>)
 8006906:	4019      	ands	r1, r3
 8006908:	4291      	cmp	r1, r2
 800690a:	4680      	mov	r8, r0
 800690c:	d95d      	bls.n	80069ca <_strtod_l+0xa7a>
 800690e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006910:	4b4f      	ldr	r3, [pc, #316]	; (8006a50 <_strtod_l+0xb00>)
 8006912:	429a      	cmp	r2, r3
 8006914:	d103      	bne.n	800691e <_strtod_l+0x9ce>
 8006916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006918:	3301      	adds	r3, #1
 800691a:	f43f ad58 	beq.w	80063ce <_strtod_l+0x47e>
 800691e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8006a50 <_strtod_l+0xb00>
 8006922:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006926:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006928:	4650      	mov	r0, sl
 800692a:	f001 fbfb 	bl	8008124 <_Bfree>
 800692e:	9906      	ldr	r1, [sp, #24]
 8006930:	4650      	mov	r0, sl
 8006932:	f001 fbf7 	bl	8008124 <_Bfree>
 8006936:	9904      	ldr	r1, [sp, #16]
 8006938:	4650      	mov	r0, sl
 800693a:	f001 fbf3 	bl	8008124 <_Bfree>
 800693e:	4659      	mov	r1, fp
 8006940:	4650      	mov	r0, sl
 8006942:	f001 fbef 	bl	8008124 <_Bfree>
 8006946:	e629      	b.n	800659c <_strtod_l+0x64c>
 8006948:	f1b8 0f00 	cmp.w	r8, #0
 800694c:	d119      	bne.n	8006982 <_strtod_l+0xa32>
 800694e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006954:	b9e3      	cbnz	r3, 8006990 <_strtod_l+0xa40>
 8006956:	4b3f      	ldr	r3, [pc, #252]	; (8006a54 <_strtod_l+0xb04>)
 8006958:	2200      	movs	r2, #0
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7fa f895 	bl	8000a8c <__aeabi_dcmplt>
 8006962:	b9c8      	cbnz	r0, 8006998 <_strtod_l+0xa48>
 8006964:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <_strtod_l+0xb10>)
 8006966:	2200      	movs	r2, #0
 8006968:	4630      	mov	r0, r6
 800696a:	4639      	mov	r1, r7
 800696c:	f7f9 fe1c 	bl	80005a8 <__aeabi_dmul>
 8006970:	4604      	mov	r4, r0
 8006972:	460d      	mov	r5, r1
 8006974:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006978:	9416      	str	r4, [sp, #88]	; 0x58
 800697a:	9317      	str	r3, [sp, #92]	; 0x5c
 800697c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006980:	e7a2      	b.n	80068c8 <_strtod_l+0x978>
 8006982:	f1b8 0f01 	cmp.w	r8, #1
 8006986:	d103      	bne.n	8006990 <_strtod_l+0xa40>
 8006988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	f43f ad94 	beq.w	80064b8 <_strtod_l+0x568>
 8006990:	4f34      	ldr	r7, [pc, #208]	; (8006a64 <_strtod_l+0xb14>)
 8006992:	2600      	movs	r6, #0
 8006994:	2400      	movs	r4, #0
 8006996:	e796      	b.n	80068c6 <_strtod_l+0x976>
 8006998:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800699a:	4d31      	ldr	r5, [pc, #196]	; (8006a60 <_strtod_l+0xb10>)
 800699c:	e7ea      	b.n	8006974 <_strtod_l+0xa24>
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <_strtod_l+0xb10>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	4630      	mov	r0, r6
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7f9 fdff 	bl	80005a8 <__aeabi_dmul>
 80069aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	b933      	cbnz	r3, 80069c0 <_strtod_l+0xa70>
 80069b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069b6:	9010      	str	r0, [sp, #64]	; 0x40
 80069b8:	9311      	str	r3, [sp, #68]	; 0x44
 80069ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069be:	e783      	b.n	80068c8 <_strtod_l+0x978>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80069c8:	e7f7      	b.n	80069ba <_strtod_l+0xa6a>
 80069ca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80069ce:	9b05      	ldr	r3, [sp, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1a8      	bne.n	8006926 <_strtod_l+0x9d6>
 80069d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069da:	0d1b      	lsrs	r3, r3, #20
 80069dc:	051b      	lsls	r3, r3, #20
 80069de:	429a      	cmp	r2, r3
 80069e0:	d1a1      	bne.n	8006926 <_strtod_l+0x9d6>
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7fa fb9d 	bl	8001124 <__aeabi_d2lz>
 80069ea:	f7f9 fdaf 	bl	800054c <__aeabi_l2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7f9 fc1f 	bl	8000238 <__aeabi_dsub>
 80069fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a00:	ea43 0308 	orr.w	r3, r3, r8
 8006a04:	4313      	orrs	r3, r2
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	d068      	beq.n	8006ade <_strtod_l+0xb8e>
 8006a0c:	a30a      	add	r3, pc, #40	; (adr r3, 8006a38 <_strtod_l+0xae8>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7fa f83b 	bl	8000a8c <__aeabi_dcmplt>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f47f ace4 	bne.w	80063e4 <_strtod_l+0x494>
 8006a1c:	a308      	add	r3, pc, #32	; (adr r3, 8006a40 <_strtod_l+0xaf0>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	4620      	mov	r0, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7fa f84f 	bl	8000ac8 <__aeabi_dcmpgt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f43f af7b 	beq.w	8006926 <_strtod_l+0x9d6>
 8006a30:	e4d8      	b.n	80063e4 <_strtod_l+0x494>
 8006a32:	bf00      	nop
 8006a34:	f3af 8000 	nop.w
 8006a38:	94a03595 	.word	0x94a03595
 8006a3c:	3fdfffff 	.word	0x3fdfffff
 8006a40:	35afe535 	.word	0x35afe535
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	000fffff 	.word	0x000fffff
 8006a4c:	7ff00000 	.word	0x7ff00000
 8006a50:	7fefffff 	.word	0x7fefffff
 8006a54:	3ff00000 	.word	0x3ff00000
 8006a58:	7fe00000 	.word	0x7fe00000
 8006a5c:	7c9fffff 	.word	0x7c9fffff
 8006a60:	3fe00000 	.word	0x3fe00000
 8006a64:	bff00000 	.word	0xbff00000
 8006a68:	9b05      	ldr	r3, [sp, #20]
 8006a6a:	b313      	cbz	r3, 8006ab2 <_strtod_l+0xb62>
 8006a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a72:	d81e      	bhi.n	8006ab2 <_strtod_l+0xb62>
 8006a74:	a326      	add	r3, pc, #152	; (adr r3, 8006b10 <_strtod_l+0xbc0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7fa f80f 	bl	8000aa0 <__aeabi_dcmple>
 8006a82:	b190      	cbz	r0, 8006aaa <_strtod_l+0xb5a>
 8006a84:	4629      	mov	r1, r5
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7fa f866 	bl	8000b58 <__aeabi_d2uiz>
 8006a8c:	2801      	cmp	r0, #1
 8006a8e:	bf38      	it	cc
 8006a90:	2001      	movcc	r0, #1
 8006a92:	f7f9 fd0f 	bl	80004b4 <__aeabi_ui2d>
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	4604      	mov	r4, r0
 8006a9a:	460d      	mov	r5, r1
 8006a9c:	b9d3      	cbnz	r3, 8006ad4 <_strtod_l+0xb84>
 8006a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aa2:	9012      	str	r0, [sp, #72]	; 0x48
 8006aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006aa6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006aaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006ab0:	1a9f      	subs	r7, r3, r2
 8006ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ab6:	f001 fe61 	bl	800877c <__ulp>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4630      	mov	r0, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	f7f9 fd71 	bl	80005a8 <__aeabi_dmul>
 8006ac6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006aca:	f7f9 fbb7 	bl	800023c <__adddf3>
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	e77c      	b.n	80069ce <_strtod_l+0xa7e>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006adc:	e7e3      	b.n	8006aa6 <_strtod_l+0xb56>
 8006ade:	a30e      	add	r3, pc, #56	; (adr r3, 8006b18 <_strtod_l+0xbc8>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 ffd2 	bl	8000a8c <__aeabi_dcmplt>
 8006ae8:	e79f      	b.n	8006a2a <_strtod_l+0xada>
 8006aea:	2300      	movs	r3, #0
 8006aec:	930a      	str	r3, [sp, #40]	; 0x28
 8006aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006af0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	f7ff ba71 	b.w	8005fda <_strtod_l+0x8a>
 8006af8:	2a65      	cmp	r2, #101	; 0x65
 8006afa:	f43f ab63 	beq.w	80061c4 <_strtod_l+0x274>
 8006afe:	2a45      	cmp	r2, #69	; 0x45
 8006b00:	f43f ab60 	beq.w	80061c4 <_strtod_l+0x274>
 8006b04:	2301      	movs	r3, #1
 8006b06:	f7ff bb95 	b.w	8006234 <_strtod_l+0x2e4>
 8006b0a:	bf00      	nop
 8006b0c:	f3af 8000 	nop.w
 8006b10:	ffc00000 	.word	0xffc00000
 8006b14:	41dfffff 	.word	0x41dfffff
 8006b18:	94a03595 	.word	0x94a03595
 8006b1c:	3fcfffff 	.word	0x3fcfffff

08006b20 <_strtod_r>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	; (8006b28 <_strtod_r+0x8>)
 8006b22:	f7ff ba15 	b.w	8005f50 <_strtod_l>
 8006b26:	bf00      	nop
 8006b28:	20000074 	.word	0x20000074

08006b2c <_strtol_l.constprop.0>:
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b32:	4680      	mov	r8, r0
 8006b34:	d001      	beq.n	8006b3a <_strtol_l.constprop.0+0xe>
 8006b36:	2b24      	cmp	r3, #36	; 0x24
 8006b38:	d906      	bls.n	8006b48 <_strtol_l.constprop.0+0x1c>
 8006b3a:	f7fe fa9b 	bl	8005074 <__errno>
 8006b3e:	2316      	movs	r3, #22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	2000      	movs	r0, #0
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b48:	4f35      	ldr	r7, [pc, #212]	; (8006c20 <_strtol_l.constprop.0+0xf4>)
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b52:	5de6      	ldrb	r6, [r4, r7]
 8006b54:	f016 0608 	ands.w	r6, r6, #8
 8006b58:	d1f8      	bne.n	8006b4c <_strtol_l.constprop.0+0x20>
 8006b5a:	2c2d      	cmp	r4, #45	; 0x2d
 8006b5c:	d12f      	bne.n	8006bbe <_strtol_l.constprop.0+0x92>
 8006b5e:	782c      	ldrb	r4, [r5, #0]
 8006b60:	2601      	movs	r6, #1
 8006b62:	1c85      	adds	r5, r0, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d057      	beq.n	8006c18 <_strtol_l.constprop.0+0xec>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d109      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006b6c:	2c30      	cmp	r4, #48	; 0x30
 8006b6e:	d107      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006b70:	7828      	ldrb	r0, [r5, #0]
 8006b72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006b76:	2858      	cmp	r0, #88	; 0x58
 8006b78:	d149      	bne.n	8006c0e <_strtol_l.constprop.0+0xe2>
 8006b7a:	786c      	ldrb	r4, [r5, #1]
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	3502      	adds	r5, #2
 8006b80:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006b84:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006b88:	2700      	movs	r7, #0
 8006b8a:	fbbe f9f3 	udiv	r9, lr, r3
 8006b8e:	4638      	mov	r0, r7
 8006b90:	fb03 ea19 	mls	sl, r3, r9, lr
 8006b94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006b98:	f1bc 0f09 	cmp.w	ip, #9
 8006b9c:	d814      	bhi.n	8006bc8 <_strtol_l.constprop.0+0x9c>
 8006b9e:	4664      	mov	r4, ip
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	dd22      	ble.n	8006bea <_strtol_l.constprop.0+0xbe>
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	db1d      	blt.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006ba8:	4581      	cmp	r9, r0
 8006baa:	d31b      	bcc.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006bac:	d101      	bne.n	8006bb2 <_strtol_l.constprop.0+0x86>
 8006bae:	45a2      	cmp	sl, r4
 8006bb0:	db18      	blt.n	8006be4 <_strtol_l.constprop.0+0xb8>
 8006bb2:	fb00 4003 	mla	r0, r0, r3, r4
 8006bb6:	2701      	movs	r7, #1
 8006bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bbc:	e7ea      	b.n	8006b94 <_strtol_l.constprop.0+0x68>
 8006bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8006bc0:	bf04      	itt	eq
 8006bc2:	782c      	ldrbeq	r4, [r5, #0]
 8006bc4:	1c85      	addeq	r5, r0, #2
 8006bc6:	e7cd      	b.n	8006b64 <_strtol_l.constprop.0+0x38>
 8006bc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006bcc:	f1bc 0f19 	cmp.w	ip, #25
 8006bd0:	d801      	bhi.n	8006bd6 <_strtol_l.constprop.0+0xaa>
 8006bd2:	3c37      	subs	r4, #55	; 0x37
 8006bd4:	e7e4      	b.n	8006ba0 <_strtol_l.constprop.0+0x74>
 8006bd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006bda:	f1bc 0f19 	cmp.w	ip, #25
 8006bde:	d804      	bhi.n	8006bea <_strtol_l.constprop.0+0xbe>
 8006be0:	3c57      	subs	r4, #87	; 0x57
 8006be2:	e7dd      	b.n	8006ba0 <_strtol_l.constprop.0+0x74>
 8006be4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006be8:	e7e6      	b.n	8006bb8 <_strtol_l.constprop.0+0x8c>
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	da07      	bge.n	8006bfe <_strtol_l.constprop.0+0xd2>
 8006bee:	2322      	movs	r3, #34	; 0x22
 8006bf0:	f8c8 3000 	str.w	r3, [r8]
 8006bf4:	4670      	mov	r0, lr
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d0a4      	beq.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006bfa:	1e69      	subs	r1, r5, #1
 8006bfc:	e005      	b.n	8006c0a <_strtol_l.constprop.0+0xde>
 8006bfe:	b106      	cbz	r6, 8006c02 <_strtol_l.constprop.0+0xd6>
 8006c00:	4240      	negs	r0, r0
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d09e      	beq.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	d1f7      	bne.n	8006bfa <_strtol_l.constprop.0+0xce>
 8006c0a:	6011      	str	r1, [r2, #0]
 8006c0c:	e79a      	b.n	8006b44 <_strtol_l.constprop.0+0x18>
 8006c0e:	2430      	movs	r4, #48	; 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1b5      	bne.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c14:	2308      	movs	r3, #8
 8006c16:	e7b3      	b.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c18:	2c30      	cmp	r4, #48	; 0x30
 8006c1a:	d0a9      	beq.n	8006b70 <_strtol_l.constprop.0+0x44>
 8006c1c:	230a      	movs	r3, #10
 8006c1e:	e7af      	b.n	8006b80 <_strtol_l.constprop.0+0x54>
 8006c20:	0800a4a9 	.word	0x0800a4a9

08006c24 <_strtol_r>:
 8006c24:	f7ff bf82 	b.w	8006b2c <_strtol_l.constprop.0>

08006c28 <_write_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	; (8006c48 <_write_r+0x20>)
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4608      	mov	r0, r1
 8006c30:	4611      	mov	r1, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fa ffab 	bl	8001b92 <_write>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_write_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_write_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	200002e8 	.word	0x200002e8

08006c4c <_close_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d06      	ldr	r5, [pc, #24]	; (8006c68 <_close_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	f7fa ffb7 	bl	8001bca <_close>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_close_r+0x1a>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_close_r+0x1a>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	200002e8 	.word	0x200002e8

08006c6c <quorem>:
 8006c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c70:	6903      	ldr	r3, [r0, #16]
 8006c72:	690c      	ldr	r4, [r1, #16]
 8006c74:	42a3      	cmp	r3, r4
 8006c76:	4607      	mov	r7, r0
 8006c78:	db7d      	blt.n	8006d76 <quorem+0x10a>
 8006c7a:	3c01      	subs	r4, #1
 8006c7c:	f101 0814 	add.w	r8, r1, #20
 8006c80:	f100 0514 	add.w	r5, r0, #20
 8006c84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c92:	3301      	adds	r3, #1
 8006c94:	429a      	cmp	r2, r3
 8006c96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ca2:	d32e      	bcc.n	8006d02 <quorem+0x96>
 8006ca4:	f04f 0e00 	mov.w	lr, #0
 8006ca8:	4640      	mov	r0, r8
 8006caa:	46ac      	mov	ip, r5
 8006cac:	46f2      	mov	sl, lr
 8006cae:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cb2:	b293      	uxth	r3, r2
 8006cb4:	fb06 e303 	mla	r3, r6, r3, lr
 8006cb8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006cbc:	0c12      	lsrs	r2, r2, #16
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	fb06 e202 	mla	r2, r6, r2, lr
 8006cc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006cc8:	f8dc a000 	ldr.w	sl, [ip]
 8006ccc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cd0:	b292      	uxth	r2, r2
 8006cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8006cd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006cda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce4:	4581      	cmp	r9, r0
 8006ce6:	f84c 3b04 	str.w	r3, [ip], #4
 8006cea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cee:	d2de      	bcs.n	8006cae <quorem+0x42>
 8006cf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006cf4:	b92b      	cbnz	r3, 8006d02 <quorem+0x96>
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	d32e      	bcc.n	8006d5e <quorem+0xf2>
 8006d00:	613c      	str	r4, [r7, #16]
 8006d02:	4638      	mov	r0, r7
 8006d04:	f001 fc96 	bl	8008634 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	db24      	blt.n	8006d56 <quorem+0xea>
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f04f 0c00 	mov.w	ip, #0
 8006d14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d18:	f8d0 e000 	ldr.w	lr, [r0]
 8006d1c:	b293      	uxth	r3, r2
 8006d1e:	ebac 0303 	sub.w	r3, ip, r3
 8006d22:	0c12      	lsrs	r2, r2, #16
 8006d24:	fa13 f38e 	uxtah	r3, r3, lr
 8006d28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d36:	45c1      	cmp	r9, r8
 8006d38:	f840 3b04 	str.w	r3, [r0], #4
 8006d3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d40:	d2e8      	bcs.n	8006d14 <quorem+0xa8>
 8006d42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d4a:	b922      	cbnz	r2, 8006d56 <quorem+0xea>
 8006d4c:	3b04      	subs	r3, #4
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	d30a      	bcc.n	8006d6a <quorem+0xfe>
 8006d54:	613c      	str	r4, [r7, #16]
 8006d56:	4630      	mov	r0, r6
 8006d58:	b003      	add	sp, #12
 8006d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	d1cc      	bne.n	8006d00 <quorem+0x94>
 8006d66:	3c01      	subs	r4, #1
 8006d68:	e7c7      	b.n	8006cfa <quorem+0x8e>
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	d1f0      	bne.n	8006d54 <quorem+0xe8>
 8006d72:	3c01      	subs	r4, #1
 8006d74:	e7eb      	b.n	8006d4e <quorem+0xe2>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e7ee      	b.n	8006d58 <quorem+0xec>
 8006d7a:	0000      	movs	r0, r0
 8006d7c:	0000      	movs	r0, r0
	...

08006d80 <_dtoa_r>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d86:	b099      	sub	sp, #100	; 0x64
 8006d88:	4616      	mov	r6, r2
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d90:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d94:	4605      	mov	r5, r0
 8006d96:	b974      	cbnz	r4, 8006db6 <_dtoa_r+0x36>
 8006d98:	2010      	movs	r0, #16
 8006d9a:	f001 f95b 	bl	8008054 <malloc>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6268      	str	r0, [r5, #36]	; 0x24
 8006da2:	b920      	cbnz	r0, 8006dae <_dtoa_r+0x2e>
 8006da4:	4ba8      	ldr	r3, [pc, #672]	; (8007048 <_dtoa_r+0x2c8>)
 8006da6:	21ea      	movs	r1, #234	; 0xea
 8006da8:	48a8      	ldr	r0, [pc, #672]	; (800704c <_dtoa_r+0x2cc>)
 8006daa:	f002 fcd1 	bl	8009750 <__assert_func>
 8006dae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006db2:	6004      	str	r4, [r0, #0]
 8006db4:	60c4      	str	r4, [r0, #12]
 8006db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006db8:	6819      	ldr	r1, [r3, #0]
 8006dba:	b151      	cbz	r1, 8006dd2 <_dtoa_r+0x52>
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	604a      	str	r2, [r1, #4]
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4093      	lsls	r3, r2
 8006dc4:	608b      	str	r3, [r1, #8]
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f001 f9ac 	bl	8008124 <_Bfree>
 8006dcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	1e3b      	subs	r3, r7, #0
 8006dd4:	bfb9      	ittee	lt
 8006dd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dda:	9305      	strlt	r3, [sp, #20]
 8006ddc:	2300      	movge	r3, #0
 8006dde:	f8c8 3000 	strge.w	r3, [r8]
 8006de2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006de6:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <_dtoa_r+0x2d0>)
 8006de8:	bfbc      	itt	lt
 8006dea:	2201      	movlt	r2, #1
 8006dec:	f8c8 2000 	strlt.w	r2, [r8]
 8006df0:	ea33 0309 	bics.w	r3, r3, r9
 8006df4:	d119      	bne.n	8006e2a <_dtoa_r+0xaa>
 8006df6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e02:	4333      	orrs	r3, r6
 8006e04:	f000 8580 	beq.w	8007908 <_dtoa_r+0xb88>
 8006e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e0a:	b953      	cbnz	r3, 8006e22 <_dtoa_r+0xa2>
 8006e0c:	4b91      	ldr	r3, [pc, #580]	; (8007054 <_dtoa_r+0x2d4>)
 8006e0e:	e022      	b.n	8006e56 <_dtoa_r+0xd6>
 8006e10:	4b91      	ldr	r3, [pc, #580]	; (8007058 <_dtoa_r+0x2d8>)
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	3308      	adds	r3, #8
 8006e16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	9803      	ldr	r0, [sp, #12]
 8006e1c:	b019      	add	sp, #100	; 0x64
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	4b8c      	ldr	r3, [pc, #560]	; (8007054 <_dtoa_r+0x2d4>)
 8006e24:	9303      	str	r3, [sp, #12]
 8006e26:	3303      	adds	r3, #3
 8006e28:	e7f5      	b.n	8006e16 <_dtoa_r+0x96>
 8006e2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e2e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f7f9 fe1d 	bl	8000a78 <__aeabi_dcmpeq>
 8006e3e:	4680      	mov	r8, r0
 8006e40:	b158      	cbz	r0, 8006e5a <_dtoa_r+0xda>
 8006e42:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e44:	2301      	movs	r3, #1
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8559 	beq.w	8007902 <_dtoa_r+0xb82>
 8006e50:	4882      	ldr	r0, [pc, #520]	; (800705c <_dtoa_r+0x2dc>)
 8006e52:	6018      	str	r0, [r3, #0]
 8006e54:	1e43      	subs	r3, r0, #1
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	e7df      	b.n	8006e1a <_dtoa_r+0x9a>
 8006e5a:	ab16      	add	r3, sp, #88	; 0x58
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	ab17      	add	r3, sp, #92	; 0x5c
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4628      	mov	r0, r5
 8006e64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e68:	f001 fd02 	bl	8008870 <__d2b>
 8006e6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e70:	4683      	mov	fp, r0
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	d07e      	beq.n	8006f74 <_dtoa_r+0x1f4>
 8006e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e84:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e88:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e8c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e90:	4b73      	ldr	r3, [pc, #460]	; (8007060 <_dtoa_r+0x2e0>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	f7f9 f9d0 	bl	8000238 <__aeabi_dsub>
 8006e98:	a365      	add	r3, pc, #404	; (adr r3, 8007030 <_dtoa_r+0x2b0>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f7f9 fb83 	bl	80005a8 <__aeabi_dmul>
 8006ea2:	a365      	add	r3, pc, #404	; (adr r3, 8007038 <_dtoa_r+0x2b8>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9c8 	bl	800023c <__adddf3>
 8006eac:	4606      	mov	r6, r0
 8006eae:	4620      	mov	r0, r4
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	f7f9 fb0f 	bl	80004d4 <__aeabi_i2d>
 8006eb6:	a362      	add	r3, pc, #392	; (adr r3, 8007040 <_dtoa_r+0x2c0>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 fb74 	bl	80005a8 <__aeabi_dmul>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 f9b8 	bl	800023c <__adddf3>
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460f      	mov	r7, r1
 8006ed0:	f7f9 fe1a 	bl	8000b08 <__aeabi_d2iz>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4682      	mov	sl, r0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	f7f9 fdd5 	bl	8000a8c <__aeabi_dcmplt>
 8006ee2:	b148      	cbz	r0, 8006ef8 <_dtoa_r+0x178>
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	f7f9 faf5 	bl	80004d4 <__aeabi_i2d>
 8006eea:	4632      	mov	r2, r6
 8006eec:	463b      	mov	r3, r7
 8006eee:	f7f9 fdc3 	bl	8000a78 <__aeabi_dcmpeq>
 8006ef2:	b908      	cbnz	r0, 8006ef8 <_dtoa_r+0x178>
 8006ef4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006ef8:	f1ba 0f16 	cmp.w	sl, #22
 8006efc:	d857      	bhi.n	8006fae <_dtoa_r+0x22e>
 8006efe:	4b59      	ldr	r3, [pc, #356]	; (8007064 <_dtoa_r+0x2e4>)
 8006f00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f0c:	f7f9 fdbe 	bl	8000a8c <__aeabi_dcmplt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d04e      	beq.n	8006fb2 <_dtoa_r+0x232>
 8006f14:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f18:	2300      	movs	r3, #0
 8006f1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f1e:	1b1c      	subs	r4, r3, r4
 8006f20:	1e63      	subs	r3, r4, #1
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	bf45      	ittet	mi
 8006f26:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f2a:	9306      	strmi	r3, [sp, #24]
 8006f2c:	2300      	movpl	r3, #0
 8006f2e:	2300      	movmi	r3, #0
 8006f30:	bf4c      	ite	mi
 8006f32:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f34:	9306      	strpl	r3, [sp, #24]
 8006f36:	f1ba 0f00 	cmp.w	sl, #0
 8006f3a:	db3c      	blt.n	8006fb6 <_dtoa_r+0x236>
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f42:	4453      	add	r3, sl
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	2300      	movs	r3, #0
 8006f48:	930a      	str	r3, [sp, #40]	; 0x28
 8006f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f4c:	2b09      	cmp	r3, #9
 8006f4e:	f200 808d 	bhi.w	800706c <_dtoa_r+0x2ec>
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	bfc4      	itt	gt
 8006f56:	3b04      	subgt	r3, #4
 8006f58:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f60:	bfcc      	ite	gt
 8006f62:	2400      	movgt	r4, #0
 8006f64:	2401      	movle	r4, #1
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f200 808c 	bhi.w	8007084 <_dtoa_r+0x304>
 8006f6c:	e8df f003 	tbb	[pc, r3]
 8006f70:	5b4d4f2d 	.word	0x5b4d4f2d
 8006f74:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f78:	441c      	add	r4, r3
 8006f7a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	bfc3      	ittte	gt
 8006f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f86:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006f8a:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f8e:	f1c3 0320 	rsble	r3, r3, #32
 8006f92:	bfc6      	itte	gt
 8006f94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f98:	4318      	orrgt	r0, r3
 8006f9a:	fa06 f003 	lslle.w	r0, r6, r3
 8006f9e:	f7f9 fa89 	bl	80004b4 <__aeabi_ui2d>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006fa8:	3c01      	subs	r4, #1
 8006faa:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fac:	e770      	b.n	8006e90 <_dtoa_r+0x110>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7b3      	b.n	8006f1a <_dtoa_r+0x19a>
 8006fb2:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fb4:	e7b2      	b.n	8006f1c <_dtoa_r+0x19c>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	eba3 030a 	sub.w	r3, r3, sl
 8006fbc:	9306      	str	r3, [sp, #24]
 8006fbe:	f1ca 0300 	rsb	r3, sl, #0
 8006fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc8:	e7bf      	b.n	8006f4a <_dtoa_r+0x1ca>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	dc5a      	bgt.n	800708a <_dtoa_r+0x30a>
 8006fd4:	f04f 0901 	mov.w	r9, #1
 8006fd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8006fdc:	464b      	mov	r3, r9
 8006fde:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006fe2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6042      	str	r2, [r0, #4]
 8006fe8:	2204      	movs	r2, #4
 8006fea:	f102 0614 	add.w	r6, r2, #20
 8006fee:	429e      	cmp	r6, r3
 8006ff0:	6841      	ldr	r1, [r0, #4]
 8006ff2:	d950      	bls.n	8007096 <_dtoa_r+0x316>
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f001 f855 	bl	80080a4 <_Balloc>
 8006ffa:	9003      	str	r0, [sp, #12]
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d14e      	bne.n	800709e <_dtoa_r+0x31e>
 8007000:	4b19      	ldr	r3, [pc, #100]	; (8007068 <_dtoa_r+0x2e8>)
 8007002:	4602      	mov	r2, r0
 8007004:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007008:	e6ce      	b.n	8006da8 <_dtoa_r+0x28>
 800700a:	2301      	movs	r3, #1
 800700c:	e7de      	b.n	8006fcc <_dtoa_r+0x24c>
 800700e:	2300      	movs	r3, #0
 8007010:	930b      	str	r3, [sp, #44]	; 0x2c
 8007012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007014:	eb0a 0903 	add.w	r9, sl, r3
 8007018:	f109 0301 	add.w	r3, r9, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	bfb8      	it	lt
 8007022:	2301      	movlt	r3, #1
 8007024:	e7dd      	b.n	8006fe2 <_dtoa_r+0x262>
 8007026:	2301      	movs	r3, #1
 8007028:	e7f2      	b.n	8007010 <_dtoa_r+0x290>
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w
 8007030:	636f4361 	.word	0x636f4361
 8007034:	3fd287a7 	.word	0x3fd287a7
 8007038:	8b60c8b3 	.word	0x8b60c8b3
 800703c:	3fc68a28 	.word	0x3fc68a28
 8007040:	509f79fb 	.word	0x509f79fb
 8007044:	3fd34413 	.word	0x3fd34413
 8007048:	0800a5b6 	.word	0x0800a5b6
 800704c:	0800a5cd 	.word	0x0800a5cd
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	0800a5b2 	.word	0x0800a5b2
 8007058:	0800a5a9 	.word	0x0800a5a9
 800705c:	0800a822 	.word	0x0800a822
 8007060:	3ff80000 	.word	0x3ff80000
 8007064:	0800a738 	.word	0x0800a738
 8007068:	0800a628 	.word	0x0800a628
 800706c:	2401      	movs	r4, #1
 800706e:	2300      	movs	r3, #0
 8007070:	9322      	str	r3, [sp, #136]	; 0x88
 8007072:	940b      	str	r4, [sp, #44]	; 0x2c
 8007074:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007078:	2200      	movs	r2, #0
 800707a:	f8cd 9020 	str.w	r9, [sp, #32]
 800707e:	2312      	movs	r3, #18
 8007080:	9223      	str	r2, [sp, #140]	; 0x8c
 8007082:	e7ae      	b.n	8006fe2 <_dtoa_r+0x262>
 8007084:	2301      	movs	r3, #1
 8007086:	930b      	str	r3, [sp, #44]	; 0x2c
 8007088:	e7f4      	b.n	8007074 <_dtoa_r+0x2f4>
 800708a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800708e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007092:	464b      	mov	r3, r9
 8007094:	e7a5      	b.n	8006fe2 <_dtoa_r+0x262>
 8007096:	3101      	adds	r1, #1
 8007098:	6041      	str	r1, [r0, #4]
 800709a:	0052      	lsls	r2, r2, #1
 800709c:	e7a5      	b.n	8006fea <_dtoa_r+0x26a>
 800709e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070a0:	9a03      	ldr	r2, [sp, #12]
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	9b08      	ldr	r3, [sp, #32]
 80070a6:	2b0e      	cmp	r3, #14
 80070a8:	f200 80a8 	bhi.w	80071fc <_dtoa_r+0x47c>
 80070ac:	2c00      	cmp	r4, #0
 80070ae:	f000 80a5 	beq.w	80071fc <_dtoa_r+0x47c>
 80070b2:	f1ba 0f00 	cmp.w	sl, #0
 80070b6:	dd34      	ble.n	8007122 <_dtoa_r+0x3a2>
 80070b8:	4a9a      	ldr	r2, [pc, #616]	; (8007324 <_dtoa_r+0x5a4>)
 80070ba:	f00a 030f 	and.w	r3, sl, #15
 80070be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070c6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80070d2:	d016      	beq.n	8007102 <_dtoa_r+0x382>
 80070d4:	4b94      	ldr	r3, [pc, #592]	; (8007328 <_dtoa_r+0x5a8>)
 80070d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070de:	f7f9 fb8d 	bl	80007fc <__aeabi_ddiv>
 80070e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070e6:	f004 040f 	and.w	r4, r4, #15
 80070ea:	2703      	movs	r7, #3
 80070ec:	4e8e      	ldr	r6, [pc, #568]	; (8007328 <_dtoa_r+0x5a8>)
 80070ee:	b954      	cbnz	r4, 8007106 <_dtoa_r+0x386>
 80070f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f8:	f7f9 fb80 	bl	80007fc <__aeabi_ddiv>
 80070fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007100:	e029      	b.n	8007156 <_dtoa_r+0x3d6>
 8007102:	2702      	movs	r7, #2
 8007104:	e7f2      	b.n	80070ec <_dtoa_r+0x36c>
 8007106:	07e1      	lsls	r1, r4, #31
 8007108:	d508      	bpl.n	800711c <_dtoa_r+0x39c>
 800710a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800710e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007112:	f7f9 fa49 	bl	80005a8 <__aeabi_dmul>
 8007116:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800711a:	3701      	adds	r7, #1
 800711c:	1064      	asrs	r4, r4, #1
 800711e:	3608      	adds	r6, #8
 8007120:	e7e5      	b.n	80070ee <_dtoa_r+0x36e>
 8007122:	f000 80a5 	beq.w	8007270 <_dtoa_r+0x4f0>
 8007126:	f1ca 0400 	rsb	r4, sl, #0
 800712a:	4b7e      	ldr	r3, [pc, #504]	; (8007324 <_dtoa_r+0x5a4>)
 800712c:	4e7e      	ldr	r6, [pc, #504]	; (8007328 <_dtoa_r+0x5a8>)
 800712e:	f004 020f 	and.w	r2, r4, #15
 8007132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800713e:	f7f9 fa33 	bl	80005a8 <__aeabi_dmul>
 8007142:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007146:	1124      	asrs	r4, r4, #4
 8007148:	2300      	movs	r3, #0
 800714a:	2702      	movs	r7, #2
 800714c:	2c00      	cmp	r4, #0
 800714e:	f040 8084 	bne.w	800725a <_dtoa_r+0x4da>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1d2      	bne.n	80070fc <_dtoa_r+0x37c>
 8007156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 808b 	beq.w	8007274 <_dtoa_r+0x4f4>
 800715e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007162:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007166:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800716a:	4b70      	ldr	r3, [pc, #448]	; (800732c <_dtoa_r+0x5ac>)
 800716c:	2200      	movs	r2, #0
 800716e:	f7f9 fc8d 	bl	8000a8c <__aeabi_dcmplt>
 8007172:	2800      	cmp	r0, #0
 8007174:	d07e      	beq.n	8007274 <_dtoa_r+0x4f4>
 8007176:	9b08      	ldr	r3, [sp, #32]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d07b      	beq.n	8007274 <_dtoa_r+0x4f4>
 800717c:	f1b9 0f00 	cmp.w	r9, #0
 8007180:	dd38      	ble.n	80071f4 <_dtoa_r+0x474>
 8007182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007186:	4b6a      	ldr	r3, [pc, #424]	; (8007330 <_dtoa_r+0x5b0>)
 8007188:	2200      	movs	r2, #0
 800718a:	f7f9 fa0d 	bl	80005a8 <__aeabi_dmul>
 800718e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007192:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007196:	3701      	adds	r7, #1
 8007198:	464c      	mov	r4, r9
 800719a:	4638      	mov	r0, r7
 800719c:	f7f9 f99a 	bl	80004d4 <__aeabi_i2d>
 80071a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a4:	f7f9 fa00 	bl	80005a8 <__aeabi_dmul>
 80071a8:	4b62      	ldr	r3, [pc, #392]	; (8007334 <_dtoa_r+0x5b4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	f7f9 f846 	bl	800023c <__adddf3>
 80071b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071b8:	9611      	str	r6, [sp, #68]	; 0x44
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	d15d      	bne.n	800727a <_dtoa_r+0x4fa>
 80071be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c2:	4b5d      	ldr	r3, [pc, #372]	; (8007338 <_dtoa_r+0x5b8>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7f9 f837 	bl	8000238 <__aeabi_dsub>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071d4:	4633      	mov	r3, r6
 80071d6:	f7f9 fc77 	bl	8000ac8 <__aeabi_dcmpgt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	f040 829c 	bne.w	8007718 <_dtoa_r+0x998>
 80071e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071ea:	f7f9 fc4f 	bl	8000a8c <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	f040 8290 	bne.w	8007714 <_dtoa_r+0x994>
 80071f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80071f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f2c0 8152 	blt.w	80074a8 <_dtoa_r+0x728>
 8007204:	f1ba 0f0e 	cmp.w	sl, #14
 8007208:	f300 814e 	bgt.w	80074a8 <_dtoa_r+0x728>
 800720c:	4b45      	ldr	r3, [pc, #276]	; (8007324 <_dtoa_r+0x5a4>)
 800720e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007212:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007216:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800721a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f280 80db 	bge.w	80073d8 <_dtoa_r+0x658>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f300 80d7 	bgt.w	80073d8 <_dtoa_r+0x658>
 800722a:	f040 8272 	bne.w	8007712 <_dtoa_r+0x992>
 800722e:	4b42      	ldr	r3, [pc, #264]	; (8007338 <_dtoa_r+0x5b8>)
 8007230:	2200      	movs	r2, #0
 8007232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007236:	f7f9 f9b7 	bl	80005a8 <__aeabi_dmul>
 800723a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723e:	f7f9 fc39 	bl	8000ab4 <__aeabi_dcmpge>
 8007242:	9c08      	ldr	r4, [sp, #32]
 8007244:	4626      	mov	r6, r4
 8007246:	2800      	cmp	r0, #0
 8007248:	f040 8248 	bne.w	80076dc <_dtoa_r+0x95c>
 800724c:	9f03      	ldr	r7, [sp, #12]
 800724e:	2331      	movs	r3, #49	; 0x31
 8007250:	f807 3b01 	strb.w	r3, [r7], #1
 8007254:	f10a 0a01 	add.w	sl, sl, #1
 8007258:	e244      	b.n	80076e4 <_dtoa_r+0x964>
 800725a:	07e2      	lsls	r2, r4, #31
 800725c:	d505      	bpl.n	800726a <_dtoa_r+0x4ea>
 800725e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007262:	f7f9 f9a1 	bl	80005a8 <__aeabi_dmul>
 8007266:	3701      	adds	r7, #1
 8007268:	2301      	movs	r3, #1
 800726a:	1064      	asrs	r4, r4, #1
 800726c:	3608      	adds	r6, #8
 800726e:	e76d      	b.n	800714c <_dtoa_r+0x3cc>
 8007270:	2702      	movs	r7, #2
 8007272:	e770      	b.n	8007156 <_dtoa_r+0x3d6>
 8007274:	9c08      	ldr	r4, [sp, #32]
 8007276:	46d0      	mov	r8, sl
 8007278:	e78f      	b.n	800719a <_dtoa_r+0x41a>
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <_dtoa_r+0x5a4>)
 800727e:	4421      	add	r1, r4
 8007280:	9112      	str	r1, [sp, #72]	; 0x48
 8007282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007288:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800728c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007290:	2900      	cmp	r1, #0
 8007292:	d055      	beq.n	8007340 <_dtoa_r+0x5c0>
 8007294:	4929      	ldr	r1, [pc, #164]	; (800733c <_dtoa_r+0x5bc>)
 8007296:	2000      	movs	r0, #0
 8007298:	f7f9 fab0 	bl	80007fc <__aeabi_ddiv>
 800729c:	463b      	mov	r3, r7
 800729e:	4632      	mov	r2, r6
 80072a0:	f7f8 ffca 	bl	8000238 <__aeabi_dsub>
 80072a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072a8:	9f03      	ldr	r7, [sp, #12]
 80072aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ae:	f7f9 fc2b 	bl	8000b08 <__aeabi_d2iz>
 80072b2:	4604      	mov	r4, r0
 80072b4:	f7f9 f90e 	bl	80004d4 <__aeabi_i2d>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c0:	f7f8 ffba 	bl	8000238 <__aeabi_dsub>
 80072c4:	3430      	adds	r4, #48	; 0x30
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ce:	f807 4b01 	strb.w	r4, [r7], #1
 80072d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072d6:	f7f9 fbd9 	bl	8000a8c <__aeabi_dcmplt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d174      	bne.n	80073c8 <_dtoa_r+0x648>
 80072de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e2:	4912      	ldr	r1, [pc, #72]	; (800732c <_dtoa_r+0x5ac>)
 80072e4:	2000      	movs	r0, #0
 80072e6:	f7f8 ffa7 	bl	8000238 <__aeabi_dsub>
 80072ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072ee:	f7f9 fbcd 	bl	8000a8c <__aeabi_dcmplt>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f040 80b7 	bne.w	8007466 <_dtoa_r+0x6e6>
 80072f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072fa:	429f      	cmp	r7, r3
 80072fc:	f43f af7a 	beq.w	80071f4 <_dtoa_r+0x474>
 8007300:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <_dtoa_r+0x5b0>)
 8007306:	2200      	movs	r2, #0
 8007308:	f7f9 f94e 	bl	80005a8 <__aeabi_dmul>
 800730c:	4b08      	ldr	r3, [pc, #32]	; (8007330 <_dtoa_r+0x5b0>)
 800730e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007312:	2200      	movs	r2, #0
 8007314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007318:	f7f9 f946 	bl	80005a8 <__aeabi_dmul>
 800731c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007320:	e7c3      	b.n	80072aa <_dtoa_r+0x52a>
 8007322:	bf00      	nop
 8007324:	0800a738 	.word	0x0800a738
 8007328:	0800a710 	.word	0x0800a710
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	40240000 	.word	0x40240000
 8007334:	401c0000 	.word	0x401c0000
 8007338:	40140000 	.word	0x40140000
 800733c:	3fe00000 	.word	0x3fe00000
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f9 f930 	bl	80005a8 <__aeabi_dmul>
 8007348:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800734c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800734e:	9c03      	ldr	r4, [sp, #12]
 8007350:	9314      	str	r3, [sp, #80]	; 0x50
 8007352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007356:	f7f9 fbd7 	bl	8000b08 <__aeabi_d2iz>
 800735a:	9015      	str	r0, [sp, #84]	; 0x54
 800735c:	f7f9 f8ba 	bl	80004d4 <__aeabi_i2d>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007368:	f7f8 ff66 	bl	8000238 <__aeabi_dsub>
 800736c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800736e:	3330      	adds	r3, #48	; 0x30
 8007370:	f804 3b01 	strb.w	r3, [r4], #1
 8007374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007376:	429c      	cmp	r4, r3
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	d124      	bne.n	80073cc <_dtoa_r+0x64c>
 8007382:	4ba4      	ldr	r3, [pc, #656]	; (8007614 <_dtoa_r+0x894>)
 8007384:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007388:	f7f8 ff58 	bl	800023c <__adddf3>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fb98 	bl	8000ac8 <__aeabi_dcmpgt>
 8007398:	2800      	cmp	r0, #0
 800739a:	d163      	bne.n	8007464 <_dtoa_r+0x6e4>
 800739c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073a0:	499c      	ldr	r1, [pc, #624]	; (8007614 <_dtoa_r+0x894>)
 80073a2:	2000      	movs	r0, #0
 80073a4:	f7f8 ff48 	bl	8000238 <__aeabi_dsub>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fb6c 	bl	8000a8c <__aeabi_dcmplt>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	f43f af1d 	beq.w	80071f4 <_dtoa_r+0x474>
 80073ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073bc:	1e7b      	subs	r3, r7, #1
 80073be:	9314      	str	r3, [sp, #80]	; 0x50
 80073c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	d0f8      	beq.n	80073ba <_dtoa_r+0x63a>
 80073c8:	46c2      	mov	sl, r8
 80073ca:	e03b      	b.n	8007444 <_dtoa_r+0x6c4>
 80073cc:	4b92      	ldr	r3, [pc, #584]	; (8007618 <_dtoa_r+0x898>)
 80073ce:	f7f9 f8eb 	bl	80005a8 <__aeabi_dmul>
 80073d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073d6:	e7bc      	b.n	8007352 <_dtoa_r+0x5d2>
 80073d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073dc:	9f03      	ldr	r7, [sp, #12]
 80073de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f9 fa09 	bl	80007fc <__aeabi_ddiv>
 80073ea:	f7f9 fb8d 	bl	8000b08 <__aeabi_d2iz>
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7f9 f870 	bl	80004d4 <__aeabi_i2d>
 80073f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073f8:	f7f9 f8d6 	bl	80005a8 <__aeabi_dmul>
 80073fc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4640      	mov	r0, r8
 8007406:	4649      	mov	r1, r9
 8007408:	f7f8 ff16 	bl	8000238 <__aeabi_dsub>
 800740c:	f807 6b01 	strb.w	r6, [r7], #1
 8007410:	9e03      	ldr	r6, [sp, #12]
 8007412:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007416:	1bbe      	subs	r6, r7, r6
 8007418:	45b4      	cmp	ip, r6
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	d136      	bne.n	800748e <_dtoa_r+0x70e>
 8007420:	f7f8 ff0c 	bl	800023c <__adddf3>
 8007424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007428:	4680      	mov	r8, r0
 800742a:	4689      	mov	r9, r1
 800742c:	f7f9 fb4c 	bl	8000ac8 <__aeabi_dcmpgt>
 8007430:	bb58      	cbnz	r0, 800748a <_dtoa_r+0x70a>
 8007432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f9 fb1d 	bl	8000a78 <__aeabi_dcmpeq>
 800743e:	b108      	cbz	r0, 8007444 <_dtoa_r+0x6c4>
 8007440:	07e1      	lsls	r1, r4, #31
 8007442:	d422      	bmi.n	800748a <_dtoa_r+0x70a>
 8007444:	4628      	mov	r0, r5
 8007446:	4659      	mov	r1, fp
 8007448:	f000 fe6c 	bl	8008124 <_Bfree>
 800744c:	2300      	movs	r3, #0
 800744e:	703b      	strb	r3, [r7, #0]
 8007450:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007452:	f10a 0001 	add.w	r0, sl, #1
 8007456:	6018      	str	r0, [r3, #0]
 8007458:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800745a:	2b00      	cmp	r3, #0
 800745c:	f43f acdd 	beq.w	8006e1a <_dtoa_r+0x9a>
 8007460:	601f      	str	r7, [r3, #0]
 8007462:	e4da      	b.n	8006e1a <_dtoa_r+0x9a>
 8007464:	4627      	mov	r7, r4
 8007466:	463b      	mov	r3, r7
 8007468:	461f      	mov	r7, r3
 800746a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746e:	2a39      	cmp	r2, #57	; 0x39
 8007470:	d107      	bne.n	8007482 <_dtoa_r+0x702>
 8007472:	9a03      	ldr	r2, [sp, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d1f7      	bne.n	8007468 <_dtoa_r+0x6e8>
 8007478:	9903      	ldr	r1, [sp, #12]
 800747a:	2230      	movs	r2, #48	; 0x30
 800747c:	f108 0801 	add.w	r8, r8, #1
 8007480:	700a      	strb	r2, [r1, #0]
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	3201      	adds	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e79e      	b.n	80073c8 <_dtoa_r+0x648>
 800748a:	46d0      	mov	r8, sl
 800748c:	e7eb      	b.n	8007466 <_dtoa_r+0x6e6>
 800748e:	4b62      	ldr	r3, [pc, #392]	; (8007618 <_dtoa_r+0x898>)
 8007490:	2200      	movs	r2, #0
 8007492:	f7f9 f889 	bl	80005a8 <__aeabi_dmul>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4680      	mov	r8, r0
 800749c:	4689      	mov	r9, r1
 800749e:	f7f9 faeb 	bl	8000a78 <__aeabi_dcmpeq>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d09b      	beq.n	80073de <_dtoa_r+0x65e>
 80074a6:	e7cd      	b.n	8007444 <_dtoa_r+0x6c4>
 80074a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	f000 80d0 	beq.w	8007650 <_dtoa_r+0x8d0>
 80074b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074b2:	2a01      	cmp	r2, #1
 80074b4:	f300 80b2 	bgt.w	800761c <_dtoa_r+0x89c>
 80074b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	f000 80a6 	beq.w	800760c <_dtoa_r+0x88c>
 80074c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074c6:	9f06      	ldr	r7, [sp, #24]
 80074c8:	9a06      	ldr	r2, [sp, #24]
 80074ca:	441a      	add	r2, r3
 80074cc:	9206      	str	r2, [sp, #24]
 80074ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d0:	2101      	movs	r1, #1
 80074d2:	441a      	add	r2, r3
 80074d4:	4628      	mov	r0, r5
 80074d6:	9209      	str	r2, [sp, #36]	; 0x24
 80074d8:	f000 ff24 	bl	8008324 <__i2b>
 80074dc:	4606      	mov	r6, r0
 80074de:	2f00      	cmp	r7, #0
 80074e0:	dd0c      	ble.n	80074fc <_dtoa_r+0x77c>
 80074e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd09      	ble.n	80074fc <_dtoa_r+0x77c>
 80074e8:	42bb      	cmp	r3, r7
 80074ea:	9a06      	ldr	r2, [sp, #24]
 80074ec:	bfa8      	it	ge
 80074ee:	463b      	movge	r3, r7
 80074f0:	1ad2      	subs	r2, r2, r3
 80074f2:	9206      	str	r2, [sp, #24]
 80074f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f6:	1aff      	subs	r7, r7, r3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	9309      	str	r3, [sp, #36]	; 0x24
 80074fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fe:	b1f3      	cbz	r3, 800753e <_dtoa_r+0x7be>
 8007500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80a8 	beq.w	8007658 <_dtoa_r+0x8d8>
 8007508:	2c00      	cmp	r4, #0
 800750a:	dd10      	ble.n	800752e <_dtoa_r+0x7ae>
 800750c:	4631      	mov	r1, r6
 800750e:	4622      	mov	r2, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f000 ffc5 	bl	80084a0 <__pow5mult>
 8007516:	465a      	mov	r2, fp
 8007518:	4601      	mov	r1, r0
 800751a:	4606      	mov	r6, r0
 800751c:	4628      	mov	r0, r5
 800751e:	f000 ff17 	bl	8008350 <__multiply>
 8007522:	4659      	mov	r1, fp
 8007524:	4680      	mov	r8, r0
 8007526:	4628      	mov	r0, r5
 8007528:	f000 fdfc 	bl	8008124 <_Bfree>
 800752c:	46c3      	mov	fp, r8
 800752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007530:	1b1a      	subs	r2, r3, r4
 8007532:	d004      	beq.n	800753e <_dtoa_r+0x7be>
 8007534:	4659      	mov	r1, fp
 8007536:	4628      	mov	r0, r5
 8007538:	f000 ffb2 	bl	80084a0 <__pow5mult>
 800753c:	4683      	mov	fp, r0
 800753e:	2101      	movs	r1, #1
 8007540:	4628      	mov	r0, r5
 8007542:	f000 feef 	bl	8008324 <__i2b>
 8007546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	f340 8086 	ble.w	800765c <_dtoa_r+0x8dc>
 8007550:	461a      	mov	r2, r3
 8007552:	4601      	mov	r1, r0
 8007554:	4628      	mov	r0, r5
 8007556:	f000 ffa3 	bl	80084a0 <__pow5mult>
 800755a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800755c:	2b01      	cmp	r3, #1
 800755e:	4604      	mov	r4, r0
 8007560:	dd7f      	ble.n	8007662 <_dtoa_r+0x8e2>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800756c:	6918      	ldr	r0, [r3, #16]
 800756e:	f000 fe8b 	bl	8008288 <__hi0bits>
 8007572:	f1c0 0020 	rsb	r0, r0, #32
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	4418      	add	r0, r3
 800757a:	f010 001f 	ands.w	r0, r0, #31
 800757e:	f000 8092 	beq.w	80076a6 <_dtoa_r+0x926>
 8007582:	f1c0 0320 	rsb	r3, r0, #32
 8007586:	2b04      	cmp	r3, #4
 8007588:	f340 808a 	ble.w	80076a0 <_dtoa_r+0x920>
 800758c:	f1c0 001c 	rsb	r0, r0, #28
 8007590:	9b06      	ldr	r3, [sp, #24]
 8007592:	4403      	add	r3, r0
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007598:	4403      	add	r3, r0
 800759a:	4407      	add	r7, r0
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	9b06      	ldr	r3, [sp, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dd05      	ble.n	80075b0 <_dtoa_r+0x830>
 80075a4:	4659      	mov	r1, fp
 80075a6:	461a      	mov	r2, r3
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 ffd3 	bl	8008554 <__lshift>
 80075ae:	4683      	mov	fp, r0
 80075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dd05      	ble.n	80075c2 <_dtoa_r+0x842>
 80075b6:	4621      	mov	r1, r4
 80075b8:	461a      	mov	r2, r3
 80075ba:	4628      	mov	r0, r5
 80075bc:	f000 ffca 	bl	8008554 <__lshift>
 80075c0:	4604      	mov	r4, r0
 80075c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d070      	beq.n	80076aa <_dtoa_r+0x92a>
 80075c8:	4621      	mov	r1, r4
 80075ca:	4658      	mov	r0, fp
 80075cc:	f001 f832 	bl	8008634 <__mcmp>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	da6a      	bge.n	80076aa <_dtoa_r+0x92a>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4659      	mov	r1, fp
 80075d8:	220a      	movs	r2, #10
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 fdc4 	bl	8008168 <__multadd>
 80075e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80075e6:	4683      	mov	fp, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8194 	beq.w	8007916 <_dtoa_r+0xb96>
 80075ee:	4631      	mov	r1, r6
 80075f0:	2300      	movs	r3, #0
 80075f2:	220a      	movs	r2, #10
 80075f4:	4628      	mov	r0, r5
 80075f6:	f000 fdb7 	bl	8008168 <__multadd>
 80075fa:	f1b9 0f00 	cmp.w	r9, #0
 80075fe:	4606      	mov	r6, r0
 8007600:	f300 8093 	bgt.w	800772a <_dtoa_r+0x9aa>
 8007604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007606:	2b02      	cmp	r3, #2
 8007608:	dc57      	bgt.n	80076ba <_dtoa_r+0x93a>
 800760a:	e08e      	b.n	800772a <_dtoa_r+0x9aa>
 800760c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800760e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007612:	e757      	b.n	80074c4 <_dtoa_r+0x744>
 8007614:	3fe00000 	.word	0x3fe00000
 8007618:	40240000 	.word	0x40240000
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	1e5c      	subs	r4, r3, #1
 8007620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007622:	42a3      	cmp	r3, r4
 8007624:	bfbf      	itttt	lt
 8007626:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007628:	940a      	strlt	r4, [sp, #40]	; 0x28
 800762a:	1ae2      	sublt	r2, r4, r3
 800762c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800762e:	bfb6      	itet	lt
 8007630:	189b      	addlt	r3, r3, r2
 8007632:	1b1c      	subge	r4, r3, r4
 8007634:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	bfb8      	it	lt
 800763a:	2400      	movlt	r4, #0
 800763c:	2b00      	cmp	r3, #0
 800763e:	bfb9      	ittee	lt
 8007640:	9b06      	ldrlt	r3, [sp, #24]
 8007642:	9a08      	ldrlt	r2, [sp, #32]
 8007644:	9f06      	ldrge	r7, [sp, #24]
 8007646:	9b08      	ldrge	r3, [sp, #32]
 8007648:	bfbc      	itt	lt
 800764a:	1a9f      	sublt	r7, r3, r2
 800764c:	2300      	movlt	r3, #0
 800764e:	e73b      	b.n	80074c8 <_dtoa_r+0x748>
 8007650:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007652:	9f06      	ldr	r7, [sp, #24]
 8007654:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007656:	e742      	b.n	80074de <_dtoa_r+0x75e>
 8007658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800765a:	e76b      	b.n	8007534 <_dtoa_r+0x7b4>
 800765c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800765e:	2b01      	cmp	r3, #1
 8007660:	dc19      	bgt.n	8007696 <_dtoa_r+0x916>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	b9bb      	cbnz	r3, 8007696 <_dtoa_r+0x916>
 8007666:	9b05      	ldr	r3, [sp, #20]
 8007668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800766c:	b99b      	cbnz	r3, 8007696 <_dtoa_r+0x916>
 800766e:	9b05      	ldr	r3, [sp, #20]
 8007670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007674:	0d1b      	lsrs	r3, r3, #20
 8007676:	051b      	lsls	r3, r3, #20
 8007678:	b183      	cbz	r3, 800769c <_dtoa_r+0x91c>
 800767a:	9b06      	ldr	r3, [sp, #24]
 800767c:	3301      	adds	r3, #1
 800767e:	9306      	str	r3, [sp, #24]
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	3301      	adds	r3, #1
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	f04f 0801 	mov.w	r8, #1
 800768a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f af6a 	bne.w	8007566 <_dtoa_r+0x7e6>
 8007692:	2001      	movs	r0, #1
 8007694:	e76f      	b.n	8007576 <_dtoa_r+0x7f6>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	e7f6      	b.n	800768a <_dtoa_r+0x90a>
 800769c:	4698      	mov	r8, r3
 800769e:	e7f4      	b.n	800768a <_dtoa_r+0x90a>
 80076a0:	f43f af7d 	beq.w	800759e <_dtoa_r+0x81e>
 80076a4:	4618      	mov	r0, r3
 80076a6:	301c      	adds	r0, #28
 80076a8:	e772      	b.n	8007590 <_dtoa_r+0x810>
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	dc36      	bgt.n	800771e <_dtoa_r+0x99e>
 80076b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	dd33      	ble.n	800771e <_dtoa_r+0x99e>
 80076b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076ba:	f1b9 0f00 	cmp.w	r9, #0
 80076be:	d10d      	bne.n	80076dc <_dtoa_r+0x95c>
 80076c0:	4621      	mov	r1, r4
 80076c2:	464b      	mov	r3, r9
 80076c4:	2205      	movs	r2, #5
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 fd4e 	bl	8008168 <__multadd>
 80076cc:	4601      	mov	r1, r0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4658      	mov	r0, fp
 80076d2:	f000 ffaf 	bl	8008634 <__mcmp>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f73f adb8 	bgt.w	800724c <_dtoa_r+0x4cc>
 80076dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076de:	9f03      	ldr	r7, [sp, #12]
 80076e0:	ea6f 0a03 	mvn.w	sl, r3
 80076e4:	f04f 0800 	mov.w	r8, #0
 80076e8:	4621      	mov	r1, r4
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fd1a 	bl	8008124 <_Bfree>
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	f43f aea7 	beq.w	8007444 <_dtoa_r+0x6c4>
 80076f6:	f1b8 0f00 	cmp.w	r8, #0
 80076fa:	d005      	beq.n	8007708 <_dtoa_r+0x988>
 80076fc:	45b0      	cmp	r8, r6
 80076fe:	d003      	beq.n	8007708 <_dtoa_r+0x988>
 8007700:	4641      	mov	r1, r8
 8007702:	4628      	mov	r0, r5
 8007704:	f000 fd0e 	bl	8008124 <_Bfree>
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	f000 fd0a 	bl	8008124 <_Bfree>
 8007710:	e698      	b.n	8007444 <_dtoa_r+0x6c4>
 8007712:	2400      	movs	r4, #0
 8007714:	4626      	mov	r6, r4
 8007716:	e7e1      	b.n	80076dc <_dtoa_r+0x95c>
 8007718:	46c2      	mov	sl, r8
 800771a:	4626      	mov	r6, r4
 800771c:	e596      	b.n	800724c <_dtoa_r+0x4cc>
 800771e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80fd 	beq.w	8007924 <_dtoa_r+0xba4>
 800772a:	2f00      	cmp	r7, #0
 800772c:	dd05      	ble.n	800773a <_dtoa_r+0x9ba>
 800772e:	4631      	mov	r1, r6
 8007730:	463a      	mov	r2, r7
 8007732:	4628      	mov	r0, r5
 8007734:	f000 ff0e 	bl	8008554 <__lshift>
 8007738:	4606      	mov	r6, r0
 800773a:	f1b8 0f00 	cmp.w	r8, #0
 800773e:	d05c      	beq.n	80077fa <_dtoa_r+0xa7a>
 8007740:	6871      	ldr	r1, [r6, #4]
 8007742:	4628      	mov	r0, r5
 8007744:	f000 fcae 	bl	80080a4 <_Balloc>
 8007748:	4607      	mov	r7, r0
 800774a:	b928      	cbnz	r0, 8007758 <_dtoa_r+0x9d8>
 800774c:	4b80      	ldr	r3, [pc, #512]	; (8007950 <_dtoa_r+0xbd0>)
 800774e:	4602      	mov	r2, r0
 8007750:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007754:	f7ff bb28 	b.w	8006da8 <_dtoa_r+0x28>
 8007758:	6932      	ldr	r2, [r6, #16]
 800775a:	3202      	adds	r2, #2
 800775c:	0092      	lsls	r2, r2, #2
 800775e:	f106 010c 	add.w	r1, r6, #12
 8007762:	300c      	adds	r0, #12
 8007764:	f000 fc90 	bl	8008088 <memcpy>
 8007768:	2201      	movs	r2, #1
 800776a:	4639      	mov	r1, r7
 800776c:	4628      	mov	r0, r5
 800776e:	f000 fef1 	bl	8008554 <__lshift>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	9308      	str	r3, [sp, #32]
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	444b      	add	r3, r9
 800777c:	930a      	str	r3, [sp, #40]	; 0x28
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	46b0      	mov	r8, r6
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	4606      	mov	r6, r0
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	4621      	mov	r1, r4
 800778e:	3b01      	subs	r3, #1
 8007790:	4658      	mov	r0, fp
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	f7ff fa6a 	bl	8006c6c <quorem>
 8007798:	4603      	mov	r3, r0
 800779a:	3330      	adds	r3, #48	; 0x30
 800779c:	9006      	str	r0, [sp, #24]
 800779e:	4641      	mov	r1, r8
 80077a0:	4658      	mov	r0, fp
 80077a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a4:	f000 ff46 	bl	8008634 <__mcmp>
 80077a8:	4632      	mov	r2, r6
 80077aa:	4681      	mov	r9, r0
 80077ac:	4621      	mov	r1, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 ff5c 	bl	800866c <__mdiff>
 80077b4:	68c2      	ldr	r2, [r0, #12]
 80077b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b8:	4607      	mov	r7, r0
 80077ba:	bb02      	cbnz	r2, 80077fe <_dtoa_r+0xa7e>
 80077bc:	4601      	mov	r1, r0
 80077be:	4658      	mov	r0, fp
 80077c0:	f000 ff38 	bl	8008634 <__mcmp>
 80077c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c6:	4602      	mov	r2, r0
 80077c8:	4639      	mov	r1, r7
 80077ca:	4628      	mov	r0, r5
 80077cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80077d0:	f000 fca8 	bl	8008124 <_Bfree>
 80077d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d8:	9f08      	ldr	r7, [sp, #32]
 80077da:	ea43 0102 	orr.w	r1, r3, r2
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	430b      	orrs	r3, r1
 80077e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e4:	d10d      	bne.n	8007802 <_dtoa_r+0xa82>
 80077e6:	2b39      	cmp	r3, #57	; 0x39
 80077e8:	d029      	beq.n	800783e <_dtoa_r+0xabe>
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	dd01      	ble.n	80077f4 <_dtoa_r+0xa74>
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	3331      	adds	r3, #49	; 0x31
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	7013      	strb	r3, [r2, #0]
 80077f8:	e776      	b.n	80076e8 <_dtoa_r+0x968>
 80077fa:	4630      	mov	r0, r6
 80077fc:	e7b9      	b.n	8007772 <_dtoa_r+0x9f2>
 80077fe:	2201      	movs	r2, #1
 8007800:	e7e2      	b.n	80077c8 <_dtoa_r+0xa48>
 8007802:	f1b9 0f00 	cmp.w	r9, #0
 8007806:	db06      	blt.n	8007816 <_dtoa_r+0xa96>
 8007808:	9922      	ldr	r1, [sp, #136]	; 0x88
 800780a:	ea41 0909 	orr.w	r9, r1, r9
 800780e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007810:	ea59 0101 	orrs.w	r1, r9, r1
 8007814:	d120      	bne.n	8007858 <_dtoa_r+0xad8>
 8007816:	2a00      	cmp	r2, #0
 8007818:	ddec      	ble.n	80077f4 <_dtoa_r+0xa74>
 800781a:	4659      	mov	r1, fp
 800781c:	2201      	movs	r2, #1
 800781e:	4628      	mov	r0, r5
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	f000 fe97 	bl	8008554 <__lshift>
 8007826:	4621      	mov	r1, r4
 8007828:	4683      	mov	fp, r0
 800782a:	f000 ff03 	bl	8008634 <__mcmp>
 800782e:	2800      	cmp	r0, #0
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	dc02      	bgt.n	800783a <_dtoa_r+0xaba>
 8007834:	d1de      	bne.n	80077f4 <_dtoa_r+0xa74>
 8007836:	07da      	lsls	r2, r3, #31
 8007838:	d5dc      	bpl.n	80077f4 <_dtoa_r+0xa74>
 800783a:	2b39      	cmp	r3, #57	; 0x39
 800783c:	d1d8      	bne.n	80077f0 <_dtoa_r+0xa70>
 800783e:	9a04      	ldr	r2, [sp, #16]
 8007840:	2339      	movs	r3, #57	; 0x39
 8007842:	7013      	strb	r3, [r2, #0]
 8007844:	463b      	mov	r3, r7
 8007846:	461f      	mov	r7, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800784e:	2a39      	cmp	r2, #57	; 0x39
 8007850:	d050      	beq.n	80078f4 <_dtoa_r+0xb74>
 8007852:	3201      	adds	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e747      	b.n	80076e8 <_dtoa_r+0x968>
 8007858:	2a00      	cmp	r2, #0
 800785a:	dd03      	ble.n	8007864 <_dtoa_r+0xae4>
 800785c:	2b39      	cmp	r3, #57	; 0x39
 800785e:	d0ee      	beq.n	800783e <_dtoa_r+0xabe>
 8007860:	3301      	adds	r3, #1
 8007862:	e7c7      	b.n	80077f4 <_dtoa_r+0xa74>
 8007864:	9a08      	ldr	r2, [sp, #32]
 8007866:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007868:	f802 3c01 	strb.w	r3, [r2, #-1]
 800786c:	428a      	cmp	r2, r1
 800786e:	d02a      	beq.n	80078c6 <_dtoa_r+0xb46>
 8007870:	4659      	mov	r1, fp
 8007872:	2300      	movs	r3, #0
 8007874:	220a      	movs	r2, #10
 8007876:	4628      	mov	r0, r5
 8007878:	f000 fc76 	bl	8008168 <__multadd>
 800787c:	45b0      	cmp	r8, r6
 800787e:	4683      	mov	fp, r0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	f04f 020a 	mov.w	r2, #10
 8007888:	4641      	mov	r1, r8
 800788a:	4628      	mov	r0, r5
 800788c:	d107      	bne.n	800789e <_dtoa_r+0xb1e>
 800788e:	f000 fc6b 	bl	8008168 <__multadd>
 8007892:	4680      	mov	r8, r0
 8007894:	4606      	mov	r6, r0
 8007896:	9b08      	ldr	r3, [sp, #32]
 8007898:	3301      	adds	r3, #1
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	e775      	b.n	800778a <_dtoa_r+0xa0a>
 800789e:	f000 fc63 	bl	8008168 <__multadd>
 80078a2:	4631      	mov	r1, r6
 80078a4:	4680      	mov	r8, r0
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4628      	mov	r0, r5
 80078ac:	f000 fc5c 	bl	8008168 <__multadd>
 80078b0:	4606      	mov	r6, r0
 80078b2:	e7f0      	b.n	8007896 <_dtoa_r+0xb16>
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	9a03      	ldr	r2, [sp, #12]
 80078ba:	bfcc      	ite	gt
 80078bc:	464f      	movgt	r7, r9
 80078be:	2701      	movle	r7, #1
 80078c0:	4417      	add	r7, r2
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	4659      	mov	r1, fp
 80078c8:	2201      	movs	r2, #1
 80078ca:	4628      	mov	r0, r5
 80078cc:	9308      	str	r3, [sp, #32]
 80078ce:	f000 fe41 	bl	8008554 <__lshift>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4683      	mov	fp, r0
 80078d6:	f000 fead 	bl	8008634 <__mcmp>
 80078da:	2800      	cmp	r0, #0
 80078dc:	dcb2      	bgt.n	8007844 <_dtoa_r+0xac4>
 80078de:	d102      	bne.n	80078e6 <_dtoa_r+0xb66>
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	07db      	lsls	r3, r3, #31
 80078e4:	d4ae      	bmi.n	8007844 <_dtoa_r+0xac4>
 80078e6:	463b      	mov	r3, r7
 80078e8:	461f      	mov	r7, r3
 80078ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ee:	2a30      	cmp	r2, #48	; 0x30
 80078f0:	d0fa      	beq.n	80078e8 <_dtoa_r+0xb68>
 80078f2:	e6f9      	b.n	80076e8 <_dtoa_r+0x968>
 80078f4:	9a03      	ldr	r2, [sp, #12]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d1a5      	bne.n	8007846 <_dtoa_r+0xac6>
 80078fa:	f10a 0a01 	add.w	sl, sl, #1
 80078fe:	2331      	movs	r3, #49	; 0x31
 8007900:	e779      	b.n	80077f6 <_dtoa_r+0xa76>
 8007902:	4b14      	ldr	r3, [pc, #80]	; (8007954 <_dtoa_r+0xbd4>)
 8007904:	f7ff baa7 	b.w	8006e56 <_dtoa_r+0xd6>
 8007908:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800790a:	2b00      	cmp	r3, #0
 800790c:	f47f aa80 	bne.w	8006e10 <_dtoa_r+0x90>
 8007910:	4b11      	ldr	r3, [pc, #68]	; (8007958 <_dtoa_r+0xbd8>)
 8007912:	f7ff baa0 	b.w	8006e56 <_dtoa_r+0xd6>
 8007916:	f1b9 0f00 	cmp.w	r9, #0
 800791a:	dc03      	bgt.n	8007924 <_dtoa_r+0xba4>
 800791c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800791e:	2b02      	cmp	r3, #2
 8007920:	f73f aecb 	bgt.w	80076ba <_dtoa_r+0x93a>
 8007924:	9f03      	ldr	r7, [sp, #12]
 8007926:	4621      	mov	r1, r4
 8007928:	4658      	mov	r0, fp
 800792a:	f7ff f99f 	bl	8006c6c <quorem>
 800792e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007932:	f807 3b01 	strb.w	r3, [r7], #1
 8007936:	9a03      	ldr	r2, [sp, #12]
 8007938:	1aba      	subs	r2, r7, r2
 800793a:	4591      	cmp	r9, r2
 800793c:	ddba      	ble.n	80078b4 <_dtoa_r+0xb34>
 800793e:	4659      	mov	r1, fp
 8007940:	2300      	movs	r3, #0
 8007942:	220a      	movs	r2, #10
 8007944:	4628      	mov	r0, r5
 8007946:	f000 fc0f 	bl	8008168 <__multadd>
 800794a:	4683      	mov	fp, r0
 800794c:	e7eb      	b.n	8007926 <_dtoa_r+0xba6>
 800794e:	bf00      	nop
 8007950:	0800a628 	.word	0x0800a628
 8007954:	0800a821 	.word	0x0800a821
 8007958:	0800a5a9 	.word	0x0800a5a9

0800795c <rshift>:
 800795c:	6903      	ldr	r3, [r0, #16]
 800795e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007966:	ea4f 1261 	mov.w	r2, r1, asr #5
 800796a:	f100 0414 	add.w	r4, r0, #20
 800796e:	dd45      	ble.n	80079fc <rshift+0xa0>
 8007970:	f011 011f 	ands.w	r1, r1, #31
 8007974:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007978:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800797c:	d10c      	bne.n	8007998 <rshift+0x3c>
 800797e:	f100 0710 	add.w	r7, r0, #16
 8007982:	4629      	mov	r1, r5
 8007984:	42b1      	cmp	r1, r6
 8007986:	d334      	bcc.n	80079f2 <rshift+0x96>
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	1eea      	subs	r2, r5, #3
 800798e:	4296      	cmp	r6, r2
 8007990:	bf38      	it	cc
 8007992:	2300      	movcc	r3, #0
 8007994:	4423      	add	r3, r4
 8007996:	e015      	b.n	80079c4 <rshift+0x68>
 8007998:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800799c:	f1c1 0820 	rsb	r8, r1, #32
 80079a0:	40cf      	lsrs	r7, r1
 80079a2:	f105 0e04 	add.w	lr, r5, #4
 80079a6:	46a1      	mov	r9, r4
 80079a8:	4576      	cmp	r6, lr
 80079aa:	46f4      	mov	ip, lr
 80079ac:	d815      	bhi.n	80079da <rshift+0x7e>
 80079ae:	1a9a      	subs	r2, r3, r2
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	3a04      	subs	r2, #4
 80079b4:	3501      	adds	r5, #1
 80079b6:	42ae      	cmp	r6, r5
 80079b8:	bf38      	it	cc
 80079ba:	2200      	movcc	r2, #0
 80079bc:	18a3      	adds	r3, r4, r2
 80079be:	50a7      	str	r7, [r4, r2]
 80079c0:	b107      	cbz	r7, 80079c4 <rshift+0x68>
 80079c2:	3304      	adds	r3, #4
 80079c4:	1b1a      	subs	r2, r3, r4
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079cc:	bf08      	it	eq
 80079ce:	2300      	moveq	r3, #0
 80079d0:	6102      	str	r2, [r0, #16]
 80079d2:	bf08      	it	eq
 80079d4:	6143      	streq	r3, [r0, #20]
 80079d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079da:	f8dc c000 	ldr.w	ip, [ip]
 80079de:	fa0c fc08 	lsl.w	ip, ip, r8
 80079e2:	ea4c 0707 	orr.w	r7, ip, r7
 80079e6:	f849 7b04 	str.w	r7, [r9], #4
 80079ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079ee:	40cf      	lsrs	r7, r1
 80079f0:	e7da      	b.n	80079a8 <rshift+0x4c>
 80079f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80079f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80079fa:	e7c3      	b.n	8007984 <rshift+0x28>
 80079fc:	4623      	mov	r3, r4
 80079fe:	e7e1      	b.n	80079c4 <rshift+0x68>

08007a00 <__hexdig_fun>:
 8007a00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d802      	bhi.n	8007a0e <__hexdig_fun+0xe>
 8007a08:	3820      	subs	r0, #32
 8007a0a:	b2c0      	uxtb	r0, r0
 8007a0c:	4770      	bx	lr
 8007a0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d801      	bhi.n	8007a1a <__hexdig_fun+0x1a>
 8007a16:	3847      	subs	r0, #71	; 0x47
 8007a18:	e7f7      	b.n	8007a0a <__hexdig_fun+0xa>
 8007a1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d801      	bhi.n	8007a26 <__hexdig_fun+0x26>
 8007a22:	3827      	subs	r0, #39	; 0x27
 8007a24:	e7f1      	b.n	8007a0a <__hexdig_fun+0xa>
 8007a26:	2000      	movs	r0, #0
 8007a28:	4770      	bx	lr
	...

08007a2c <__gethex>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	b08b      	sub	sp, #44	; 0x2c
 8007a32:	468b      	mov	fp, r1
 8007a34:	9305      	str	r3, [sp, #20]
 8007a36:	4bb2      	ldr	r3, [pc, #712]	; (8007d00 <__gethex+0x2d4>)
 8007a38:	9002      	str	r0, [sp, #8]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	4690      	mov	r8, r2
 8007a42:	f7f8 fb9d 	bl	8000180 <strlen>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	f8db 2000 	ldr.w	r2, [fp]
 8007a4c:	4403      	add	r3, r0
 8007a4e:	4682      	mov	sl, r0
 8007a50:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a54:	9306      	str	r3, [sp, #24]
 8007a56:	1c93      	adds	r3, r2, #2
 8007a58:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a5c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a60:	32fe      	adds	r2, #254	; 0xfe
 8007a62:	18d1      	adds	r1, r2, r3
 8007a64:	461f      	mov	r7, r3
 8007a66:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a6a:	9101      	str	r1, [sp, #4]
 8007a6c:	2830      	cmp	r0, #48	; 0x30
 8007a6e:	d0f8      	beq.n	8007a62 <__gethex+0x36>
 8007a70:	f7ff ffc6 	bl	8007a00 <__hexdig_fun>
 8007a74:	4604      	mov	r4, r0
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d13a      	bne.n	8007af0 <__gethex+0xc4>
 8007a7a:	9903      	ldr	r1, [sp, #12]
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f001 fd96 	bl	80095b0 <strncmp>
 8007a84:	4605      	mov	r5, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d166      	bne.n	8007b58 <__gethex+0x12c>
 8007a8a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007a8e:	eb07 060a 	add.w	r6, r7, sl
 8007a92:	f7ff ffb5 	bl	8007a00 <__hexdig_fun>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d060      	beq.n	8007b5c <__gethex+0x130>
 8007a9a:	4633      	mov	r3, r6
 8007a9c:	7818      	ldrb	r0, [r3, #0]
 8007a9e:	2830      	cmp	r0, #48	; 0x30
 8007aa0:	461f      	mov	r7, r3
 8007aa2:	f103 0301 	add.w	r3, r3, #1
 8007aa6:	d0f9      	beq.n	8007a9c <__gethex+0x70>
 8007aa8:	f7ff ffaa 	bl	8007a00 <__hexdig_fun>
 8007aac:	2301      	movs	r3, #1
 8007aae:	fab0 f480 	clz	r4, r0
 8007ab2:	0964      	lsrs	r4, r4, #5
 8007ab4:	4635      	mov	r5, r6
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4616      	mov	r6, r2
 8007abc:	3201      	adds	r2, #1
 8007abe:	7830      	ldrb	r0, [r6, #0]
 8007ac0:	f7ff ff9e 	bl	8007a00 <__hexdig_fun>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1f8      	bne.n	8007aba <__gethex+0x8e>
 8007ac8:	9903      	ldr	r1, [sp, #12]
 8007aca:	4652      	mov	r2, sl
 8007acc:	4630      	mov	r0, r6
 8007ace:	f001 fd6f 	bl	80095b0 <strncmp>
 8007ad2:	b980      	cbnz	r0, 8007af6 <__gethex+0xca>
 8007ad4:	b94d      	cbnz	r5, 8007aea <__gethex+0xbe>
 8007ad6:	eb06 050a 	add.w	r5, r6, sl
 8007ada:	462a      	mov	r2, r5
 8007adc:	4616      	mov	r6, r2
 8007ade:	3201      	adds	r2, #1
 8007ae0:	7830      	ldrb	r0, [r6, #0]
 8007ae2:	f7ff ff8d 	bl	8007a00 <__hexdig_fun>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d1f8      	bne.n	8007adc <__gethex+0xb0>
 8007aea:	1bad      	subs	r5, r5, r6
 8007aec:	00ad      	lsls	r5, r5, #2
 8007aee:	e004      	b.n	8007afa <__gethex+0xce>
 8007af0:	2400      	movs	r4, #0
 8007af2:	4625      	mov	r5, r4
 8007af4:	e7e0      	b.n	8007ab8 <__gethex+0x8c>
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	d1f7      	bne.n	8007aea <__gethex+0xbe>
 8007afa:	7833      	ldrb	r3, [r6, #0]
 8007afc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b00:	2b50      	cmp	r3, #80	; 0x50
 8007b02:	d139      	bne.n	8007b78 <__gethex+0x14c>
 8007b04:	7873      	ldrb	r3, [r6, #1]
 8007b06:	2b2b      	cmp	r3, #43	; 0x2b
 8007b08:	d02a      	beq.n	8007b60 <__gethex+0x134>
 8007b0a:	2b2d      	cmp	r3, #45	; 0x2d
 8007b0c:	d02c      	beq.n	8007b68 <__gethex+0x13c>
 8007b0e:	1c71      	adds	r1, r6, #1
 8007b10:	f04f 0900 	mov.w	r9, #0
 8007b14:	7808      	ldrb	r0, [r1, #0]
 8007b16:	f7ff ff73 	bl	8007a00 <__hexdig_fun>
 8007b1a:	1e43      	subs	r3, r0, #1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b18      	cmp	r3, #24
 8007b20:	d82a      	bhi.n	8007b78 <__gethex+0x14c>
 8007b22:	f1a0 0210 	sub.w	r2, r0, #16
 8007b26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b2a:	f7ff ff69 	bl	8007a00 <__hexdig_fun>
 8007b2e:	1e43      	subs	r3, r0, #1
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b18      	cmp	r3, #24
 8007b34:	d91b      	bls.n	8007b6e <__gethex+0x142>
 8007b36:	f1b9 0f00 	cmp.w	r9, #0
 8007b3a:	d000      	beq.n	8007b3e <__gethex+0x112>
 8007b3c:	4252      	negs	r2, r2
 8007b3e:	4415      	add	r5, r2
 8007b40:	f8cb 1000 	str.w	r1, [fp]
 8007b44:	b1d4      	cbz	r4, 8007b7c <__gethex+0x150>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf14      	ite	ne
 8007b4c:	2700      	movne	r7, #0
 8007b4e:	2706      	moveq	r7, #6
 8007b50:	4638      	mov	r0, r7
 8007b52:	b00b      	add	sp, #44	; 0x2c
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	463e      	mov	r6, r7
 8007b5a:	4625      	mov	r5, r4
 8007b5c:	2401      	movs	r4, #1
 8007b5e:	e7cc      	b.n	8007afa <__gethex+0xce>
 8007b60:	f04f 0900 	mov.w	r9, #0
 8007b64:	1cb1      	adds	r1, r6, #2
 8007b66:	e7d5      	b.n	8007b14 <__gethex+0xe8>
 8007b68:	f04f 0901 	mov.w	r9, #1
 8007b6c:	e7fa      	b.n	8007b64 <__gethex+0x138>
 8007b6e:	230a      	movs	r3, #10
 8007b70:	fb03 0202 	mla	r2, r3, r2, r0
 8007b74:	3a10      	subs	r2, #16
 8007b76:	e7d6      	b.n	8007b26 <__gethex+0xfa>
 8007b78:	4631      	mov	r1, r6
 8007b7a:	e7e1      	b.n	8007b40 <__gethex+0x114>
 8007b7c:	1bf3      	subs	r3, r6, r7
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	4621      	mov	r1, r4
 8007b82:	2b07      	cmp	r3, #7
 8007b84:	dc0a      	bgt.n	8007b9c <__gethex+0x170>
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	f000 fa8c 	bl	80080a4 <_Balloc>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	b940      	cbnz	r0, 8007ba2 <__gethex+0x176>
 8007b90:	4b5c      	ldr	r3, [pc, #368]	; (8007d04 <__gethex+0x2d8>)
 8007b92:	4602      	mov	r2, r0
 8007b94:	21de      	movs	r1, #222	; 0xde
 8007b96:	485c      	ldr	r0, [pc, #368]	; (8007d08 <__gethex+0x2dc>)
 8007b98:	f001 fdda 	bl	8009750 <__assert_func>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	105b      	asrs	r3, r3, #1
 8007ba0:	e7ef      	b.n	8007b82 <__gethex+0x156>
 8007ba2:	f100 0914 	add.w	r9, r0, #20
 8007ba6:	f04f 0b00 	mov.w	fp, #0
 8007baa:	f1ca 0301 	rsb	r3, sl, #1
 8007bae:	f8cd 9010 	str.w	r9, [sp, #16]
 8007bb2:	f8cd b004 	str.w	fp, [sp, #4]
 8007bb6:	9308      	str	r3, [sp, #32]
 8007bb8:	42b7      	cmp	r7, r6
 8007bba:	d33f      	bcc.n	8007c3c <__gethex+0x210>
 8007bbc:	9f04      	ldr	r7, [sp, #16]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	f847 3b04 	str.w	r3, [r7], #4
 8007bc4:	eba7 0709 	sub.w	r7, r7, r9
 8007bc8:	10bf      	asrs	r7, r7, #2
 8007bca:	6127      	str	r7, [r4, #16]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fb5b 	bl	8008288 <__hi0bits>
 8007bd2:	017f      	lsls	r7, r7, #5
 8007bd4:	f8d8 6000 	ldr.w	r6, [r8]
 8007bd8:	1a3f      	subs	r7, r7, r0
 8007bda:	42b7      	cmp	r7, r6
 8007bdc:	dd62      	ble.n	8007ca4 <__gethex+0x278>
 8007bde:	1bbf      	subs	r7, r7, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fef1 	bl	80089ca <__any_on>
 8007be8:	4682      	mov	sl, r0
 8007bea:	b1a8      	cbz	r0, 8007c18 <__gethex+0x1ec>
 8007bec:	1e7b      	subs	r3, r7, #1
 8007bee:	1159      	asrs	r1, r3, #5
 8007bf0:	f003 021f 	and.w	r2, r3, #31
 8007bf4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007bf8:	f04f 0a01 	mov.w	sl, #1
 8007bfc:	fa0a f202 	lsl.w	r2, sl, r2
 8007c00:	420a      	tst	r2, r1
 8007c02:	d009      	beq.n	8007c18 <__gethex+0x1ec>
 8007c04:	4553      	cmp	r3, sl
 8007c06:	dd05      	ble.n	8007c14 <__gethex+0x1e8>
 8007c08:	1eb9      	subs	r1, r7, #2
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 fedd 	bl	80089ca <__any_on>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d144      	bne.n	8007c9e <__gethex+0x272>
 8007c14:	f04f 0a02 	mov.w	sl, #2
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff fe9e 	bl	800795c <rshift>
 8007c20:	443d      	add	r5, r7
 8007c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c26:	42ab      	cmp	r3, r5
 8007c28:	da4a      	bge.n	8007cc0 <__gethex+0x294>
 8007c2a:	9802      	ldr	r0, [sp, #8]
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f000 fa79 	bl	8008124 <_Bfree>
 8007c32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c34:	2300      	movs	r3, #0
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	27a3      	movs	r7, #163	; 0xa3
 8007c3a:	e789      	b.n	8007b50 <__gethex+0x124>
 8007c3c:	1e73      	subs	r3, r6, #1
 8007c3e:	9a06      	ldr	r2, [sp, #24]
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d019      	beq.n	8007c7e <__gethex+0x252>
 8007c4a:	f1bb 0f20 	cmp.w	fp, #32
 8007c4e:	d107      	bne.n	8007c60 <__gethex+0x234>
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	f843 2b04 	str.w	r2, [r3], #4
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	469b      	mov	fp, r3
 8007c60:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c64:	f7ff fecc 	bl	8007a00 <__hexdig_fun>
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	f000 000f 	and.w	r0, r0, #15
 8007c6e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c72:	4303      	orrs	r3, r0
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	f10b 0b04 	add.w	fp, fp, #4
 8007c7a:	9b07      	ldr	r3, [sp, #28]
 8007c7c:	e00d      	b.n	8007c9a <__gethex+0x26e>
 8007c7e:	9a08      	ldr	r2, [sp, #32]
 8007c80:	1e73      	subs	r3, r6, #1
 8007c82:	4413      	add	r3, r2
 8007c84:	42bb      	cmp	r3, r7
 8007c86:	d3e0      	bcc.n	8007c4a <__gethex+0x21e>
 8007c88:	4618      	mov	r0, r3
 8007c8a:	9903      	ldr	r1, [sp, #12]
 8007c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8e:	4652      	mov	r2, sl
 8007c90:	f001 fc8e 	bl	80095b0 <strncmp>
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1d7      	bne.n	8007c4a <__gethex+0x21e>
 8007c9a:	461e      	mov	r6, r3
 8007c9c:	e78c      	b.n	8007bb8 <__gethex+0x18c>
 8007c9e:	f04f 0a03 	mov.w	sl, #3
 8007ca2:	e7b9      	b.n	8007c18 <__gethex+0x1ec>
 8007ca4:	da09      	bge.n	8007cba <__gethex+0x28e>
 8007ca6:	1bf7      	subs	r7, r6, r7
 8007ca8:	4621      	mov	r1, r4
 8007caa:	9802      	ldr	r0, [sp, #8]
 8007cac:	463a      	mov	r2, r7
 8007cae:	f000 fc51 	bl	8008554 <__lshift>
 8007cb2:	1bed      	subs	r5, r5, r7
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	f100 0914 	add.w	r9, r0, #20
 8007cba:	f04f 0a00 	mov.w	sl, #0
 8007cbe:	e7b0      	b.n	8007c22 <__gethex+0x1f6>
 8007cc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007cc4:	42a8      	cmp	r0, r5
 8007cc6:	dd71      	ble.n	8007dac <__gethex+0x380>
 8007cc8:	1b45      	subs	r5, r0, r5
 8007cca:	42ae      	cmp	r6, r5
 8007ccc:	dc35      	bgt.n	8007d3a <__gethex+0x30e>
 8007cce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d029      	beq.n	8007d2a <__gethex+0x2fe>
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d02b      	beq.n	8007d32 <__gethex+0x306>
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d11c      	bne.n	8007d18 <__gethex+0x2ec>
 8007cde:	42ae      	cmp	r6, r5
 8007ce0:	d11a      	bne.n	8007d18 <__gethex+0x2ec>
 8007ce2:	2e01      	cmp	r6, #1
 8007ce4:	d112      	bne.n	8007d0c <__gethex+0x2e0>
 8007ce6:	9a05      	ldr	r2, [sp, #20]
 8007ce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	2301      	movs	r3, #1
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	f8c9 3000 	str.w	r3, [r9]
 8007cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cf8:	2762      	movs	r7, #98	; 0x62
 8007cfa:	601c      	str	r4, [r3, #0]
 8007cfc:	e728      	b.n	8007b50 <__gethex+0x124>
 8007cfe:	bf00      	nop
 8007d00:	0800a6a0 	.word	0x0800a6a0
 8007d04:	0800a628 	.word	0x0800a628
 8007d08:	0800a639 	.word	0x0800a639
 8007d0c:	1e71      	subs	r1, r6, #1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fe5b 	bl	80089ca <__any_on>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e6      	bne.n	8007ce6 <__gethex+0x2ba>
 8007d18:	9802      	ldr	r0, [sp, #8]
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f000 fa02 	bl	8008124 <_Bfree>
 8007d20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d22:	2300      	movs	r3, #0
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	2750      	movs	r7, #80	; 0x50
 8007d28:	e712      	b.n	8007b50 <__gethex+0x124>
 8007d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f3      	bne.n	8007d18 <__gethex+0x2ec>
 8007d30:	e7d9      	b.n	8007ce6 <__gethex+0x2ba>
 8007d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1d6      	bne.n	8007ce6 <__gethex+0x2ba>
 8007d38:	e7ee      	b.n	8007d18 <__gethex+0x2ec>
 8007d3a:	1e6f      	subs	r7, r5, #1
 8007d3c:	f1ba 0f00 	cmp.w	sl, #0
 8007d40:	d131      	bne.n	8007da6 <__gethex+0x37a>
 8007d42:	b127      	cbz	r7, 8007d4e <__gethex+0x322>
 8007d44:	4639      	mov	r1, r7
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 fe3f 	bl	80089ca <__any_on>
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	117b      	asrs	r3, r7, #5
 8007d50:	2101      	movs	r1, #1
 8007d52:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d56:	f007 071f 	and.w	r7, r7, #31
 8007d5a:	fa01 f707 	lsl.w	r7, r1, r7
 8007d5e:	421f      	tst	r7, r3
 8007d60:	4629      	mov	r1, r5
 8007d62:	4620      	mov	r0, r4
 8007d64:	bf18      	it	ne
 8007d66:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d6a:	1b76      	subs	r6, r6, r5
 8007d6c:	f7ff fdf6 	bl	800795c <rshift>
 8007d70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d74:	2702      	movs	r7, #2
 8007d76:	f1ba 0f00 	cmp.w	sl, #0
 8007d7a:	d048      	beq.n	8007e0e <__gethex+0x3e2>
 8007d7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d015      	beq.n	8007db0 <__gethex+0x384>
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d017      	beq.n	8007db8 <__gethex+0x38c>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d109      	bne.n	8007da0 <__gethex+0x374>
 8007d8c:	f01a 0f02 	tst.w	sl, #2
 8007d90:	d006      	beq.n	8007da0 <__gethex+0x374>
 8007d92:	f8d9 0000 	ldr.w	r0, [r9]
 8007d96:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d9a:	f01a 0f01 	tst.w	sl, #1
 8007d9e:	d10e      	bne.n	8007dbe <__gethex+0x392>
 8007da0:	f047 0710 	orr.w	r7, r7, #16
 8007da4:	e033      	b.n	8007e0e <__gethex+0x3e2>
 8007da6:	f04f 0a01 	mov.w	sl, #1
 8007daa:	e7d0      	b.n	8007d4e <__gethex+0x322>
 8007dac:	2701      	movs	r7, #1
 8007dae:	e7e2      	b.n	8007d76 <__gethex+0x34a>
 8007db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007db2:	f1c3 0301 	rsb	r3, r3, #1
 8007db6:	9315      	str	r3, [sp, #84]	; 0x54
 8007db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <__gethex+0x374>
 8007dbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007dc2:	f104 0314 	add.w	r3, r4, #20
 8007dc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007dca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007dce:	f04f 0c00 	mov.w	ip, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007ddc:	d01c      	beq.n	8007e18 <__gethex+0x3ec>
 8007dde:	3201      	adds	r2, #1
 8007de0:	6002      	str	r2, [r0, #0]
 8007de2:	2f02      	cmp	r7, #2
 8007de4:	f104 0314 	add.w	r3, r4, #20
 8007de8:	d13d      	bne.n	8007e66 <__gethex+0x43a>
 8007dea:	f8d8 2000 	ldr.w	r2, [r8]
 8007dee:	3a01      	subs	r2, #1
 8007df0:	42b2      	cmp	r2, r6
 8007df2:	d10a      	bne.n	8007e0a <__gethex+0x3de>
 8007df4:	1171      	asrs	r1, r6, #5
 8007df6:	2201      	movs	r2, #1
 8007df8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dfc:	f006 061f 	and.w	r6, r6, #31
 8007e00:	fa02 f606 	lsl.w	r6, r2, r6
 8007e04:	421e      	tst	r6, r3
 8007e06:	bf18      	it	ne
 8007e08:	4617      	movne	r7, r2
 8007e0a:	f047 0720 	orr.w	r7, r7, #32
 8007e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e10:	601c      	str	r4, [r3, #0]
 8007e12:	9b05      	ldr	r3, [sp, #20]
 8007e14:	601d      	str	r5, [r3, #0]
 8007e16:	e69b      	b.n	8007b50 <__gethex+0x124>
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e1e:	d8d8      	bhi.n	8007dd2 <__gethex+0x3a6>
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	459b      	cmp	fp, r3
 8007e24:	db17      	blt.n	8007e56 <__gethex+0x42a>
 8007e26:	6861      	ldr	r1, [r4, #4]
 8007e28:	9802      	ldr	r0, [sp, #8]
 8007e2a:	3101      	adds	r1, #1
 8007e2c:	f000 f93a 	bl	80080a4 <_Balloc>
 8007e30:	4681      	mov	r9, r0
 8007e32:	b918      	cbnz	r0, 8007e3c <__gethex+0x410>
 8007e34:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <__gethex+0x474>)
 8007e36:	4602      	mov	r2, r0
 8007e38:	2184      	movs	r1, #132	; 0x84
 8007e3a:	e6ac      	b.n	8007b96 <__gethex+0x16a>
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	3202      	adds	r2, #2
 8007e40:	f104 010c 	add.w	r1, r4, #12
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	300c      	adds	r0, #12
 8007e48:	f000 f91e 	bl	8008088 <memcpy>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	9802      	ldr	r0, [sp, #8]
 8007e50:	f000 f968 	bl	8008124 <_Bfree>
 8007e54:	464c      	mov	r4, r9
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e5e:	6122      	str	r2, [r4, #16]
 8007e60:	2201      	movs	r2, #1
 8007e62:	615a      	str	r2, [r3, #20]
 8007e64:	e7bd      	b.n	8007de2 <__gethex+0x3b6>
 8007e66:	6922      	ldr	r2, [r4, #16]
 8007e68:	455a      	cmp	r2, fp
 8007e6a:	dd0b      	ble.n	8007e84 <__gethex+0x458>
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff fd74 	bl	800795c <rshift>
 8007e74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e78:	3501      	adds	r5, #1
 8007e7a:	42ab      	cmp	r3, r5
 8007e7c:	f6ff aed5 	blt.w	8007c2a <__gethex+0x1fe>
 8007e80:	2701      	movs	r7, #1
 8007e82:	e7c2      	b.n	8007e0a <__gethex+0x3de>
 8007e84:	f016 061f 	ands.w	r6, r6, #31
 8007e88:	d0fa      	beq.n	8007e80 <__gethex+0x454>
 8007e8a:	4453      	add	r3, sl
 8007e8c:	f1c6 0620 	rsb	r6, r6, #32
 8007e90:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e94:	f000 f9f8 	bl	8008288 <__hi0bits>
 8007e98:	42b0      	cmp	r0, r6
 8007e9a:	dbe7      	blt.n	8007e6c <__gethex+0x440>
 8007e9c:	e7f0      	b.n	8007e80 <__gethex+0x454>
 8007e9e:	bf00      	nop
 8007ea0:	0800a628 	.word	0x0800a628

08007ea4 <L_shift>:
 8007ea4:	f1c2 0208 	rsb	r2, r2, #8
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	f1c2 0620 	rsb	r6, r2, #32
 8007eb0:	6843      	ldr	r3, [r0, #4]
 8007eb2:	6804      	ldr	r4, [r0, #0]
 8007eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8007eb8:	432c      	orrs	r4, r5
 8007eba:	40d3      	lsrs	r3, r2
 8007ebc:	6004      	str	r4, [r0, #0]
 8007ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ec2:	4288      	cmp	r0, r1
 8007ec4:	d3f4      	bcc.n	8007eb0 <L_shift+0xc>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}

08007ec8 <__match>:
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	6803      	ldr	r3, [r0, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed2:	b914      	cbnz	r4, 8007eda <__match+0x12>
 8007ed4:	6003      	str	r3, [r0, #0]
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	bd30      	pop	{r4, r5, pc}
 8007eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ee2:	2d19      	cmp	r5, #25
 8007ee4:	bf98      	it	ls
 8007ee6:	3220      	addls	r2, #32
 8007ee8:	42a2      	cmp	r2, r4
 8007eea:	d0f0      	beq.n	8007ece <__match+0x6>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e7f3      	b.n	8007ed8 <__match+0x10>

08007ef0 <__hexnan>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	680b      	ldr	r3, [r1, #0]
 8007ef6:	115e      	asrs	r6, r3, #5
 8007ef8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007efc:	f013 031f 	ands.w	r3, r3, #31
 8007f00:	b087      	sub	sp, #28
 8007f02:	bf18      	it	ne
 8007f04:	3604      	addne	r6, #4
 8007f06:	2500      	movs	r5, #0
 8007f08:	1f37      	subs	r7, r6, #4
 8007f0a:	4690      	mov	r8, r2
 8007f0c:	6802      	ldr	r2, [r0, #0]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	4682      	mov	sl, r0
 8007f12:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f16:	46b9      	mov	r9, r7
 8007f18:	463c      	mov	r4, r7
 8007f1a:	9502      	str	r5, [sp, #8]
 8007f1c:	46ab      	mov	fp, r5
 8007f1e:	7851      	ldrb	r1, [r2, #1]
 8007f20:	1c53      	adds	r3, r2, #1
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	b341      	cbz	r1, 8007f78 <__hexnan+0x88>
 8007f26:	4608      	mov	r0, r1
 8007f28:	9205      	str	r2, [sp, #20]
 8007f2a:	9104      	str	r1, [sp, #16]
 8007f2c:	f7ff fd68 	bl	8007a00 <__hexdig_fun>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d14f      	bne.n	8007fd4 <__hexnan+0xe4>
 8007f34:	9904      	ldr	r1, [sp, #16]
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	2920      	cmp	r1, #32
 8007f3a:	d818      	bhi.n	8007f6e <__hexnan+0x7e>
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	459b      	cmp	fp, r3
 8007f40:	dd13      	ble.n	8007f6a <__hexnan+0x7a>
 8007f42:	454c      	cmp	r4, r9
 8007f44:	d206      	bcs.n	8007f54 <__hexnan+0x64>
 8007f46:	2d07      	cmp	r5, #7
 8007f48:	dc04      	bgt.n	8007f54 <__hexnan+0x64>
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff ffa8 	bl	8007ea4 <L_shift>
 8007f54:	4544      	cmp	r4, r8
 8007f56:	d950      	bls.n	8007ffa <__hexnan+0x10a>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f62:	f8cd b008 	str.w	fp, [sp, #8]
 8007f66:	464c      	mov	r4, r9
 8007f68:	461d      	mov	r5, r3
 8007f6a:	9a03      	ldr	r2, [sp, #12]
 8007f6c:	e7d7      	b.n	8007f1e <__hexnan+0x2e>
 8007f6e:	2929      	cmp	r1, #41	; 0x29
 8007f70:	d156      	bne.n	8008020 <__hexnan+0x130>
 8007f72:	3202      	adds	r2, #2
 8007f74:	f8ca 2000 	str.w	r2, [sl]
 8007f78:	f1bb 0f00 	cmp.w	fp, #0
 8007f7c:	d050      	beq.n	8008020 <__hexnan+0x130>
 8007f7e:	454c      	cmp	r4, r9
 8007f80:	d206      	bcs.n	8007f90 <__hexnan+0xa0>
 8007f82:	2d07      	cmp	r5, #7
 8007f84:	dc04      	bgt.n	8007f90 <__hexnan+0xa0>
 8007f86:	462a      	mov	r2, r5
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff ff8a 	bl	8007ea4 <L_shift>
 8007f90:	4544      	cmp	r4, r8
 8007f92:	d934      	bls.n	8007ffe <__hexnan+0x10e>
 8007f94:	f1a8 0204 	sub.w	r2, r8, #4
 8007f98:	4623      	mov	r3, r4
 8007f9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fa2:	429f      	cmp	r7, r3
 8007fa4:	d2f9      	bcs.n	8007f9a <__hexnan+0xaa>
 8007fa6:	1b3b      	subs	r3, r7, r4
 8007fa8:	f023 0303 	bic.w	r3, r3, #3
 8007fac:	3304      	adds	r3, #4
 8007fae:	3401      	adds	r4, #1
 8007fb0:	3e03      	subs	r6, #3
 8007fb2:	42b4      	cmp	r4, r6
 8007fb4:	bf88      	it	hi
 8007fb6:	2304      	movhi	r3, #4
 8007fb8:	4443      	add	r3, r8
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f843 2b04 	str.w	r2, [r3], #4
 8007fc0:	429f      	cmp	r7, r3
 8007fc2:	d2fb      	bcs.n	8007fbc <__hexnan+0xcc>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	b91b      	cbnz	r3, 8007fd0 <__hexnan+0xe0>
 8007fc8:	4547      	cmp	r7, r8
 8007fca:	d127      	bne.n	800801c <__hexnan+0x12c>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	2005      	movs	r0, #5
 8007fd2:	e026      	b.n	8008022 <__hexnan+0x132>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	2d08      	cmp	r5, #8
 8007fd8:	f10b 0b01 	add.w	fp, fp, #1
 8007fdc:	dd06      	ble.n	8007fec <__hexnan+0xfc>
 8007fde:	4544      	cmp	r4, r8
 8007fe0:	d9c3      	bls.n	8007f6a <__hexnan+0x7a>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fe8:	2501      	movs	r5, #1
 8007fea:	3c04      	subs	r4, #4
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	f000 000f 	and.w	r0, r0, #15
 8007ff2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ff6:	6022      	str	r2, [r4, #0]
 8007ff8:	e7b7      	b.n	8007f6a <__hexnan+0x7a>
 8007ffa:	2508      	movs	r5, #8
 8007ffc:	e7b5      	b.n	8007f6a <__hexnan+0x7a>
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0df      	beq.n	8007fc4 <__hexnan+0xd4>
 8008004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008008:	f1c3 0320 	rsb	r3, r3, #32
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
 8008010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008014:	401a      	ands	r2, r3
 8008016:	f846 2c04 	str.w	r2, [r6, #-4]
 800801a:	e7d3      	b.n	8007fc4 <__hexnan+0xd4>
 800801c:	3f04      	subs	r7, #4
 800801e:	e7d1      	b.n	8007fc4 <__hexnan+0xd4>
 8008020:	2004      	movs	r0, #4
 8008022:	b007      	add	sp, #28
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008028 <_localeconv_r>:
 8008028:	4800      	ldr	r0, [pc, #0]	; (800802c <_localeconv_r+0x4>)
 800802a:	4770      	bx	lr
 800802c:	20000164 	.word	0x20000164

08008030 <_lseek_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_lseek_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7f9 fde7 	bl	8001c12 <_lseek>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_lseek_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_lseek_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	200002e8 	.word	0x200002e8

08008054 <malloc>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <malloc+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f000 bd55 	b.w	8008b08 <_malloc_r>
 800805e:	bf00      	nop
 8008060:	2000000c 	.word	0x2000000c

08008064 <__ascii_mbtowc>:
 8008064:	b082      	sub	sp, #8
 8008066:	b901      	cbnz	r1, 800806a <__ascii_mbtowc+0x6>
 8008068:	a901      	add	r1, sp, #4
 800806a:	b142      	cbz	r2, 800807e <__ascii_mbtowc+0x1a>
 800806c:	b14b      	cbz	r3, 8008082 <__ascii_mbtowc+0x1e>
 800806e:	7813      	ldrb	r3, [r2, #0]
 8008070:	600b      	str	r3, [r1, #0]
 8008072:	7812      	ldrb	r2, [r2, #0]
 8008074:	1e10      	subs	r0, r2, #0
 8008076:	bf18      	it	ne
 8008078:	2001      	movne	r0, #1
 800807a:	b002      	add	sp, #8
 800807c:	4770      	bx	lr
 800807e:	4610      	mov	r0, r2
 8008080:	e7fb      	b.n	800807a <__ascii_mbtowc+0x16>
 8008082:	f06f 0001 	mvn.w	r0, #1
 8008086:	e7f8      	b.n	800807a <__ascii_mbtowc+0x16>

08008088 <memcpy>:
 8008088:	440a      	add	r2, r1
 800808a:	4291      	cmp	r1, r2
 800808c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008090:	d100      	bne.n	8008094 <memcpy+0xc>
 8008092:	4770      	bx	lr
 8008094:	b510      	push	{r4, lr}
 8008096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809e:	4291      	cmp	r1, r2
 80080a0:	d1f9      	bne.n	8008096 <memcpy+0xe>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <_Balloc>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	b976      	cbnz	r6, 80080cc <_Balloc+0x28>
 80080ae:	2010      	movs	r0, #16
 80080b0:	f7ff ffd0 	bl	8008054 <malloc>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6260      	str	r0, [r4, #36]	; 0x24
 80080b8:	b920      	cbnz	r0, 80080c4 <_Balloc+0x20>
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <_Balloc+0x78>)
 80080bc:	4818      	ldr	r0, [pc, #96]	; (8008120 <_Balloc+0x7c>)
 80080be:	2166      	movs	r1, #102	; 0x66
 80080c0:	f001 fb46 	bl	8009750 <__assert_func>
 80080c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080c8:	6006      	str	r6, [r0, #0]
 80080ca:	60c6      	str	r6, [r0, #12]
 80080cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080ce:	68f3      	ldr	r3, [r6, #12]
 80080d0:	b183      	cbz	r3, 80080f4 <_Balloc+0x50>
 80080d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080da:	b9b8      	cbnz	r0, 800810c <_Balloc+0x68>
 80080dc:	2101      	movs	r1, #1
 80080de:	fa01 f605 	lsl.w	r6, r1, r5
 80080e2:	1d72      	adds	r2, r6, #5
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 fc90 	bl	8008a0c <_calloc_r>
 80080ec:	b160      	cbz	r0, 8008108 <_Balloc+0x64>
 80080ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080f2:	e00e      	b.n	8008112 <_Balloc+0x6e>
 80080f4:	2221      	movs	r2, #33	; 0x21
 80080f6:	2104      	movs	r1, #4
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fc87 	bl	8008a0c <_calloc_r>
 80080fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008100:	60f0      	str	r0, [r6, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e4      	bne.n	80080d2 <_Balloc+0x2e>
 8008108:	2000      	movs	r0, #0
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	6802      	ldr	r2, [r0, #0]
 800810e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008112:	2300      	movs	r3, #0
 8008114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008118:	e7f7      	b.n	800810a <_Balloc+0x66>
 800811a:	bf00      	nop
 800811c:	0800a5b6 	.word	0x0800a5b6
 8008120:	0800a6b4 	.word	0x0800a6b4

08008124 <_Bfree>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008128:	4605      	mov	r5, r0
 800812a:	460c      	mov	r4, r1
 800812c:	b976      	cbnz	r6, 800814c <_Bfree+0x28>
 800812e:	2010      	movs	r0, #16
 8008130:	f7ff ff90 	bl	8008054 <malloc>
 8008134:	4602      	mov	r2, r0
 8008136:	6268      	str	r0, [r5, #36]	; 0x24
 8008138:	b920      	cbnz	r0, 8008144 <_Bfree+0x20>
 800813a:	4b09      	ldr	r3, [pc, #36]	; (8008160 <_Bfree+0x3c>)
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <_Bfree+0x40>)
 800813e:	218a      	movs	r1, #138	; 0x8a
 8008140:	f001 fb06 	bl	8009750 <__assert_func>
 8008144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008148:	6006      	str	r6, [r0, #0]
 800814a:	60c6      	str	r6, [r0, #12]
 800814c:	b13c      	cbz	r4, 800815e <_Bfree+0x3a>
 800814e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008150:	6862      	ldr	r2, [r4, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008158:	6021      	str	r1, [r4, #0]
 800815a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	0800a5b6 	.word	0x0800a5b6
 8008164:	0800a6b4 	.word	0x0800a6b4

08008168 <__multadd>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	690d      	ldr	r5, [r1, #16]
 800816e:	4607      	mov	r7, r0
 8008170:	460c      	mov	r4, r1
 8008172:	461e      	mov	r6, r3
 8008174:	f101 0c14 	add.w	ip, r1, #20
 8008178:	2000      	movs	r0, #0
 800817a:	f8dc 3000 	ldr.w	r3, [ip]
 800817e:	b299      	uxth	r1, r3
 8008180:	fb02 6101 	mla	r1, r2, r1, r6
 8008184:	0c1e      	lsrs	r6, r3, #16
 8008186:	0c0b      	lsrs	r3, r1, #16
 8008188:	fb02 3306 	mla	r3, r2, r6, r3
 800818c:	b289      	uxth	r1, r1
 800818e:	3001      	adds	r0, #1
 8008190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008194:	4285      	cmp	r5, r0
 8008196:	f84c 1b04 	str.w	r1, [ip], #4
 800819a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800819e:	dcec      	bgt.n	800817a <__multadd+0x12>
 80081a0:	b30e      	cbz	r6, 80081e6 <__multadd+0x7e>
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	42ab      	cmp	r3, r5
 80081a6:	dc19      	bgt.n	80081dc <__multadd+0x74>
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4638      	mov	r0, r7
 80081ac:	3101      	adds	r1, #1
 80081ae:	f7ff ff79 	bl	80080a4 <_Balloc>
 80081b2:	4680      	mov	r8, r0
 80081b4:	b928      	cbnz	r0, 80081c2 <__multadd+0x5a>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <__multadd+0x84>)
 80081ba:	480d      	ldr	r0, [pc, #52]	; (80081f0 <__multadd+0x88>)
 80081bc:	21b5      	movs	r1, #181	; 0xb5
 80081be:	f001 fac7 	bl	8009750 <__assert_func>
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	3202      	adds	r2, #2
 80081c6:	f104 010c 	add.w	r1, r4, #12
 80081ca:	0092      	lsls	r2, r2, #2
 80081cc:	300c      	adds	r0, #12
 80081ce:	f7ff ff5b 	bl	8008088 <memcpy>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7ff ffa5 	bl	8008124 <_Bfree>
 80081da:	4644      	mov	r4, r8
 80081dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081e0:	3501      	adds	r5, #1
 80081e2:	615e      	str	r6, [r3, #20]
 80081e4:	6125      	str	r5, [r4, #16]
 80081e6:	4620      	mov	r0, r4
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	0800a628 	.word	0x0800a628
 80081f0:	0800a6b4 	.word	0x0800a6b4

080081f4 <__s2b>:
 80081f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	4615      	mov	r5, r2
 80081fc:	461f      	mov	r7, r3
 80081fe:	2209      	movs	r2, #9
 8008200:	3308      	adds	r3, #8
 8008202:	4606      	mov	r6, r0
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	2100      	movs	r1, #0
 800820a:	2201      	movs	r2, #1
 800820c:	429a      	cmp	r2, r3
 800820e:	db09      	blt.n	8008224 <__s2b+0x30>
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ff47 	bl	80080a4 <_Balloc>
 8008216:	b940      	cbnz	r0, 800822a <__s2b+0x36>
 8008218:	4602      	mov	r2, r0
 800821a:	4b19      	ldr	r3, [pc, #100]	; (8008280 <__s2b+0x8c>)
 800821c:	4819      	ldr	r0, [pc, #100]	; (8008284 <__s2b+0x90>)
 800821e:	21ce      	movs	r1, #206	; 0xce
 8008220:	f001 fa96 	bl	8009750 <__assert_func>
 8008224:	0052      	lsls	r2, r2, #1
 8008226:	3101      	adds	r1, #1
 8008228:	e7f0      	b.n	800820c <__s2b+0x18>
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	6143      	str	r3, [r0, #20]
 800822e:	2d09      	cmp	r5, #9
 8008230:	f04f 0301 	mov.w	r3, #1
 8008234:	6103      	str	r3, [r0, #16]
 8008236:	dd16      	ble.n	8008266 <__s2b+0x72>
 8008238:	f104 0909 	add.w	r9, r4, #9
 800823c:	46c8      	mov	r8, r9
 800823e:	442c      	add	r4, r5
 8008240:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008244:	4601      	mov	r1, r0
 8008246:	3b30      	subs	r3, #48	; 0x30
 8008248:	220a      	movs	r2, #10
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ff8c 	bl	8008168 <__multadd>
 8008250:	45a0      	cmp	r8, r4
 8008252:	d1f5      	bne.n	8008240 <__s2b+0x4c>
 8008254:	f1a5 0408 	sub.w	r4, r5, #8
 8008258:	444c      	add	r4, r9
 800825a:	1b2d      	subs	r5, r5, r4
 800825c:	1963      	adds	r3, r4, r5
 800825e:	42bb      	cmp	r3, r7
 8008260:	db04      	blt.n	800826c <__s2b+0x78>
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	340a      	adds	r4, #10
 8008268:	2509      	movs	r5, #9
 800826a:	e7f6      	b.n	800825a <__s2b+0x66>
 800826c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008270:	4601      	mov	r1, r0
 8008272:	3b30      	subs	r3, #48	; 0x30
 8008274:	220a      	movs	r2, #10
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ff76 	bl	8008168 <__multadd>
 800827c:	e7ee      	b.n	800825c <__s2b+0x68>
 800827e:	bf00      	nop
 8008280:	0800a628 	.word	0x0800a628
 8008284:	0800a6b4 	.word	0x0800a6b4

08008288 <__hi0bits>:
 8008288:	0c02      	lsrs	r2, r0, #16
 800828a:	0412      	lsls	r2, r2, #16
 800828c:	4603      	mov	r3, r0
 800828e:	b9ca      	cbnz	r2, 80082c4 <__hi0bits+0x3c>
 8008290:	0403      	lsls	r3, r0, #16
 8008292:	2010      	movs	r0, #16
 8008294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008298:	bf04      	itt	eq
 800829a:	021b      	lsleq	r3, r3, #8
 800829c:	3008      	addeq	r0, #8
 800829e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082a2:	bf04      	itt	eq
 80082a4:	011b      	lsleq	r3, r3, #4
 80082a6:	3004      	addeq	r0, #4
 80082a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082ac:	bf04      	itt	eq
 80082ae:	009b      	lsleq	r3, r3, #2
 80082b0:	3002      	addeq	r0, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	db05      	blt.n	80082c2 <__hi0bits+0x3a>
 80082b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80082ba:	f100 0001 	add.w	r0, r0, #1
 80082be:	bf08      	it	eq
 80082c0:	2020      	moveq	r0, #32
 80082c2:	4770      	bx	lr
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7e5      	b.n	8008294 <__hi0bits+0xc>

080082c8 <__lo0bits>:
 80082c8:	6803      	ldr	r3, [r0, #0]
 80082ca:	4602      	mov	r2, r0
 80082cc:	f013 0007 	ands.w	r0, r3, #7
 80082d0:	d00b      	beq.n	80082ea <__lo0bits+0x22>
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d421      	bmi.n	800831a <__lo0bits+0x52>
 80082d6:	0798      	lsls	r0, r3, #30
 80082d8:	bf49      	itett	mi
 80082da:	085b      	lsrmi	r3, r3, #1
 80082dc:	089b      	lsrpl	r3, r3, #2
 80082de:	2001      	movmi	r0, #1
 80082e0:	6013      	strmi	r3, [r2, #0]
 80082e2:	bf5c      	itt	pl
 80082e4:	6013      	strpl	r3, [r2, #0]
 80082e6:	2002      	movpl	r0, #2
 80082e8:	4770      	bx	lr
 80082ea:	b299      	uxth	r1, r3
 80082ec:	b909      	cbnz	r1, 80082f2 <__lo0bits+0x2a>
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	2010      	movs	r0, #16
 80082f2:	b2d9      	uxtb	r1, r3
 80082f4:	b909      	cbnz	r1, 80082fa <__lo0bits+0x32>
 80082f6:	3008      	adds	r0, #8
 80082f8:	0a1b      	lsrs	r3, r3, #8
 80082fa:	0719      	lsls	r1, r3, #28
 80082fc:	bf04      	itt	eq
 80082fe:	091b      	lsreq	r3, r3, #4
 8008300:	3004      	addeq	r0, #4
 8008302:	0799      	lsls	r1, r3, #30
 8008304:	bf04      	itt	eq
 8008306:	089b      	lsreq	r3, r3, #2
 8008308:	3002      	addeq	r0, #2
 800830a:	07d9      	lsls	r1, r3, #31
 800830c:	d403      	bmi.n	8008316 <__lo0bits+0x4e>
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	f100 0001 	add.w	r0, r0, #1
 8008314:	d003      	beq.n	800831e <__lo0bits+0x56>
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	4770      	bx	lr
 800831a:	2000      	movs	r0, #0
 800831c:	4770      	bx	lr
 800831e:	2020      	movs	r0, #32
 8008320:	4770      	bx	lr
	...

08008324 <__i2b>:
 8008324:	b510      	push	{r4, lr}
 8008326:	460c      	mov	r4, r1
 8008328:	2101      	movs	r1, #1
 800832a:	f7ff febb 	bl	80080a4 <_Balloc>
 800832e:	4602      	mov	r2, r0
 8008330:	b928      	cbnz	r0, 800833e <__i2b+0x1a>
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <__i2b+0x24>)
 8008334:	4805      	ldr	r0, [pc, #20]	; (800834c <__i2b+0x28>)
 8008336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800833a:	f001 fa09 	bl	8009750 <__assert_func>
 800833e:	2301      	movs	r3, #1
 8008340:	6144      	str	r4, [r0, #20]
 8008342:	6103      	str	r3, [r0, #16]
 8008344:	bd10      	pop	{r4, pc}
 8008346:	bf00      	nop
 8008348:	0800a628 	.word	0x0800a628
 800834c:	0800a6b4 	.word	0x0800a6b4

08008350 <__multiply>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4691      	mov	r9, r2
 8008356:	690a      	ldr	r2, [r1, #16]
 8008358:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	bfb8      	it	lt
 8008360:	460b      	movlt	r3, r1
 8008362:	460c      	mov	r4, r1
 8008364:	bfbc      	itt	lt
 8008366:	464c      	movlt	r4, r9
 8008368:	4699      	movlt	r9, r3
 800836a:	6927      	ldr	r7, [r4, #16]
 800836c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008370:	68a3      	ldr	r3, [r4, #8]
 8008372:	6861      	ldr	r1, [r4, #4]
 8008374:	eb07 060a 	add.w	r6, r7, sl
 8008378:	42b3      	cmp	r3, r6
 800837a:	b085      	sub	sp, #20
 800837c:	bfb8      	it	lt
 800837e:	3101      	addlt	r1, #1
 8008380:	f7ff fe90 	bl	80080a4 <_Balloc>
 8008384:	b930      	cbnz	r0, 8008394 <__multiply+0x44>
 8008386:	4602      	mov	r2, r0
 8008388:	4b43      	ldr	r3, [pc, #268]	; (8008498 <__multiply+0x148>)
 800838a:	4844      	ldr	r0, [pc, #272]	; (800849c <__multiply+0x14c>)
 800838c:	f240 115d 	movw	r1, #349	; 0x15d
 8008390:	f001 f9de 	bl	8009750 <__assert_func>
 8008394:	f100 0514 	add.w	r5, r0, #20
 8008398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800839c:	462b      	mov	r3, r5
 800839e:	2200      	movs	r2, #0
 80083a0:	4543      	cmp	r3, r8
 80083a2:	d321      	bcc.n	80083e8 <__multiply+0x98>
 80083a4:	f104 0314 	add.w	r3, r4, #20
 80083a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083ac:	f109 0314 	add.w	r3, r9, #20
 80083b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083b4:	9202      	str	r2, [sp, #8]
 80083b6:	1b3a      	subs	r2, r7, r4
 80083b8:	3a15      	subs	r2, #21
 80083ba:	f022 0203 	bic.w	r2, r2, #3
 80083be:	3204      	adds	r2, #4
 80083c0:	f104 0115 	add.w	r1, r4, #21
 80083c4:	428f      	cmp	r7, r1
 80083c6:	bf38      	it	cc
 80083c8:	2204      	movcc	r2, #4
 80083ca:	9201      	str	r2, [sp, #4]
 80083cc:	9a02      	ldr	r2, [sp, #8]
 80083ce:	9303      	str	r3, [sp, #12]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d80c      	bhi.n	80083ee <__multiply+0x9e>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd03      	ble.n	80083e0 <__multiply+0x90>
 80083d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d059      	beq.n	8008494 <__multiply+0x144>
 80083e0:	6106      	str	r6, [r0, #16]
 80083e2:	b005      	add	sp, #20
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	f843 2b04 	str.w	r2, [r3], #4
 80083ec:	e7d8      	b.n	80083a0 <__multiply+0x50>
 80083ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80083f2:	f1ba 0f00 	cmp.w	sl, #0
 80083f6:	d023      	beq.n	8008440 <__multiply+0xf0>
 80083f8:	f104 0e14 	add.w	lr, r4, #20
 80083fc:	46a9      	mov	r9, r5
 80083fe:	f04f 0c00 	mov.w	ip, #0
 8008402:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008406:	f8d9 1000 	ldr.w	r1, [r9]
 800840a:	fa1f fb82 	uxth.w	fp, r2
 800840e:	b289      	uxth	r1, r1
 8008410:	fb0a 110b 	mla	r1, sl, fp, r1
 8008414:	4461      	add	r1, ip
 8008416:	f8d9 c000 	ldr.w	ip, [r9]
 800841a:	0c12      	lsrs	r2, r2, #16
 800841c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008420:	fb0a c202 	mla	r2, sl, r2, ip
 8008424:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008428:	b289      	uxth	r1, r1
 800842a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800842e:	4577      	cmp	r7, lr
 8008430:	f849 1b04 	str.w	r1, [r9], #4
 8008434:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008438:	d8e3      	bhi.n	8008402 <__multiply+0xb2>
 800843a:	9a01      	ldr	r2, [sp, #4]
 800843c:	f845 c002 	str.w	ip, [r5, r2]
 8008440:	9a03      	ldr	r2, [sp, #12]
 8008442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008446:	3304      	adds	r3, #4
 8008448:	f1b9 0f00 	cmp.w	r9, #0
 800844c:	d020      	beq.n	8008490 <__multiply+0x140>
 800844e:	6829      	ldr	r1, [r5, #0]
 8008450:	f104 0c14 	add.w	ip, r4, #20
 8008454:	46ae      	mov	lr, r5
 8008456:	f04f 0a00 	mov.w	sl, #0
 800845a:	f8bc b000 	ldrh.w	fp, [ip]
 800845e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008462:	fb09 220b 	mla	r2, r9, fp, r2
 8008466:	4492      	add	sl, r2
 8008468:	b289      	uxth	r1, r1
 800846a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800846e:	f84e 1b04 	str.w	r1, [lr], #4
 8008472:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008476:	f8be 1000 	ldrh.w	r1, [lr]
 800847a:	0c12      	lsrs	r2, r2, #16
 800847c:	fb09 1102 	mla	r1, r9, r2, r1
 8008480:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008484:	4567      	cmp	r7, ip
 8008486:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800848a:	d8e6      	bhi.n	800845a <__multiply+0x10a>
 800848c:	9a01      	ldr	r2, [sp, #4]
 800848e:	50a9      	str	r1, [r5, r2]
 8008490:	3504      	adds	r5, #4
 8008492:	e79b      	b.n	80083cc <__multiply+0x7c>
 8008494:	3e01      	subs	r6, #1
 8008496:	e79d      	b.n	80083d4 <__multiply+0x84>
 8008498:	0800a628 	.word	0x0800a628
 800849c:	0800a6b4 	.word	0x0800a6b4

080084a0 <__pow5mult>:
 80084a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	4615      	mov	r5, r2
 80084a6:	f012 0203 	ands.w	r2, r2, #3
 80084aa:	4606      	mov	r6, r0
 80084ac:	460f      	mov	r7, r1
 80084ae:	d007      	beq.n	80084c0 <__pow5mult+0x20>
 80084b0:	4c25      	ldr	r4, [pc, #148]	; (8008548 <__pow5mult+0xa8>)
 80084b2:	3a01      	subs	r2, #1
 80084b4:	2300      	movs	r3, #0
 80084b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ba:	f7ff fe55 	bl	8008168 <__multadd>
 80084be:	4607      	mov	r7, r0
 80084c0:	10ad      	asrs	r5, r5, #2
 80084c2:	d03d      	beq.n	8008540 <__pow5mult+0xa0>
 80084c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084c6:	b97c      	cbnz	r4, 80084e8 <__pow5mult+0x48>
 80084c8:	2010      	movs	r0, #16
 80084ca:	f7ff fdc3 	bl	8008054 <malloc>
 80084ce:	4602      	mov	r2, r0
 80084d0:	6270      	str	r0, [r6, #36]	; 0x24
 80084d2:	b928      	cbnz	r0, 80084e0 <__pow5mult+0x40>
 80084d4:	4b1d      	ldr	r3, [pc, #116]	; (800854c <__pow5mult+0xac>)
 80084d6:	481e      	ldr	r0, [pc, #120]	; (8008550 <__pow5mult+0xb0>)
 80084d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084dc:	f001 f938 	bl	8009750 <__assert_func>
 80084e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084e4:	6004      	str	r4, [r0, #0]
 80084e6:	60c4      	str	r4, [r0, #12]
 80084e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f0:	b94c      	cbnz	r4, 8008506 <__pow5mult+0x66>
 80084f2:	f240 2171 	movw	r1, #625	; 0x271
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7ff ff14 	bl	8008324 <__i2b>
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008502:	4604      	mov	r4, r0
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	07eb      	lsls	r3, r5, #31
 800850c:	d50a      	bpl.n	8008524 <__pow5mult+0x84>
 800850e:	4639      	mov	r1, r7
 8008510:	4622      	mov	r2, r4
 8008512:	4630      	mov	r0, r6
 8008514:	f7ff ff1c 	bl	8008350 <__multiply>
 8008518:	4639      	mov	r1, r7
 800851a:	4680      	mov	r8, r0
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff fe01 	bl	8008124 <_Bfree>
 8008522:	4647      	mov	r7, r8
 8008524:	106d      	asrs	r5, r5, #1
 8008526:	d00b      	beq.n	8008540 <__pow5mult+0xa0>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	b938      	cbnz	r0, 800853c <__pow5mult+0x9c>
 800852c:	4622      	mov	r2, r4
 800852e:	4621      	mov	r1, r4
 8008530:	4630      	mov	r0, r6
 8008532:	f7ff ff0d 	bl	8008350 <__multiply>
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	f8c0 9000 	str.w	r9, [r0]
 800853c:	4604      	mov	r4, r0
 800853e:	e7e4      	b.n	800850a <__pow5mult+0x6a>
 8008540:	4638      	mov	r0, r7
 8008542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008546:	bf00      	nop
 8008548:	0800a800 	.word	0x0800a800
 800854c:	0800a5b6 	.word	0x0800a5b6
 8008550:	0800a6b4 	.word	0x0800a6b4

08008554 <__lshift>:
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	460c      	mov	r4, r1
 800855a:	6849      	ldr	r1, [r1, #4]
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	4607      	mov	r7, r0
 8008566:	4691      	mov	r9, r2
 8008568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800856c:	f108 0601 	add.w	r6, r8, #1
 8008570:	42b3      	cmp	r3, r6
 8008572:	db0b      	blt.n	800858c <__lshift+0x38>
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff fd95 	bl	80080a4 <_Balloc>
 800857a:	4605      	mov	r5, r0
 800857c:	b948      	cbnz	r0, 8008592 <__lshift+0x3e>
 800857e:	4602      	mov	r2, r0
 8008580:	4b2a      	ldr	r3, [pc, #168]	; (800862c <__lshift+0xd8>)
 8008582:	482b      	ldr	r0, [pc, #172]	; (8008630 <__lshift+0xdc>)
 8008584:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008588:	f001 f8e2 	bl	8009750 <__assert_func>
 800858c:	3101      	adds	r1, #1
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	e7ee      	b.n	8008570 <__lshift+0x1c>
 8008592:	2300      	movs	r3, #0
 8008594:	f100 0114 	add.w	r1, r0, #20
 8008598:	f100 0210 	add.w	r2, r0, #16
 800859c:	4618      	mov	r0, r3
 800859e:	4553      	cmp	r3, sl
 80085a0:	db37      	blt.n	8008612 <__lshift+0xbe>
 80085a2:	6920      	ldr	r0, [r4, #16]
 80085a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085a8:	f104 0314 	add.w	r3, r4, #20
 80085ac:	f019 091f 	ands.w	r9, r9, #31
 80085b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085b8:	d02f      	beq.n	800861a <__lshift+0xc6>
 80085ba:	f1c9 0e20 	rsb	lr, r9, #32
 80085be:	468a      	mov	sl, r1
 80085c0:	f04f 0c00 	mov.w	ip, #0
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	fa02 f209 	lsl.w	r2, r2, r9
 80085ca:	ea42 020c 	orr.w	r2, r2, ip
 80085ce:	f84a 2b04 	str.w	r2, [sl], #4
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	4298      	cmp	r0, r3
 80085d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085dc:	d8f2      	bhi.n	80085c4 <__lshift+0x70>
 80085de:	1b03      	subs	r3, r0, r4
 80085e0:	3b15      	subs	r3, #21
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	3304      	adds	r3, #4
 80085e8:	f104 0215 	add.w	r2, r4, #21
 80085ec:	4290      	cmp	r0, r2
 80085ee:	bf38      	it	cc
 80085f0:	2304      	movcc	r3, #4
 80085f2:	f841 c003 	str.w	ip, [r1, r3]
 80085f6:	f1bc 0f00 	cmp.w	ip, #0
 80085fa:	d001      	beq.n	8008600 <__lshift+0xac>
 80085fc:	f108 0602 	add.w	r6, r8, #2
 8008600:	3e01      	subs	r6, #1
 8008602:	4638      	mov	r0, r7
 8008604:	612e      	str	r6, [r5, #16]
 8008606:	4621      	mov	r1, r4
 8008608:	f7ff fd8c 	bl	8008124 <_Bfree>
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008612:	f842 0f04 	str.w	r0, [r2, #4]!
 8008616:	3301      	adds	r3, #1
 8008618:	e7c1      	b.n	800859e <__lshift+0x4a>
 800861a:	3904      	subs	r1, #4
 800861c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008620:	f841 2f04 	str.w	r2, [r1, #4]!
 8008624:	4298      	cmp	r0, r3
 8008626:	d8f9      	bhi.n	800861c <__lshift+0xc8>
 8008628:	e7ea      	b.n	8008600 <__lshift+0xac>
 800862a:	bf00      	nop
 800862c:	0800a628 	.word	0x0800a628
 8008630:	0800a6b4 	.word	0x0800a6b4

08008634 <__mcmp>:
 8008634:	690a      	ldr	r2, [r1, #16]
 8008636:	4603      	mov	r3, r0
 8008638:	6900      	ldr	r0, [r0, #16]
 800863a:	1a80      	subs	r0, r0, r2
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	d10d      	bne.n	800865c <__mcmp+0x28>
 8008640:	3314      	adds	r3, #20
 8008642:	3114      	adds	r1, #20
 8008644:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800864c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008650:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008654:	4295      	cmp	r5, r2
 8008656:	d002      	beq.n	800865e <__mcmp+0x2a>
 8008658:	d304      	bcc.n	8008664 <__mcmp+0x30>
 800865a:	2001      	movs	r0, #1
 800865c:	bd30      	pop	{r4, r5, pc}
 800865e:	42a3      	cmp	r3, r4
 8008660:	d3f4      	bcc.n	800864c <__mcmp+0x18>
 8008662:	e7fb      	b.n	800865c <__mcmp+0x28>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008668:	e7f8      	b.n	800865c <__mcmp+0x28>
	...

0800866c <__mdiff>:
 800866c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	460d      	mov	r5, r1
 8008672:	4607      	mov	r7, r0
 8008674:	4611      	mov	r1, r2
 8008676:	4628      	mov	r0, r5
 8008678:	4614      	mov	r4, r2
 800867a:	f7ff ffdb 	bl	8008634 <__mcmp>
 800867e:	1e06      	subs	r6, r0, #0
 8008680:	d111      	bne.n	80086a6 <__mdiff+0x3a>
 8008682:	4631      	mov	r1, r6
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff fd0d 	bl	80080a4 <_Balloc>
 800868a:	4602      	mov	r2, r0
 800868c:	b928      	cbnz	r0, 800869a <__mdiff+0x2e>
 800868e:	4b39      	ldr	r3, [pc, #228]	; (8008774 <__mdiff+0x108>)
 8008690:	f240 2132 	movw	r1, #562	; 0x232
 8008694:	4838      	ldr	r0, [pc, #224]	; (8008778 <__mdiff+0x10c>)
 8008696:	f001 f85b 	bl	8009750 <__assert_func>
 800869a:	2301      	movs	r3, #1
 800869c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086a0:	4610      	mov	r0, r2
 80086a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a6:	bfa4      	itt	ge
 80086a8:	4623      	movge	r3, r4
 80086aa:	462c      	movge	r4, r5
 80086ac:	4638      	mov	r0, r7
 80086ae:	6861      	ldr	r1, [r4, #4]
 80086b0:	bfa6      	itte	ge
 80086b2:	461d      	movge	r5, r3
 80086b4:	2600      	movge	r6, #0
 80086b6:	2601      	movlt	r6, #1
 80086b8:	f7ff fcf4 	bl	80080a4 <_Balloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	b918      	cbnz	r0, 80086c8 <__mdiff+0x5c>
 80086c0:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <__mdiff+0x108>)
 80086c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086c6:	e7e5      	b.n	8008694 <__mdiff+0x28>
 80086c8:	6927      	ldr	r7, [r4, #16]
 80086ca:	60c6      	str	r6, [r0, #12]
 80086cc:	692e      	ldr	r6, [r5, #16]
 80086ce:	f104 0014 	add.w	r0, r4, #20
 80086d2:	f105 0914 	add.w	r9, r5, #20
 80086d6:	f102 0e14 	add.w	lr, r2, #20
 80086da:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80086de:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086e2:	3410      	adds	r4, #16
 80086e4:	46f2      	mov	sl, lr
 80086e6:	2100      	movs	r1, #0
 80086e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80086ec:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80086f0:	fa1f f883 	uxth.w	r8, r3
 80086f4:	fa11 f18b 	uxtah	r1, r1, fp
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	eba1 0808 	sub.w	r8, r1, r8
 80086fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008706:	fa1f f888 	uxth.w	r8, r8
 800870a:	1419      	asrs	r1, r3, #16
 800870c:	454e      	cmp	r6, r9
 800870e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008712:	f84a 3b04 	str.w	r3, [sl], #4
 8008716:	d8e7      	bhi.n	80086e8 <__mdiff+0x7c>
 8008718:	1b73      	subs	r3, r6, r5
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3304      	adds	r3, #4
 8008722:	3515      	adds	r5, #21
 8008724:	42ae      	cmp	r6, r5
 8008726:	bf38      	it	cc
 8008728:	2304      	movcc	r3, #4
 800872a:	4418      	add	r0, r3
 800872c:	4473      	add	r3, lr
 800872e:	469e      	mov	lr, r3
 8008730:	4606      	mov	r6, r0
 8008732:	4566      	cmp	r6, ip
 8008734:	d30e      	bcc.n	8008754 <__mdiff+0xe8>
 8008736:	f10c 0103 	add.w	r1, ip, #3
 800873a:	1a09      	subs	r1, r1, r0
 800873c:	f021 0103 	bic.w	r1, r1, #3
 8008740:	3803      	subs	r0, #3
 8008742:	4584      	cmp	ip, r0
 8008744:	bf38      	it	cc
 8008746:	2100      	movcc	r1, #0
 8008748:	4419      	add	r1, r3
 800874a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800874e:	b17b      	cbz	r3, 8008770 <__mdiff+0x104>
 8008750:	6117      	str	r7, [r2, #16]
 8008752:	e7a5      	b.n	80086a0 <__mdiff+0x34>
 8008754:	f856 8b04 	ldr.w	r8, [r6], #4
 8008758:	fa11 f488 	uxtah	r4, r1, r8
 800875c:	1425      	asrs	r5, r4, #16
 800875e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008762:	b2a4      	uxth	r4, r4
 8008764:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008768:	f84e 4b04 	str.w	r4, [lr], #4
 800876c:	1429      	asrs	r1, r5, #16
 800876e:	e7e0      	b.n	8008732 <__mdiff+0xc6>
 8008770:	3f01      	subs	r7, #1
 8008772:	e7ea      	b.n	800874a <__mdiff+0xde>
 8008774:	0800a628 	.word	0x0800a628
 8008778:	0800a6b4 	.word	0x0800a6b4

0800877c <__ulp>:
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <__ulp+0x48>)
 800877e:	400b      	ands	r3, r1
 8008780:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd02      	ble.n	800878e <__ulp+0x12>
 8008788:	2000      	movs	r0, #0
 800878a:	4619      	mov	r1, r3
 800878c:	4770      	bx	lr
 800878e:	425b      	negs	r3, r3
 8008790:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008794:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008798:	f04f 0000 	mov.w	r0, #0
 800879c:	f04f 0100 	mov.w	r1, #0
 80087a0:	da04      	bge.n	80087ac <__ulp+0x30>
 80087a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80087a6:	fa43 f102 	asr.w	r1, r3, r2
 80087aa:	4770      	bx	lr
 80087ac:	f1a2 0314 	sub.w	r3, r2, #20
 80087b0:	2b1e      	cmp	r3, #30
 80087b2:	bfda      	itte	le
 80087b4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80087b8:	fa22 f303 	lsrle.w	r3, r2, r3
 80087bc:	2301      	movgt	r3, #1
 80087be:	4618      	mov	r0, r3
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	7ff00000 	.word	0x7ff00000

080087c8 <__b2d>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	6907      	ldr	r7, [r0, #16]
 80087ce:	f100 0914 	add.w	r9, r0, #20
 80087d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80087d6:	f1a7 0804 	sub.w	r8, r7, #4
 80087da:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff fd52 	bl	8008288 <__hi0bits>
 80087e4:	f1c0 0320 	rsb	r3, r0, #32
 80087e8:	280a      	cmp	r0, #10
 80087ea:	600b      	str	r3, [r1, #0]
 80087ec:	491f      	ldr	r1, [pc, #124]	; (800886c <__b2d+0xa4>)
 80087ee:	dc17      	bgt.n	8008820 <__b2d+0x58>
 80087f0:	f1c0 0c0b 	rsb	ip, r0, #11
 80087f4:	45c1      	cmp	r9, r8
 80087f6:	fa26 f30c 	lsr.w	r3, r6, ip
 80087fa:	bf38      	it	cc
 80087fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008800:	ea43 0501 	orr.w	r5, r3, r1
 8008804:	bf28      	it	cs
 8008806:	2200      	movcs	r2, #0
 8008808:	f100 0315 	add.w	r3, r0, #21
 800880c:	fa06 f303 	lsl.w	r3, r6, r3
 8008810:	fa22 f20c 	lsr.w	r2, r2, ip
 8008814:	ea43 0402 	orr.w	r4, r3, r2
 8008818:	4620      	mov	r0, r4
 800881a:	4629      	mov	r1, r5
 800881c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008820:	45c1      	cmp	r9, r8
 8008822:	bf3a      	itte	cc
 8008824:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008828:	f1a7 0808 	subcc.w	r8, r7, #8
 800882c:	2200      	movcs	r2, #0
 800882e:	f1b0 030b 	subs.w	r3, r0, #11
 8008832:	d016      	beq.n	8008862 <__b2d+0x9a>
 8008834:	f1c3 0720 	rsb	r7, r3, #32
 8008838:	fa22 f107 	lsr.w	r1, r2, r7
 800883c:	45c8      	cmp	r8, r9
 800883e:	fa06 f603 	lsl.w	r6, r6, r3
 8008842:	ea46 0601 	orr.w	r6, r6, r1
 8008846:	bf8c      	ite	hi
 8008848:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800884c:	2100      	movls	r1, #0
 800884e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008852:	fa02 f003 	lsl.w	r0, r2, r3
 8008856:	40f9      	lsrs	r1, r7
 8008858:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800885c:	ea40 0401 	orr.w	r4, r0, r1
 8008860:	e7da      	b.n	8008818 <__b2d+0x50>
 8008862:	ea46 0501 	orr.w	r5, r6, r1
 8008866:	4614      	mov	r4, r2
 8008868:	e7d6      	b.n	8008818 <__b2d+0x50>
 800886a:	bf00      	nop
 800886c:	3ff00000 	.word	0x3ff00000

08008870 <__d2b>:
 8008870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008874:	2101      	movs	r1, #1
 8008876:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800887a:	4690      	mov	r8, r2
 800887c:	461d      	mov	r5, r3
 800887e:	f7ff fc11 	bl	80080a4 <_Balloc>
 8008882:	4604      	mov	r4, r0
 8008884:	b930      	cbnz	r0, 8008894 <__d2b+0x24>
 8008886:	4602      	mov	r2, r0
 8008888:	4b25      	ldr	r3, [pc, #148]	; (8008920 <__d2b+0xb0>)
 800888a:	4826      	ldr	r0, [pc, #152]	; (8008924 <__d2b+0xb4>)
 800888c:	f240 310a 	movw	r1, #778	; 0x30a
 8008890:	f000 ff5e 	bl	8009750 <__assert_func>
 8008894:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008898:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800889c:	bb2d      	cbnz	r5, 80088ea <__d2b+0x7a>
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	f1b8 0300 	subs.w	r3, r8, #0
 80088a4:	d026      	beq.n	80088f4 <__d2b+0x84>
 80088a6:	4668      	mov	r0, sp
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	f7ff fd0d 	bl	80082c8 <__lo0bits>
 80088ae:	9900      	ldr	r1, [sp, #0]
 80088b0:	b1f0      	cbz	r0, 80088f0 <__d2b+0x80>
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	f1c0 0320 	rsb	r3, r0, #32
 80088b8:	fa02 f303 	lsl.w	r3, r2, r3
 80088bc:	430b      	orrs	r3, r1
 80088be:	40c2      	lsrs	r2, r0
 80088c0:	6163      	str	r3, [r4, #20]
 80088c2:	9201      	str	r2, [sp, #4]
 80088c4:	9b01      	ldr	r3, [sp, #4]
 80088c6:	61a3      	str	r3, [r4, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2102      	movne	r1, #2
 80088ce:	2101      	moveq	r1, #1
 80088d0:	6121      	str	r1, [r4, #16]
 80088d2:	b1c5      	cbz	r5, 8008906 <__d2b+0x96>
 80088d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088d8:	4405      	add	r5, r0
 80088da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088de:	603d      	str	r5, [r7, #0]
 80088e0:	6030      	str	r0, [r6, #0]
 80088e2:	4620      	mov	r0, r4
 80088e4:	b002      	add	sp, #8
 80088e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ee:	e7d6      	b.n	800889e <__d2b+0x2e>
 80088f0:	6161      	str	r1, [r4, #20]
 80088f2:	e7e7      	b.n	80088c4 <__d2b+0x54>
 80088f4:	a801      	add	r0, sp, #4
 80088f6:	f7ff fce7 	bl	80082c8 <__lo0bits>
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	6163      	str	r3, [r4, #20]
 80088fe:	2101      	movs	r1, #1
 8008900:	6121      	str	r1, [r4, #16]
 8008902:	3020      	adds	r0, #32
 8008904:	e7e5      	b.n	80088d2 <__d2b+0x62>
 8008906:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800890a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800890e:	6038      	str	r0, [r7, #0]
 8008910:	6918      	ldr	r0, [r3, #16]
 8008912:	f7ff fcb9 	bl	8008288 <__hi0bits>
 8008916:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800891a:	6031      	str	r1, [r6, #0]
 800891c:	e7e1      	b.n	80088e2 <__d2b+0x72>
 800891e:	bf00      	nop
 8008920:	0800a628 	.word	0x0800a628
 8008924:	0800a6b4 	.word	0x0800a6b4

08008928 <__ratio>:
 8008928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	4688      	mov	r8, r1
 800892e:	4669      	mov	r1, sp
 8008930:	4681      	mov	r9, r0
 8008932:	f7ff ff49 	bl	80087c8 <__b2d>
 8008936:	460f      	mov	r7, r1
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	4640      	mov	r0, r8
 800893e:	a901      	add	r1, sp, #4
 8008940:	f7ff ff42 	bl	80087c8 <__b2d>
 8008944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008948:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800894c:	eba3 0c02 	sub.w	ip, r3, r2
 8008950:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800895a:	2b00      	cmp	r3, #0
 800895c:	bfd5      	itete	le
 800895e:	460a      	movle	r2, r1
 8008960:	462a      	movgt	r2, r5
 8008962:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800896a:	468b      	mov	fp, r1
 800896c:	bfd8      	it	le
 800896e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008972:	465b      	mov	r3, fp
 8008974:	4602      	mov	r2, r0
 8008976:	4639      	mov	r1, r7
 8008978:	4620      	mov	r0, r4
 800897a:	f7f7 ff3f 	bl	80007fc <__aeabi_ddiv>
 800897e:	b003      	add	sp, #12
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008984 <__copybits>:
 8008984:	3901      	subs	r1, #1
 8008986:	b570      	push	{r4, r5, r6, lr}
 8008988:	1149      	asrs	r1, r1, #5
 800898a:	6914      	ldr	r4, [r2, #16]
 800898c:	3101      	adds	r1, #1
 800898e:	f102 0314 	add.w	r3, r2, #20
 8008992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800899a:	1f05      	subs	r5, r0, #4
 800899c:	42a3      	cmp	r3, r4
 800899e:	d30c      	bcc.n	80089ba <__copybits+0x36>
 80089a0:	1aa3      	subs	r3, r4, r2
 80089a2:	3b11      	subs	r3, #17
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	3211      	adds	r2, #17
 80089aa:	42a2      	cmp	r2, r4
 80089ac:	bf88      	it	hi
 80089ae:	2300      	movhi	r3, #0
 80089b0:	4418      	add	r0, r3
 80089b2:	2300      	movs	r3, #0
 80089b4:	4288      	cmp	r0, r1
 80089b6:	d305      	bcc.n	80089c4 <__copybits+0x40>
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80089be:	f845 6f04 	str.w	r6, [r5, #4]!
 80089c2:	e7eb      	b.n	800899c <__copybits+0x18>
 80089c4:	f840 3b04 	str.w	r3, [r0], #4
 80089c8:	e7f4      	b.n	80089b4 <__copybits+0x30>

080089ca <__any_on>:
 80089ca:	f100 0214 	add.w	r2, r0, #20
 80089ce:	6900      	ldr	r0, [r0, #16]
 80089d0:	114b      	asrs	r3, r1, #5
 80089d2:	4298      	cmp	r0, r3
 80089d4:	b510      	push	{r4, lr}
 80089d6:	db11      	blt.n	80089fc <__any_on+0x32>
 80089d8:	dd0a      	ble.n	80089f0 <__any_on+0x26>
 80089da:	f011 011f 	ands.w	r1, r1, #31
 80089de:	d007      	beq.n	80089f0 <__any_on+0x26>
 80089e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089e4:	fa24 f001 	lsr.w	r0, r4, r1
 80089e8:	fa00 f101 	lsl.w	r1, r0, r1
 80089ec:	428c      	cmp	r4, r1
 80089ee:	d10b      	bne.n	8008a08 <__any_on+0x3e>
 80089f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d803      	bhi.n	8008a00 <__any_on+0x36>
 80089f8:	2000      	movs	r0, #0
 80089fa:	bd10      	pop	{r4, pc}
 80089fc:	4603      	mov	r3, r0
 80089fe:	e7f7      	b.n	80089f0 <__any_on+0x26>
 8008a00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d0f5      	beq.n	80089f4 <__any_on+0x2a>
 8008a08:	2001      	movs	r0, #1
 8008a0a:	e7f6      	b.n	80089fa <__any_on+0x30>

08008a0c <_calloc_r>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a12:	b934      	cbnz	r4, 8008a22 <_calloc_r+0x16>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f000 f877 	bl	8008b08 <_malloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <_calloc_r+0x1e>
 8008a1e:	4630      	mov	r0, r6
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
 8008a22:	220c      	movs	r2, #12
 8008a24:	6002      	str	r2, [r0, #0]
 8008a26:	2600      	movs	r6, #0
 8008a28:	e7f9      	b.n	8008a1e <_calloc_r+0x12>
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7fc fb4b 	bl	80050c8 <memset>
 8008a32:	e7f4      	b.n	8008a1e <_calloc_r+0x12>

08008a34 <_free_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4605      	mov	r5, r0
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d041      	beq.n	8008ac0 <_free_r+0x8c>
 8008a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a40:	1f0c      	subs	r4, r1, #4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	18e4      	addlt	r4, r4, r3
 8008a48:	f001 f882 	bl	8009b50 <__malloc_lock>
 8008a4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <_free_r+0x90>)
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	b933      	cbnz	r3, 8008a60 <_free_r+0x2c>
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	6014      	str	r4, [r2, #0]
 8008a56:	4628      	mov	r0, r5
 8008a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a5c:	f001 b87e 	b.w	8009b5c <__malloc_unlock>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d908      	bls.n	8008a76 <_free_r+0x42>
 8008a64:	6820      	ldr	r0, [r4, #0]
 8008a66:	1821      	adds	r1, r4, r0
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf01      	itttt	eq
 8008a6c:	6819      	ldreq	r1, [r3, #0]
 8008a6e:	685b      	ldreq	r3, [r3, #4]
 8008a70:	1809      	addeq	r1, r1, r0
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	e7ed      	b.n	8008a52 <_free_r+0x1e>
 8008a76:	461a      	mov	r2, r3
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b10b      	cbz	r3, 8008a80 <_free_r+0x4c>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d9fa      	bls.n	8008a76 <_free_r+0x42>
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	1850      	adds	r0, r2, r1
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d10b      	bne.n	8008aa0 <_free_r+0x6c>
 8008a88:	6820      	ldr	r0, [r4, #0]
 8008a8a:	4401      	add	r1, r0
 8008a8c:	1850      	adds	r0, r2, r1
 8008a8e:	4283      	cmp	r3, r0
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	d1e0      	bne.n	8008a56 <_free_r+0x22>
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	6053      	str	r3, [r2, #4]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	e7da      	b.n	8008a56 <_free_r+0x22>
 8008aa0:	d902      	bls.n	8008aa8 <_free_r+0x74>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	602b      	str	r3, [r5, #0]
 8008aa6:	e7d6      	b.n	8008a56 <_free_r+0x22>
 8008aa8:	6820      	ldr	r0, [r4, #0]
 8008aaa:	1821      	adds	r1, r4, r0
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf04      	itt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bf04      	itt	eq
 8008ab8:	1809      	addeq	r1, r1, r0
 8008aba:	6021      	streq	r1, [r4, #0]
 8008abc:	6054      	str	r4, [r2, #4]
 8008abe:	e7ca      	b.n	8008a56 <_free_r+0x22>
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200002e0 	.word	0x200002e0

08008ac8 <sbrk_aligned>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4e0e      	ldr	r6, [pc, #56]	; (8008b04 <sbrk_aligned+0x3c>)
 8008acc:	460c      	mov	r4, r1
 8008ace:	6831      	ldr	r1, [r6, #0]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	b911      	cbnz	r1, 8008ada <sbrk_aligned+0x12>
 8008ad4:	f000 fd24 	bl	8009520 <_sbrk_r>
 8008ad8:	6030      	str	r0, [r6, #0]
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fd1f 	bl	8009520 <_sbrk_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d00a      	beq.n	8008afc <sbrk_aligned+0x34>
 8008ae6:	1cc4      	adds	r4, r0, #3
 8008ae8:	f024 0403 	bic.w	r4, r4, #3
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d007      	beq.n	8008b00 <sbrk_aligned+0x38>
 8008af0:	1a21      	subs	r1, r4, r0
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 fd14 	bl	8009520 <_sbrk_r>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d101      	bne.n	8008b00 <sbrk_aligned+0x38>
 8008afc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b00:	4620      	mov	r0, r4
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	200002e4 	.word	0x200002e4

08008b08 <_malloc_r>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	1ccd      	adds	r5, r1, #3
 8008b0e:	f025 0503 	bic.w	r5, r5, #3
 8008b12:	3508      	adds	r5, #8
 8008b14:	2d0c      	cmp	r5, #12
 8008b16:	bf38      	it	cc
 8008b18:	250c      	movcc	r5, #12
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	db01      	blt.n	8008b24 <_malloc_r+0x1c>
 8008b20:	42a9      	cmp	r1, r5
 8008b22:	d905      	bls.n	8008b30 <_malloc_r+0x28>
 8008b24:	230c      	movs	r3, #12
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	2600      	movs	r6, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b30:	4e2e      	ldr	r6, [pc, #184]	; (8008bec <_malloc_r+0xe4>)
 8008b32:	f001 f80d 	bl	8009b50 <__malloc_lock>
 8008b36:	6833      	ldr	r3, [r6, #0]
 8008b38:	461c      	mov	r4, r3
 8008b3a:	bb34      	cbnz	r4, 8008b8a <_malloc_r+0x82>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7ff ffc2 	bl	8008ac8 <sbrk_aligned>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	4604      	mov	r4, r0
 8008b48:	d14d      	bne.n	8008be6 <_malloc_r+0xde>
 8008b4a:	6834      	ldr	r4, [r6, #0]
 8008b4c:	4626      	mov	r6, r4
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	d140      	bne.n	8008bd4 <_malloc_r+0xcc>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	4631      	mov	r1, r6
 8008b56:	4638      	mov	r0, r7
 8008b58:	eb04 0803 	add.w	r8, r4, r3
 8008b5c:	f000 fce0 	bl	8009520 <_sbrk_r>
 8008b60:	4580      	cmp	r8, r0
 8008b62:	d13a      	bne.n	8008bda <_malloc_r+0xd2>
 8008b64:	6821      	ldr	r1, [r4, #0]
 8008b66:	3503      	adds	r5, #3
 8008b68:	1a6d      	subs	r5, r5, r1
 8008b6a:	f025 0503 	bic.w	r5, r5, #3
 8008b6e:	3508      	adds	r5, #8
 8008b70:	2d0c      	cmp	r5, #12
 8008b72:	bf38      	it	cc
 8008b74:	250c      	movcc	r5, #12
 8008b76:	4629      	mov	r1, r5
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7ff ffa5 	bl	8008ac8 <sbrk_aligned>
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d02b      	beq.n	8008bda <_malloc_r+0xd2>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	442b      	add	r3, r5
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	e00e      	b.n	8008ba8 <_malloc_r+0xa0>
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	1b52      	subs	r2, r2, r5
 8008b8e:	d41e      	bmi.n	8008bce <_malloc_r+0xc6>
 8008b90:	2a0b      	cmp	r2, #11
 8008b92:	d916      	bls.n	8008bc2 <_malloc_r+0xba>
 8008b94:	1961      	adds	r1, r4, r5
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	6025      	str	r5, [r4, #0]
 8008b9a:	bf18      	it	ne
 8008b9c:	6059      	strne	r1, [r3, #4]
 8008b9e:	6863      	ldr	r3, [r4, #4]
 8008ba0:	bf08      	it	eq
 8008ba2:	6031      	streq	r1, [r6, #0]
 8008ba4:	5162      	str	r2, [r4, r5]
 8008ba6:	604b      	str	r3, [r1, #4]
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f104 060b 	add.w	r6, r4, #11
 8008bae:	f000 ffd5 	bl	8009b5c <__malloc_unlock>
 8008bb2:	f026 0607 	bic.w	r6, r6, #7
 8008bb6:	1d23      	adds	r3, r4, #4
 8008bb8:	1af2      	subs	r2, r6, r3
 8008bba:	d0b6      	beq.n	8008b2a <_malloc_r+0x22>
 8008bbc:	1b9b      	subs	r3, r3, r6
 8008bbe:	50a3      	str	r3, [r4, r2]
 8008bc0:	e7b3      	b.n	8008b2a <_malloc_r+0x22>
 8008bc2:	6862      	ldr	r2, [r4, #4]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	bf0c      	ite	eq
 8008bc8:	6032      	streq	r2, [r6, #0]
 8008bca:	605a      	strne	r2, [r3, #4]
 8008bcc:	e7ec      	b.n	8008ba8 <_malloc_r+0xa0>
 8008bce:	4623      	mov	r3, r4
 8008bd0:	6864      	ldr	r4, [r4, #4]
 8008bd2:	e7b2      	b.n	8008b3a <_malloc_r+0x32>
 8008bd4:	4634      	mov	r4, r6
 8008bd6:	6876      	ldr	r6, [r6, #4]
 8008bd8:	e7b9      	b.n	8008b4e <_malloc_r+0x46>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	603b      	str	r3, [r7, #0]
 8008bde:	4638      	mov	r0, r7
 8008be0:	f000 ffbc 	bl	8009b5c <__malloc_unlock>
 8008be4:	e7a1      	b.n	8008b2a <_malloc_r+0x22>
 8008be6:	6025      	str	r5, [r4, #0]
 8008be8:	e7de      	b.n	8008ba8 <_malloc_r+0xa0>
 8008bea:	bf00      	nop
 8008bec:	200002e0 	.word	0x200002e0

08008bf0 <__ssputs_r>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	688e      	ldr	r6, [r1, #8]
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	4690      	mov	r8, r2
 8008bfe:	461f      	mov	r7, r3
 8008c00:	d838      	bhi.n	8008c74 <__ssputs_r+0x84>
 8008c02:	898a      	ldrh	r2, [r1, #12]
 8008c04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c08:	d032      	beq.n	8008c70 <__ssputs_r+0x80>
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	6909      	ldr	r1, [r1, #16]
 8008c0e:	eba5 0901 	sub.w	r9, r5, r1
 8008c12:	6965      	ldr	r5, [r4, #20]
 8008c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	444b      	add	r3, r9
 8008c20:	106d      	asrs	r5, r5, #1
 8008c22:	429d      	cmp	r5, r3
 8008c24:	bf38      	it	cc
 8008c26:	461d      	movcc	r5, r3
 8008c28:	0553      	lsls	r3, r2, #21
 8008c2a:	d531      	bpl.n	8008c90 <__ssputs_r+0xa0>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f7ff ff6b 	bl	8008b08 <_malloc_r>
 8008c32:	4606      	mov	r6, r0
 8008c34:	b950      	cbnz	r0, 8008c4c <__ssputs_r+0x5c>
 8008c36:	230c      	movs	r3, #12
 8008c38:	f8ca 3000 	str.w	r3, [sl]
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4c:	6921      	ldr	r1, [r4, #16]
 8008c4e:	464a      	mov	r2, r9
 8008c50:	f7ff fa1a 	bl	8008088 <memcpy>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	6126      	str	r6, [r4, #16]
 8008c62:	6165      	str	r5, [r4, #20]
 8008c64:	444e      	add	r6, r9
 8008c66:	eba5 0509 	sub.w	r5, r5, r9
 8008c6a:	6026      	str	r6, [r4, #0]
 8008c6c:	60a5      	str	r5, [r4, #8]
 8008c6e:	463e      	mov	r6, r7
 8008c70:	42be      	cmp	r6, r7
 8008c72:	d900      	bls.n	8008c76 <__ssputs_r+0x86>
 8008c74:	463e      	mov	r6, r7
 8008c76:	6820      	ldr	r0, [r4, #0]
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	f000 ff4e 	bl	8009b1c <memmove>
 8008c80:	68a3      	ldr	r3, [r4, #8]
 8008c82:	1b9b      	subs	r3, r3, r6
 8008c84:	60a3      	str	r3, [r4, #8]
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4433      	add	r3, r6
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e7db      	b.n	8008c48 <__ssputs_r+0x58>
 8008c90:	462a      	mov	r2, r5
 8008c92:	f000 ff69 	bl	8009b68 <_realloc_r>
 8008c96:	4606      	mov	r6, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d1e1      	bne.n	8008c60 <__ssputs_r+0x70>
 8008c9c:	6921      	ldr	r1, [r4, #16]
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	f7ff fec8 	bl	8008a34 <_free_r>
 8008ca4:	e7c7      	b.n	8008c36 <__ssputs_r+0x46>
	...

08008ca8 <_svfiprintf_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	4698      	mov	r8, r3
 8008cae:	898b      	ldrh	r3, [r1, #12]
 8008cb0:	061b      	lsls	r3, r3, #24
 8008cb2:	b09d      	sub	sp, #116	; 0x74
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	d50e      	bpl.n	8008cda <_svfiprintf_r+0x32>
 8008cbc:	690b      	ldr	r3, [r1, #16]
 8008cbe:	b963      	cbnz	r3, 8008cda <_svfiprintf_r+0x32>
 8008cc0:	2140      	movs	r1, #64	; 0x40
 8008cc2:	f7ff ff21 	bl	8008b08 <_malloc_r>
 8008cc6:	6028      	str	r0, [r5, #0]
 8008cc8:	6128      	str	r0, [r5, #16]
 8008cca:	b920      	cbnz	r0, 8008cd6 <_svfiprintf_r+0x2e>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd4:	e0d1      	b.n	8008e7a <_svfiprintf_r+0x1d2>
 8008cd6:	2340      	movs	r3, #64	; 0x40
 8008cd8:	616b      	str	r3, [r5, #20]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cde:	2320      	movs	r3, #32
 8008ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce8:	2330      	movs	r3, #48	; 0x30
 8008cea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e94 <_svfiprintf_r+0x1ec>
 8008cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf2:	f04f 0901 	mov.w	r9, #1
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	469a      	mov	sl, r3
 8008cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cfe:	b10a      	cbz	r2, 8008d04 <_svfiprintf_r+0x5c>
 8008d00:	2a25      	cmp	r2, #37	; 0x25
 8008d02:	d1f9      	bne.n	8008cf8 <_svfiprintf_r+0x50>
 8008d04:	ebba 0b04 	subs.w	fp, sl, r4
 8008d08:	d00b      	beq.n	8008d22 <_svfiprintf_r+0x7a>
 8008d0a:	465b      	mov	r3, fp
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ff6d 	bl	8008bf0 <__ssputs_r>
 8008d16:	3001      	adds	r0, #1
 8008d18:	f000 80aa 	beq.w	8008e70 <_svfiprintf_r+0x1c8>
 8008d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d1e:	445a      	add	r2, fp
 8008d20:	9209      	str	r2, [sp, #36]	; 0x24
 8008d22:	f89a 3000 	ldrb.w	r3, [sl]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 80a2 	beq.w	8008e70 <_svfiprintf_r+0x1c8>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d36:	f10a 0a01 	add.w	sl, sl, #1
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	9307      	str	r3, [sp, #28]
 8008d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d42:	931a      	str	r3, [sp, #104]	; 0x68
 8008d44:	4654      	mov	r4, sl
 8008d46:	2205      	movs	r2, #5
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	4851      	ldr	r0, [pc, #324]	; (8008e94 <_svfiprintf_r+0x1ec>)
 8008d4e:	f7f7 fa1f 	bl	8000190 <memchr>
 8008d52:	9a04      	ldr	r2, [sp, #16]
 8008d54:	b9d8      	cbnz	r0, 8008d8e <_svfiprintf_r+0xe6>
 8008d56:	06d0      	lsls	r0, r2, #27
 8008d58:	bf44      	itt	mi
 8008d5a:	2320      	movmi	r3, #32
 8008d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d60:	0711      	lsls	r1, r2, #28
 8008d62:	bf44      	itt	mi
 8008d64:	232b      	movmi	r3, #43	; 0x2b
 8008d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d70:	d015      	beq.n	8008d9e <_svfiprintf_r+0xf6>
 8008d72:	9a07      	ldr	r2, [sp, #28]
 8008d74:	4654      	mov	r4, sl
 8008d76:	2000      	movs	r0, #0
 8008d78:	f04f 0c0a 	mov.w	ip, #10
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d82:	3b30      	subs	r3, #48	; 0x30
 8008d84:	2b09      	cmp	r3, #9
 8008d86:	d94e      	bls.n	8008e26 <_svfiprintf_r+0x17e>
 8008d88:	b1b0      	cbz	r0, 8008db8 <_svfiprintf_r+0x110>
 8008d8a:	9207      	str	r2, [sp, #28]
 8008d8c:	e014      	b.n	8008db8 <_svfiprintf_r+0x110>
 8008d8e:	eba0 0308 	sub.w	r3, r0, r8
 8008d92:	fa09 f303 	lsl.w	r3, r9, r3
 8008d96:	4313      	orrs	r3, r2
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	46a2      	mov	sl, r4
 8008d9c:	e7d2      	b.n	8008d44 <_svfiprintf_r+0x9c>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	1d19      	adds	r1, r3, #4
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	9103      	str	r1, [sp, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	bfbb      	ittet	lt
 8008daa:	425b      	neglt	r3, r3
 8008dac:	f042 0202 	orrlt.w	r2, r2, #2
 8008db0:	9307      	strge	r3, [sp, #28]
 8008db2:	9307      	strlt	r3, [sp, #28]
 8008db4:	bfb8      	it	lt
 8008db6:	9204      	strlt	r2, [sp, #16]
 8008db8:	7823      	ldrb	r3, [r4, #0]
 8008dba:	2b2e      	cmp	r3, #46	; 0x2e
 8008dbc:	d10c      	bne.n	8008dd8 <_svfiprintf_r+0x130>
 8008dbe:	7863      	ldrb	r3, [r4, #1]
 8008dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc2:	d135      	bne.n	8008e30 <_svfiprintf_r+0x188>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	1d1a      	adds	r2, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	9203      	str	r2, [sp, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfb8      	it	lt
 8008dd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008dd4:	3402      	adds	r4, #2
 8008dd6:	9305      	str	r3, [sp, #20]
 8008dd8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008e98 <_svfiprintf_r+0x1f0>
 8008ddc:	7821      	ldrb	r1, [r4, #0]
 8008dde:	2203      	movs	r2, #3
 8008de0:	4650      	mov	r0, sl
 8008de2:	f7f7 f9d5 	bl	8000190 <memchr>
 8008de6:	b140      	cbz	r0, 8008dfa <_svfiprintf_r+0x152>
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	eba0 000a 	sub.w	r0, r0, sl
 8008dee:	fa03 f000 	lsl.w	r0, r3, r0
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	4303      	orrs	r3, r0
 8008df6:	3401      	adds	r4, #1
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfe:	4827      	ldr	r0, [pc, #156]	; (8008e9c <_svfiprintf_r+0x1f4>)
 8008e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e04:	2206      	movs	r2, #6
 8008e06:	f7f7 f9c3 	bl	8000190 <memchr>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d038      	beq.n	8008e80 <_svfiprintf_r+0x1d8>
 8008e0e:	4b24      	ldr	r3, [pc, #144]	; (8008ea0 <_svfiprintf_r+0x1f8>)
 8008e10:	bb1b      	cbnz	r3, 8008e5a <_svfiprintf_r+0x1b2>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	3307      	adds	r3, #7
 8008e16:	f023 0307 	bic.w	r3, r3, #7
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	9303      	str	r3, [sp, #12]
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	4433      	add	r3, r6
 8008e22:	9309      	str	r3, [sp, #36]	; 0x24
 8008e24:	e767      	b.n	8008cf6 <_svfiprintf_r+0x4e>
 8008e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	e7a5      	b.n	8008d7c <_svfiprintf_r+0xd4>
 8008e30:	2300      	movs	r3, #0
 8008e32:	3401      	adds	r4, #1
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	4619      	mov	r1, r3
 8008e38:	f04f 0c0a 	mov.w	ip, #10
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e42:	3a30      	subs	r2, #48	; 0x30
 8008e44:	2a09      	cmp	r2, #9
 8008e46:	d903      	bls.n	8008e50 <_svfiprintf_r+0x1a8>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0c5      	beq.n	8008dd8 <_svfiprintf_r+0x130>
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	e7c3      	b.n	8008dd8 <_svfiprintf_r+0x130>
 8008e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e54:	4604      	mov	r4, r0
 8008e56:	2301      	movs	r3, #1
 8008e58:	e7f0      	b.n	8008e3c <_svfiprintf_r+0x194>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <_svfiprintf_r+0x1fc>)
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7fc f9d5 	bl	8005214 <_printf_float>
 8008e6a:	1c42      	adds	r2, r0, #1
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	d1d6      	bne.n	8008e1e <_svfiprintf_r+0x176>
 8008e70:	89ab      	ldrh	r3, [r5, #12]
 8008e72:	065b      	lsls	r3, r3, #25
 8008e74:	f53f af2c 	bmi.w	8008cd0 <_svfiprintf_r+0x28>
 8008e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e7a:	b01d      	add	sp, #116	; 0x74
 8008e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	ab03      	add	r3, sp, #12
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	462a      	mov	r2, r5
 8008e86:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <_svfiprintf_r+0x1fc>)
 8008e88:	a904      	add	r1, sp, #16
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7fc fc5a 	bl	8005744 <_printf_i>
 8008e90:	e7eb      	b.n	8008e6a <_svfiprintf_r+0x1c2>
 8008e92:	bf00      	nop
 8008e94:	0800a80c 	.word	0x0800a80c
 8008e98:	0800a812 	.word	0x0800a812
 8008e9c:	0800a816 	.word	0x0800a816
 8008ea0:	08005215 	.word	0x08005215
 8008ea4:	08008bf1 	.word	0x08008bf1

08008ea8 <_sungetc_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	1c4b      	adds	r3, r1, #1
 8008eac:	4614      	mov	r4, r2
 8008eae:	d103      	bne.n	8008eb8 <_sungetc_r+0x10>
 8008eb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	8993      	ldrh	r3, [r2, #12]
 8008eba:	f023 0320 	bic.w	r3, r3, #32
 8008ebe:	8193      	strh	r3, [r2, #12]
 8008ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec2:	6852      	ldr	r2, [r2, #4]
 8008ec4:	b2cd      	uxtb	r5, r1
 8008ec6:	b18b      	cbz	r3, 8008eec <_sungetc_r+0x44>
 8008ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	dd08      	ble.n	8008ee0 <_sungetc_r+0x38>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	1e5a      	subs	r2, r3, #1
 8008ed2:	6022      	str	r2, [r4, #0]
 8008ed4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ed8:	6863      	ldr	r3, [r4, #4]
 8008eda:	3301      	adds	r3, #1
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	e7e9      	b.n	8008eb4 <_sungetc_r+0xc>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f000 fbed 	bl	80096c0 <__submore>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0f1      	beq.n	8008ece <_sungetc_r+0x26>
 8008eea:	e7e1      	b.n	8008eb0 <_sungetc_r+0x8>
 8008eec:	6921      	ldr	r1, [r4, #16]
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	b151      	cbz	r1, 8008f08 <_sungetc_r+0x60>
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	d208      	bcs.n	8008f08 <_sungetc_r+0x60>
 8008ef6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008efa:	42a9      	cmp	r1, r5
 8008efc:	d104      	bne.n	8008f08 <_sungetc_r+0x60>
 8008efe:	3b01      	subs	r3, #1
 8008f00:	3201      	adds	r2, #1
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	6062      	str	r2, [r4, #4]
 8008f06:	e7d5      	b.n	8008eb4 <_sungetc_r+0xc>
 8008f08:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f10:	6363      	str	r3, [r4, #52]	; 0x34
 8008f12:	2303      	movs	r3, #3
 8008f14:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f16:	4623      	mov	r3, r4
 8008f18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e7dc      	b.n	8008edc <_sungetc_r+0x34>

08008f22 <__ssrefill_r>:
 8008f22:	b510      	push	{r4, lr}
 8008f24:	460c      	mov	r4, r1
 8008f26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f28:	b169      	cbz	r1, 8008f46 <__ssrefill_r+0x24>
 8008f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	d001      	beq.n	8008f36 <__ssrefill_r+0x14>
 8008f32:	f7ff fd7f 	bl	8008a34 <_free_r>
 8008f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f3e:	b113      	cbz	r3, 8008f46 <__ssrefill_r+0x24>
 8008f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0320 	orr.w	r3, r3, #32
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5a:	e7f3      	b.n	8008f44 <__ssrefill_r+0x22>

08008f5c <__ssvfiscanf_r>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008f66:	2100      	movs	r1, #0
 8008f68:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008f6c:	49a6      	ldr	r1, [pc, #664]	; (8009208 <__ssvfiscanf_r+0x2ac>)
 8008f6e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008f70:	f10d 0804 	add.w	r8, sp, #4
 8008f74:	49a5      	ldr	r1, [pc, #660]	; (800920c <__ssvfiscanf_r+0x2b0>)
 8008f76:	4fa6      	ldr	r7, [pc, #664]	; (8009210 <__ssvfiscanf_r+0x2b4>)
 8008f78:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009214 <__ssvfiscanf_r+0x2b8>
 8008f7c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008f80:	4606      	mov	r6, r0
 8008f82:	91a1      	str	r1, [sp, #644]	; 0x284
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	7813      	ldrb	r3, [r2, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 815a 	beq.w	8009242 <__ssvfiscanf_r+0x2e6>
 8008f8e:	5dd9      	ldrb	r1, [r3, r7]
 8008f90:	f011 0108 	ands.w	r1, r1, #8
 8008f94:	f102 0501 	add.w	r5, r2, #1
 8008f98:	d019      	beq.n	8008fce <__ssvfiscanf_r+0x72>
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dd0f      	ble.n	8008fc0 <__ssvfiscanf_r+0x64>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	5cba      	ldrb	r2, [r7, r2]
 8008fa6:	0712      	lsls	r2, r2, #28
 8008fa8:	d401      	bmi.n	8008fae <__ssvfiscanf_r+0x52>
 8008faa:	462a      	mov	r2, r5
 8008fac:	e7eb      	b.n	8008f86 <__ssvfiscanf_r+0x2a>
 8008fae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	9245      	str	r2, [sp, #276]	; 0x114
 8008fb4:	6862      	ldr	r2, [r4, #4]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	3a01      	subs	r2, #1
 8008fba:	6062      	str	r2, [r4, #4]
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	e7ec      	b.n	8008f9a <__ssvfiscanf_r+0x3e>
 8008fc0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4798      	blx	r3
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d0e9      	beq.n	8008fa0 <__ssvfiscanf_r+0x44>
 8008fcc:	e7ed      	b.n	8008faa <__ssvfiscanf_r+0x4e>
 8008fce:	2b25      	cmp	r3, #37	; 0x25
 8008fd0:	d012      	beq.n	8008ff8 <__ssvfiscanf_r+0x9c>
 8008fd2:	469a      	mov	sl, r3
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f340 8091 	ble.w	80090fe <__ssvfiscanf_r+0x1a2>
 8008fdc:	6822      	ldr	r2, [r4, #0]
 8008fde:	7813      	ldrb	r3, [r2, #0]
 8008fe0:	4553      	cmp	r3, sl
 8008fe2:	f040 812e 	bne.w	8009242 <__ssvfiscanf_r+0x2e6>
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	6063      	str	r3, [r4, #4]
 8008fec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008fee:	3201      	adds	r2, #1
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	9345      	str	r3, [sp, #276]	; 0x114
 8008ff6:	e7d8      	b.n	8008faa <__ssvfiscanf_r+0x4e>
 8008ff8:	9141      	str	r1, [sp, #260]	; 0x104
 8008ffa:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ffc:	7853      	ldrb	r3, [r2, #1]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	bf02      	ittt	eq
 8009002:	2310      	moveq	r3, #16
 8009004:	1c95      	addeq	r5, r2, #2
 8009006:	9341      	streq	r3, [sp, #260]	; 0x104
 8009008:	220a      	movs	r2, #10
 800900a:	46aa      	mov	sl, r5
 800900c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009010:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009014:	2b09      	cmp	r3, #9
 8009016:	d91d      	bls.n	8009054 <__ssvfiscanf_r+0xf8>
 8009018:	487e      	ldr	r0, [pc, #504]	; (8009214 <__ssvfiscanf_r+0x2b8>)
 800901a:	2203      	movs	r2, #3
 800901c:	f7f7 f8b8 	bl	8000190 <memchr>
 8009020:	b140      	cbz	r0, 8009034 <__ssvfiscanf_r+0xd8>
 8009022:	2301      	movs	r3, #1
 8009024:	eba0 0009 	sub.w	r0, r0, r9
 8009028:	fa03 f000 	lsl.w	r0, r3, r0
 800902c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800902e:	4318      	orrs	r0, r3
 8009030:	9041      	str	r0, [sp, #260]	; 0x104
 8009032:	4655      	mov	r5, sl
 8009034:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009038:	2b78      	cmp	r3, #120	; 0x78
 800903a:	d806      	bhi.n	800904a <__ssvfiscanf_r+0xee>
 800903c:	2b57      	cmp	r3, #87	; 0x57
 800903e:	d810      	bhi.n	8009062 <__ssvfiscanf_r+0x106>
 8009040:	2b25      	cmp	r3, #37	; 0x25
 8009042:	d0c6      	beq.n	8008fd2 <__ssvfiscanf_r+0x76>
 8009044:	d856      	bhi.n	80090f4 <__ssvfiscanf_r+0x198>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d064      	beq.n	8009114 <__ssvfiscanf_r+0x1b8>
 800904a:	2303      	movs	r3, #3
 800904c:	9347      	str	r3, [sp, #284]	; 0x11c
 800904e:	230a      	movs	r3, #10
 8009050:	9342      	str	r3, [sp, #264]	; 0x108
 8009052:	e071      	b.n	8009138 <__ssvfiscanf_r+0x1dc>
 8009054:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009056:	fb02 1103 	mla	r1, r2, r3, r1
 800905a:	3930      	subs	r1, #48	; 0x30
 800905c:	9143      	str	r1, [sp, #268]	; 0x10c
 800905e:	4655      	mov	r5, sl
 8009060:	e7d3      	b.n	800900a <__ssvfiscanf_r+0xae>
 8009062:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009066:	2a20      	cmp	r2, #32
 8009068:	d8ef      	bhi.n	800904a <__ssvfiscanf_r+0xee>
 800906a:	a101      	add	r1, pc, #4	; (adr r1, 8009070 <__ssvfiscanf_r+0x114>)
 800906c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009070:	08009123 	.word	0x08009123
 8009074:	0800904b 	.word	0x0800904b
 8009078:	0800904b 	.word	0x0800904b
 800907c:	08009181 	.word	0x08009181
 8009080:	0800904b 	.word	0x0800904b
 8009084:	0800904b 	.word	0x0800904b
 8009088:	0800904b 	.word	0x0800904b
 800908c:	0800904b 	.word	0x0800904b
 8009090:	0800904b 	.word	0x0800904b
 8009094:	0800904b 	.word	0x0800904b
 8009098:	0800904b 	.word	0x0800904b
 800909c:	08009197 	.word	0x08009197
 80090a0:	0800916d 	.word	0x0800916d
 80090a4:	080090fb 	.word	0x080090fb
 80090a8:	080090fb 	.word	0x080090fb
 80090ac:	080090fb 	.word	0x080090fb
 80090b0:	0800904b 	.word	0x0800904b
 80090b4:	08009171 	.word	0x08009171
 80090b8:	0800904b 	.word	0x0800904b
 80090bc:	0800904b 	.word	0x0800904b
 80090c0:	0800904b 	.word	0x0800904b
 80090c4:	0800904b 	.word	0x0800904b
 80090c8:	080091a7 	.word	0x080091a7
 80090cc:	08009179 	.word	0x08009179
 80090d0:	0800911b 	.word	0x0800911b
 80090d4:	0800904b 	.word	0x0800904b
 80090d8:	0800904b 	.word	0x0800904b
 80090dc:	080091a3 	.word	0x080091a3
 80090e0:	0800904b 	.word	0x0800904b
 80090e4:	0800916d 	.word	0x0800916d
 80090e8:	0800904b 	.word	0x0800904b
 80090ec:	0800904b 	.word	0x0800904b
 80090f0:	08009123 	.word	0x08009123
 80090f4:	3b45      	subs	r3, #69	; 0x45
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d8a7      	bhi.n	800904a <__ssvfiscanf_r+0xee>
 80090fa:	2305      	movs	r3, #5
 80090fc:	e01b      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 80090fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009100:	4621      	mov	r1, r4
 8009102:	4630      	mov	r0, r6
 8009104:	4798      	blx	r3
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f af68 	beq.w	8008fdc <__ssvfiscanf_r+0x80>
 800910c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800910e:	2800      	cmp	r0, #0
 8009110:	f040 808d 	bne.w	800922e <__ssvfiscanf_r+0x2d2>
 8009114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009118:	e08f      	b.n	800923a <__ssvfiscanf_r+0x2de>
 800911a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800911c:	f042 0220 	orr.w	r2, r2, #32
 8009120:	9241      	str	r2, [sp, #260]	; 0x104
 8009122:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009128:	9241      	str	r2, [sp, #260]	; 0x104
 800912a:	2210      	movs	r2, #16
 800912c:	2b6f      	cmp	r3, #111	; 0x6f
 800912e:	9242      	str	r2, [sp, #264]	; 0x108
 8009130:	bf34      	ite	cc
 8009132:	2303      	movcc	r3, #3
 8009134:	2304      	movcs	r3, #4
 8009136:	9347      	str	r3, [sp, #284]	; 0x11c
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd42      	ble.n	80091c4 <__ssvfiscanf_r+0x268>
 800913e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009140:	0659      	lsls	r1, r3, #25
 8009142:	d404      	bmi.n	800914e <__ssvfiscanf_r+0x1f2>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	5cba      	ldrb	r2, [r7, r2]
 800914a:	0712      	lsls	r2, r2, #28
 800914c:	d441      	bmi.n	80091d2 <__ssvfiscanf_r+0x276>
 800914e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009150:	2b02      	cmp	r3, #2
 8009152:	dc50      	bgt.n	80091f6 <__ssvfiscanf_r+0x29a>
 8009154:	466b      	mov	r3, sp
 8009156:	4622      	mov	r2, r4
 8009158:	a941      	add	r1, sp, #260	; 0x104
 800915a:	4630      	mov	r0, r6
 800915c:	f000 f876 	bl	800924c <_scanf_chars>
 8009160:	2801      	cmp	r0, #1
 8009162:	d06e      	beq.n	8009242 <__ssvfiscanf_r+0x2e6>
 8009164:	2802      	cmp	r0, #2
 8009166:	f47f af20 	bne.w	8008faa <__ssvfiscanf_r+0x4e>
 800916a:	e7cf      	b.n	800910c <__ssvfiscanf_r+0x1b0>
 800916c:	220a      	movs	r2, #10
 800916e:	e7dd      	b.n	800912c <__ssvfiscanf_r+0x1d0>
 8009170:	2300      	movs	r3, #0
 8009172:	9342      	str	r3, [sp, #264]	; 0x108
 8009174:	2303      	movs	r3, #3
 8009176:	e7de      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 8009178:	2308      	movs	r3, #8
 800917a:	9342      	str	r3, [sp, #264]	; 0x108
 800917c:	2304      	movs	r3, #4
 800917e:	e7da      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 8009180:	4629      	mov	r1, r5
 8009182:	4640      	mov	r0, r8
 8009184:	f000 f9dc 	bl	8009540 <__sccl>
 8009188:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800918a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800918e:	9341      	str	r3, [sp, #260]	; 0x104
 8009190:	4605      	mov	r5, r0
 8009192:	2301      	movs	r3, #1
 8009194:	e7cf      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 8009196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919c:	9341      	str	r3, [sp, #260]	; 0x104
 800919e:	2300      	movs	r3, #0
 80091a0:	e7c9      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e7c7      	b.n	8009136 <__ssvfiscanf_r+0x1da>
 80091a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80091a8:	06c3      	lsls	r3, r0, #27
 80091aa:	f53f aefe 	bmi.w	8008faa <__ssvfiscanf_r+0x4e>
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091b2:	1d19      	adds	r1, r3, #4
 80091b4:	9100      	str	r1, [sp, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f010 0f01 	tst.w	r0, #1
 80091bc:	bf14      	ite	ne
 80091be:	801a      	strhne	r2, [r3, #0]
 80091c0:	601a      	streq	r2, [r3, #0]
 80091c2:	e6f2      	b.n	8008faa <__ssvfiscanf_r+0x4e>
 80091c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091c6:	4621      	mov	r1, r4
 80091c8:	4630      	mov	r0, r6
 80091ca:	4798      	blx	r3
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d0b6      	beq.n	800913e <__ssvfiscanf_r+0x1e2>
 80091d0:	e79c      	b.n	800910c <__ssvfiscanf_r+0x1b0>
 80091d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80091d4:	3201      	adds	r2, #1
 80091d6:	9245      	str	r2, [sp, #276]	; 0x114
 80091d8:	6862      	ldr	r2, [r4, #4]
 80091da:	3a01      	subs	r2, #1
 80091dc:	2a00      	cmp	r2, #0
 80091de:	6062      	str	r2, [r4, #4]
 80091e0:	dd02      	ble.n	80091e8 <__ssvfiscanf_r+0x28c>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	e7ad      	b.n	8009144 <__ssvfiscanf_r+0x1e8>
 80091e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80091ea:	4621      	mov	r1, r4
 80091ec:	4630      	mov	r0, r6
 80091ee:	4798      	blx	r3
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d0a7      	beq.n	8009144 <__ssvfiscanf_r+0x1e8>
 80091f4:	e78a      	b.n	800910c <__ssvfiscanf_r+0x1b0>
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	dc0e      	bgt.n	8009218 <__ssvfiscanf_r+0x2bc>
 80091fa:	466b      	mov	r3, sp
 80091fc:	4622      	mov	r2, r4
 80091fe:	a941      	add	r1, sp, #260	; 0x104
 8009200:	4630      	mov	r0, r6
 8009202:	f000 f87d 	bl	8009300 <_scanf_i>
 8009206:	e7ab      	b.n	8009160 <__ssvfiscanf_r+0x204>
 8009208:	08008ea9 	.word	0x08008ea9
 800920c:	08008f23 	.word	0x08008f23
 8009210:	0800a4a9 	.word	0x0800a4a9
 8009214:	0800a812 	.word	0x0800a812
 8009218:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <__ssvfiscanf_r+0x2ec>)
 800921a:	2b00      	cmp	r3, #0
 800921c:	f43f aec5 	beq.w	8008faa <__ssvfiscanf_r+0x4e>
 8009220:	466b      	mov	r3, sp
 8009222:	4622      	mov	r2, r4
 8009224:	a941      	add	r1, sp, #260	; 0x104
 8009226:	4630      	mov	r0, r6
 8009228:	f7fc fbb2 	bl	8005990 <_scanf_float>
 800922c:	e798      	b.n	8009160 <__ssvfiscanf_r+0x204>
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009234:	bf18      	it	ne
 8009236:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800923a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800923e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009242:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009244:	e7f9      	b.n	800923a <__ssvfiscanf_r+0x2de>
 8009246:	bf00      	nop
 8009248:	08005991 	.word	0x08005991

0800924c <_scanf_chars>:
 800924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009250:	4615      	mov	r5, r2
 8009252:	688a      	ldr	r2, [r1, #8]
 8009254:	4680      	mov	r8, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b932      	cbnz	r2, 8009268 <_scanf_chars+0x1c>
 800925a:	698a      	ldr	r2, [r1, #24]
 800925c:	2a00      	cmp	r2, #0
 800925e:	bf0c      	ite	eq
 8009260:	2201      	moveq	r2, #1
 8009262:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009266:	608a      	str	r2, [r1, #8]
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80092fc <_scanf_chars+0xb0>
 800926e:	06d1      	lsls	r1, r2, #27
 8009270:	bf5f      	itttt	pl
 8009272:	681a      	ldrpl	r2, [r3, #0]
 8009274:	1d11      	addpl	r1, r2, #4
 8009276:	6019      	strpl	r1, [r3, #0]
 8009278:	6816      	ldrpl	r6, [r2, #0]
 800927a:	2700      	movs	r7, #0
 800927c:	69a0      	ldr	r0, [r4, #24]
 800927e:	b188      	cbz	r0, 80092a4 <_scanf_chars+0x58>
 8009280:	2801      	cmp	r0, #1
 8009282:	d107      	bne.n	8009294 <_scanf_chars+0x48>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	6963      	ldr	r3, [r4, #20]
 800928a:	5c9b      	ldrb	r3, [r3, r2]
 800928c:	b953      	cbnz	r3, 80092a4 <_scanf_chars+0x58>
 800928e:	2f00      	cmp	r7, #0
 8009290:	d031      	beq.n	80092f6 <_scanf_chars+0xaa>
 8009292:	e022      	b.n	80092da <_scanf_chars+0x8e>
 8009294:	2802      	cmp	r0, #2
 8009296:	d120      	bne.n	80092da <_scanf_chars+0x8e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80092a0:	071b      	lsls	r3, r3, #28
 80092a2:	d41a      	bmi.n	80092da <_scanf_chars+0x8e>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	06da      	lsls	r2, r3, #27
 80092a8:	bf5e      	ittt	pl
 80092aa:	682b      	ldrpl	r3, [r5, #0]
 80092ac:	781b      	ldrbpl	r3, [r3, #0]
 80092ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80092b2:	682a      	ldr	r2, [r5, #0]
 80092b4:	686b      	ldr	r3, [r5, #4]
 80092b6:	3201      	adds	r2, #1
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	68a2      	ldr	r2, [r4, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	3a01      	subs	r2, #1
 80092c0:	606b      	str	r3, [r5, #4]
 80092c2:	3701      	adds	r7, #1
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	b142      	cbz	r2, 80092da <_scanf_chars+0x8e>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dcd7      	bgt.n	800927c <_scanf_chars+0x30>
 80092cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092d0:	4629      	mov	r1, r5
 80092d2:	4640      	mov	r0, r8
 80092d4:	4798      	blx	r3
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0d0      	beq.n	800927c <_scanf_chars+0x30>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	f013 0310 	ands.w	r3, r3, #16
 80092e0:	d105      	bne.n	80092ee <_scanf_chars+0xa2>
 80092e2:	68e2      	ldr	r2, [r4, #12]
 80092e4:	3201      	adds	r2, #1
 80092e6:	60e2      	str	r2, [r4, #12]
 80092e8:	69a2      	ldr	r2, [r4, #24]
 80092ea:	b102      	cbz	r2, 80092ee <_scanf_chars+0xa2>
 80092ec:	7033      	strb	r3, [r6, #0]
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	443b      	add	r3, r7
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fa:	bf00      	nop
 80092fc:	0800a4a9 	.word	0x0800a4a9

08009300 <_scanf_i>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4698      	mov	r8, r3
 8009306:	4b76      	ldr	r3, [pc, #472]	; (80094e0 <_scanf_i+0x1e0>)
 8009308:	460c      	mov	r4, r1
 800930a:	4682      	mov	sl, r0
 800930c:	4616      	mov	r6, r2
 800930e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009312:	b087      	sub	sp, #28
 8009314:	ab03      	add	r3, sp, #12
 8009316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800931a:	4b72      	ldr	r3, [pc, #456]	; (80094e4 <_scanf_i+0x1e4>)
 800931c:	69a1      	ldr	r1, [r4, #24]
 800931e:	4a72      	ldr	r2, [pc, #456]	; (80094e8 <_scanf_i+0x1e8>)
 8009320:	2903      	cmp	r1, #3
 8009322:	bf18      	it	ne
 8009324:	461a      	movne	r2, r3
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	9201      	str	r2, [sp, #4]
 800932a:	1e5a      	subs	r2, r3, #1
 800932c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009330:	bf88      	it	hi
 8009332:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009336:	4627      	mov	r7, r4
 8009338:	bf82      	ittt	hi
 800933a:	eb03 0905 	addhi.w	r9, r3, r5
 800933e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009342:	60a3      	strhi	r3, [r4, #8]
 8009344:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009348:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800934c:	bf98      	it	ls
 800934e:	f04f 0900 	movls.w	r9, #0
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	463d      	mov	r5, r7
 8009356:	f04f 0b00 	mov.w	fp, #0
 800935a:	6831      	ldr	r1, [r6, #0]
 800935c:	ab03      	add	r3, sp, #12
 800935e:	7809      	ldrb	r1, [r1, #0]
 8009360:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009364:	2202      	movs	r2, #2
 8009366:	f7f6 ff13 	bl	8000190 <memchr>
 800936a:	b328      	cbz	r0, 80093b8 <_scanf_i+0xb8>
 800936c:	f1bb 0f01 	cmp.w	fp, #1
 8009370:	d159      	bne.n	8009426 <_scanf_i+0x126>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	b92a      	cbnz	r2, 8009382 <_scanf_i+0x82>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	2308      	movs	r3, #8
 800937a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6022      	str	r2, [r4, #0]
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009388:	6022      	str	r2, [r4, #0]
 800938a:	68a2      	ldr	r2, [r4, #8]
 800938c:	1e51      	subs	r1, r2, #1
 800938e:	60a1      	str	r1, [r4, #8]
 8009390:	b192      	cbz	r2, 80093b8 <_scanf_i+0xb8>
 8009392:	6832      	ldr	r2, [r6, #0]
 8009394:	1c51      	adds	r1, r2, #1
 8009396:	6031      	str	r1, [r6, #0]
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	f805 2b01 	strb.w	r2, [r5], #1
 800939e:	6872      	ldr	r2, [r6, #4]
 80093a0:	3a01      	subs	r2, #1
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	6072      	str	r2, [r6, #4]
 80093a6:	dc07      	bgt.n	80093b8 <_scanf_i+0xb8>
 80093a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80093ac:	4631      	mov	r1, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4790      	blx	r2
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f040 8085 	bne.w	80094c2 <_scanf_i+0x1c2>
 80093b8:	f10b 0b01 	add.w	fp, fp, #1
 80093bc:	f1bb 0f03 	cmp.w	fp, #3
 80093c0:	d1cb      	bne.n	800935a <_scanf_i+0x5a>
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	b90b      	cbnz	r3, 80093ca <_scanf_i+0xca>
 80093c6:	230a      	movs	r3, #10
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6863      	ldr	r3, [r4, #4]
 80093cc:	4947      	ldr	r1, [pc, #284]	; (80094ec <_scanf_i+0x1ec>)
 80093ce:	6960      	ldr	r0, [r4, #20]
 80093d0:	1ac9      	subs	r1, r1, r3
 80093d2:	f000 f8b5 	bl	8009540 <__sccl>
 80093d6:	f04f 0b00 	mov.w	fp, #0
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	6822      	ldr	r2, [r4, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d03d      	beq.n	800945e <_scanf_i+0x15e>
 80093e2:	6831      	ldr	r1, [r6, #0]
 80093e4:	6960      	ldr	r0, [r4, #20]
 80093e6:	f891 c000 	ldrb.w	ip, [r1]
 80093ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d035      	beq.n	800945e <_scanf_i+0x15e>
 80093f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80093f6:	d124      	bne.n	8009442 <_scanf_i+0x142>
 80093f8:	0510      	lsls	r0, r2, #20
 80093fa:	d522      	bpl.n	8009442 <_scanf_i+0x142>
 80093fc:	f10b 0b01 	add.w	fp, fp, #1
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	d003      	beq.n	800940e <_scanf_i+0x10e>
 8009406:	3301      	adds	r3, #1
 8009408:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	6873      	ldr	r3, [r6, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	6073      	str	r3, [r6, #4]
 8009416:	dd1b      	ble.n	8009450 <_scanf_i+0x150>
 8009418:	6833      	ldr	r3, [r6, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	6033      	str	r3, [r6, #0]
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	e7d9      	b.n	80093da <_scanf_i+0xda>
 8009426:	f1bb 0f02 	cmp.w	fp, #2
 800942a:	d1ae      	bne.n	800938a <_scanf_i+0x8a>
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009432:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009436:	d1bf      	bne.n	80093b8 <_scanf_i+0xb8>
 8009438:	2310      	movs	r3, #16
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009440:	e7a2      	b.n	8009388 <_scanf_i+0x88>
 8009442:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009446:	6022      	str	r2, [r4, #0]
 8009448:	780b      	ldrb	r3, [r1, #0]
 800944a:	f805 3b01 	strb.w	r3, [r5], #1
 800944e:	e7de      	b.n	800940e <_scanf_i+0x10e>
 8009450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009454:	4631      	mov	r1, r6
 8009456:	4650      	mov	r0, sl
 8009458:	4798      	blx	r3
 800945a:	2800      	cmp	r0, #0
 800945c:	d0df      	beq.n	800941e <_scanf_i+0x11e>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	05db      	lsls	r3, r3, #23
 8009462:	d50d      	bpl.n	8009480 <_scanf_i+0x180>
 8009464:	42bd      	cmp	r5, r7
 8009466:	d909      	bls.n	800947c <_scanf_i+0x17c>
 8009468:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800946c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009470:	4632      	mov	r2, r6
 8009472:	4650      	mov	r0, sl
 8009474:	4798      	blx	r3
 8009476:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800947a:	464d      	mov	r5, r9
 800947c:	42bd      	cmp	r5, r7
 800947e:	d02d      	beq.n	80094dc <_scanf_i+0x1dc>
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	f012 0210 	ands.w	r2, r2, #16
 8009486:	d113      	bne.n	80094b0 <_scanf_i+0x1b0>
 8009488:	702a      	strb	r2, [r5, #0]
 800948a:	6863      	ldr	r3, [r4, #4]
 800948c:	9e01      	ldr	r6, [sp, #4]
 800948e:	4639      	mov	r1, r7
 8009490:	4650      	mov	r0, sl
 8009492:	47b0      	blx	r6
 8009494:	6821      	ldr	r1, [r4, #0]
 8009496:	f8d8 3000 	ldr.w	r3, [r8]
 800949a:	f011 0f20 	tst.w	r1, #32
 800949e:	d013      	beq.n	80094c8 <_scanf_i+0x1c8>
 80094a0:	1d1a      	adds	r2, r3, #4
 80094a2:	f8c8 2000 	str.w	r2, [r8]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	60e3      	str	r3, [r4, #12]
 80094b0:	1bed      	subs	r5, r5, r7
 80094b2:	44ab      	add	fp, r5
 80094b4:	6925      	ldr	r5, [r4, #16]
 80094b6:	445d      	add	r5, fp
 80094b8:	6125      	str	r5, [r4, #16]
 80094ba:	2000      	movs	r0, #0
 80094bc:	b007      	add	sp, #28
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	f04f 0b00 	mov.w	fp, #0
 80094c6:	e7ca      	b.n	800945e <_scanf_i+0x15e>
 80094c8:	1d1a      	adds	r2, r3, #4
 80094ca:	f8c8 2000 	str.w	r2, [r8]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f011 0f01 	tst.w	r1, #1
 80094d4:	bf14      	ite	ne
 80094d6:	8018      	strhne	r0, [r3, #0]
 80094d8:	6018      	streq	r0, [r3, #0]
 80094da:	e7e6      	b.n	80094aa <_scanf_i+0x1aa>
 80094dc:	2001      	movs	r0, #1
 80094de:	e7ed      	b.n	80094bc <_scanf_i+0x1bc>
 80094e0:	0800a344 	.word	0x0800a344
 80094e4:	080096bd 	.word	0x080096bd
 80094e8:	08006c25 	.word	0x08006c25
 80094ec:	0800a836 	.word	0x0800a836

080094f0 <_read_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d07      	ldr	r5, [pc, #28]	; (8009510 <_read_r+0x20>)
 80094f4:	4604      	mov	r4, r0
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	602a      	str	r2, [r5, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f7f8 fb2a 	bl	8001b58 <_read>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_read_r+0x1e>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_read_r+0x1e>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200002e8 	.word	0x200002e8

08009514 <nan>:
 8009514:	4901      	ldr	r1, [pc, #4]	; (800951c <nan+0x8>)
 8009516:	2000      	movs	r0, #0
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	7ff80000 	.word	0x7ff80000

08009520 <_sbrk_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	; (800953c <_sbrk_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f8 fb7e 	bl	8001c2c <_sbrk>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_sbrk_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_sbrk_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	200002e8 	.word	0x200002e8

08009540 <__sccl>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	780b      	ldrb	r3, [r1, #0]
 8009544:	4604      	mov	r4, r0
 8009546:	2b5e      	cmp	r3, #94	; 0x5e
 8009548:	bf0b      	itete	eq
 800954a:	784b      	ldrbeq	r3, [r1, #1]
 800954c:	1c48      	addne	r0, r1, #1
 800954e:	1c88      	addeq	r0, r1, #2
 8009550:	2200      	movne	r2, #0
 8009552:	bf08      	it	eq
 8009554:	2201      	moveq	r2, #1
 8009556:	1e61      	subs	r1, r4, #1
 8009558:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800955c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009560:	42a9      	cmp	r1, r5
 8009562:	d1fb      	bne.n	800955c <__sccl+0x1c>
 8009564:	b90b      	cbnz	r3, 800956a <__sccl+0x2a>
 8009566:	3801      	subs	r0, #1
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	f082 0201 	eor.w	r2, r2, #1
 800956e:	54e2      	strb	r2, [r4, r3]
 8009570:	4605      	mov	r5, r0
 8009572:	4628      	mov	r0, r5
 8009574:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009578:	292d      	cmp	r1, #45	; 0x2d
 800957a:	d006      	beq.n	800958a <__sccl+0x4a>
 800957c:	295d      	cmp	r1, #93	; 0x5d
 800957e:	d0f3      	beq.n	8009568 <__sccl+0x28>
 8009580:	b909      	cbnz	r1, 8009586 <__sccl+0x46>
 8009582:	4628      	mov	r0, r5
 8009584:	e7f0      	b.n	8009568 <__sccl+0x28>
 8009586:	460b      	mov	r3, r1
 8009588:	e7f1      	b.n	800956e <__sccl+0x2e>
 800958a:	786e      	ldrb	r6, [r5, #1]
 800958c:	2e5d      	cmp	r6, #93	; 0x5d
 800958e:	d0fa      	beq.n	8009586 <__sccl+0x46>
 8009590:	42b3      	cmp	r3, r6
 8009592:	dcf8      	bgt.n	8009586 <__sccl+0x46>
 8009594:	3502      	adds	r5, #2
 8009596:	4619      	mov	r1, r3
 8009598:	3101      	adds	r1, #1
 800959a:	428e      	cmp	r6, r1
 800959c:	5462      	strb	r2, [r4, r1]
 800959e:	dcfb      	bgt.n	8009598 <__sccl+0x58>
 80095a0:	1af1      	subs	r1, r6, r3
 80095a2:	3901      	subs	r1, #1
 80095a4:	1c58      	adds	r0, r3, #1
 80095a6:	42b3      	cmp	r3, r6
 80095a8:	bfa8      	it	ge
 80095aa:	2100      	movge	r1, #0
 80095ac:	1843      	adds	r3, r0, r1
 80095ae:	e7e0      	b.n	8009572 <__sccl+0x32>

080095b0 <strncmp>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	4603      	mov	r3, r0
 80095b4:	b172      	cbz	r2, 80095d4 <strncmp+0x24>
 80095b6:	3901      	subs	r1, #1
 80095b8:	1884      	adds	r4, r0, r2
 80095ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095c2:	4290      	cmp	r0, r2
 80095c4:	d101      	bne.n	80095ca <strncmp+0x1a>
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	d101      	bne.n	80095ce <strncmp+0x1e>
 80095ca:	1a80      	subs	r0, r0, r2
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d1f3      	bne.n	80095ba <strncmp+0xa>
 80095d2:	e7fa      	b.n	80095ca <strncmp+0x1a>
 80095d4:	4610      	mov	r0, r2
 80095d6:	e7f9      	b.n	80095cc <strncmp+0x1c>

080095d8 <_strtoul_l.constprop.0>:
 80095d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095dc:	4f36      	ldr	r7, [pc, #216]	; (80096b8 <_strtoul_l.constprop.0+0xe0>)
 80095de:	4686      	mov	lr, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4628      	mov	r0, r5
 80095e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095e8:	5de6      	ldrb	r6, [r4, r7]
 80095ea:	f016 0608 	ands.w	r6, r6, #8
 80095ee:	d1f8      	bne.n	80095e2 <_strtoul_l.constprop.0+0xa>
 80095f0:	2c2d      	cmp	r4, #45	; 0x2d
 80095f2:	d12f      	bne.n	8009654 <_strtoul_l.constprop.0+0x7c>
 80095f4:	782c      	ldrb	r4, [r5, #0]
 80095f6:	2601      	movs	r6, #1
 80095f8:	1c85      	adds	r5, r0, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d057      	beq.n	80096ae <_strtoul_l.constprop.0+0xd6>
 80095fe:	2b10      	cmp	r3, #16
 8009600:	d109      	bne.n	8009616 <_strtoul_l.constprop.0+0x3e>
 8009602:	2c30      	cmp	r4, #48	; 0x30
 8009604:	d107      	bne.n	8009616 <_strtoul_l.constprop.0+0x3e>
 8009606:	7828      	ldrb	r0, [r5, #0]
 8009608:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800960c:	2858      	cmp	r0, #88	; 0x58
 800960e:	d149      	bne.n	80096a4 <_strtoul_l.constprop.0+0xcc>
 8009610:	786c      	ldrb	r4, [r5, #1]
 8009612:	2310      	movs	r3, #16
 8009614:	3502      	adds	r5, #2
 8009616:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800961a:	2700      	movs	r7, #0
 800961c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009620:	fb03 f908 	mul.w	r9, r3, r8
 8009624:	ea6f 0909 	mvn.w	r9, r9
 8009628:	4638      	mov	r0, r7
 800962a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800962e:	f1bc 0f09 	cmp.w	ip, #9
 8009632:	d814      	bhi.n	800965e <_strtoul_l.constprop.0+0x86>
 8009634:	4664      	mov	r4, ip
 8009636:	42a3      	cmp	r3, r4
 8009638:	dd22      	ble.n	8009680 <_strtoul_l.constprop.0+0xa8>
 800963a:	2f00      	cmp	r7, #0
 800963c:	db1d      	blt.n	800967a <_strtoul_l.constprop.0+0xa2>
 800963e:	4580      	cmp	r8, r0
 8009640:	d31b      	bcc.n	800967a <_strtoul_l.constprop.0+0xa2>
 8009642:	d101      	bne.n	8009648 <_strtoul_l.constprop.0+0x70>
 8009644:	45a1      	cmp	r9, r4
 8009646:	db18      	blt.n	800967a <_strtoul_l.constprop.0+0xa2>
 8009648:	fb00 4003 	mla	r0, r0, r3, r4
 800964c:	2701      	movs	r7, #1
 800964e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009652:	e7ea      	b.n	800962a <_strtoul_l.constprop.0+0x52>
 8009654:	2c2b      	cmp	r4, #43	; 0x2b
 8009656:	bf04      	itt	eq
 8009658:	782c      	ldrbeq	r4, [r5, #0]
 800965a:	1c85      	addeq	r5, r0, #2
 800965c:	e7cd      	b.n	80095fa <_strtoul_l.constprop.0+0x22>
 800965e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009662:	f1bc 0f19 	cmp.w	ip, #25
 8009666:	d801      	bhi.n	800966c <_strtoul_l.constprop.0+0x94>
 8009668:	3c37      	subs	r4, #55	; 0x37
 800966a:	e7e4      	b.n	8009636 <_strtoul_l.constprop.0+0x5e>
 800966c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009670:	f1bc 0f19 	cmp.w	ip, #25
 8009674:	d804      	bhi.n	8009680 <_strtoul_l.constprop.0+0xa8>
 8009676:	3c57      	subs	r4, #87	; 0x57
 8009678:	e7dd      	b.n	8009636 <_strtoul_l.constprop.0+0x5e>
 800967a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800967e:	e7e6      	b.n	800964e <_strtoul_l.constprop.0+0x76>
 8009680:	2f00      	cmp	r7, #0
 8009682:	da07      	bge.n	8009694 <_strtoul_l.constprop.0+0xbc>
 8009684:	2322      	movs	r3, #34	; 0x22
 8009686:	f8ce 3000 	str.w	r3, [lr]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800968e:	b932      	cbnz	r2, 800969e <_strtoul_l.constprop.0+0xc6>
 8009690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009694:	b106      	cbz	r6, 8009698 <_strtoul_l.constprop.0+0xc0>
 8009696:	4240      	negs	r0, r0
 8009698:	2a00      	cmp	r2, #0
 800969a:	d0f9      	beq.n	8009690 <_strtoul_l.constprop.0+0xb8>
 800969c:	b107      	cbz	r7, 80096a0 <_strtoul_l.constprop.0+0xc8>
 800969e:	1e69      	subs	r1, r5, #1
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	e7f5      	b.n	8009690 <_strtoul_l.constprop.0+0xb8>
 80096a4:	2430      	movs	r4, #48	; 0x30
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1b5      	bne.n	8009616 <_strtoul_l.constprop.0+0x3e>
 80096aa:	2308      	movs	r3, #8
 80096ac:	e7b3      	b.n	8009616 <_strtoul_l.constprop.0+0x3e>
 80096ae:	2c30      	cmp	r4, #48	; 0x30
 80096b0:	d0a9      	beq.n	8009606 <_strtoul_l.constprop.0+0x2e>
 80096b2:	230a      	movs	r3, #10
 80096b4:	e7af      	b.n	8009616 <_strtoul_l.constprop.0+0x3e>
 80096b6:	bf00      	nop
 80096b8:	0800a4a9 	.word	0x0800a4a9

080096bc <_strtoul_r>:
 80096bc:	f7ff bf8c 	b.w	80095d8 <_strtoul_l.constprop.0>

080096c0 <__submore>:
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	460c      	mov	r4, r1
 80096c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80096c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096cc:	4299      	cmp	r1, r3
 80096ce:	d11d      	bne.n	800970c <__submore+0x4c>
 80096d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80096d4:	f7ff fa18 	bl	8008b08 <_malloc_r>
 80096d8:	b918      	cbnz	r0, 80096e2 <__submore+0x22>
 80096da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80096e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80096ec:	6360      	str	r0, [r4, #52]	; 0x34
 80096ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80096f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80096f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80096fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80096fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009702:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009706:	6020      	str	r0, [r4, #0]
 8009708:	2000      	movs	r0, #0
 800970a:	e7e8      	b.n	80096de <__submore+0x1e>
 800970c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800970e:	0077      	lsls	r7, r6, #1
 8009710:	463a      	mov	r2, r7
 8009712:	f000 fa29 	bl	8009b68 <_realloc_r>
 8009716:	4605      	mov	r5, r0
 8009718:	2800      	cmp	r0, #0
 800971a:	d0de      	beq.n	80096da <__submore+0x1a>
 800971c:	eb00 0806 	add.w	r8, r0, r6
 8009720:	4601      	mov	r1, r0
 8009722:	4632      	mov	r2, r6
 8009724:	4640      	mov	r0, r8
 8009726:	f7fe fcaf 	bl	8008088 <memcpy>
 800972a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800972e:	f8c4 8000 	str.w	r8, [r4]
 8009732:	e7e9      	b.n	8009708 <__submore+0x48>

08009734 <__ascii_wctomb>:
 8009734:	4603      	mov	r3, r0
 8009736:	4608      	mov	r0, r1
 8009738:	b141      	cbz	r1, 800974c <__ascii_wctomb+0x18>
 800973a:	2aff      	cmp	r2, #255	; 0xff
 800973c:	d904      	bls.n	8009748 <__ascii_wctomb+0x14>
 800973e:	228a      	movs	r2, #138	; 0x8a
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009746:	4770      	bx	lr
 8009748:	700a      	strb	r2, [r1, #0]
 800974a:	2001      	movs	r0, #1
 800974c:	4770      	bx	lr
	...

08009750 <__assert_func>:
 8009750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009752:	4614      	mov	r4, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__assert_func+0x2c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4605      	mov	r5, r0
 800975c:	68d8      	ldr	r0, [r3, #12]
 800975e:	b14c      	cbz	r4, 8009774 <__assert_func+0x24>
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <__assert_func+0x30>)
 8009762:	9100      	str	r1, [sp, #0]
 8009764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009768:	4906      	ldr	r1, [pc, #24]	; (8009784 <__assert_func+0x34>)
 800976a:	462b      	mov	r3, r5
 800976c:	f000 f9a2 	bl	8009ab4 <fiprintf>
 8009770:	f000 fc40 	bl	8009ff4 <abort>
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <__assert_func+0x38>)
 8009776:	461c      	mov	r4, r3
 8009778:	e7f3      	b.n	8009762 <__assert_func+0x12>
 800977a:	bf00      	nop
 800977c:	2000000c 	.word	0x2000000c
 8009780:	0800a838 	.word	0x0800a838
 8009784:	0800a845 	.word	0x0800a845
 8009788:	0800a873 	.word	0x0800a873

0800978c <__sflush_r>:
 800978c:	898a      	ldrh	r2, [r1, #12]
 800978e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009790:	4605      	mov	r5, r0
 8009792:	0710      	lsls	r0, r2, #28
 8009794:	460c      	mov	r4, r1
 8009796:	d457      	bmi.n	8009848 <__sflush_r+0xbc>
 8009798:	684b      	ldr	r3, [r1, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc04      	bgt.n	80097a8 <__sflush_r+0x1c>
 800979e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dc01      	bgt.n	80097a8 <__sflush_r+0x1c>
 80097a4:	2000      	movs	r0, #0
 80097a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	d0fa      	beq.n	80097a4 <__sflush_r+0x18>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097b4:	682f      	ldr	r7, [r5, #0]
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	d032      	beq.n	8009820 <__sflush_r+0x94>
 80097ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	075a      	lsls	r2, r3, #29
 80097c0:	d505      	bpl.n	80097ce <__sflush_r+0x42>
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	1ac0      	subs	r0, r0, r3
 80097c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097c8:	b10b      	cbz	r3, 80097ce <__sflush_r+0x42>
 80097ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097cc:	1ac0      	subs	r0, r0, r3
 80097ce:	2300      	movs	r3, #0
 80097d0:	4602      	mov	r2, r0
 80097d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b0      	blx	r6
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	d106      	bne.n	80097ee <__sflush_r+0x62>
 80097e0:	6829      	ldr	r1, [r5, #0]
 80097e2:	291d      	cmp	r1, #29
 80097e4:	d82c      	bhi.n	8009840 <__sflush_r+0xb4>
 80097e6:	4a29      	ldr	r2, [pc, #164]	; (800988c <__sflush_r+0x100>)
 80097e8:	40ca      	lsrs	r2, r1
 80097ea:	07d6      	lsls	r6, r2, #31
 80097ec:	d528      	bpl.n	8009840 <__sflush_r+0xb4>
 80097ee:	2200      	movs	r2, #0
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	04d9      	lsls	r1, r3, #19
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	d504      	bpl.n	8009804 <__sflush_r+0x78>
 80097fa:	1c42      	adds	r2, r0, #1
 80097fc:	d101      	bne.n	8009802 <__sflush_r+0x76>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	b903      	cbnz	r3, 8009804 <__sflush_r+0x78>
 8009802:	6560      	str	r0, [r4, #84]	; 0x54
 8009804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009806:	602f      	str	r7, [r5, #0]
 8009808:	2900      	cmp	r1, #0
 800980a:	d0cb      	beq.n	80097a4 <__sflush_r+0x18>
 800980c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009810:	4299      	cmp	r1, r3
 8009812:	d002      	beq.n	800981a <__sflush_r+0x8e>
 8009814:	4628      	mov	r0, r5
 8009816:	f7ff f90d 	bl	8008a34 <_free_r>
 800981a:	2000      	movs	r0, #0
 800981c:	6360      	str	r0, [r4, #52]	; 0x34
 800981e:	e7c2      	b.n	80097a6 <__sflush_r+0x1a>
 8009820:	6a21      	ldr	r1, [r4, #32]
 8009822:	2301      	movs	r3, #1
 8009824:	4628      	mov	r0, r5
 8009826:	47b0      	blx	r6
 8009828:	1c41      	adds	r1, r0, #1
 800982a:	d1c7      	bne.n	80097bc <__sflush_r+0x30>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d0c4      	beq.n	80097bc <__sflush_r+0x30>
 8009832:	2b1d      	cmp	r3, #29
 8009834:	d001      	beq.n	800983a <__sflush_r+0xae>
 8009836:	2b16      	cmp	r3, #22
 8009838:	d101      	bne.n	800983e <__sflush_r+0xb2>
 800983a:	602f      	str	r7, [r5, #0]
 800983c:	e7b2      	b.n	80097a4 <__sflush_r+0x18>
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009844:	81a3      	strh	r3, [r4, #12]
 8009846:	e7ae      	b.n	80097a6 <__sflush_r+0x1a>
 8009848:	690f      	ldr	r7, [r1, #16]
 800984a:	2f00      	cmp	r7, #0
 800984c:	d0aa      	beq.n	80097a4 <__sflush_r+0x18>
 800984e:	0793      	lsls	r3, r2, #30
 8009850:	680e      	ldr	r6, [r1, #0]
 8009852:	bf08      	it	eq
 8009854:	694b      	ldreq	r3, [r1, #20]
 8009856:	600f      	str	r7, [r1, #0]
 8009858:	bf18      	it	ne
 800985a:	2300      	movne	r3, #0
 800985c:	1bf6      	subs	r6, r6, r7
 800985e:	608b      	str	r3, [r1, #8]
 8009860:	2e00      	cmp	r6, #0
 8009862:	dd9f      	ble.n	80097a4 <__sflush_r+0x18>
 8009864:	6a21      	ldr	r1, [r4, #32]
 8009866:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800986a:	4633      	mov	r3, r6
 800986c:	463a      	mov	r2, r7
 800986e:	4628      	mov	r0, r5
 8009870:	47e0      	blx	ip
 8009872:	2800      	cmp	r0, #0
 8009874:	dc06      	bgt.n	8009884 <__sflush_r+0xf8>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009882:	e790      	b.n	80097a6 <__sflush_r+0x1a>
 8009884:	4407      	add	r7, r0
 8009886:	1a36      	subs	r6, r6, r0
 8009888:	e7ea      	b.n	8009860 <__sflush_r+0xd4>
 800988a:	bf00      	nop
 800988c:	20400001 	.word	0x20400001

08009890 <_fflush_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	690b      	ldr	r3, [r1, #16]
 8009894:	4605      	mov	r5, r0
 8009896:	460c      	mov	r4, r1
 8009898:	b913      	cbnz	r3, 80098a0 <_fflush_r+0x10>
 800989a:	2500      	movs	r5, #0
 800989c:	4628      	mov	r0, r5
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	b118      	cbz	r0, 80098aa <_fflush_r+0x1a>
 80098a2:	6983      	ldr	r3, [r0, #24]
 80098a4:	b90b      	cbnz	r3, 80098aa <_fflush_r+0x1a>
 80098a6:	f000 f887 	bl	80099b8 <__sinit>
 80098aa:	4b14      	ldr	r3, [pc, #80]	; (80098fc <_fflush_r+0x6c>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d11b      	bne.n	80098e8 <_fflush_r+0x58>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ef      	beq.n	800989a <_fflush_r+0xa>
 80098ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098bc:	07d0      	lsls	r0, r2, #31
 80098be:	d404      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c0:	0599      	lsls	r1, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c6:	f000 f927 	bl	8009b18 <__retarget_lock_acquire_recursive>
 80098ca:	4628      	mov	r0, r5
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7ff ff5d 	bl	800978c <__sflush_r>
 80098d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098d4:	07da      	lsls	r2, r3, #31
 80098d6:	4605      	mov	r5, r0
 80098d8:	d4e0      	bmi.n	800989c <_fflush_r+0xc>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	059b      	lsls	r3, r3, #22
 80098de:	d4dd      	bmi.n	800989c <_fflush_r+0xc>
 80098e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e2:	f000 f91a 	bl	8009b1a <__retarget_lock_release_recursive>
 80098e6:	e7d9      	b.n	800989c <_fflush_r+0xc>
 80098e8:	4b05      	ldr	r3, [pc, #20]	; (8009900 <_fflush_r+0x70>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	d101      	bne.n	80098f2 <_fflush_r+0x62>
 80098ee:	68ac      	ldr	r4, [r5, #8]
 80098f0:	e7df      	b.n	80098b2 <_fflush_r+0x22>
 80098f2:	4b04      	ldr	r3, [pc, #16]	; (8009904 <_fflush_r+0x74>)
 80098f4:	429c      	cmp	r4, r3
 80098f6:	bf08      	it	eq
 80098f8:	68ec      	ldreq	r4, [r5, #12]
 80098fa:	e7da      	b.n	80098b2 <_fflush_r+0x22>
 80098fc:	0800a894 	.word	0x0800a894
 8009900:	0800a8b4 	.word	0x0800a8b4
 8009904:	0800a874 	.word	0x0800a874

08009908 <std>:
 8009908:	2300      	movs	r3, #0
 800990a:	b510      	push	{r4, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	e9c0 3300 	strd	r3, r3, [r0]
 8009912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009916:	6083      	str	r3, [r0, #8]
 8009918:	8181      	strh	r1, [r0, #12]
 800991a:	6643      	str	r3, [r0, #100]	; 0x64
 800991c:	81c2      	strh	r2, [r0, #14]
 800991e:	6183      	str	r3, [r0, #24]
 8009920:	4619      	mov	r1, r3
 8009922:	2208      	movs	r2, #8
 8009924:	305c      	adds	r0, #92	; 0x5c
 8009926:	f7fb fbcf 	bl	80050c8 <memset>
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x38>)
 800992c:	6263      	str	r3, [r4, #36]	; 0x24
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <std+0x3c>)
 8009930:	62a3      	str	r3, [r4, #40]	; 0x28
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <std+0x40>)
 8009934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x44>)
 8009938:	6224      	str	r4, [r4, #32]
 800993a:	6323      	str	r3, [r4, #48]	; 0x30
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	08005e45 	.word	0x08005e45
 8009944:	08005e6b 	.word	0x08005e6b
 8009948:	08005ea3 	.word	0x08005ea3
 800994c:	08005ec7 	.word	0x08005ec7

08009950 <_cleanup_r>:
 8009950:	4901      	ldr	r1, [pc, #4]	; (8009958 <_cleanup_r+0x8>)
 8009952:	f000 b8c1 	b.w	8009ad8 <_fwalk_reent>
 8009956:	bf00      	nop
 8009958:	08009891 	.word	0x08009891

0800995c <__sfmoreglue>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	2268      	movs	r2, #104	; 0x68
 8009960:	1e4d      	subs	r5, r1, #1
 8009962:	4355      	muls	r5, r2
 8009964:	460e      	mov	r6, r1
 8009966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800996a:	f7ff f8cd 	bl	8008b08 <_malloc_r>
 800996e:	4604      	mov	r4, r0
 8009970:	b140      	cbz	r0, 8009984 <__sfmoreglue+0x28>
 8009972:	2100      	movs	r1, #0
 8009974:	e9c0 1600 	strd	r1, r6, [r0]
 8009978:	300c      	adds	r0, #12
 800997a:	60a0      	str	r0, [r4, #8]
 800997c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009980:	f7fb fba2 	bl	80050c8 <memset>
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}

08009988 <__sfp_lock_acquire>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sfp_lock_acquire+0x8>)
 800998a:	f000 b8c5 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	200002ed 	.word	0x200002ed

08009994 <__sfp_lock_release>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sfp_lock_release+0x8>)
 8009996:	f000 b8c0 	b.w	8009b1a <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	200002ed 	.word	0x200002ed

080099a0 <__sinit_lock_acquire>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sinit_lock_acquire+0x8>)
 80099a2:	f000 b8b9 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	200002ee 	.word	0x200002ee

080099ac <__sinit_lock_release>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sinit_lock_release+0x8>)
 80099ae:	f000 b8b4 	b.w	8009b1a <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	200002ee 	.word	0x200002ee

080099b8 <__sinit>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	4604      	mov	r4, r0
 80099bc:	f7ff fff0 	bl	80099a0 <__sinit_lock_acquire>
 80099c0:	69a3      	ldr	r3, [r4, #24]
 80099c2:	b11b      	cbz	r3, 80099cc <__sinit+0x14>
 80099c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c8:	f7ff bff0 	b.w	80099ac <__sinit_lock_release>
 80099cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099d0:	6523      	str	r3, [r4, #80]	; 0x50
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <__sinit+0x68>)
 80099d4:	4a13      	ldr	r2, [pc, #76]	; (8009a24 <__sinit+0x6c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099da:	42a3      	cmp	r3, r4
 80099dc:	bf04      	itt	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	61a3      	streq	r3, [r4, #24]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f820 	bl	8009a28 <__sfp>
 80099e8:	6060      	str	r0, [r4, #4]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f81c 	bl	8009a28 <__sfp>
 80099f0:	60a0      	str	r0, [r4, #8]
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 f818 	bl	8009a28 <__sfp>
 80099f8:	2200      	movs	r2, #0
 80099fa:	60e0      	str	r0, [r4, #12]
 80099fc:	2104      	movs	r1, #4
 80099fe:	6860      	ldr	r0, [r4, #4]
 8009a00:	f7ff ff82 	bl	8009908 <std>
 8009a04:	68a0      	ldr	r0, [r4, #8]
 8009a06:	2201      	movs	r2, #1
 8009a08:	2109      	movs	r1, #9
 8009a0a:	f7ff ff7d 	bl	8009908 <std>
 8009a0e:	68e0      	ldr	r0, [r4, #12]
 8009a10:	2202      	movs	r2, #2
 8009a12:	2112      	movs	r1, #18
 8009a14:	f7ff ff78 	bl	8009908 <std>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	61a3      	str	r3, [r4, #24]
 8009a1c:	e7d2      	b.n	80099c4 <__sinit+0xc>
 8009a1e:	bf00      	nop
 8009a20:	0800a418 	.word	0x0800a418
 8009a24:	08009951 	.word	0x08009951

08009a28 <__sfp>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	f7ff ffac 	bl	8009988 <__sfp_lock_acquire>
 8009a30:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <__sfp+0x84>)
 8009a32:	681e      	ldr	r6, [r3, #0]
 8009a34:	69b3      	ldr	r3, [r6, #24]
 8009a36:	b913      	cbnz	r3, 8009a3e <__sfp+0x16>
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffbd 	bl	80099b8 <__sinit>
 8009a3e:	3648      	adds	r6, #72	; 0x48
 8009a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	d503      	bpl.n	8009a50 <__sfp+0x28>
 8009a48:	6833      	ldr	r3, [r6, #0]
 8009a4a:	b30b      	cbz	r3, 8009a90 <__sfp+0x68>
 8009a4c:	6836      	ldr	r6, [r6, #0]
 8009a4e:	e7f7      	b.n	8009a40 <__sfp+0x18>
 8009a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a54:	b9d5      	cbnz	r5, 8009a8c <__sfp+0x64>
 8009a56:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <__sfp+0x88>)
 8009a58:	60e3      	str	r3, [r4, #12]
 8009a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8009a60:	f000 f859 	bl	8009b16 <__retarget_lock_init_recursive>
 8009a64:	f7ff ff96 	bl	8009994 <__sfp_lock_release>
 8009a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a70:	6025      	str	r5, [r4, #0]
 8009a72:	61a5      	str	r5, [r4, #24]
 8009a74:	2208      	movs	r2, #8
 8009a76:	4629      	mov	r1, r5
 8009a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a7c:	f7fb fb24 	bl	80050c8 <memset>
 8009a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8c:	3468      	adds	r4, #104	; 0x68
 8009a8e:	e7d9      	b.n	8009a44 <__sfp+0x1c>
 8009a90:	2104      	movs	r1, #4
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7ff ff62 	bl	800995c <__sfmoreglue>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	6030      	str	r0, [r6, #0]
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1d5      	bne.n	8009a4c <__sfp+0x24>
 8009aa0:	f7ff ff78 	bl	8009994 <__sfp_lock_release>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	e7ee      	b.n	8009a88 <__sfp+0x60>
 8009aaa:	bf00      	nop
 8009aac:	0800a418 	.word	0x0800a418
 8009ab0:	ffff0001 	.word	0xffff0001

08009ab4 <fiprintf>:
 8009ab4:	b40e      	push	{r1, r2, r3}
 8009ab6:	b503      	push	{r0, r1, lr}
 8009ab8:	4601      	mov	r1, r0
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <fiprintf+0x20>)
 8009abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac2:	6800      	ldr	r0, [r0, #0]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f000 f8a5 	bl	8009c14 <_vfiprintf_r>
 8009aca:	b002      	add	sp, #8
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	2000000c 	.word	0x2000000c

08009ad8 <_fwalk_reent>:
 8009ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	4606      	mov	r6, r0
 8009ade:	4688      	mov	r8, r1
 8009ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ae4:	2700      	movs	r7, #0
 8009ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aea:	f1b9 0901 	subs.w	r9, r9, #1
 8009aee:	d505      	bpl.n	8009afc <_fwalk_reent+0x24>
 8009af0:	6824      	ldr	r4, [r4, #0]
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	d1f7      	bne.n	8009ae6 <_fwalk_reent+0xe>
 8009af6:	4638      	mov	r0, r7
 8009af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afc:	89ab      	ldrh	r3, [r5, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d907      	bls.n	8009b12 <_fwalk_reent+0x3a>
 8009b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b06:	3301      	adds	r3, #1
 8009b08:	d003      	beq.n	8009b12 <_fwalk_reent+0x3a>
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	47c0      	blx	r8
 8009b10:	4307      	orrs	r7, r0
 8009b12:	3568      	adds	r5, #104	; 0x68
 8009b14:	e7e9      	b.n	8009aea <_fwalk_reent+0x12>

08009b16 <__retarget_lock_init_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_acquire_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_release_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <memmove>:
 8009b1c:	4288      	cmp	r0, r1
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	eb01 0402 	add.w	r4, r1, r2
 8009b24:	d902      	bls.n	8009b2c <memmove+0x10>
 8009b26:	4284      	cmp	r4, r0
 8009b28:	4623      	mov	r3, r4
 8009b2a:	d807      	bhi.n	8009b3c <memmove+0x20>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	d008      	beq.n	8009b44 <memmove+0x28>
 8009b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b3a:	e7f8      	b.n	8009b2e <memmove+0x12>
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4601      	mov	r1, r0
 8009b40:	428a      	cmp	r2, r1
 8009b42:	d100      	bne.n	8009b46 <memmove+0x2a>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b4e:	e7f7      	b.n	8009b40 <memmove+0x24>

08009b50 <__malloc_lock>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__malloc_lock+0x8>)
 8009b52:	f7ff bfe1 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 8009b56:	bf00      	nop
 8009b58:	200002ec 	.word	0x200002ec

08009b5c <__malloc_unlock>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__malloc_unlock+0x8>)
 8009b5e:	f7ff bfdc 	b.w	8009b1a <__retarget_lock_release_recursive>
 8009b62:	bf00      	nop
 8009b64:	200002ec 	.word	0x200002ec

08009b68 <_realloc_r>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	4614      	mov	r4, r2
 8009b70:	460e      	mov	r6, r1
 8009b72:	b921      	cbnz	r1, 8009b7e <_realloc_r+0x16>
 8009b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	4611      	mov	r1, r2
 8009b7a:	f7fe bfc5 	b.w	8008b08 <_malloc_r>
 8009b7e:	b92a      	cbnz	r2, 8009b8c <_realloc_r+0x24>
 8009b80:	f7fe ff58 	bl	8008a34 <_free_r>
 8009b84:	4625      	mov	r5, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8c:	f000 fa9e 	bl	800a0cc <_malloc_usable_size_r>
 8009b90:	4284      	cmp	r4, r0
 8009b92:	4607      	mov	r7, r0
 8009b94:	d802      	bhi.n	8009b9c <_realloc_r+0x34>
 8009b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b9a:	d812      	bhi.n	8009bc2 <_realloc_r+0x5a>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f7fe ffb2 	bl	8008b08 <_malloc_r>
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d0ed      	beq.n	8009b86 <_realloc_r+0x1e>
 8009baa:	42bc      	cmp	r4, r7
 8009bac:	4622      	mov	r2, r4
 8009bae:	4631      	mov	r1, r6
 8009bb0:	bf28      	it	cs
 8009bb2:	463a      	movcs	r2, r7
 8009bb4:	f7fe fa68 	bl	8008088 <memcpy>
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4640      	mov	r0, r8
 8009bbc:	f7fe ff3a 	bl	8008a34 <_free_r>
 8009bc0:	e7e1      	b.n	8009b86 <_realloc_r+0x1e>
 8009bc2:	4635      	mov	r5, r6
 8009bc4:	e7df      	b.n	8009b86 <_realloc_r+0x1e>

08009bc6 <__sfputc_r>:
 8009bc6:	6893      	ldr	r3, [r2, #8]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	b410      	push	{r4}
 8009bce:	6093      	str	r3, [r2, #8]
 8009bd0:	da07      	bge.n	8009be2 <__sfputc_r+0x1c>
 8009bd2:	6994      	ldr	r4, [r2, #24]
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	db01      	blt.n	8009bdc <__sfputc_r+0x16>
 8009bd8:	290a      	cmp	r1, #10
 8009bda:	d102      	bne.n	8009be2 <__sfputc_r+0x1c>
 8009bdc:	bc10      	pop	{r4}
 8009bde:	f000 b949 	b.w	8009e74 <__swbuf_r>
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	1c58      	adds	r0, r3, #1
 8009be6:	6010      	str	r0, [r2, #0]
 8009be8:	7019      	strb	r1, [r3, #0]
 8009bea:	4608      	mov	r0, r1
 8009bec:	bc10      	pop	{r4}
 8009bee:	4770      	bx	lr

08009bf0 <__sfputs_r>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	4614      	mov	r4, r2
 8009bf8:	18d5      	adds	r5, r2, r3
 8009bfa:	42ac      	cmp	r4, r5
 8009bfc:	d101      	bne.n	8009c02 <__sfputs_r+0x12>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e007      	b.n	8009c12 <__sfputs_r+0x22>
 8009c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c06:	463a      	mov	r2, r7
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff ffdc 	bl	8009bc6 <__sfputc_r>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d1f3      	bne.n	8009bfa <__sfputs_r+0xa>
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c14 <_vfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	460d      	mov	r5, r1
 8009c1a:	b09d      	sub	sp, #116	; 0x74
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	4698      	mov	r8, r3
 8009c20:	4606      	mov	r6, r0
 8009c22:	b118      	cbz	r0, 8009c2c <_vfiprintf_r+0x18>
 8009c24:	6983      	ldr	r3, [r0, #24]
 8009c26:	b90b      	cbnz	r3, 8009c2c <_vfiprintf_r+0x18>
 8009c28:	f7ff fec6 	bl	80099b8 <__sinit>
 8009c2c:	4b89      	ldr	r3, [pc, #548]	; (8009e54 <_vfiprintf_r+0x240>)
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	d11b      	bne.n	8009c6a <_vfiprintf_r+0x56>
 8009c32:	6875      	ldr	r5, [r6, #4]
 8009c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c36:	07d9      	lsls	r1, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_vfiprintf_r+0x32>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	059a      	lsls	r2, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_vfiprintf_r+0x32>
 8009c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c42:	f7ff ff69 	bl	8009b18 <__retarget_lock_acquire_recursive>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	071b      	lsls	r3, r3, #28
 8009c4a:	d501      	bpl.n	8009c50 <_vfiprintf_r+0x3c>
 8009c4c:	692b      	ldr	r3, [r5, #16]
 8009c4e:	b9eb      	cbnz	r3, 8009c8c <_vfiprintf_r+0x78>
 8009c50:	4629      	mov	r1, r5
 8009c52:	4630      	mov	r0, r6
 8009c54:	f000 f960 	bl	8009f18 <__swsetup_r>
 8009c58:	b1c0      	cbz	r0, 8009c8c <_vfiprintf_r+0x78>
 8009c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c5c:	07dc      	lsls	r4, r3, #31
 8009c5e:	d50e      	bpl.n	8009c7e <_vfiprintf_r+0x6a>
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c64:	b01d      	add	sp, #116	; 0x74
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6a:	4b7b      	ldr	r3, [pc, #492]	; (8009e58 <_vfiprintf_r+0x244>)
 8009c6c:	429d      	cmp	r5, r3
 8009c6e:	d101      	bne.n	8009c74 <_vfiprintf_r+0x60>
 8009c70:	68b5      	ldr	r5, [r6, #8]
 8009c72:	e7df      	b.n	8009c34 <_vfiprintf_r+0x20>
 8009c74:	4b79      	ldr	r3, [pc, #484]	; (8009e5c <_vfiprintf_r+0x248>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	bf08      	it	eq
 8009c7a:	68f5      	ldreq	r5, [r6, #12]
 8009c7c:	e7da      	b.n	8009c34 <_vfiprintf_r+0x20>
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	0598      	lsls	r0, r3, #22
 8009c82:	d4ed      	bmi.n	8009c60 <_vfiprintf_r+0x4c>
 8009c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c86:	f7ff ff48 	bl	8009b1a <__retarget_lock_release_recursive>
 8009c8a:	e7e9      	b.n	8009c60 <_vfiprintf_r+0x4c>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c90:	2320      	movs	r3, #32
 8009c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c9a:	2330      	movs	r3, #48	; 0x30
 8009c9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e60 <_vfiprintf_r+0x24c>
 8009ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca4:	f04f 0901 	mov.w	r9, #1
 8009ca8:	4623      	mov	r3, r4
 8009caa:	469a      	mov	sl, r3
 8009cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb0:	b10a      	cbz	r2, 8009cb6 <_vfiprintf_r+0xa2>
 8009cb2:	2a25      	cmp	r2, #37	; 0x25
 8009cb4:	d1f9      	bne.n	8009caa <_vfiprintf_r+0x96>
 8009cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cba:	d00b      	beq.n	8009cd4 <_vfiprintf_r+0xc0>
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7ff ff94 	bl	8009bf0 <__sfputs_r>
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f000 80aa 	beq.w	8009e22 <_vfiprintf_r+0x20e>
 8009cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd0:	445a      	add	r2, fp
 8009cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80a2 	beq.w	8009e22 <_vfiprintf_r+0x20e>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce8:	f10a 0a01 	add.w	sl, sl, #1
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfe:	4858      	ldr	r0, [pc, #352]	; (8009e60 <_vfiprintf_r+0x24c>)
 8009d00:	f7f6 fa46 	bl	8000190 <memchr>
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	b9d8      	cbnz	r0, 8009d40 <_vfiprintf_r+0x12c>
 8009d08:	06d1      	lsls	r1, r2, #27
 8009d0a:	bf44      	itt	mi
 8009d0c:	2320      	movmi	r3, #32
 8009d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d12:	0713      	lsls	r3, r2, #28
 8009d14:	bf44      	itt	mi
 8009d16:	232b      	movmi	r3, #43	; 0x2b
 8009d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b2a      	cmp	r3, #42	; 0x2a
 8009d22:	d015      	beq.n	8009d50 <_vfiprintf_r+0x13c>
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	4654      	mov	r4, sl
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f04f 0c0a 	mov.w	ip, #10
 8009d2e:	4621      	mov	r1, r4
 8009d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d34:	3b30      	subs	r3, #48	; 0x30
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	d94e      	bls.n	8009dd8 <_vfiprintf_r+0x1c4>
 8009d3a:	b1b0      	cbz	r0, 8009d6a <_vfiprintf_r+0x156>
 8009d3c:	9207      	str	r2, [sp, #28]
 8009d3e:	e014      	b.n	8009d6a <_vfiprintf_r+0x156>
 8009d40:	eba0 0308 	sub.w	r3, r0, r8
 8009d44:	fa09 f303 	lsl.w	r3, r9, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	46a2      	mov	sl, r4
 8009d4e:	e7d2      	b.n	8009cf6 <_vfiprintf_r+0xe2>
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	1d19      	adds	r1, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	9103      	str	r1, [sp, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfbb      	ittet	lt
 8009d5c:	425b      	neglt	r3, r3
 8009d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d62:	9307      	strge	r3, [sp, #28]
 8009d64:	9307      	strlt	r3, [sp, #28]
 8009d66:	bfb8      	it	lt
 8009d68:	9204      	strlt	r2, [sp, #16]
 8009d6a:	7823      	ldrb	r3, [r4, #0]
 8009d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d6e:	d10c      	bne.n	8009d8a <_vfiprintf_r+0x176>
 8009d70:	7863      	ldrb	r3, [r4, #1]
 8009d72:	2b2a      	cmp	r3, #42	; 0x2a
 8009d74:	d135      	bne.n	8009de2 <_vfiprintf_r+0x1ce>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	1d1a      	adds	r2, r3, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	9203      	str	r2, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfb8      	it	lt
 8009d82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d86:	3402      	adds	r4, #2
 8009d88:	9305      	str	r3, [sp, #20]
 8009d8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e64 <_vfiprintf_r+0x250>
 8009d8e:	7821      	ldrb	r1, [r4, #0]
 8009d90:	2203      	movs	r2, #3
 8009d92:	4650      	mov	r0, sl
 8009d94:	f7f6 f9fc 	bl	8000190 <memchr>
 8009d98:	b140      	cbz	r0, 8009dac <_vfiprintf_r+0x198>
 8009d9a:	2340      	movs	r3, #64	; 0x40
 8009d9c:	eba0 000a 	sub.w	r0, r0, sl
 8009da0:	fa03 f000 	lsl.w	r0, r3, r0
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	4303      	orrs	r3, r0
 8009da8:	3401      	adds	r4, #1
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db0:	482d      	ldr	r0, [pc, #180]	; (8009e68 <_vfiprintf_r+0x254>)
 8009db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db6:	2206      	movs	r2, #6
 8009db8:	f7f6 f9ea 	bl	8000190 <memchr>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d03f      	beq.n	8009e40 <_vfiprintf_r+0x22c>
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <_vfiprintf_r+0x258>)
 8009dc2:	bb1b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x1f8>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	3307      	adds	r3, #7
 8009dc8:	f023 0307 	bic.w	r3, r3, #7
 8009dcc:	3308      	adds	r3, #8
 8009dce:	9303      	str	r3, [sp, #12]
 8009dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd2:	443b      	add	r3, r7
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	e767      	b.n	8009ca8 <_vfiprintf_r+0x94>
 8009dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ddc:	460c      	mov	r4, r1
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7a5      	b.n	8009d2e <_vfiprintf_r+0x11a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	3401      	adds	r4, #1
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	4619      	mov	r1, r3
 8009dea:	f04f 0c0a 	mov.w	ip, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df4:	3a30      	subs	r2, #48	; 0x30
 8009df6:	2a09      	cmp	r2, #9
 8009df8:	d903      	bls.n	8009e02 <_vfiprintf_r+0x1ee>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0c5      	beq.n	8009d8a <_vfiprintf_r+0x176>
 8009dfe:	9105      	str	r1, [sp, #20]
 8009e00:	e7c3      	b.n	8009d8a <_vfiprintf_r+0x176>
 8009e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e06:	4604      	mov	r4, r0
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e7f0      	b.n	8009dee <_vfiprintf_r+0x1da>
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <_vfiprintf_r+0x25c>)
 8009e14:	a904      	add	r1, sp, #16
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7fb f9fc 	bl	8005214 <_printf_float>
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	1c78      	adds	r0, r7, #1
 8009e20:	d1d6      	bne.n	8009dd0 <_vfiprintf_r+0x1bc>
 8009e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e24:	07d9      	lsls	r1, r3, #31
 8009e26:	d405      	bmi.n	8009e34 <_vfiprintf_r+0x220>
 8009e28:	89ab      	ldrh	r3, [r5, #12]
 8009e2a:	059a      	lsls	r2, r3, #22
 8009e2c:	d402      	bmi.n	8009e34 <_vfiprintf_r+0x220>
 8009e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e30:	f7ff fe73 	bl	8009b1a <__retarget_lock_release_recursive>
 8009e34:	89ab      	ldrh	r3, [r5, #12]
 8009e36:	065b      	lsls	r3, r3, #25
 8009e38:	f53f af12 	bmi.w	8009c60 <_vfiprintf_r+0x4c>
 8009e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3e:	e711      	b.n	8009c64 <_vfiprintf_r+0x50>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <_vfiprintf_r+0x25c>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7fb fc7a 	bl	8005744 <_printf_i>
 8009e50:	e7e4      	b.n	8009e1c <_vfiprintf_r+0x208>
 8009e52:	bf00      	nop
 8009e54:	0800a894 	.word	0x0800a894
 8009e58:	0800a8b4 	.word	0x0800a8b4
 8009e5c:	0800a874 	.word	0x0800a874
 8009e60:	0800a80c 	.word	0x0800a80c
 8009e64:	0800a812 	.word	0x0800a812
 8009e68:	0800a816 	.word	0x0800a816
 8009e6c:	08005215 	.word	0x08005215
 8009e70:	08009bf1 	.word	0x08009bf1

08009e74 <__swbuf_r>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	460e      	mov	r6, r1
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b118      	cbz	r0, 8009e86 <__swbuf_r+0x12>
 8009e7e:	6983      	ldr	r3, [r0, #24]
 8009e80:	b90b      	cbnz	r3, 8009e86 <__swbuf_r+0x12>
 8009e82:	f7ff fd99 	bl	80099b8 <__sinit>
 8009e86:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <__swbuf_r+0x98>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d12b      	bne.n	8009ee4 <__swbuf_r+0x70>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d52f      	bpl.n	8009ef8 <__swbuf_r+0x84>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b36b      	cbz	r3, 8009ef8 <__swbuf_r+0x84>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	1ac0      	subs	r0, r0, r3
 8009ea2:	6963      	ldr	r3, [r4, #20]
 8009ea4:	b2f6      	uxtb	r6, r6
 8009ea6:	4283      	cmp	r3, r0
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	dc04      	bgt.n	8009eb6 <__swbuf_r+0x42>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f7ff fcee 	bl	8009890 <_fflush_r>
 8009eb4:	bb30      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	701e      	strb	r6, [r3, #0]
 8009ec4:	6963      	ldr	r3, [r4, #20]
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	d004      	beq.n	8009ed6 <__swbuf_r+0x62>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d506      	bpl.n	8009ee0 <__swbuf_r+0x6c>
 8009ed2:	2e0a      	cmp	r6, #10
 8009ed4:	d104      	bne.n	8009ee0 <__swbuf_r+0x6c>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fcd9 	bl	8009890 <_fflush_r>
 8009ede:	b988      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <__swbuf_r+0x9c>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <__swbuf_r+0x7a>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7cf      	b.n	8009e8e <__swbuf_r+0x1a>
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <__swbuf_r+0xa0>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7ca      	b.n	8009e8e <__swbuf_r+0x1a>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f80c 	bl	8009f18 <__swsetup_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0cb      	beq.n	8009e9c <__swbuf_r+0x28>
 8009f04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f08:	e7ea      	b.n	8009ee0 <__swbuf_r+0x6c>
 8009f0a:	bf00      	nop
 8009f0c:	0800a894 	.word	0x0800a894
 8009f10:	0800a8b4 	.word	0x0800a8b4
 8009f14:	0800a874 	.word	0x0800a874

08009f18 <__swsetup_r>:
 8009f18:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <__swsetup_r+0xcc>)
 8009f1a:	b570      	push	{r4, r5, r6, lr}
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460c      	mov	r4, r1
 8009f22:	b125      	cbz	r5, 8009f2e <__swsetup_r+0x16>
 8009f24:	69ab      	ldr	r3, [r5, #24]
 8009f26:	b913      	cbnz	r3, 8009f2e <__swsetup_r+0x16>
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f7ff fd45 	bl	80099b8 <__sinit>
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <__swsetup_r+0xd0>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d10f      	bne.n	8009f54 <__swsetup_r+0x3c>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f3c:	0719      	lsls	r1, r3, #28
 8009f3e:	d42c      	bmi.n	8009f9a <__swsetup_r+0x82>
 8009f40:	06dd      	lsls	r5, r3, #27
 8009f42:	d411      	bmi.n	8009f68 <__swsetup_r+0x50>
 8009f44:	2309      	movs	r3, #9
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f52:	e03e      	b.n	8009fd2 <__swsetup_r+0xba>
 8009f54:	4b25      	ldr	r3, [pc, #148]	; (8009fec <__swsetup_r+0xd4>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d101      	bne.n	8009f5e <__swsetup_r+0x46>
 8009f5a:	68ac      	ldr	r4, [r5, #8]
 8009f5c:	e7eb      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f5e:	4b24      	ldr	r3, [pc, #144]	; (8009ff0 <__swsetup_r+0xd8>)
 8009f60:	429c      	cmp	r4, r3
 8009f62:	bf08      	it	eq
 8009f64:	68ec      	ldreq	r4, [r5, #12]
 8009f66:	e7e6      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f68:	0758      	lsls	r0, r3, #29
 8009f6a:	d512      	bpl.n	8009f92 <__swsetup_r+0x7a>
 8009f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f6e:	b141      	cbz	r1, 8009f82 <__swsetup_r+0x6a>
 8009f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d002      	beq.n	8009f7e <__swsetup_r+0x66>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7fe fd5b 	bl	8008a34 <_free_r>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6363      	str	r3, [r4, #52]	; 0x34
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f043 0308 	orr.w	r3, r3, #8
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b94b      	cbnz	r3, 8009fb2 <__swsetup_r+0x9a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa8:	d003      	beq.n	8009fb2 <__swsetup_r+0x9a>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f84d 	bl	800a04c <__smakebuf_r>
 8009fb2:	89a0      	ldrh	r0, [r4, #12]
 8009fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fb8:	f010 0301 	ands.w	r3, r0, #1
 8009fbc:	d00a      	beq.n	8009fd4 <__swsetup_r+0xbc>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60a3      	str	r3, [r4, #8]
 8009fc2:	6963      	ldr	r3, [r4, #20]
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	61a3      	str	r3, [r4, #24]
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	b943      	cbnz	r3, 8009fde <__swsetup_r+0xc6>
 8009fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fd0:	d1ba      	bne.n	8009f48 <__swsetup_r+0x30>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	0781      	lsls	r1, r0, #30
 8009fd6:	bf58      	it	pl
 8009fd8:	6963      	ldrpl	r3, [r4, #20]
 8009fda:	60a3      	str	r3, [r4, #8]
 8009fdc:	e7f4      	b.n	8009fc8 <__swsetup_r+0xb0>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e7f7      	b.n	8009fd2 <__swsetup_r+0xba>
 8009fe2:	bf00      	nop
 8009fe4:	2000000c 	.word	0x2000000c
 8009fe8:	0800a894 	.word	0x0800a894
 8009fec:	0800a8b4 	.word	0x0800a8b4
 8009ff0:	0800a874 	.word	0x0800a874

08009ff4 <abort>:
 8009ff4:	b508      	push	{r3, lr}
 8009ff6:	2006      	movs	r0, #6
 8009ff8:	f000 f898 	bl	800a12c <raise>
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f7f7 fda1 	bl	8001b44 <_exit>

0800a002 <__swhatbuf_r>:
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	460e      	mov	r6, r1
 800a006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00a:	2900      	cmp	r1, #0
 800a00c:	b096      	sub	sp, #88	; 0x58
 800a00e:	4614      	mov	r4, r2
 800a010:	461d      	mov	r5, r3
 800a012:	da08      	bge.n	800a026 <__swhatbuf_r+0x24>
 800a014:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	602a      	str	r2, [r5, #0]
 800a01c:	061a      	lsls	r2, r3, #24
 800a01e:	d410      	bmi.n	800a042 <__swhatbuf_r+0x40>
 800a020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a024:	e00e      	b.n	800a044 <__swhatbuf_r+0x42>
 800a026:	466a      	mov	r2, sp
 800a028:	f000 f89c 	bl	800a164 <_fstat_r>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	dbf1      	blt.n	800a014 <__swhatbuf_r+0x12>
 800a030:	9a01      	ldr	r2, [sp, #4]
 800a032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a03a:	425a      	negs	r2, r3
 800a03c:	415a      	adcs	r2, r3
 800a03e:	602a      	str	r2, [r5, #0]
 800a040:	e7ee      	b.n	800a020 <__swhatbuf_r+0x1e>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	2000      	movs	r0, #0
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	b016      	add	sp, #88	; 0x58
 800a04a:	bd70      	pop	{r4, r5, r6, pc}

0800a04c <__smakebuf_r>:
 800a04c:	898b      	ldrh	r3, [r1, #12]
 800a04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a050:	079d      	lsls	r5, r3, #30
 800a052:	4606      	mov	r6, r0
 800a054:	460c      	mov	r4, r1
 800a056:	d507      	bpl.n	800a068 <__smakebuf_r+0x1c>
 800a058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	2301      	movs	r3, #1
 800a062:	6163      	str	r3, [r4, #20]
 800a064:	b002      	add	sp, #8
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	ab01      	add	r3, sp, #4
 800a06a:	466a      	mov	r2, sp
 800a06c:	f7ff ffc9 	bl	800a002 <__swhatbuf_r>
 800a070:	9900      	ldr	r1, [sp, #0]
 800a072:	4605      	mov	r5, r0
 800a074:	4630      	mov	r0, r6
 800a076:	f7fe fd47 	bl	8008b08 <_malloc_r>
 800a07a:	b948      	cbnz	r0, 800a090 <__smakebuf_r+0x44>
 800a07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a080:	059a      	lsls	r2, r3, #22
 800a082:	d4ef      	bmi.n	800a064 <__smakebuf_r+0x18>
 800a084:	f023 0303 	bic.w	r3, r3, #3
 800a088:	f043 0302 	orr.w	r3, r3, #2
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	e7e3      	b.n	800a058 <__smakebuf_r+0xc>
 800a090:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <__smakebuf_r+0x7c>)
 800a092:	62b3      	str	r3, [r6, #40]	; 0x28
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	6020      	str	r0, [r4, #0]
 800a098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	6163      	str	r3, [r4, #20]
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	6120      	str	r0, [r4, #16]
 800a0a6:	b15b      	cbz	r3, 800a0c0 <__smakebuf_r+0x74>
 800a0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f000 f86b 	bl	800a188 <_isatty_r>
 800a0b2:	b128      	cbz	r0, 800a0c0 <__smakebuf_r+0x74>
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	89a0      	ldrh	r0, [r4, #12]
 800a0c2:	4305      	orrs	r5, r0
 800a0c4:	81a5      	strh	r5, [r4, #12]
 800a0c6:	e7cd      	b.n	800a064 <__smakebuf_r+0x18>
 800a0c8:	08009951 	.word	0x08009951

0800a0cc <_malloc_usable_size_r>:
 800a0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d0:	1f18      	subs	r0, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfbc      	itt	lt
 800a0d6:	580b      	ldrlt	r3, [r1, r0]
 800a0d8:	18c0      	addlt	r0, r0, r3
 800a0da:	4770      	bx	lr

0800a0dc <_raise_r>:
 800a0dc:	291f      	cmp	r1, #31
 800a0de:	b538      	push	{r3, r4, r5, lr}
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	d904      	bls.n	800a0f0 <_raise_r+0x14>
 800a0e6:	2316      	movs	r3, #22
 800a0e8:	6003      	str	r3, [r0, #0]
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0f2:	b112      	cbz	r2, 800a0fa <_raise_r+0x1e>
 800a0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f8:	b94b      	cbnz	r3, 800a10e <_raise_r+0x32>
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 f830 	bl	800a160 <_getpid_r>
 800a100:	462a      	mov	r2, r5
 800a102:	4601      	mov	r1, r0
 800a104:	4620      	mov	r0, r4
 800a106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10a:	f000 b817 	b.w	800a13c <_kill_r>
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d00a      	beq.n	800a128 <_raise_r+0x4c>
 800a112:	1c59      	adds	r1, r3, #1
 800a114:	d103      	bne.n	800a11e <_raise_r+0x42>
 800a116:	2316      	movs	r3, #22
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	2001      	movs	r0, #1
 800a11c:	e7e7      	b.n	800a0ee <_raise_r+0x12>
 800a11e:	2400      	movs	r4, #0
 800a120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a124:	4628      	mov	r0, r5
 800a126:	4798      	blx	r3
 800a128:	2000      	movs	r0, #0
 800a12a:	e7e0      	b.n	800a0ee <_raise_r+0x12>

0800a12c <raise>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	; (800a138 <raise+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f7ff bfd3 	b.w	800a0dc <_raise_r>
 800a136:	bf00      	nop
 800a138:	2000000c 	.word	0x2000000c

0800a13c <_kill_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	; (800a15c <_kill_r+0x20>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	f7f7 fceb 	bl	8001b24 <_kill>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d102      	bne.n	800a158 <_kill_r+0x1c>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b103      	cbz	r3, 800a158 <_kill_r+0x1c>
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	200002e8 	.word	0x200002e8

0800a160 <_getpid_r>:
 800a160:	f7f7 bcd9 	b.w	8001b16 <_getpid>

0800a164 <_fstat_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	; (800a184 <_fstat_r+0x20>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f7f7 fd35 	bl	8001be0 <_fstat>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d102      	bne.n	800a180 <_fstat_r+0x1c>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b103      	cbz	r3, 800a180 <_fstat_r+0x1c>
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	bd38      	pop	{r3, r4, r5, pc}
 800a182:	bf00      	nop
 800a184:	200002e8 	.word	0x200002e8

0800a188 <_isatty_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d06      	ldr	r5, [pc, #24]	; (800a1a4 <_isatty_r+0x1c>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	4608      	mov	r0, r1
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	f7f7 fd33 	bl	8001bfe <_isatty>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_isatty_r+0x1a>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_isatty_r+0x1a>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	200002e8 	.word	0x200002e8

0800a1a8 <floor>:
 800a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a1b0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a1b4:	2e13      	cmp	r6, #19
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	4605      	mov	r5, r0
 800a1c0:	dc33      	bgt.n	800a22a <floor+0x82>
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	da14      	bge.n	800a1f0 <floor+0x48>
 800a1c6:	a334      	add	r3, pc, #208	; (adr r3, 800a298 <floor+0xf0>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7f6 f836 	bl	800023c <__adddf3>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f7f6 fc78 	bl	8000ac8 <__aeabi_dcmpgt>
 800a1d8:	b138      	cbz	r0, 800a1ea <floor+0x42>
 800a1da:	2c00      	cmp	r4, #0
 800a1dc:	da58      	bge.n	800a290 <floor+0xe8>
 800a1de:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a1e2:	431d      	orrs	r5, r3
 800a1e4:	d001      	beq.n	800a1ea <floor+0x42>
 800a1e6:	4c2e      	ldr	r4, [pc, #184]	; (800a2a0 <floor+0xf8>)
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	4623      	mov	r3, r4
 800a1ec:	462f      	mov	r7, r5
 800a1ee:	e025      	b.n	800a23c <floor+0x94>
 800a1f0:	4a2c      	ldr	r2, [pc, #176]	; (800a2a4 <floor+0xfc>)
 800a1f2:	fa42 f806 	asr.w	r8, r2, r6
 800a1f6:	ea01 0208 	and.w	r2, r1, r8
 800a1fa:	4302      	orrs	r2, r0
 800a1fc:	d01e      	beq.n	800a23c <floor+0x94>
 800a1fe:	a326      	add	r3, pc, #152	; (adr r3, 800a298 <floor+0xf0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f6 f81a 	bl	800023c <__adddf3>
 800a208:	2200      	movs	r2, #0
 800a20a:	2300      	movs	r3, #0
 800a20c:	f7f6 fc5c 	bl	8000ac8 <__aeabi_dcmpgt>
 800a210:	2800      	cmp	r0, #0
 800a212:	d0ea      	beq.n	800a1ea <floor+0x42>
 800a214:	2c00      	cmp	r4, #0
 800a216:	bfbe      	ittt	lt
 800a218:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a21c:	fa43 f606 	asrlt.w	r6, r3, r6
 800a220:	19a4      	addlt	r4, r4, r6
 800a222:	ea24 0408 	bic.w	r4, r4, r8
 800a226:	2500      	movs	r5, #0
 800a228:	e7df      	b.n	800a1ea <floor+0x42>
 800a22a:	2e33      	cmp	r6, #51	; 0x33
 800a22c:	dd0a      	ble.n	800a244 <floor+0x9c>
 800a22e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a232:	d103      	bne.n	800a23c <floor+0x94>
 800a234:	f7f6 f802 	bl	800023c <__adddf3>
 800a238:	4607      	mov	r7, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4638      	mov	r0, r7
 800a23e:	4619      	mov	r1, r3
 800a240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a244:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a24c:	fa22 f808 	lsr.w	r8, r2, r8
 800a250:	ea18 0f00 	tst.w	r8, r0
 800a254:	d0f2      	beq.n	800a23c <floor+0x94>
 800a256:	a310      	add	r3, pc, #64	; (adr r3, 800a298 <floor+0xf0>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f5 ffee 	bl	800023c <__adddf3>
 800a260:	2200      	movs	r2, #0
 800a262:	2300      	movs	r3, #0
 800a264:	f7f6 fc30 	bl	8000ac8 <__aeabi_dcmpgt>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d0be      	beq.n	800a1ea <floor+0x42>
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	da02      	bge.n	800a276 <floor+0xce>
 800a270:	2e14      	cmp	r6, #20
 800a272:	d103      	bne.n	800a27c <floor+0xd4>
 800a274:	3401      	adds	r4, #1
 800a276:	ea25 0508 	bic.w	r5, r5, r8
 800a27a:	e7b6      	b.n	800a1ea <floor+0x42>
 800a27c:	2301      	movs	r3, #1
 800a27e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a282:	fa03 f606 	lsl.w	r6, r3, r6
 800a286:	4435      	add	r5, r6
 800a288:	42bd      	cmp	r5, r7
 800a28a:	bf38      	it	cc
 800a28c:	18e4      	addcc	r4, r4, r3
 800a28e:	e7f2      	b.n	800a276 <floor+0xce>
 800a290:	2500      	movs	r5, #0
 800a292:	462c      	mov	r4, r5
 800a294:	e7a9      	b.n	800a1ea <floor+0x42>
 800a296:	bf00      	nop
 800a298:	8800759c 	.word	0x8800759c
 800a29c:	7e37e43c 	.word	0x7e37e43c
 800a2a0:	bff00000 	.word	0xbff00000
 800a2a4:	000fffff 	.word	0x000fffff

0800a2a8 <_init>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_fini>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr
