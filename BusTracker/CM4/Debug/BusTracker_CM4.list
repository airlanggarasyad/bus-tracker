
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800498c  0800498c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004a04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004a04  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d52  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248a  00000000  00000000  00031dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00035490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9a6  00000000  00000000  000365d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001235a  00000000  00000000  00052f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2d57  00000000  00000000  000652d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  00118078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800481c 	.word	0x0800481c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800481c 	.word	0x0800481c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0d6      	sub	sp, #344	; 0x158
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fac3 	bl	8000b2c <HAL_Init>
  uint8_t receivedData[75];
  uint8_t data1[75];
  uint8_t data2[75];
  uint8_t buff[100];

  const char* desiredNMEA = "$GPGGA";
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0xf4>)
 80005a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f87e 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f960 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f912 	bl	80007dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b8:	f000 f8d2 	bl	8000760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80005bc:	2001      	movs	r0, #1
 80005be:	f001 fb11 	bl	8001be4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 80005c2:	2374      	movs	r3, #116	; 0x74
 80005c4:	b299      	uxth	r1, r3
 80005c6:	230a      	movs	r3, #10
 80005c8:	2202      	movs	r2, #2
 80005ca:	4832      	ldr	r0, [pc, #200]	; (8000694 <main+0xf8>)
 80005cc:	f000 ff10 	bl	80013f0 <HAL_I2C_IsDeviceReady>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

	 	  if (ret != HAL_OK) {
 80005d6:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d005      	beq.n	80005ea <main+0x4e>
	 		  sprintf((char*)buff, "Device is not ready \r\n");
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	492d      	ldr	r1, [pc, #180]	; (8000698 <main+0xfc>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fc98 	bl	8003f18 <siprintf>
 80005e8:	e02c      	b.n	8000644 <main+0xa8>
	 	  } else {
	 		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 80005ea:	2374      	movs	r3, #116	; 0x74
 80005ec:	b299      	uxth	r1, r3
 80005ee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	234b      	movs	r3, #75	; 0x4b
 80005fa:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0xf8>)
 80005fc:	f000 fe02 	bl	8001204 <HAL_I2C_Master_Receive>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

	 		  if (ret != HAL_OK) {
 8000606:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <main+0x7e>
	 			  sprintf((char*)buff, "Error Rx \r\n");
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4922      	ldr	r1, [pc, #136]	; (800069c <main+0x100>)
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc80 	bl	8003f18 <siprintf>
 8000618:	e014      	b.n	8000644 <main+0xa8>
	 		  } else {
	 			  if (receivedData[0] == '$') {
 800061a:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800061e:	2b24      	cmp	r3, #36	; 0x24
 8000620:	d108      	bne.n	8000634 <main+0x98>
	 				 sprintf((char*)data1, "%s", (char*)receivedData);
 8000622:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000626:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800062a:	491d      	ldr	r1, [pc, #116]	; (80006a0 <main+0x104>)
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fc73 	bl	8003f18 <siprintf>
 8000632:	e007      	b.n	8000644 <main+0xa8>
	 			  } else {
	 				 sprintf((char*)data2, "%s", (char*)receivedData);
 8000634:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063c:	4918      	ldr	r1, [pc, #96]	; (80006a0 <main+0x104>)
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fc6a 	bl	8003f18 <siprintf>
	 			  }
	 		  }
	 	  }

	 	 sprintf((char*)buff, "%s %s\n", (char*)data1, (char*)data2);
 8000644:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000648:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800064c:	1d38      	adds	r0, r7, #4
 800064e:	4915      	ldr	r1, [pc, #84]	; (80006a4 <main+0x108>)
 8000650:	f003 fc62 	bl	8003f18 <siprintf>

	 	 if (strstr(buff, desiredNMEA) != NULL) {
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fc7c 	bl	8003f58 <strstr>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0ad      	beq.n	80005c2 <main+0x26>
	 		while (HAL_UART_Transmit(&huart2, buff, strlen((char*)buff), HAL_MAX_DELAY) != HAL_OK);
 8000666:	bf00      	nop
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fd88 	bl	8000180 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <main+0x10c>)
 800067c:	f002 fe5b 	bl	8003336 <HAL_UART_Transmit>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f0      	bne.n	8000668 <main+0xcc>
	 		HAL_Delay(500);
 8000686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068a:	f000 fac5 	bl	8000c18 <HAL_Delay>
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 800068e:	e798      	b.n	80005c2 <main+0x26>
 8000690:	08004834 	.word	0x08004834
 8000694:	2000008c 	.word	0x2000008c
 8000698:	0800483c 	.word	0x0800483c
 800069c:	08004854 	.word	0x08004854
 80006a0:	08004860 	.word	0x08004860
 80006a4:	08004864 	.word	0x08004864
 80006a8:	200000d8 	.word	0x200000d8

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2248      	movs	r2, #72	; 0x48
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fc24 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d2:	f001 fa5f 	bl	8001b94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ff32 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xb0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <SystemClock_Config+0xb0>)
 80006e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <SystemClock_Config+0xb0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f8:	2324      	movs	r3, #36	; 0x24
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006fc:	2381      	movs	r3, #129	; 0x81
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fd27 	bl	8002168 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000720:	f000 f8b5 	bl	800088e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000724:	236f      	movs	r3, #111	; 0x6f
 8000726:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f8ab 	bl	80028a0 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000750:	f000 f89d 	bl	800088e <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3768      	adds	r7, #104	; 0x68
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58000400 	.word	0x58000400

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_I2C1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_I2C1_Init+0x74>)
 800076c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000770:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_I2C1_Init+0x74>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_I2C1_Init+0x74>)
 800079e:	f000 fca1 	bl	80010e4 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f871 	bl	800088e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007b0:	f001 f95a 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ba:	f000 f868 	bl	800088e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C1_Init+0x74>)
 80007c2:	f001 f99b 	bl	8001afc <HAL_I2CEx_ConfigDigitalFilter>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f85f 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	40005400 	.word	0x40005400

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_USART2_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_USART2_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_USART2_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART2_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000826:	f002 fd36 	bl	8003296 <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f82d 	bl	800088e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_USART2_UART_Init+0x90>)
 8000838:	f003 fa74 	bl	8003d24 <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f824 	bl	800088e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x90>)
 800084a:	f003 faa9 	bl	8003da0 <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f81b 	bl	800088e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_USART2_UART_Init+0x90>)
 800085a:	f003 fa2b 	bl	8003cb4 <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f813 	bl	800088e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000d8 	.word	0x200000d8
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff fe76 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2004      	movs	r0, #4
 8000880:	f7ff fe73 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff fe70 	bl	800056a <LL_AHB2_GRP1_EnableClock>

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000892:	b672      	cpsid	i
}
 8000894:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000896:	e7fe      	b.n	8000896 <Error_Handler+0x8>

08000898 <LL_AHB2_GRP1_EnableClock>:
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008bc:	68fb      	ldr	r3, [r7, #12]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b096      	sub	sp, #88	; 0x58
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2238      	movs	r2, #56	; 0x38
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 faef 	bl	8003f08 <memset>
  if(hi2c->Instance==I2C1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_I2C_MspInit+0x84>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d125      	bne.n	8000980 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000938:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800093c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fb6c 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800094e:	f7ff ff9e 	bl	800088e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff ffa0 	bl	8000898 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000958:	23c0      	movs	r3, #192	; 0xc0
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095c:	2312      	movs	r3, #18
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000968:	2304      	movs	r3, #4
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_I2C_MspInit+0x88>)
 8000974:	f000 fa56 	bl	8000e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000978:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800097c:	f7ff ffa4 	bl	80008c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	; 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40005400 	.word	0x40005400
 800098c:	48000400 	.word	0x48000400

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2238      	movs	r2, #56	; 0x38
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 faa9 	bl	8003f08 <memset>
  if(huart->Instance==USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x88>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80009c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fb26 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009da:	f7ff ff58 	bl	800088e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009e2:	f7ff ff71 	bl	80008c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff ff56 	bl	8000898 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80009ec:	230c      	movs	r3, #12
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 fa0b 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004400 	.word	0x40004400

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f8bd 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f003 fa0a 	bl	8003eb4 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20008000 	.word	0x20008000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000168 	.word	0x20000168
 8000ad4:	20000180 	.word	0x20000180

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff fd2a 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b06:	f003 f9db 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fd47 	bl	800059c <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	08004994 	.word	0x08004994
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	20000180 	.word	0x20000180

08000b28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f000 f942 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b3c:	f002 f892 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <HAL_Init+0x3c>)
 8000b44:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f810 	bl	8000b6c <HAL_InitTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	e001      	b.n	8000b5c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b58:	f7ff fece 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000000 	.word	0x20000000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d024      	beq.n	8000bca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	f002 f870 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f936 	bl	8000e0a <HAL_SYSTICK_Config>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d809      	bhi.n	8000bbe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb2:	f000 f910 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_InitTick+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	2000016c 	.word	0x2000016c

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000016c 	.word	0x2000016c

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff49 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff60 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff92 	bl	8000d18 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb2 	bl	8000d7c <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e140      	b.n	80010b6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8132 	beq.w	80010b0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 808c 	beq.w	80010b0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1bc>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <HAL_GPIO_Init+0x2b4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1b8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1b4>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1be>
 8000fd8:	2307      	movs	r3, #7
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1be>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1be>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff2:	4938      	ldr	r1, [pc, #224]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001088:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f aeb7 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	58000800 	.word	0x58000800

080010e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e081      	b.n	80011fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fbfa 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2224      	movs	r2, #36	; 0x24
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e006      	b.n	800116c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800116a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d104      	bne.n	800117e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69d9      	ldr	r1, [r3, #28]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1a      	ldr	r2, [r3, #32]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2220      	movs	r2, #32
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	461a      	mov	r2, r3
 8001210:	460b      	mov	r3, r1
 8001212:	817b      	strh	r3, [r7, #10]
 8001214:	4613      	mov	r3, r2
 8001216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b20      	cmp	r3, #32
 8001222:	f040 80db 	bne.w	80013dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_I2C_Master_Receive+0x30>
 8001230:	2302      	movs	r3, #2
 8001232:	e0d4      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800123c:	f7ff fce2 	bl	8000c04 <HAL_GetTick>
 8001240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2319      	movs	r3, #25
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f9f8 	bl	8001644 <I2C_WaitOnFlagUntilTimeout>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0bf      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2222      	movs	r2, #34	; 0x22
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2210      	movs	r2, #16
 800126a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	893a      	ldrh	r2, [r7, #8]
 800127e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128a:	b29b      	uxth	r3, r3
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d90e      	bls.n	80012ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	b2da      	uxtb	r2, r3
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <HAL_I2C_Master_Receive+0x1e4>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fbae 	bl	8001a08 <I2C_TransferConfig>
 80012ac:	e06d      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	8979      	ldrh	r1, [r7, #10]
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_I2C_Master_Receive+0x1e4>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fb9d 	bl	8001a08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80012ce:	e05c      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	6a39      	ldr	r1, [r7, #32]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fa31 	bl	800173c <I2C_WaitOnRXNEFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e07c      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d034      	beq.n	800138a <HAL_I2C_Master_Receive+0x186>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d130      	bne.n	800138a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f986 	bl	8001644 <I2C_WaitOnFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e04d      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001346:	b29b      	uxth	r3, r3
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d90e      	bls.n	800136a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	b2da      	uxtb	r2, r3
 8001358:	8979      	ldrh	r1, [r7, #10]
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 fb50 	bl	8001a08 <I2C_TransferConfig>
 8001368:	e00f      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 fb3f 	bl	8001a08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d19d      	bne.n	80012d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6a39      	ldr	r1, [r7, #32]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 f993 	bl	80016c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e01a      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2220      	movs	r2, #32
 80013ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_I2C_Master_Receive+0x1e8>)
 80013bc:	400b      	ands	r3, r1
 80013be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80013dc:	2302      	movs	r3, #2
  }
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	80002400 	.word	0x80002400
 80013ec:	fe00e800 	.word	0xfe00e800

080013f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	460b      	mov	r3, r1
 80013fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b20      	cmp	r3, #32
 800140e:	f040 80f1 	bne.w	80015f4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001420:	d101      	bne.n	8001426 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001422:	2302      	movs	r3, #2
 8001424:	e0e7      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_I2C_IsDeviceReady+0x44>
 8001430:	2302      	movs	r3, #2
 8001432:	e0e0      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2224      	movs	r2, #36	; 0x24
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_I2C_IsDeviceReady+0x72>
 8001452:	897b      	ldrh	r3, [r7, #10]
 8001454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001460:	e004      	b.n	800146c <HAL_I2C_IsDeviceReady+0x7c>
 8001462:	897b      	ldrh	r3, [r7, #10]
 8001464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001468:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbc7 	bl	8000c04 <HAL_GetTick>
 8001476:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	2b20      	cmp	r3, #32
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b10      	cmp	r3, #16
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80014a4:	e034      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ac:	d01a      	beq.n	80014e4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014ae:	f7ff fba9 	bl	8000c04 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d302      	bcc.n	80014c4 <HAL_I2C_IsDeviceReady+0xd4>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10f      	bne.n	80014e4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e088      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b10      	cmp	r3, #16
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_I2C_IsDeviceReady+0x12c>
 8001516:	7fbb      	ldrb	r3, [r7, #30]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0c4      	beq.n	80014a6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b10      	cmp	r3, #16
 8001528:	d01a      	beq.n	8001560 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	2120      	movs	r1, #32
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 f885 	bl	8001644 <I2C_WaitOnFlagUntilTimeout>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e058      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2220      	movs	r2, #32
 800154a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e04a      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f86a 	bl	8001644 <I2C_WaitOnFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e03d      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2210      	movs	r2, #16
 8001580:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2220      	movs	r2, #32
 8001588:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d118      	bne.n	80015c4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	2120      	movs	r1, #32
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f849 	bl	8001644 <I2C_WaitOnFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e01c      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2220      	movs	r2, #32
 80015c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	f63f af3b 	bhi.w	800144a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b02      	cmp	r3, #2
 8001612:	d103      	bne.n	800161c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d007      	beq.n	800163a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	619a      	str	r2, [r3, #24]
  }
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001654:	e022      	b.n	800169c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d01e      	beq.n	800169c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165e:	f7ff fad1 	bl	8000c04 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d302      	bcc.n	8001674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d113      	bne.n	800169c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00f      	b.n	80016bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4013      	ands	r3, r2
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d0cd      	beq.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d0:	e028      	b.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8aa 	bl	8001830 <I2C_IsErrorOccurred>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e026      	b.n	8001734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e6:	f7ff fa8d 	bl	8000c04 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d302      	bcc.n	80016fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d113      	bne.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2220      	movs	r2, #32
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e007      	b.n	8001734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b20      	cmp	r3, #32
 8001730:	d1cf      	bne.n	80016d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001748:	e064      	b.n	8001814 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f86e 	bl	8001830 <I2C_IsErrorOccurred>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e062      	b.n	8001824 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d138      	bne.n	80017de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b04      	cmp	r3, #4
 8001778:	d105      	bne.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e04e      	b.n	8001824 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d107      	bne.n	80017a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2204      	movs	r2, #4
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
 80017a2:	e002      	b.n	80017aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e022      	b.n	8001824 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017de:	f7ff fa11 	bl	8000c04 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d302      	bcc.n	80017f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f043 0220 	orr.w	r2, r3, #32
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e007      	b.n	8001824 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b04      	cmp	r3, #4
 8001820:	d193      	bne.n	800174a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	fe00e800 	.word	0xfe00e800

08001830 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d075      	beq.n	8001948 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2210      	movs	r2, #16
 8001862:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001864:	e056      	b.n	8001914 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186c:	d052      	beq.n	8001914 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f9c9 	bl	8000c04 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_IsErrorOccurred+0x54>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d147      	bne.n	8001914 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001896:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a6:	d12e      	bne.n	8001906 <I2C_IsErrorOccurred+0xd6>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ae:	d02a      	beq.n	8001906 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d027      	beq.n	8001906 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018c4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018c6:	f7ff f99d 	bl	8000c04 <HAL_GetTick>
 80018ca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018cc:	e01b      	b.n	8001906 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ce:	f7ff f999 	bl	8000c04 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b19      	cmp	r3, #25
 80018da:	d914      	bls.n	8001906 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f043 0220 	orr.w	r2, r3, #32
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b20      	cmp	r3, #32
 8001912:	d1dc      	bne.n	80018ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d003      	beq.n	800192a <I2C_IsErrorOccurred+0xfa>
 8001922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001926:	2b00      	cmp	r3, #0
 8001928:	d09d      	beq.n	8001866 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800192a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2220      	movs	r2, #32
 8001938:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01c      	beq.n	80019f8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff fe1d 	bl	80015fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <I2C_IsErrorOccurred+0x1d4>)
 80019d0:	400b      	ands	r3, r1
 80019d2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	fe00e800 	.word	0xfe00e800

08001a08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	817b      	strh	r3, [r7, #10]
 8001a16:	4613      	mov	r3, r2
 8001a18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a1a:	897b      	ldrh	r3, [r7, #10]
 8001a1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a28:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a36:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	0d5b      	lsrs	r3, r3, #21
 8001a42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <I2C_TransferConfig+0x5c>)
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	ea02 0103 	and.w	r1, r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	03ff63ff 	.word	0x03ff63ff

08001a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d138      	bne.n	8001af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e032      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d139      	bne.n	8001b86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e033      	b.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	58000400 	.word	0x58000400

08001bb0 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <LL_PWR_EnableBootC2+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a03      	ldr	r2, [pc, #12]	; (8001bc8 <LL_PWR_EnableBootC2+0x18>)
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	58000400 	.word	0x58000400

08001bcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_PWREx_GetVoltageRange+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	58000400 	.word	0x58000400

08001be4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001bec:	f7ff ffe0 	bl	8001bb0 <LL_PWR_EnableBootC2>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c08:	d101      	bne.n	8001c0e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	58000400 	.word	0x58000400

08001c1c <LL_RCC_HSE_EnableTcxo>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_HSE_DisableTcxo>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c66:	d101      	bne.n	8001c6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_HSE_Enable>:
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_HSE_Disable>:
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_HSE_IsReady>:
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cc0:	d101      	bne.n	8001cc6 <LL_RCC_HSE_IsReady+0x18>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_RCC_HSE_IsReady+0x1a>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_HSI_Enable>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <LL_RCC_HSI_Disable>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_HSI_IsReady>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d101      	bne.n	8001d20 <LL_RCC_HSI_IsReady+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_RCC_HSI_IsReady+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d101      	bne.n	8001d6a <LL_RCC_LSE_IsReady+0x18>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_RCC_LSE_IsReady+0x1a>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d101      	bne.n	8001dcc <LL_RCC_LSI_IsReady+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_RCC_LSI_IsReady+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6013      	str	r3, [r2, #0]
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d101      	bne.n	8001e24 <LL_RCC_MSI_IsReady+0x16>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_RCC_MSI_IsReady+0x18>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d101      	bne.n	8001e44 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f40:	f023 020f 	bic.w	r2, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800204e:	d101      	bne.n	8002054 <LL_RCC_PLL_IsReady+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_RCC_PLL_IsReady+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0303 	and.w	r3, r3, #3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d101      	bne.n	80020d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020ee:	d101      	bne.n	80020f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d101      	bne.n	8002118 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002134:	d101      	bne.n	800213a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002156:	d101      	bne.n	800215c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e38b      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217a:	f7ff fea6 	bl	8001eca <LL_RCC_GetSysClkSource>
 800217e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002180:	f7ff ff8f 	bl	80020a2 <LL_RCC_PLL_GetMainSource>
 8002184:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80c9 	beq.w	8002326 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x3e>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d17b      	bne.n	8002298 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d178      	bne.n	8002298 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a6:	f7ff fe32 	bl	8001e0e <LL_RCC_MSI_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x54>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e36a      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x72>
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d8:	e006      	b.n	80021e8 <HAL_RCC_OscConfig+0x80>
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d222      	bcs.n	8002232 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fd6f 	bl	8002cd4 <RCC_SetFlashLatencyFromMSIRange>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e348      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe26 	bl	8001e7c <LL_RCC_MSI_SetCalibTrimming>
 8002230:	e021      	b.n	8002276 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fe0d 	bl	8001e7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fd34 	bl	8002cd4 <RCC_SetFlashLatencyFromMSIRange>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e30d      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002276:	f000 fcf5 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 800227a:	4603      	mov	r3, r0
 800227c:	4aa1      	ldr	r2, [pc, #644]	; (8002504 <HAL_RCC_OscConfig+0x39c>)
 800227e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002280:	4ba1      	ldr	r3, [pc, #644]	; (8002508 <HAL_RCC_OscConfig+0x3a0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fc71 	bl	8000b6c <HAL_InitTick>
 800228a:	4603      	mov	r3, r0
 800228c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d047      	beq.n	8002324 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	e2fc      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02c      	beq.n	80022fa <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a0:	f7ff fd99 	bl	8001dd6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fcae 	bl	8000c04 <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ac:	f7fe fcaa 	bl	8000c04 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e2e9      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80022be:	f7ff fda6 	bl	8001e0e <LL_RCC_MSI_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fdc2 	bl	8001e7c <LL_RCC_MSI_SetCalibTrimming>
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022fa:	f7ff fd7a 	bl	8001df2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fc81 	bl	8000c04 <HAL_GetTick>
 8002302:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002306:	f7fe fc7d 	bl	8000c04 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e2bc      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002318:	f7ff fd79 	bl	8001e0e <LL_RCC_MSI_IsReady>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f1      	bne.n	8002306 <HAL_RCC_OscConfig+0x19e>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002324:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d05f      	beq.n	80023f2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x1dc>
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d10d      	bne.n	800235a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d10a      	bne.n	800235a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	f7ff fcb3 	bl	8001cae <LL_RCC_HSE_IsReady>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d050      	beq.n	80023f0 <HAL_RCC_OscConfig+0x288>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e29b      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d102      	bne.n	8002380 <HAL_RCC_OscConfig+0x218>
 800237a:	f7ff fc7c 	bl	8001c76 <LL_RCC_HSE_Enable>
 800237e:	e00d      	b.n	800239c <HAL_RCC_OscConfig+0x234>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002388:	d104      	bne.n	8002394 <HAL_RCC_OscConfig+0x22c>
 800238a:	f7ff fc47 	bl	8001c1c <LL_RCC_HSE_EnableTcxo>
 800238e:	f7ff fc72 	bl	8001c76 <LL_RCC_HSE_Enable>
 8002392:	e003      	b.n	800239c <HAL_RCC_OscConfig+0x234>
 8002394:	f7ff fc7d 	bl	8001c92 <LL_RCC_HSE_Disable>
 8002398:	f7ff fc4e 	bl	8001c38 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7fe fc2e 	bl	8000c04 <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fc2a 	bl	8000c04 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e269      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023be:	f7ff fc76 	bl	8001cae <LL_RCC_HSE_IsReady>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f1      	beq.n	80023ac <HAL_RCC_OscConfig+0x244>
 80023c8:	e013      	b.n	80023f2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fc1b 	bl	8000c04 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d2:	f7fe fc17 	bl	8000c04 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e256      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80023e4:	f7ff fc63 	bl	8001cae <LL_RCC_HSE_IsReady>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f1      	bne.n	80023d2 <HAL_RCC_OscConfig+0x26a>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d04b      	beq.n	8002496 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x2a8>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d113      	bne.n	8002432 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d110      	bne.n	8002432 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002410:	f7ff fc7a 	bl	8001d08 <LL_RCC_HSI_IsReady>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x2be>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e235      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fc7d 	bl	8001d2a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002430:	e031      	b.n	8002496 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243a:	f7ff fc49 	bl	8001cd0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fbe1 	bl	8000c04 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe fbdd 	bl	8000c04 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e21c      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002458:	f7ff fc56 	bl	8001d08 <LL_RCC_HSI_IsReady>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f1      	beq.n	8002446 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc5f 	bl	8001d2a <LL_RCC_HSI_SetCalibTrimming>
 800246c:	e013      	b.n	8002496 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	f7ff fc3d 	bl	8001cec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fbc7 	bl	8000c04 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fbc3 	bl	8000c04 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e202      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800248c:	f7ff fc3c 	bl	8001d08 <LL_RCC_HSI_IsReady>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f1      	bne.n	800247a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06f      	beq.n	8002582 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d057      	beq.n	800255a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	429a      	cmp	r2, r3
 80024c0:	d036      	beq.n	8002530 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1db      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d018      	beq.n	8002516 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80024e4:	f7ff fc56 	bl	8001d94 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e8:	f7fe fb8c 	bl	8000c04 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80024ee:	e00d      	b.n	800250c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fb88 	bl	8000c04 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b11      	cmp	r3, #17
 80024fc:	d906      	bls.n	800250c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1c7      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 800250c:	f7ff fc52 	bl	8001db4 <LL_RCC_LSI_IsReady>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1ec      	bne.n	80024f0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	f023 0210 	bic.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002530:	f7ff fc20 	bl	8001d74 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fb66 	bl	8000c04 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe fb62 	bl	8000c04 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b11      	cmp	r3, #17
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1a1      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800254e:	f7ff fc31 	bl	8001db4 <LL_RCC_LSI_IsReady>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f1      	beq.n	800253c <HAL_RCC_OscConfig+0x3d4>
 8002558:	e013      	b.n	8002582 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	f7ff fc1b 	bl	8001d94 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fe fb51 	bl	8000c04 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fb4d 	bl	8000c04 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b11      	cmp	r3, #17
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e18c      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002578:	f7ff fc1c 	bl	8001db4 <LL_RCC_LSI_IsReady>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f1      	bne.n	8002566 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80d8 	beq.w	8002740 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002590:	f7ff fb32 	bl	8001bf8 <LL_PWR_IsEnabledBkUpAccess>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d113      	bne.n	80025c2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800259a:	f7ff fafb 	bl	8001b94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7fe fb31 	bl	8000c04 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe fb2d 	bl	8000c04 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e16c      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025b8:	f7ff fb1e 	bl	8001bf8 <LL_PWR_IsEnabledBkUpAccess>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f1      	beq.n	80025a6 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d07b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b85      	cmp	r3, #133	; 0x85
 80025d0:	d003      	beq.n	80025da <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe fb09 	bl	8000c04 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fafb 	bl	8000c04 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e138      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002620:	f7ff fb97 	bl	8001d52 <LL_RCC_LSE_IsReady>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ef      	beq.n	800260a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b81      	cmp	r3, #129	; 0x81
 8002630:	d003      	beq.n	800263a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b85      	cmp	r3, #133	; 0x85
 8002638:	d121      	bne.n	800267e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fae3 	bl	8000c04 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fad5 	bl	8000c04 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e112      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ec      	beq.n	8002656 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800267c:	e060      	b.n	8002740 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fac1 	bl	8000c04 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe fab3 	bl	8000c04 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0f0      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ec      	bne.n	800269a <HAL_RCC_OscConfig+0x532>
 80026c0:	e03e      	b.n	8002740 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe fa9f 	bl	8000c04 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fa91 	bl	8000c04 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0ce      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ec      	bne.n	80026de <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fa7e 	bl	8000c04 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fa70 	bl	8000c04 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0ad      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002736:	f7ff fb0c 	bl	8001d52 <LL_RCC_LSE_IsReady>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ef      	bne.n	8002720 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a3 	beq.w	8002890 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d076      	beq.n	800283e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b02      	cmp	r3, #2
 8002756:	d14b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	f7ff fc62 	bl	8002020 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fa52 	bl	8000c04 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fa4e 	bl	8000c04 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b0a      	cmp	r3, #10
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e08d      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002776:	f7ff fc61 	bl	800203c <LL_RCC_PLL_IsReady>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f1      	bne.n	8002764 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b45      	ldr	r3, [pc, #276]	; (800289c <HAL_RCC_OscConfig+0x734>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002798:	0212      	lsls	r2, r2, #8
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a6:	4311      	orrs	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027ac:	430a      	orrs	r2, r1
 80027ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b6:	f7ff fc25 	bl	8002004 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fa1b 	bl	8000c04 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fa17 	bl	8000c04 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b0a      	cmp	r3, #10
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e056      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80027e4:	f7ff fc2a 	bl	800203c <LL_RCC_PLL_IsReady>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f1      	beq.n	80027d2 <HAL_RCC_OscConfig+0x66a>
 80027ee:	e04f      	b.n	8002890 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	f7ff fc16 	bl	8002020 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe f9f4 	bl	8000c04 <HAL_GetTick>
 800281c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe f9f0 	bl	8000c04 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b0a      	cmp	r3, #10
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e02f      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002832:	f7ff fc03 	bl	800203c <LL_RCC_PLL_IsReady>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f1      	bne.n	8002820 <HAL_RCC_OscConfig+0x6b8>
 800283c:	e028      	b.n	8002890 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e023      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	429a      	cmp	r2, r3
 800285e:	d115      	bne.n	800288c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	429a      	cmp	r2, r3
 800286c:	d10e      	bne.n	800288c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	429a      	cmp	r2, r3
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	11c1808c 	.word	0x11c1808c

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e12c      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d91b      	bls.n	80028fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b95      	ldr	r3, [pc, #596]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4993      	ldr	r1, [pc, #588]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d2:	f7fe f997 	bl	8000c04 <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028da:	f7fe f993 	bl	8000c04 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e110      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ec:	4b8a      	ldr	r3, [pc, #552]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d1ef      	bne.n	80028da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fae8 	bl	8001ee0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002910:	f7fe f978 	bl	8000c04 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002918:	f7fe f974 	bl	8000c04 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0f1      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800292a:	f7ff fbc5 	bl	80020b8 <LL_RCC_IsActiveFlag_HPRE>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f1      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d016      	beq.n	800296e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fade 	bl	8001f06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800294a:	f7fe f95b 	bl	8000c04 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002952:	f7fe f957 	bl	8000c04 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0d4      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002964:	f7ff fbb9 	bl	80020da <LL_RCC_IsActiveFlag_C2HPRE>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f1      	beq.n	8002952 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fad6 	bl	8001f30 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002984:	f7fe f93e 	bl	8000c04 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800298c:	f7fe f93a 	bl	8000c04 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0b7      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800299e:	f7ff fbae 	bl	80020fe <LL_RCC_IsActiveFlag_SHDHPRE>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f1      	beq.n	800298c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d016      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff facf 	bl	8001f5c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029be:	f7fe f921 	bl	8000c04 <HAL_GetTick>
 80029c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029c6:	f7fe f91d 	bl	8000c04 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e09a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029d8:	f7ff fba3 	bl	8002122 <LL_RCC_IsActiveFlag_PPRE1>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f1      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d017      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fac4 	bl	8001f82 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029fa:	f7fe f903 	bl	8000c04 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a02:	f7fe f8ff 	bl	8000c04 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e07c      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a14:	f7ff fb96 	bl	8002144 <LL_RCC_IsActiveFlag_PPRE2>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f1      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d043      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a32:	f7ff f93c 	bl	8001cae <LL_RCC_HSE_IsReady>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11e      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e066      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a48:	f7ff faf8 	bl	800203c <LL_RCC_PLL_IsReady>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e05b      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a5e:	f7ff f9d6 	bl	8001e0e <LL_RCC_MSI_IsReady>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d108      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e050      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a6c:	f7ff f94c 	bl	8001d08 <LL_RCC_HSI_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e049      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fa10 	bl	8001ea4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe f8be 	bl	8000c04 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe f8ba 	bl	8000c04 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e035      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	f7ff fa12 	bl	8001eca <LL_RCC_GetSysClkSource>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d1ec      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d21b      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 0207 	bic.w	r2, r3, #7
 8002ac8:	4913      	ldr	r1, [pc, #76]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7fe f898 	bl	8000c04 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ad8:	f7fe f894 	bl	8000c04 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e011      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x278>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1ef      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002af8:	f000 f8b4 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_RCC_ClockConfig+0x27c>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCC_ClockConfig+0x280>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f830 	bl	8000b6c <HAL_InitTick>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	58004000 	.word	0x58004000
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b32:	f7ff f9ca 	bl	8001eca <LL_RCC_GetSysClkSource>
 8002b36:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b38:	f7ff fab3 	bl	80020a2 <LL_RCC_PLL_GetMainSource>
 8002b3c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x2c>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d139      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d136      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b50:	f7ff f96d 	bl	8001e2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x62>
 8002b5a:	f7ff f968 	bl	8001e2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x4e>
 8002b64:	f7ff f973 	bl	8001e4e <LL_RCC_MSI_GetRange>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	e005      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x5a>
 8002b72:	f7ff f977 	bl	8001e64 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002b86:	f7ff f952 	bl	8001e2e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_GetSysClockFreq+0x7a>
 8002b90:	f7ff f95d 	bl	8001e4e <LL_RCC_MSI_GetRange>
 8002b94:	4603      	mov	r3, r0
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	e005      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x86>
 8002b9e:	f7ff f961 	bl	8001e64 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bbc:	e012      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e00c      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d109      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bd0:	f7ff f840 	bl	8001c54 <LL_RCC_HSE_IsEnabledDiv2>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e001      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002be2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	f7ff f971 	bl	8001eca <LL_RCC_GetSysClkSource>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d12f      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002bee:	f7ff fa58 	bl	80020a2 <LL_RCC_PLL_GetMainSource>
 8002bf2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0xde>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d003      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0xe4>
 8002c00:	e00d      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c04:	60fb      	str	r3, [r7, #12]
        break;
 8002c06:	e00d      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c08:	f7ff f824 	bl	8001c54 <LL_RCC_HSE_IsEnabledDiv2>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c14:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c16:	e005      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c1a:	60fb      	str	r3, [r7, #12]
        break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c24:	f7ff fa1b 	bl	800205e <LL_RCC_PLL_GetN>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	fb03 f402 	mul.w	r4, r3, r2
 8002c30:	f7ff fa2c 	bl	800208c <LL_RCC_PLL_GetDivider>
 8002c34:	4603      	mov	r3, r0
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	3301      	adds	r3, #1
 8002c3a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c3e:	f7ff fa1a 	bl	8002076 <LL_RCC_PLL_GetR>
 8002c42:	4603      	mov	r3, r0
 8002c44:	0f5b      	lsrs	r3, r3, #29
 8002c46:	3301      	adds	r3, #1
 8002c48:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c4c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd90      	pop	{r4, r7, pc}
 8002c58:	080048e8 	.word	0x080048e8
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	01e84800 	.word	0x01e84800

08002c64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b598      	push	{r3, r4, r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c68:	f7ff ff5c 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	f7ff f99b 	bl	8001fa8 <LL_RCC_GetAHBPrescaler>
 8002c72:	4603      	mov	r3, r0
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_RCC_GetHCLKFreq+0x24>)
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd98      	pop	{r3, r4, r7, pc}
 8002c88:	08004888 	.word	0x08004888

08002c8c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b598      	push	{r3, r4, r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c90:	f7ff ffe8 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c94:	4604      	mov	r4, r0
 8002c96:	f7ff f99f 	bl	8001fd8 <LL_RCC_GetAPB1Prescaler>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd98      	pop	{r3, r4, r7, pc}
 8002cac:	080048c8 	.word	0x080048c8

08002cb0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb0:	b598      	push	{r3, r4, r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cb4:	f7ff ffd6 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	f7ff f998 	bl	8001fee <LL_RCC_GetAPB2Prescaler>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0adb      	lsrs	r3, r3, #11
 8002cc2:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd98      	pop	{r3, r4, r7, pc}
 8002cd0:	080048c8 	.word	0x080048c8

08002cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002cec:	f7ff f967 	bl	8001fbe <LL_RCC_GetAHB3Prescaler>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9c      	lsrs	r4, r3, #18
 8002d10:	f7fe ff5c 	bl	8001bcc <HAL_PWREx_GetVoltageRange>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f000 f80b 	bl	8002d34 <RCC_SetFlashLatency>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	080048e8 	.word	0x080048e8
 8002d2c:	08004888 	.word	0x08004888
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <RCC_SetFlashLatency+0xf4>)
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d48:	6018      	str	r0, [r3, #0]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002d4e:	4a37      	ldr	r2, [pc, #220]	; (8002e2c <RCC_SetFlashLatency+0xf8>)
 8002d50:	f107 0318 	add.w	r3, r7, #24
 8002d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d58:	6018      	str	r0, [r3, #0]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <RCC_SetFlashLatency+0xfc>)
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d11b      	bne.n	8002dae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7a:	e014      	b.n	8002da6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	443b      	add	r3, r7
 8002d84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d807      	bhi.n	8002da0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3338      	adds	r3, #56	; 0x38
 8002d96:	443b      	add	r3, r7
 8002d98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9e:	e021      	b.n	8002de4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	3301      	adds	r3, #1
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d9e7      	bls.n	8002d7c <RCC_SetFlashLatency+0x48>
 8002dac:	e01a      	b.n	8002de4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	e014      	b.n	8002dde <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	443b      	add	r3, r7
 8002dbc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d807      	bhi.n	8002dd8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	3338      	adds	r3, #56	; 0x38
 8002dce:	443b      	add	r3, r7
 8002dd0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dd6:	e005      	b.n	8002de4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3301      	adds	r3, #1
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d9e7      	bls.n	8002db4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <RCC_SetFlashLatency+0x100>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 0207 	bic.w	r2, r3, #7
 8002dec:	4911      	ldr	r1, [pc, #68]	; (8002e34 <RCC_SetFlashLatency+0x100>)
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002df4:	f7fd ff06 	bl	8000c04 <HAL_GetTick>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dfa:	e008      	b.n	8002e0e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dfc:	f7fd ff02 	bl	8000c04 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e007      	b.n	8002e1e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <RCC_SetFlashLatency+0x100>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1ef      	bne.n	8002dfc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3738      	adds	r7, #56	; 0x38
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	0800486c 	.word	0x0800486c
 8002e2c:	08004874 	.word	0x08004874
 8002e30:	0800487c 	.word	0x0800487c
 8002e34:	58004000 	.word	0x58004000

08002e38 <LL_RCC_LSE_IsReady>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d101      	bne.n	8002e50 <LL_RCC_LSE_IsReady+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_RCC_LSE_IsReady+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_SetUSARTClockSource>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <LL_RCC_SetI2SClockSource>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_SetLPUARTClockSource>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_SetI2CClockSource>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	401a      	ands	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_SetLPTIMClockSource>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_SetRNGClockSource>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_SetADCClockSource>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_SetRTCClockSource>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_GetRTCClockSource>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_ForceBackupDomainReset>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
	...

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800302c:	2300      	movs	r3, #0
 800302e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003030:	2300      	movs	r3, #0
 8003032:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d058      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003040:	f7fe fda8 	bl	8001b94 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003044:	f7fd fdde 	bl	8000c04 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800304a:	e009      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fd fdda 	bl	8000c04 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	74fb      	strb	r3, [r7, #19]
        break;
 800305e:	e006      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003060:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306c:	d1ee      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d13c      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003074:	f7ff ffa7 	bl	8002fc6 <LL_RCC_GetRTCClockSource>
 8003078:	4602      	mov	r2, r0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	429a      	cmp	r2, r3
 8003080:	d00f      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003090:	f7ff ffa5 	bl	8002fde <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003094:	f7ff ffb3 	bl	8002ffe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d014      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fdaa 	bl	8000c04 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd fda6 	bl	8000c04 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
            break;
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80030cc:	f7ff feb4 	bl	8002e38 <LL_RCC_LSE_IsReady>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d1ee      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff5b 	bl	8002f9c <LL_RCC_SetRTCClockSource>
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
 80030ec:	e001      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fea9 	bl	8002e5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe9e 	bl	8002e5a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fec0 	bl	8002eb4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fee6 	bl	8002f16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fedb 	bl	8002f16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fed0 	bl	8002f16 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fea9 	bl	8002ede <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d004      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe9e 	bl	8002ede <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fe93 	bl	8002ede <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d011      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fe5e 	bl	8002e8a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d107      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fea5 	bl	8002f48 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003214:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d011      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fea3 	bl	8002f72 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003234:	d107      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003246:	7cbb      	ldrb	r3, [r7, #18]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	58000400 	.word	0x58000400

08003254 <LL_RCC_GetUSARTClockSource>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	401a      	ands	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	4313      	orrs	r3, r2
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <LL_RCC_GetLPUARTClockSource>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4013      	ands	r3, r2
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e042      	b.n	800332e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fb68 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8c3 	bl	8003464 <UART_SetConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e022      	b.n	800332e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fb2b 	bl	800394c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003304:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003314:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fbb1 	bl	8003a8e <UART_CheckIdleState>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08a      	sub	sp, #40	; 0x28
 800333a:	af02      	add	r7, sp, #8
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 8083 	bne.w	8003458 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_UART_Transmit+0x28>
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07b      	b.n	800345a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_UART_Transmit+0x3a>
 800336c:	2302      	movs	r3, #2
 800336e:	e074      	b.n	800345a <HAL_UART_Transmit+0x124>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2221      	movs	r2, #33	; 0x21
 8003384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003388:	f7fd fc3c 	bl	8000c04 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a6:	d108      	bne.n	80033ba <HAL_UART_Transmit+0x84>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d104      	bne.n	80033ba <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e003      	b.n	80033c2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80033ca:	e02c      	b.n	8003426 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fba4 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e039      	b.n	800345a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	3302      	adds	r3, #2
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e007      	b.n	8003414 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3301      	adds	r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1cc      	bne.n	80033cc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb71 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e006      	b.n	800345a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003468:	b08c      	sub	sp, #48	; 0x30
 800346a:	af00      	add	r7, sp, #0
 800346c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	431a      	orrs	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4313      	orrs	r3, r2
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <UART_SetConfig+0x280>)
 8003494:	4013      	ands	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800349c:	430b      	orrs	r3, r1
 800349e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a89      	ldr	r2, [pc, #548]	; (80036e8 <UART_SetConfig+0x284>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034cc:	4313      	orrs	r3, r2
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80034da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f023 010f 	bic.w	r1, r3, #15
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7a      	ldr	r2, [pc, #488]	; (80036ec <UART_SetConfig+0x288>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d127      	bne.n	8003558 <UART_SetConfig+0xf4>
 8003508:	2003      	movs	r0, #3
 800350a:	f7ff fea3 	bl	8003254 <LL_RCC_GetUSARTClockSource>
 800350e:	4603      	mov	r3, r0
 8003510:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003514:	2b03      	cmp	r3, #3
 8003516:	d81b      	bhi.n	8003550 <UART_SetConfig+0xec>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0xbc>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003531 	.word	0x08003531
 8003524:	08003541 	.word	0x08003541
 8003528:	08003539 	.word	0x08003539
 800352c:	08003549 	.word	0x08003549
 8003530:	2301      	movs	r3, #1
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003536:	e080      	b.n	800363a <UART_SetConfig+0x1d6>
 8003538:	2302      	movs	r3, #2
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353e:	e07c      	b.n	800363a <UART_SetConfig+0x1d6>
 8003540:	2304      	movs	r3, #4
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003546:	e078      	b.n	800363a <UART_SetConfig+0x1d6>
 8003548:	2308      	movs	r3, #8
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354e:	e074      	b.n	800363a <UART_SetConfig+0x1d6>
 8003550:	2310      	movs	r3, #16
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e070      	b.n	800363a <UART_SetConfig+0x1d6>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <UART_SetConfig+0x28c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d138      	bne.n	80035d4 <UART_SetConfig+0x170>
 8003562:	200c      	movs	r0, #12
 8003564:	f7ff fe76 	bl	8003254 <LL_RCC_GetUSARTClockSource>
 8003568:	4603      	mov	r3, r0
 800356a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d82c      	bhi.n	80035cc <UART_SetConfig+0x168>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0x114>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035cd 	.word	0x080035cd
 8003580:	080035cd 	.word	0x080035cd
 8003584:	080035cd 	.word	0x080035cd
 8003588:	080035bd 	.word	0x080035bd
 800358c:	080035cd 	.word	0x080035cd
 8003590:	080035cd 	.word	0x080035cd
 8003594:	080035cd 	.word	0x080035cd
 8003598:	080035b5 	.word	0x080035b5
 800359c:	080035cd 	.word	0x080035cd
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035cd 	.word	0x080035cd
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b2:	e042      	b.n	800363a <UART_SetConfig+0x1d6>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ba:	e03e      	b.n	800363a <UART_SetConfig+0x1d6>
 80035bc:	2304      	movs	r3, #4
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c2:	e03a      	b.n	800363a <UART_SetConfig+0x1d6>
 80035c4:	2308      	movs	r3, #8
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ca:	e036      	b.n	800363a <UART_SetConfig+0x1d6>
 80035cc:	2310      	movs	r3, #16
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d2:	e032      	b.n	800363a <UART_SetConfig+0x1d6>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <UART_SetConfig+0x284>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d12a      	bne.n	8003634 <UART_SetConfig+0x1d0>
 80035de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80035e2:	f7ff fe49 	bl	8003278 <LL_RCC_GetLPUARTClockSource>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ec:	d01a      	beq.n	8003624 <UART_SetConfig+0x1c0>
 80035ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035f2:	d81b      	bhi.n	800362c <UART_SetConfig+0x1c8>
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f8:	d00c      	beq.n	8003614 <UART_SetConfig+0x1b0>
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fe:	d815      	bhi.n	800362c <UART_SetConfig+0x1c8>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <UART_SetConfig+0x1a8>
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d008      	beq.n	800361c <UART_SetConfig+0x1b8>
 800360a:	e00f      	b.n	800362c <UART_SetConfig+0x1c8>
 800360c:	2300      	movs	r3, #0
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003612:	e012      	b.n	800363a <UART_SetConfig+0x1d6>
 8003614:	2302      	movs	r3, #2
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e00e      	b.n	800363a <UART_SetConfig+0x1d6>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e00a      	b.n	800363a <UART_SetConfig+0x1d6>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e006      	b.n	800363a <UART_SetConfig+0x1d6>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e002      	b.n	800363a <UART_SetConfig+0x1d6>
 8003634:	2310      	movs	r3, #16
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <UART_SetConfig+0x284>)
 8003640:	4293      	cmp	r3, r2
 8003642:	f040 80a4 	bne.w	800378e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800364a:	2b08      	cmp	r3, #8
 800364c:	d823      	bhi.n	8003696 <UART_SetConfig+0x232>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x1f0>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003679 	.word	0x08003679
 8003658:	08003697 	.word	0x08003697
 800365c:	08003681 	.word	0x08003681
 8003660:	08003697 	.word	0x08003697
 8003664:	08003687 	.word	0x08003687
 8003668:	08003697 	.word	0x08003697
 800366c:	08003697 	.word	0x08003697
 8003670:	08003697 	.word	0x08003697
 8003674:	0800368f 	.word	0x0800368f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7ff fb08 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800367e:	e010      	b.n	80036a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <UART_SetConfig+0x290>)
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003686:	f7ff fa4d 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800368c:	e009      	b.n	80036a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003694:	e005      	b.n	80036a2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8137 	beq.w	8003918 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <UART_SetConfig+0x294>)
 80036b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d305      	bcc.n	80036da <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d910      	bls.n	80036fc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036e0:	e11a      	b.n	8003918 <UART_SetConfig+0x4b4>
 80036e2:	bf00      	nop
 80036e4:	cfff69f3 	.word	0xcfff69f3
 80036e8:	40008000 	.word	0x40008000
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40004400 	.word	0x40004400
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	08004928 	.word	0x08004928
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2200      	movs	r2, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	60fa      	str	r2, [r7, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	4a8e      	ldr	r2, [pc, #568]	; (8003944 <UART_SetConfig+0x4e0>)
 800370a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800370e:	b29b      	uxth	r3, r3
 8003710:	2200      	movs	r2, #0
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800371e:	f7fc fd87 	bl	8000230 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	020b      	lsls	r3, r1, #8
 8003734:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003738:	0202      	lsls	r2, r0, #8
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	6849      	ldr	r1, [r1, #4]
 800373e:	0849      	lsrs	r1, r1, #1
 8003740:	2000      	movs	r0, #0
 8003742:	460c      	mov	r4, r1
 8003744:	4605      	mov	r5, r0
 8003746:	eb12 0804 	adds.w	r8, r2, r4
 800374a:	eb43 0905 	adc.w	r9, r3, r5
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	469a      	mov	sl, r3
 8003756:	4693      	mov	fp, r2
 8003758:	4652      	mov	r2, sl
 800375a:	465b      	mov	r3, fp
 800375c:	4640      	mov	r0, r8
 800375e:	4649      	mov	r1, r9
 8003760:	f7fc fd66 	bl	8000230 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003772:	d308      	bcc.n	8003786 <UART_SetConfig+0x322>
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377a:	d204      	bcs.n	8003786 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	e0c8      	b.n	8003918 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800378c:	e0c4      	b.n	8003918 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003796:	d168      	bne.n	800386a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800379c:	2b08      	cmp	r3, #8
 800379e:	d828      	bhi.n	80037f2 <UART_SetConfig+0x38e>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x344>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f3 	.word	0x080037f3
 80037b8:	080037e3 	.word	0x080037e3
 80037bc:	080037f3 	.word	0x080037f3
 80037c0:	080037f3 	.word	0x080037f3
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	080037eb 	.word	0x080037eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7ff fa5e 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037d2:	e014      	b.n	80037fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7ff fa6c 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037da:	e010      	b.n	80037fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <UART_SetConfig+0x4e4>)
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037e0:	e00d      	b.n	80037fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7ff f99f 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037e8:	e009      	b.n	80037fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037f0:	e005      	b.n	80037fe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8089 	beq.w	8003918 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a4e      	ldr	r2, [pc, #312]	; (8003944 <UART_SetConfig+0x4e0>)
 800380c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003810:	461a      	mov	r2, r3
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	fbb3 f3f2 	udiv	r3, r3, r2
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	441a      	add	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d916      	bls.n	8003862 <UART_SetConfig+0x3fe>
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d212      	bcs.n	8003862 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f023 030f 	bic.w	r3, r3, #15
 8003844:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	b29a      	uxth	r2, r3
 8003852:	8bfb      	ldrh	r3, [r7, #30]
 8003854:	4313      	orrs	r3, r2
 8003856:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	8bfa      	ldrh	r2, [r7, #30]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	e05a      	b.n	8003918 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003868:	e056      	b.n	8003918 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800386e:	2b08      	cmp	r3, #8
 8003870:	d827      	bhi.n	80038c2 <UART_SetConfig+0x45e>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x414>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7ff f9f6 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038a2:	e014      	b.n	80038ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7ff fa04 	bl	8002cb0 <HAL_RCC_GetPCLK2Freq>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038aa:	e010      	b.n	80038ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <UART_SetConfig+0x4e4>)
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038b0:	e00d      	b.n	80038ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7ff f937 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038b8:	e009      	b.n	80038ce <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038c0:	e005      	b.n	80038ce <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038cc:	bf00      	nop
    }

    if (pclk != 0U)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <UART_SetConfig+0x4e0>)
 80038da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038de:	461a      	mov	r2, r3
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	441a      	add	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d908      	bls.n	8003912 <UART_SetConfig+0x4ae>
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003906:	d204      	bcs.n	8003912 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e002      	b.n	8003918 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2201      	movs	r2, #1
 800391c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2201      	movs	r2, #1
 8003924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2200      	movs	r2, #0
 800392c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003934:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003942:	bf00      	nop
 8003944:	08004928 	.word	0x08004928
 8003948:	00f42400 	.word	0x00f42400

0800394c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01a      	beq.n	8003a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4a:	d10a      	bne.n	8003a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a9e:	f7fd f8b1 	bl	8000c04 <HAL_GetTick>
 8003aa2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d10e      	bne.n	8003ad0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f82f 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e025      	b.n	8003b1c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d10e      	bne.n	8003afc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f819 	bl	8003b24 <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e00f      	b.n	8003b1c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09c      	sub	sp, #112	; 0x70
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b34:	e0a9      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3c:	f000 80a5 	beq.w	8003c8a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b40:	f7fd f860 	bl	8000c04 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d140      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b76:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ba8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e069      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d051      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d149      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bfe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e6      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c52:	623a      	str	r2, [r7, #32]
 8003c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e010      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f43f af46 	beq.w	8003b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3770      	adds	r7, #112	; 0x70
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_UARTEx_DisableFifoMode+0x16>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e027      	b.n	8003d1a <HAL_UARTEx_DisableFifoMode+0x66>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	; 0x24
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e02d      	b.n	8003d98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	; 0x24
 8003d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f84f 	bl	8003e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e02d      	b.n	8003e14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f811 	bl	8003e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e3c:	e031      	b.n	8003ea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e3e:	2308      	movs	r3, #8
 8003e40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e42:	2308      	movs	r3, #8
 8003e44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	0e5b      	lsrs	r3, r3, #25
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	0f5b      	lsrs	r3, r3, #29
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e66:	7bbb      	ldrb	r3, [r7, #14]
 8003e68:	7b3a      	ldrb	r2, [r7, #12]
 8003e6a:	4910      	ldr	r1, [pc, #64]	; (8003eac <UARTEx_SetNbDataToProcess+0x90>)
 8003e6c:	5c8a      	ldrb	r2, [r1, r2]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e72:	7b3a      	ldrb	r2, [r7, #12]
 8003e74:	490e      	ldr	r1, [pc, #56]	; (8003eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8003e76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	7b7a      	ldrb	r2, [r7, #13]
 8003e88:	4908      	ldr	r1, [pc, #32]	; (8003eac <UARTEx_SetNbDataToProcess+0x90>)
 8003e8a:	5c8a      	ldrb	r2, [r1, r2]
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e90:	7b7a      	ldrb	r2, [r7, #13]
 8003e92:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8003e94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	08004940 	.word	0x08004940
 8003eb0:	08004948 	.word	0x08004948

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	; (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	; (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	; (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f000 fca2 	bl	800481c <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	0800498c 	.word	0x0800498c
 8003efc:	0800498c 	.word	0x0800498c
 8003f00:	0800498c 	.word	0x0800498c
 8003f04:	08004990 	.word	0x08004990

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <siprintf>:
 8003f18:	b40e      	push	{r1, r2, r3}
 8003f1a:	b500      	push	{lr}
 8003f1c:	b09c      	sub	sp, #112	; 0x70
 8003f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f20:	9002      	str	r0, [sp, #8]
 8003f22:	9006      	str	r0, [sp, #24]
 8003f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f28:	4809      	ldr	r0, [pc, #36]	; (8003f50 <siprintf+0x38>)
 8003f2a:	9107      	str	r1, [sp, #28]
 8003f2c:	9104      	str	r1, [sp, #16]
 8003f2e:	4909      	ldr	r1, [pc, #36]	; (8003f54 <siprintf+0x3c>)
 8003f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	6800      	ldr	r0, [r0, #0]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	a902      	add	r1, sp, #8
 8003f3c:	f000 f87e 	bl	800403c <_svfiprintf_r>
 8003f40:	9b02      	ldr	r3, [sp, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	b01c      	add	sp, #112	; 0x70
 8003f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f4c:	b003      	add	sp, #12
 8003f4e:	4770      	bx	lr
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	ffff0208 	.word	0xffff0208

08003f58 <strstr>:
 8003f58:	780a      	ldrb	r2, [r1, #0]
 8003f5a:	b570      	push	{r4, r5, r6, lr}
 8003f5c:	b96a      	cbnz	r2, 8003f7a <strstr+0x22>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d109      	bne.n	8003f78 <strstr+0x20>
 8003f64:	460c      	mov	r4, r1
 8003f66:	4605      	mov	r5, r0
 8003f68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f6      	beq.n	8003f5e <strstr+0x6>
 8003f70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f74:	429e      	cmp	r6, r3
 8003f76:	d0f7      	beq.n	8003f68 <strstr+0x10>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	7803      	ldrb	r3, [r0, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ef      	bne.n	8003f60 <strstr+0x8>
 8003f80:	4618      	mov	r0, r3
 8003f82:	e7ec      	b.n	8003f5e <strstr+0x6>

08003f84 <__ssputs_r>:
 8003f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	688e      	ldr	r6, [r1, #8]
 8003f8a:	429e      	cmp	r6, r3
 8003f8c:	4682      	mov	sl, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	4690      	mov	r8, r2
 8003f92:	461f      	mov	r7, r3
 8003f94:	d838      	bhi.n	8004008 <__ssputs_r+0x84>
 8003f96:	898a      	ldrh	r2, [r1, #12]
 8003f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f9c:	d032      	beq.n	8004004 <__ssputs_r+0x80>
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	6909      	ldr	r1, [r1, #16]
 8003fa2:	eba5 0901 	sub.w	r9, r5, r1
 8003fa6:	6965      	ldr	r5, [r4, #20]
 8003fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	444b      	add	r3, r9
 8003fb4:	106d      	asrs	r5, r5, #1
 8003fb6:	429d      	cmp	r5, r3
 8003fb8:	bf38      	it	cc
 8003fba:	461d      	movcc	r5, r3
 8003fbc:	0553      	lsls	r3, r2, #21
 8003fbe:	d531      	bpl.n	8004024 <__ssputs_r+0xa0>
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f000 fb61 	bl	8004688 <_malloc_r>
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	b950      	cbnz	r0, 8003fe0 <__ssputs_r+0x5c>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	f8ca 3000 	str.w	r3, [sl]
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	6921      	ldr	r1, [r4, #16]
 8003fe2:	464a      	mov	r2, r9
 8003fe4:	f000 fabe 	bl	8004564 <memcpy>
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	6126      	str	r6, [r4, #16]
 8003ff6:	6165      	str	r5, [r4, #20]
 8003ff8:	444e      	add	r6, r9
 8003ffa:	eba5 0509 	sub.w	r5, r5, r9
 8003ffe:	6026      	str	r6, [r4, #0]
 8004000:	60a5      	str	r5, [r4, #8]
 8004002:	463e      	mov	r6, r7
 8004004:	42be      	cmp	r6, r7
 8004006:	d900      	bls.n	800400a <__ssputs_r+0x86>
 8004008:	463e      	mov	r6, r7
 800400a:	6820      	ldr	r0, [r4, #0]
 800400c:	4632      	mov	r2, r6
 800400e:	4641      	mov	r1, r8
 8004010:	f000 fab6 	bl	8004580 <memmove>
 8004014:	68a3      	ldr	r3, [r4, #8]
 8004016:	1b9b      	subs	r3, r3, r6
 8004018:	60a3      	str	r3, [r4, #8]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	4433      	add	r3, r6
 800401e:	6023      	str	r3, [r4, #0]
 8004020:	2000      	movs	r0, #0
 8004022:	e7db      	b.n	8003fdc <__ssputs_r+0x58>
 8004024:	462a      	mov	r2, r5
 8004026:	f000 fba3 	bl	8004770 <_realloc_r>
 800402a:	4606      	mov	r6, r0
 800402c:	2800      	cmp	r0, #0
 800402e:	d1e1      	bne.n	8003ff4 <__ssputs_r+0x70>
 8004030:	6921      	ldr	r1, [r4, #16]
 8004032:	4650      	mov	r0, sl
 8004034:	f000 fabe 	bl	80045b4 <_free_r>
 8004038:	e7c7      	b.n	8003fca <__ssputs_r+0x46>
	...

0800403c <_svfiprintf_r>:
 800403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004040:	4698      	mov	r8, r3
 8004042:	898b      	ldrh	r3, [r1, #12]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	b09d      	sub	sp, #116	; 0x74
 8004048:	4607      	mov	r7, r0
 800404a:	460d      	mov	r5, r1
 800404c:	4614      	mov	r4, r2
 800404e:	d50e      	bpl.n	800406e <_svfiprintf_r+0x32>
 8004050:	690b      	ldr	r3, [r1, #16]
 8004052:	b963      	cbnz	r3, 800406e <_svfiprintf_r+0x32>
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	f000 fb17 	bl	8004688 <_malloc_r>
 800405a:	6028      	str	r0, [r5, #0]
 800405c:	6128      	str	r0, [r5, #16]
 800405e:	b920      	cbnz	r0, 800406a <_svfiprintf_r+0x2e>
 8004060:	230c      	movs	r3, #12
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004068:	e0d1      	b.n	800420e <_svfiprintf_r+0x1d2>
 800406a:	2340      	movs	r3, #64	; 0x40
 800406c:	616b      	str	r3, [r5, #20]
 800406e:	2300      	movs	r3, #0
 8004070:	9309      	str	r3, [sp, #36]	; 0x24
 8004072:	2320      	movs	r3, #32
 8004074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004078:	f8cd 800c 	str.w	r8, [sp, #12]
 800407c:	2330      	movs	r3, #48	; 0x30
 800407e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004228 <_svfiprintf_r+0x1ec>
 8004082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004086:	f04f 0901 	mov.w	r9, #1
 800408a:	4623      	mov	r3, r4
 800408c:	469a      	mov	sl, r3
 800408e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004092:	b10a      	cbz	r2, 8004098 <_svfiprintf_r+0x5c>
 8004094:	2a25      	cmp	r2, #37	; 0x25
 8004096:	d1f9      	bne.n	800408c <_svfiprintf_r+0x50>
 8004098:	ebba 0b04 	subs.w	fp, sl, r4
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x7a>
 800409e:	465b      	mov	r3, fp
 80040a0:	4622      	mov	r2, r4
 80040a2:	4629      	mov	r1, r5
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7ff ff6d 	bl	8003f84 <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80aa 	beq.w	8004204 <_svfiprintf_r+0x1c8>
 80040b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b2:	445a      	add	r2, fp
 80040b4:	9209      	str	r2, [sp, #36]	; 0x24
 80040b6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80a2 	beq.w	8004204 <_svfiprintf_r+0x1c8>
 80040c0:	2300      	movs	r3, #0
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ca:	f10a 0a01 	add.w	sl, sl, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	9307      	str	r3, [sp, #28]
 80040d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d6:	931a      	str	r3, [sp, #104]	; 0x68
 80040d8:	4654      	mov	r4, sl
 80040da:	2205      	movs	r2, #5
 80040dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e0:	4851      	ldr	r0, [pc, #324]	; (8004228 <_svfiprintf_r+0x1ec>)
 80040e2:	f7fc f855 	bl	8000190 <memchr>
 80040e6:	9a04      	ldr	r2, [sp, #16]
 80040e8:	b9d8      	cbnz	r0, 8004122 <_svfiprintf_r+0xe6>
 80040ea:	06d0      	lsls	r0, r2, #27
 80040ec:	bf44      	itt	mi
 80040ee:	2320      	movmi	r3, #32
 80040f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040f4:	0711      	lsls	r1, r2, #28
 80040f6:	bf44      	itt	mi
 80040f8:	232b      	movmi	r3, #43	; 0x2b
 80040fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004102:	2b2a      	cmp	r3, #42	; 0x2a
 8004104:	d015      	beq.n	8004132 <_svfiprintf_r+0xf6>
 8004106:	9a07      	ldr	r2, [sp, #28]
 8004108:	4654      	mov	r4, sl
 800410a:	2000      	movs	r0, #0
 800410c:	f04f 0c0a 	mov.w	ip, #10
 8004110:	4621      	mov	r1, r4
 8004112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004116:	3b30      	subs	r3, #48	; 0x30
 8004118:	2b09      	cmp	r3, #9
 800411a:	d94e      	bls.n	80041ba <_svfiprintf_r+0x17e>
 800411c:	b1b0      	cbz	r0, 800414c <_svfiprintf_r+0x110>
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	e014      	b.n	800414c <_svfiprintf_r+0x110>
 8004122:	eba0 0308 	sub.w	r3, r0, r8
 8004126:	fa09 f303 	lsl.w	r3, r9, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	46a2      	mov	sl, r4
 8004130:	e7d2      	b.n	80040d8 <_svfiprintf_r+0x9c>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	1d19      	adds	r1, r3, #4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	9103      	str	r1, [sp, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfbb      	ittet	lt
 800413e:	425b      	neglt	r3, r3
 8004140:	f042 0202 	orrlt.w	r2, r2, #2
 8004144:	9307      	strge	r3, [sp, #28]
 8004146:	9307      	strlt	r3, [sp, #28]
 8004148:	bfb8      	it	lt
 800414a:	9204      	strlt	r2, [sp, #16]
 800414c:	7823      	ldrb	r3, [r4, #0]
 800414e:	2b2e      	cmp	r3, #46	; 0x2e
 8004150:	d10c      	bne.n	800416c <_svfiprintf_r+0x130>
 8004152:	7863      	ldrb	r3, [r4, #1]
 8004154:	2b2a      	cmp	r3, #42	; 0x2a
 8004156:	d135      	bne.n	80041c4 <_svfiprintf_r+0x188>
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	9203      	str	r2, [sp, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	bfb8      	it	lt
 8004164:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004168:	3402      	adds	r4, #2
 800416a:	9305      	str	r3, [sp, #20]
 800416c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800422c <_svfiprintf_r+0x1f0>
 8004170:	7821      	ldrb	r1, [r4, #0]
 8004172:	2203      	movs	r2, #3
 8004174:	4650      	mov	r0, sl
 8004176:	f7fc f80b 	bl	8000190 <memchr>
 800417a:	b140      	cbz	r0, 800418e <_svfiprintf_r+0x152>
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	eba0 000a 	sub.w	r0, r0, sl
 8004182:	fa03 f000 	lsl.w	r0, r3, r0
 8004186:	9b04      	ldr	r3, [sp, #16]
 8004188:	4303      	orrs	r3, r0
 800418a:	3401      	adds	r4, #1
 800418c:	9304      	str	r3, [sp, #16]
 800418e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004192:	4827      	ldr	r0, [pc, #156]	; (8004230 <_svfiprintf_r+0x1f4>)
 8004194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004198:	2206      	movs	r2, #6
 800419a:	f7fb fff9 	bl	8000190 <memchr>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d038      	beq.n	8004214 <_svfiprintf_r+0x1d8>
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <_svfiprintf_r+0x1f8>)
 80041a4:	bb1b      	cbnz	r3, 80041ee <_svfiprintf_r+0x1b2>
 80041a6:	9b03      	ldr	r3, [sp, #12]
 80041a8:	3307      	adds	r3, #7
 80041aa:	f023 0307 	bic.w	r3, r3, #7
 80041ae:	3308      	adds	r3, #8
 80041b0:	9303      	str	r3, [sp, #12]
 80041b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b4:	4433      	add	r3, r6
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	e767      	b.n	800408a <_svfiprintf_r+0x4e>
 80041ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80041be:	460c      	mov	r4, r1
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7a5      	b.n	8004110 <_svfiprintf_r+0xd4>
 80041c4:	2300      	movs	r3, #0
 80041c6:	3401      	adds	r4, #1
 80041c8:	9305      	str	r3, [sp, #20]
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0c0a 	mov.w	ip, #10
 80041d0:	4620      	mov	r0, r4
 80041d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d6:	3a30      	subs	r2, #48	; 0x30
 80041d8:	2a09      	cmp	r2, #9
 80041da:	d903      	bls.n	80041e4 <_svfiprintf_r+0x1a8>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0c5      	beq.n	800416c <_svfiprintf_r+0x130>
 80041e0:	9105      	str	r1, [sp, #20]
 80041e2:	e7c3      	b.n	800416c <_svfiprintf_r+0x130>
 80041e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e8:	4604      	mov	r4, r0
 80041ea:	2301      	movs	r3, #1
 80041ec:	e7f0      	b.n	80041d0 <_svfiprintf_r+0x194>
 80041ee:	ab03      	add	r3, sp, #12
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	462a      	mov	r2, r5
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <_svfiprintf_r+0x1fc>)
 80041f6:	a904      	add	r1, sp, #16
 80041f8:	4638      	mov	r0, r7
 80041fa:	f3af 8000 	nop.w
 80041fe:	1c42      	adds	r2, r0, #1
 8004200:	4606      	mov	r6, r0
 8004202:	d1d6      	bne.n	80041b2 <_svfiprintf_r+0x176>
 8004204:	89ab      	ldrh	r3, [r5, #12]
 8004206:	065b      	lsls	r3, r3, #25
 8004208:	f53f af2c 	bmi.w	8004064 <_svfiprintf_r+0x28>
 800420c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800420e:	b01d      	add	sp, #116	; 0x74
 8004210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004214:	ab03      	add	r3, sp, #12
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	462a      	mov	r2, r5
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <_svfiprintf_r+0x1fc>)
 800421c:	a904      	add	r1, sp, #16
 800421e:	4638      	mov	r0, r7
 8004220:	f000 f87a 	bl	8004318 <_printf_i>
 8004224:	e7eb      	b.n	80041fe <_svfiprintf_r+0x1c2>
 8004226:	bf00      	nop
 8004228:	08004950 	.word	0x08004950
 800422c:	08004956 	.word	0x08004956
 8004230:	0800495a 	.word	0x0800495a
 8004234:	00000000 	.word	0x00000000
 8004238:	08003f85 	.word	0x08003f85

0800423c <_printf_common>:
 800423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004240:	4616      	mov	r6, r2
 8004242:	4699      	mov	r9, r3
 8004244:	688a      	ldr	r2, [r1, #8]
 8004246:	690b      	ldr	r3, [r1, #16]
 8004248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800424c:	4293      	cmp	r3, r2
 800424e:	bfb8      	it	lt
 8004250:	4613      	movlt	r3, r2
 8004252:	6033      	str	r3, [r6, #0]
 8004254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004258:	4607      	mov	r7, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b10a      	cbz	r2, 8004262 <_printf_common+0x26>
 800425e:	3301      	adds	r3, #1
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	0699      	lsls	r1, r3, #26
 8004266:	bf42      	ittt	mi
 8004268:	6833      	ldrmi	r3, [r6, #0]
 800426a:	3302      	addmi	r3, #2
 800426c:	6033      	strmi	r3, [r6, #0]
 800426e:	6825      	ldr	r5, [r4, #0]
 8004270:	f015 0506 	ands.w	r5, r5, #6
 8004274:	d106      	bne.n	8004284 <_printf_common+0x48>
 8004276:	f104 0a19 	add.w	sl, r4, #25
 800427a:	68e3      	ldr	r3, [r4, #12]
 800427c:	6832      	ldr	r2, [r6, #0]
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	42ab      	cmp	r3, r5
 8004282:	dc26      	bgt.n	80042d2 <_printf_common+0x96>
 8004284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004288:	1e13      	subs	r3, r2, #0
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	bf18      	it	ne
 800428e:	2301      	movne	r3, #1
 8004290:	0692      	lsls	r2, r2, #26
 8004292:	d42b      	bmi.n	80042ec <_printf_common+0xb0>
 8004294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004298:	4649      	mov	r1, r9
 800429a:	4638      	mov	r0, r7
 800429c:	47c0      	blx	r8
 800429e:	3001      	adds	r0, #1
 80042a0:	d01e      	beq.n	80042e0 <_printf_common+0xa4>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	68e5      	ldr	r5, [r4, #12]
 80042a6:	6832      	ldr	r2, [r6, #0]
 80042a8:	f003 0306 	and.w	r3, r3, #6
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	bf08      	it	eq
 80042b0:	1aad      	subeq	r5, r5, r2
 80042b2:	68a3      	ldr	r3, [r4, #8]
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	bf0c      	ite	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	2500      	movne	r5, #0
 80042be:	4293      	cmp	r3, r2
 80042c0:	bfc4      	itt	gt
 80042c2:	1a9b      	subgt	r3, r3, r2
 80042c4:	18ed      	addgt	r5, r5, r3
 80042c6:	2600      	movs	r6, #0
 80042c8:	341a      	adds	r4, #26
 80042ca:	42b5      	cmp	r5, r6
 80042cc:	d11a      	bne.n	8004304 <_printf_common+0xc8>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e008      	b.n	80042e4 <_printf_common+0xa8>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4652      	mov	r2, sl
 80042d6:	4649      	mov	r1, r9
 80042d8:	4638      	mov	r0, r7
 80042da:	47c0      	blx	r8
 80042dc:	3001      	adds	r0, #1
 80042de:	d103      	bne.n	80042e8 <_printf_common+0xac>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	3501      	adds	r5, #1
 80042ea:	e7c6      	b.n	800427a <_printf_common+0x3e>
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	2030      	movs	r0, #48	; 0x30
 80042f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f6:	4422      	add	r2, r4
 80042f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004300:	3302      	adds	r3, #2
 8004302:	e7c7      	b.n	8004294 <_printf_common+0x58>
 8004304:	2301      	movs	r3, #1
 8004306:	4622      	mov	r2, r4
 8004308:	4649      	mov	r1, r9
 800430a:	4638      	mov	r0, r7
 800430c:	47c0      	blx	r8
 800430e:	3001      	adds	r0, #1
 8004310:	d0e6      	beq.n	80042e0 <_printf_common+0xa4>
 8004312:	3601      	adds	r6, #1
 8004314:	e7d9      	b.n	80042ca <_printf_common+0x8e>
	...

08004318 <_printf_i>:
 8004318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	7e0f      	ldrb	r7, [r1, #24]
 800431e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004320:	2f78      	cmp	r7, #120	; 0x78
 8004322:	4691      	mov	r9, r2
 8004324:	4680      	mov	r8, r0
 8004326:	460c      	mov	r4, r1
 8004328:	469a      	mov	sl, r3
 800432a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800432e:	d807      	bhi.n	8004340 <_printf_i+0x28>
 8004330:	2f62      	cmp	r7, #98	; 0x62
 8004332:	d80a      	bhi.n	800434a <_printf_i+0x32>
 8004334:	2f00      	cmp	r7, #0
 8004336:	f000 80d8 	beq.w	80044ea <_printf_i+0x1d2>
 800433a:	2f58      	cmp	r7, #88	; 0x58
 800433c:	f000 80a3 	beq.w	8004486 <_printf_i+0x16e>
 8004340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004348:	e03a      	b.n	80043c0 <_printf_i+0xa8>
 800434a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800434e:	2b15      	cmp	r3, #21
 8004350:	d8f6      	bhi.n	8004340 <_printf_i+0x28>
 8004352:	a101      	add	r1, pc, #4	; (adr r1, 8004358 <_printf_i+0x40>)
 8004354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004358:	080043b1 	.word	0x080043b1
 800435c:	080043c5 	.word	0x080043c5
 8004360:	08004341 	.word	0x08004341
 8004364:	08004341 	.word	0x08004341
 8004368:	08004341 	.word	0x08004341
 800436c:	08004341 	.word	0x08004341
 8004370:	080043c5 	.word	0x080043c5
 8004374:	08004341 	.word	0x08004341
 8004378:	08004341 	.word	0x08004341
 800437c:	08004341 	.word	0x08004341
 8004380:	08004341 	.word	0x08004341
 8004384:	080044d1 	.word	0x080044d1
 8004388:	080043f5 	.word	0x080043f5
 800438c:	080044b3 	.word	0x080044b3
 8004390:	08004341 	.word	0x08004341
 8004394:	08004341 	.word	0x08004341
 8004398:	080044f3 	.word	0x080044f3
 800439c:	08004341 	.word	0x08004341
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	08004341 	.word	0x08004341
 80043a8:	08004341 	.word	0x08004341
 80043ac:	080044bb 	.word	0x080044bb
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	602a      	str	r2, [r5, #0]
 80043b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0a3      	b.n	800450c <_printf_i+0x1f4>
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	6829      	ldr	r1, [r5, #0]
 80043c8:	0606      	lsls	r6, r0, #24
 80043ca:	f101 0304 	add.w	r3, r1, #4
 80043ce:	d50a      	bpl.n	80043e6 <_printf_i+0xce>
 80043d0:	680e      	ldr	r6, [r1, #0]
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	2e00      	cmp	r6, #0
 80043d6:	da03      	bge.n	80043e0 <_printf_i+0xc8>
 80043d8:	232d      	movs	r3, #45	; 0x2d
 80043da:	4276      	negs	r6, r6
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e0:	485e      	ldr	r0, [pc, #376]	; (800455c <_printf_i+0x244>)
 80043e2:	230a      	movs	r3, #10
 80043e4:	e019      	b.n	800441a <_printf_i+0x102>
 80043e6:	680e      	ldr	r6, [r1, #0]
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ee:	bf18      	it	ne
 80043f0:	b236      	sxthne	r6, r6
 80043f2:	e7ef      	b.n	80043d4 <_printf_i+0xbc>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	6029      	str	r1, [r5, #0]
 80043fc:	0601      	lsls	r1, r0, #24
 80043fe:	d501      	bpl.n	8004404 <_printf_i+0xec>
 8004400:	681e      	ldr	r6, [r3, #0]
 8004402:	e002      	b.n	800440a <_printf_i+0xf2>
 8004404:	0646      	lsls	r6, r0, #25
 8004406:	d5fb      	bpl.n	8004400 <_printf_i+0xe8>
 8004408:	881e      	ldrh	r6, [r3, #0]
 800440a:	4854      	ldr	r0, [pc, #336]	; (800455c <_printf_i+0x244>)
 800440c:	2f6f      	cmp	r7, #111	; 0x6f
 800440e:	bf0c      	ite	eq
 8004410:	2308      	moveq	r3, #8
 8004412:	230a      	movne	r3, #10
 8004414:	2100      	movs	r1, #0
 8004416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800441a:	6865      	ldr	r5, [r4, #4]
 800441c:	60a5      	str	r5, [r4, #8]
 800441e:	2d00      	cmp	r5, #0
 8004420:	bfa2      	ittt	ge
 8004422:	6821      	ldrge	r1, [r4, #0]
 8004424:	f021 0104 	bicge.w	r1, r1, #4
 8004428:	6021      	strge	r1, [r4, #0]
 800442a:	b90e      	cbnz	r6, 8004430 <_printf_i+0x118>
 800442c:	2d00      	cmp	r5, #0
 800442e:	d04d      	beq.n	80044cc <_printf_i+0x1b4>
 8004430:	4615      	mov	r5, r2
 8004432:	fbb6 f1f3 	udiv	r1, r6, r3
 8004436:	fb03 6711 	mls	r7, r3, r1, r6
 800443a:	5dc7      	ldrb	r7, [r0, r7]
 800443c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004440:	4637      	mov	r7, r6
 8004442:	42bb      	cmp	r3, r7
 8004444:	460e      	mov	r6, r1
 8004446:	d9f4      	bls.n	8004432 <_printf_i+0x11a>
 8004448:	2b08      	cmp	r3, #8
 800444a:	d10b      	bne.n	8004464 <_printf_i+0x14c>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	07de      	lsls	r6, r3, #31
 8004450:	d508      	bpl.n	8004464 <_printf_i+0x14c>
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	6861      	ldr	r1, [r4, #4]
 8004456:	4299      	cmp	r1, r3
 8004458:	bfde      	ittt	le
 800445a:	2330      	movle	r3, #48	; 0x30
 800445c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004460:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004464:	1b52      	subs	r2, r2, r5
 8004466:	6122      	str	r2, [r4, #16]
 8004468:	f8cd a000 	str.w	sl, [sp]
 800446c:	464b      	mov	r3, r9
 800446e:	aa03      	add	r2, sp, #12
 8004470:	4621      	mov	r1, r4
 8004472:	4640      	mov	r0, r8
 8004474:	f7ff fee2 	bl	800423c <_printf_common>
 8004478:	3001      	adds	r0, #1
 800447a:	d14c      	bne.n	8004516 <_printf_i+0x1fe>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004480:	b004      	add	sp, #16
 8004482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004486:	4835      	ldr	r0, [pc, #212]	; (800455c <_printf_i+0x244>)
 8004488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800448c:	6829      	ldr	r1, [r5, #0]
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f851 6b04 	ldr.w	r6, [r1], #4
 8004494:	6029      	str	r1, [r5, #0]
 8004496:	061d      	lsls	r5, r3, #24
 8004498:	d514      	bpl.n	80044c4 <_printf_i+0x1ac>
 800449a:	07df      	lsls	r7, r3, #31
 800449c:	bf44      	itt	mi
 800449e:	f043 0320 	orrmi.w	r3, r3, #32
 80044a2:	6023      	strmi	r3, [r4, #0]
 80044a4:	b91e      	cbnz	r6, 80044ae <_printf_i+0x196>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	f023 0320 	bic.w	r3, r3, #32
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	2310      	movs	r3, #16
 80044b0:	e7b0      	b.n	8004414 <_printf_i+0xfc>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	f043 0320 	orr.w	r3, r3, #32
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	2378      	movs	r3, #120	; 0x78
 80044bc:	4828      	ldr	r0, [pc, #160]	; (8004560 <_printf_i+0x248>)
 80044be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044c2:	e7e3      	b.n	800448c <_printf_i+0x174>
 80044c4:	0659      	lsls	r1, r3, #25
 80044c6:	bf48      	it	mi
 80044c8:	b2b6      	uxthmi	r6, r6
 80044ca:	e7e6      	b.n	800449a <_printf_i+0x182>
 80044cc:	4615      	mov	r5, r2
 80044ce:	e7bb      	b.n	8004448 <_printf_i+0x130>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	6826      	ldr	r6, [r4, #0]
 80044d4:	6961      	ldr	r1, [r4, #20]
 80044d6:	1d18      	adds	r0, r3, #4
 80044d8:	6028      	str	r0, [r5, #0]
 80044da:	0635      	lsls	r5, r6, #24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0x1cc>
 80044e0:	6019      	str	r1, [r3, #0]
 80044e2:	e002      	b.n	80044ea <_printf_i+0x1d2>
 80044e4:	0670      	lsls	r0, r6, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0x1c8>
 80044e8:	8019      	strh	r1, [r3, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	4615      	mov	r5, r2
 80044f0:	e7ba      	b.n	8004468 <_printf_i+0x150>
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	602a      	str	r2, [r5, #0]
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	6862      	ldr	r2, [r4, #4]
 80044fc:	2100      	movs	r1, #0
 80044fe:	4628      	mov	r0, r5
 8004500:	f7fb fe46 	bl	8000190 <memchr>
 8004504:	b108      	cbz	r0, 800450a <_printf_i+0x1f2>
 8004506:	1b40      	subs	r0, r0, r5
 8004508:	6060      	str	r0, [r4, #4]
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	2300      	movs	r3, #0
 8004510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004514:	e7a8      	b.n	8004468 <_printf_i+0x150>
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	462a      	mov	r2, r5
 800451a:	4649      	mov	r1, r9
 800451c:	4640      	mov	r0, r8
 800451e:	47d0      	blx	sl
 8004520:	3001      	adds	r0, #1
 8004522:	d0ab      	beq.n	800447c <_printf_i+0x164>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	079b      	lsls	r3, r3, #30
 8004528:	d413      	bmi.n	8004552 <_printf_i+0x23a>
 800452a:	68e0      	ldr	r0, [r4, #12]
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	4298      	cmp	r0, r3
 8004530:	bfb8      	it	lt
 8004532:	4618      	movlt	r0, r3
 8004534:	e7a4      	b.n	8004480 <_printf_i+0x168>
 8004536:	2301      	movs	r3, #1
 8004538:	4632      	mov	r2, r6
 800453a:	4649      	mov	r1, r9
 800453c:	4640      	mov	r0, r8
 800453e:	47d0      	blx	sl
 8004540:	3001      	adds	r0, #1
 8004542:	d09b      	beq.n	800447c <_printf_i+0x164>
 8004544:	3501      	adds	r5, #1
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	9903      	ldr	r1, [sp, #12]
 800454a:	1a5b      	subs	r3, r3, r1
 800454c:	42ab      	cmp	r3, r5
 800454e:	dcf2      	bgt.n	8004536 <_printf_i+0x21e>
 8004550:	e7eb      	b.n	800452a <_printf_i+0x212>
 8004552:	2500      	movs	r5, #0
 8004554:	f104 0619 	add.w	r6, r4, #25
 8004558:	e7f5      	b.n	8004546 <_printf_i+0x22e>
 800455a:	bf00      	nop
 800455c:	08004961 	.word	0x08004961
 8004560:	08004972 	.word	0x08004972

08004564 <memcpy>:
 8004564:	440a      	add	r2, r1
 8004566:	4291      	cmp	r1, r2
 8004568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	4770      	bx	lr
 8004570:	b510      	push	{r4, lr}
 8004572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457a:	4291      	cmp	r1, r2
 800457c:	d1f9      	bne.n	8004572 <memcpy+0xe>
 800457e:	bd10      	pop	{r4, pc}

08004580 <memmove>:
 8004580:	4288      	cmp	r0, r1
 8004582:	b510      	push	{r4, lr}
 8004584:	eb01 0402 	add.w	r4, r1, r2
 8004588:	d902      	bls.n	8004590 <memmove+0x10>
 800458a:	4284      	cmp	r4, r0
 800458c:	4623      	mov	r3, r4
 800458e:	d807      	bhi.n	80045a0 <memmove+0x20>
 8004590:	1e43      	subs	r3, r0, #1
 8004592:	42a1      	cmp	r1, r4
 8004594:	d008      	beq.n	80045a8 <memmove+0x28>
 8004596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800459e:	e7f8      	b.n	8004592 <memmove+0x12>
 80045a0:	4402      	add	r2, r0
 80045a2:	4601      	mov	r1, r0
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d100      	bne.n	80045aa <memmove+0x2a>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b2:	e7f7      	b.n	80045a4 <memmove+0x24>

080045b4 <_free_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4605      	mov	r5, r0
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d041      	beq.n	8004640 <_free_r+0x8c>
 80045bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c0:	1f0c      	subs	r4, r1, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfb8      	it	lt
 80045c6:	18e4      	addlt	r4, r4, r3
 80045c8:	f000 f912 	bl	80047f0 <__malloc_lock>
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <_free_r+0x90>)
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	b933      	cbnz	r3, 80045e0 <_free_r+0x2c>
 80045d2:	6063      	str	r3, [r4, #4]
 80045d4:	6014      	str	r4, [r2, #0]
 80045d6:	4628      	mov	r0, r5
 80045d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045dc:	f000 b90e 	b.w	80047fc <__malloc_unlock>
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	d908      	bls.n	80045f6 <_free_r+0x42>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	1821      	adds	r1, r4, r0
 80045e8:	428b      	cmp	r3, r1
 80045ea:	bf01      	itttt	eq
 80045ec:	6819      	ldreq	r1, [r3, #0]
 80045ee:	685b      	ldreq	r3, [r3, #4]
 80045f0:	1809      	addeq	r1, r1, r0
 80045f2:	6021      	streq	r1, [r4, #0]
 80045f4:	e7ed      	b.n	80045d2 <_free_r+0x1e>
 80045f6:	461a      	mov	r2, r3
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b10b      	cbz	r3, 8004600 <_free_r+0x4c>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d9fa      	bls.n	80045f6 <_free_r+0x42>
 8004600:	6811      	ldr	r1, [r2, #0]
 8004602:	1850      	adds	r0, r2, r1
 8004604:	42a0      	cmp	r0, r4
 8004606:	d10b      	bne.n	8004620 <_free_r+0x6c>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	4401      	add	r1, r0
 800460c:	1850      	adds	r0, r2, r1
 800460e:	4283      	cmp	r3, r0
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	d1e0      	bne.n	80045d6 <_free_r+0x22>
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	6053      	str	r3, [r2, #4]
 800461a:	4401      	add	r1, r0
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	e7da      	b.n	80045d6 <_free_r+0x22>
 8004620:	d902      	bls.n	8004628 <_free_r+0x74>
 8004622:	230c      	movs	r3, #12
 8004624:	602b      	str	r3, [r5, #0]
 8004626:	e7d6      	b.n	80045d6 <_free_r+0x22>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	1821      	adds	r1, r4, r0
 800462c:	428b      	cmp	r3, r1
 800462e:	bf04      	itt	eq
 8004630:	6819      	ldreq	r1, [r3, #0]
 8004632:	685b      	ldreq	r3, [r3, #4]
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	bf04      	itt	eq
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	6054      	str	r4, [r2, #4]
 800463e:	e7ca      	b.n	80045d6 <_free_r+0x22>
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	bf00      	nop
 8004644:	20000170 	.word	0x20000170

08004648 <sbrk_aligned>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4e0e      	ldr	r6, [pc, #56]	; (8004684 <sbrk_aligned+0x3c>)
 800464c:	460c      	mov	r4, r1
 800464e:	6831      	ldr	r1, [r6, #0]
 8004650:	4605      	mov	r5, r0
 8004652:	b911      	cbnz	r1, 800465a <sbrk_aligned+0x12>
 8004654:	f000 f8bc 	bl	80047d0 <_sbrk_r>
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f8b7 	bl	80047d0 <_sbrk_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	d00a      	beq.n	800467c <sbrk_aligned+0x34>
 8004666:	1cc4      	adds	r4, r0, #3
 8004668:	f024 0403 	bic.w	r4, r4, #3
 800466c:	42a0      	cmp	r0, r4
 800466e:	d007      	beq.n	8004680 <sbrk_aligned+0x38>
 8004670:	1a21      	subs	r1, r4, r0
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f8ac 	bl	80047d0 <_sbrk_r>
 8004678:	3001      	adds	r0, #1
 800467a:	d101      	bne.n	8004680 <sbrk_aligned+0x38>
 800467c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004680:	4620      	mov	r0, r4
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	20000174 	.word	0x20000174

08004688 <_malloc_r>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	1ccd      	adds	r5, r1, #3
 800468e:	f025 0503 	bic.w	r5, r5, #3
 8004692:	3508      	adds	r5, #8
 8004694:	2d0c      	cmp	r5, #12
 8004696:	bf38      	it	cc
 8004698:	250c      	movcc	r5, #12
 800469a:	2d00      	cmp	r5, #0
 800469c:	4607      	mov	r7, r0
 800469e:	db01      	blt.n	80046a4 <_malloc_r+0x1c>
 80046a0:	42a9      	cmp	r1, r5
 80046a2:	d905      	bls.n	80046b0 <_malloc_r+0x28>
 80046a4:	230c      	movs	r3, #12
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	2600      	movs	r6, #0
 80046aa:	4630      	mov	r0, r6
 80046ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b0:	4e2e      	ldr	r6, [pc, #184]	; (800476c <_malloc_r+0xe4>)
 80046b2:	f000 f89d 	bl	80047f0 <__malloc_lock>
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	461c      	mov	r4, r3
 80046ba:	bb34      	cbnz	r4, 800470a <_malloc_r+0x82>
 80046bc:	4629      	mov	r1, r5
 80046be:	4638      	mov	r0, r7
 80046c0:	f7ff ffc2 	bl	8004648 <sbrk_aligned>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	4604      	mov	r4, r0
 80046c8:	d14d      	bne.n	8004766 <_malloc_r+0xde>
 80046ca:	6834      	ldr	r4, [r6, #0]
 80046cc:	4626      	mov	r6, r4
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d140      	bne.n	8004754 <_malloc_r+0xcc>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	4631      	mov	r1, r6
 80046d6:	4638      	mov	r0, r7
 80046d8:	eb04 0803 	add.w	r8, r4, r3
 80046dc:	f000 f878 	bl	80047d0 <_sbrk_r>
 80046e0:	4580      	cmp	r8, r0
 80046e2:	d13a      	bne.n	800475a <_malloc_r+0xd2>
 80046e4:	6821      	ldr	r1, [r4, #0]
 80046e6:	3503      	adds	r5, #3
 80046e8:	1a6d      	subs	r5, r5, r1
 80046ea:	f025 0503 	bic.w	r5, r5, #3
 80046ee:	3508      	adds	r5, #8
 80046f0:	2d0c      	cmp	r5, #12
 80046f2:	bf38      	it	cc
 80046f4:	250c      	movcc	r5, #12
 80046f6:	4629      	mov	r1, r5
 80046f8:	4638      	mov	r0, r7
 80046fa:	f7ff ffa5 	bl	8004648 <sbrk_aligned>
 80046fe:	3001      	adds	r0, #1
 8004700:	d02b      	beq.n	800475a <_malloc_r+0xd2>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	442b      	add	r3, r5
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	e00e      	b.n	8004728 <_malloc_r+0xa0>
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	1b52      	subs	r2, r2, r5
 800470e:	d41e      	bmi.n	800474e <_malloc_r+0xc6>
 8004710:	2a0b      	cmp	r2, #11
 8004712:	d916      	bls.n	8004742 <_malloc_r+0xba>
 8004714:	1961      	adds	r1, r4, r5
 8004716:	42a3      	cmp	r3, r4
 8004718:	6025      	str	r5, [r4, #0]
 800471a:	bf18      	it	ne
 800471c:	6059      	strne	r1, [r3, #4]
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	bf08      	it	eq
 8004722:	6031      	streq	r1, [r6, #0]
 8004724:	5162      	str	r2, [r4, r5]
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	4638      	mov	r0, r7
 800472a:	f104 060b 	add.w	r6, r4, #11
 800472e:	f000 f865 	bl	80047fc <__malloc_unlock>
 8004732:	f026 0607 	bic.w	r6, r6, #7
 8004736:	1d23      	adds	r3, r4, #4
 8004738:	1af2      	subs	r2, r6, r3
 800473a:	d0b6      	beq.n	80046aa <_malloc_r+0x22>
 800473c:	1b9b      	subs	r3, r3, r6
 800473e:	50a3      	str	r3, [r4, r2]
 8004740:	e7b3      	b.n	80046aa <_malloc_r+0x22>
 8004742:	6862      	ldr	r2, [r4, #4]
 8004744:	42a3      	cmp	r3, r4
 8004746:	bf0c      	ite	eq
 8004748:	6032      	streq	r2, [r6, #0]
 800474a:	605a      	strne	r2, [r3, #4]
 800474c:	e7ec      	b.n	8004728 <_malloc_r+0xa0>
 800474e:	4623      	mov	r3, r4
 8004750:	6864      	ldr	r4, [r4, #4]
 8004752:	e7b2      	b.n	80046ba <_malloc_r+0x32>
 8004754:	4634      	mov	r4, r6
 8004756:	6876      	ldr	r6, [r6, #4]
 8004758:	e7b9      	b.n	80046ce <_malloc_r+0x46>
 800475a:	230c      	movs	r3, #12
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4638      	mov	r0, r7
 8004760:	f000 f84c 	bl	80047fc <__malloc_unlock>
 8004764:	e7a1      	b.n	80046aa <_malloc_r+0x22>
 8004766:	6025      	str	r5, [r4, #0]
 8004768:	e7de      	b.n	8004728 <_malloc_r+0xa0>
 800476a:	bf00      	nop
 800476c:	20000170 	.word	0x20000170

08004770 <_realloc_r>:
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	4680      	mov	r8, r0
 8004776:	4614      	mov	r4, r2
 8004778:	460e      	mov	r6, r1
 800477a:	b921      	cbnz	r1, 8004786 <_realloc_r+0x16>
 800477c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004780:	4611      	mov	r1, r2
 8004782:	f7ff bf81 	b.w	8004688 <_malloc_r>
 8004786:	b92a      	cbnz	r2, 8004794 <_realloc_r+0x24>
 8004788:	f7ff ff14 	bl	80045b4 <_free_r>
 800478c:	4625      	mov	r5, r4
 800478e:	4628      	mov	r0, r5
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	f000 f838 	bl	8004808 <_malloc_usable_size_r>
 8004798:	4284      	cmp	r4, r0
 800479a:	4607      	mov	r7, r0
 800479c:	d802      	bhi.n	80047a4 <_realloc_r+0x34>
 800479e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047a2:	d812      	bhi.n	80047ca <_realloc_r+0x5a>
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff ff6e 	bl	8004688 <_malloc_r>
 80047ac:	4605      	mov	r5, r0
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0ed      	beq.n	800478e <_realloc_r+0x1e>
 80047b2:	42bc      	cmp	r4, r7
 80047b4:	4622      	mov	r2, r4
 80047b6:	4631      	mov	r1, r6
 80047b8:	bf28      	it	cs
 80047ba:	463a      	movcs	r2, r7
 80047bc:	f7ff fed2 	bl	8004564 <memcpy>
 80047c0:	4631      	mov	r1, r6
 80047c2:	4640      	mov	r0, r8
 80047c4:	f7ff fef6 	bl	80045b4 <_free_r>
 80047c8:	e7e1      	b.n	800478e <_realloc_r+0x1e>
 80047ca:	4635      	mov	r5, r6
 80047cc:	e7df      	b.n	800478e <_realloc_r+0x1e>
	...

080047d0 <_sbrk_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d06      	ldr	r5, [pc, #24]	; (80047ec <_sbrk_r+0x1c>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc f946 	bl	8000a6c <_sbrk>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_sbrk_r+0x1a>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_sbrk_r+0x1a>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	20000178 	.word	0x20000178

080047f0 <__malloc_lock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__malloc_lock+0x8>)
 80047f2:	f000 b811 	b.w	8004818 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	2000017c 	.word	0x2000017c

080047fc <__malloc_unlock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__malloc_unlock+0x8>)
 80047fe:	f000 b80c 	b.w	800481a <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	2000017c 	.word	0x2000017c

08004808 <_malloc_usable_size_r>:
 8004808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800480c:	1f18      	subs	r0, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfbc      	itt	lt
 8004812:	580b      	ldrlt	r3, [r1, r0]
 8004814:	18c0      	addlt	r0, r0, r3
 8004816:	4770      	bx	lr

08004818 <__retarget_lock_acquire_recursive>:
 8004818:	4770      	bx	lr

0800481a <__retarget_lock_release_recursive>:
 800481a:	4770      	bx	lr

0800481c <_init>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr

08004828 <_fini>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr
