
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003ffc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bc1  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b9  00000000  00000000  00031bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00033fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  000351c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9fa  00000000  00000000  00036308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cf4  00000000  00000000  00051d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeadc  00000000  00000000  000639f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001124d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd8  00000000  00000000  00112524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003ec8 	.word	0x08003ec8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003ec8 	.word	0x08003ec8

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b0a3      	sub	sp, #140	; 0x8c
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fb13 	bl	8000b14 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t receivedData[100] = {0};
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2260      	movs	r2, #96	; 0x60
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fcdc 	bl	8003eb8 <memset>
  uint8_t message[15] = "Received Data: ";
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <main+0xb8>)
 8000502:	f107 040c 	add.w	r4, r7, #12
 8000506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000508:	c407      	stmia	r4!, {r0, r1, r2}
 800050a:	8023      	strh	r3, [r4, #0]
 800050c:	3402      	adds	r4, #2
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	7023      	strb	r3, [r4, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f84b 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f979 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f92b 	bl	8000774 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800051e:	f000 f89f 	bl	8000660 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000522:	f000 f8db 	bl	80006dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000526:	2001      	movs	r0, #1
 8000528:	f001 fb3a 	bl	8001ba0 <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_I2C_IsDeviceReady(&hi2c1, 0x3A <<1 + 0, 2, 10) == HAL_OK) {
 800052c:	230a      	movs	r3, #10
 800052e:	2202      	movs	r2, #2
 8000530:	2174      	movs	r1, #116	; 0x74
 8000532:	481b      	ldr	r0, [pc, #108]	; (80005a0 <main+0xbc>)
 8000534:	f000 ff2c 	bl	8001390 <HAL_I2C_IsDeviceReady>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d121      	bne.n	8000582 <main+0x9e>
	  		HAL_I2C_Master_Receive(&hi2c1,  0x3A <<1 + 0, (uint8_t *)receivedData, sizeof(receivedData), 1000);
 800053e:	f107 021c 	add.w	r2, r7, #28
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	2174      	movs	r1, #116	; 0x74
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0xbc>)
 800054e:	f000 fe29 	bl	80011a4 <HAL_I2C_Master_Receive>

	  		HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), HAL_MAX_DELAY);
 8000552:	f107 010c 	add.w	r1, r7, #12
 8000556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800055a:	220f      	movs	r2, #15
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <main+0xc0>)
 800055e:	f002 fec8 	bl	80032f2 <HAL_UART_Transmit>
	  		HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 8000562:	f107 011c 	add.w	r1, r7, #28
 8000566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800056a:	2264      	movs	r2, #100	; 0x64
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <main+0xc0>)
 800056e:	f002 fec0 	bl	80032f2 <HAL_UART_Transmit>

	  		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <main+0xbc>)
 8000576:	f001 f812 	bl	800159e <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <main+0x90>
 8000580:	e7d4      	b.n	800052c <main+0x48>
	  	} else {
	  		uint8_t state[10] = "DEVICE IS NOT READY\n";
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <main+0xc4>)
 8000584:	463b      	mov	r3, r7
 8000586:	ca07      	ldmia	r2, {r0, r1, r2}
 8000588:	c303      	stmia	r3!, {r0, r1}
 800058a:	801a      	strh	r2, [r3, #0]
	  		HAL_UART_Transmit(&huart2, (uint8_t*)state, sizeof(state), HAL_MAX_DELAY);
 800058c:	4639      	mov	r1, r7
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000592:	220a      	movs	r2, #10
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <main+0xc0>)
 8000596:	f002 feac 	bl	80032f2 <HAL_UART_Transmit>
	  if (HAL_I2C_IsDeviceReady(&hi2c1, 0x3A <<1 + 0, 2, 10) == HAL_OK) {
 800059a:	e7c7      	b.n	800052c <main+0x48>
 800059c:	08003ee0 	.word	0x08003ee0
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000104 	.word	0x20000104
 80005a8:	08003ef0 	.word	0x08003ef0

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09a      	sub	sp, #104	; 0x68
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2248      	movs	r2, #72	; 0x48
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fc7c 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d2:	f001 fabd 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff56 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xb0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005e4:	4a1d      	ldr	r2, [pc, #116]	; (800065c <SystemClock_Config+0xb0>)
 80005e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <SystemClock_Config+0xb0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2324      	movs	r3, #36	; 0x24
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fc:	2381      	movs	r3, #129	; 0x81
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000604:	2300      	movs	r3, #0
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fd85 	bl	8002124 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000620:	f000 f901 	bl	8000826 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000624:	236f      	movs	r3, #111	; 0x6f
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f909 	bl	800285c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000650:	f000 f8e9 	bl	8000826 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3768      	adds	r7, #104	; 0x68
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000400 	.word	0x58000400

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000670:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_I2C1_Init+0x74>)
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_I2C1_Init+0x74>)
 800069e:	f000 fcf1 	bl	8001084 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f8bd 	bl	8000826 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006b0:	f001 f9b8 	bl	8001a24 <HAL_I2CEx_ConfigAnalogFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ba:	f000 f8b4 	bl	8000826 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006c2:	f001 f9f9 	bl	8001ab8 <HAL_I2CEx_ConfigDigitalFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f8ab 	bl	8000826 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40005400 	.word	0x40005400

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006e2:	4a23      	ldr	r2, [pc, #140]	; (8000770 <MX_USART1_UART_Init+0x94>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_USART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_USART1_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000726:	f002 fd94 	bl	8003252 <HAL_UART_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f879 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000738:	f003 fad2 	bl	8003ce0 <HAL_UARTEx_SetTxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 f870 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x90>)
 800074a:	f003 fb07 	bl	8003d5c <HAL_UARTEx_SetRxFifoThreshold>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f867 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_USART1_UART_Init+0x90>)
 800075a:	f003 fa89 	bl	8003c70 <HAL_UARTEx_DisableFifoMode>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f85f 	bl	8000826 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000074 	.word	0x20000074
 8000770:	40013800 	.word	0x40013800

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_USART2_UART_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007be:	f002 fd48 	bl	8003252 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f82d 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007d0:	f003 fa86 	bl	8003ce0 <HAL_UARTEx_SetTxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f824 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007e2:	f003 fabb 	bl	8003d5c <HAL_UARTEx_SetRxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 f81b 	bl	8000826 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007f2:	f003 fa3d 	bl	8003c70 <HAL_UARTEx_DisableFifoMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f813 	bl	8000826 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000104 	.word	0x20000104
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fe4e 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2004      	movs	r0, #4
 8000818:	f7ff fe4b 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	2002      	movs	r0, #2
 800081e:	f7ff fe48 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}

08000826 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082a:	b672      	cpsid	i
}
 800082c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082e:	e7fe      	b.n	800082e <Error_Handler+0x8>

08000830 <LL_AHB2_GRP1_EnableClock>:
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000854:	68fb      	ldr	r3, [r7, #12]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800086e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000884:	68fb      	ldr	r3, [r7, #12]
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800089e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b4:	68fb      	ldr	r3, [r7, #12]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2238      	movs	r2, #56	; 0x38
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fae3 	bl	8003eb8 <memset>
  if(hi2c->Instance==I2C1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_I2C_MspInit+0x88>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d126      	bne.n	800094a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000900:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000904:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fb66 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f7ff ff86 	bl	8000826 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff ff88 	bl	8000830 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000920:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000932:	2304      	movs	r3, #4
 8000934:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800093a:	4619      	mov	r1, r3
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <HAL_I2C_MspInit+0x8c>)
 800093e:	f000 fa41 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000942:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000946:	f7ff ff8b 	bl	8000860 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3758      	adds	r7, #88	; 0x58
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40005400 	.word	0x40005400
 8000958:	48000400 	.word	0x48000400

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	; 0x58
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2238      	movs	r2, #56	; 0x38
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fa9b 	bl	8003eb8 <memset>
  if(huart->Instance==USART1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <HAL_UART_MspInit+0x108>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d13b      	bne.n	8000a04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800098c:	2301      	movs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000990:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000994:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fb1e 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009a6:	f7ff ff3e 	bl	8000826 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ae:	f7ff ff6f 	bl	8000890 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff ff3c 	bl	8000830 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	2002      	movs	r0, #2
 80009ba:	f7ff ff39 	bl	8000830 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d0:	2307      	movs	r3, #7
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f000 f9f1 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f2:	2307      	movs	r3, #7
 80009f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009fa:	4619      	mov	r1, r3
 80009fc:	481a      	ldr	r0, [pc, #104]	; (8000a68 <HAL_UART_MspInit+0x10c>)
 80009fe:	f000 f9e1 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a02:	e02b      	b.n	8000a5c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x110>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d126      	bne.n	8000a5c <HAL_UART_MspInit+0x100>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a12:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a16:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fadd 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000a28:	f7ff fefd 	bl	8000826 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a30:	f7ff ff16 	bl	8000860 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fefb 	bl	8000830 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 f9b4 	bl	8000dc4 <HAL_GPIO_Init>
}
 8000a5c:	bf00      	nop
 8000a5e:	3758      	adds	r7, #88	; 0x58
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	40004400 	.word	0x40004400

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f887 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f7ff fcda 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aee:	f003 f9bf 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fcf7 	bl	80004e4 <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	20000198 	.word	0x20000198

08000b10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f91e 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b24:	f002 f87c 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_Init+0x3c>)
 8000b2c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f810 	bl	8000b54 <HAL_InitTick>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	e001      	b.n	8000b44 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b40:	f7ff febe 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d024      	beq.n	8000bb2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b68:	f002 f85a 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f912 	bl	8000daa <HAL_SYSTICK_Config>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10f      	bne.n	8000bac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d809      	bhi.n	8000ba6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9a:	f000 f8ec 	bl	8000d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_InitTick+0x70>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e007      	b.n	8000bb6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e004      	b.n	8000bb6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e001      	b.n	8000bb6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000194 	.word	0x20000194

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000194 	.word	0x20000194

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f7ff ff90 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff49 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff60 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff92 	bl	8000cb8 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb2 	bl	8000d1c <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e140      	b.n	8001056 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8132 	beq.w	8001050 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0203 	and.w	r2, r3, #3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 808c 	beq.w	8001050 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	2207      	movs	r2, #7
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f62:	d00d      	beq.n	8000f80 <HAL_GPIO_Init+0x1bc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_GPIO_Init+0x2b4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x1b8>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a43      	ldr	r2, [pc, #268]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d101      	bne.n	8000f78 <HAL_GPIO_Init+0x1b4>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e004      	b.n	8000f82 <HAL_GPIO_Init+0x1be>
 8000f78:	2307      	movs	r3, #7
 8000f7a:	e002      	b.n	8000f82 <HAL_GPIO_Init+0x1be>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_GPIO_Init+0x1be>
 8000f80:	2300      	movs	r3, #0
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	f002 0203 	and.w	r2, r2, #3
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f92:	4938      	ldr	r1, [pc, #224]	; (8001074 <HAL_GPIO_Init+0x2b0>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fee:	4a24      	ldr	r2, [pc, #144]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8001024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001028:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	f47f aeb7 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	371c      	adds	r7, #28
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	58000800 	.word	0x58000800

08001084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e081      	b.n	800119a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fc0e 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e006      	b.n	800110c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800110a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d104      	bne.n	800111e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69d9      	ldr	r1, [r3, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2220      	movs	r2, #32
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	461a      	mov	r2, r3
 80011b0:	460b      	mov	r3, r1
 80011b2:	817b      	strh	r3, [r7, #10]
 80011b4:	4613      	mov	r3, r2
 80011b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	f040 80db 	bne.w	800137c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_I2C_Master_Receive+0x30>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e0d4      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011dc:	f7ff fd06 	bl	8000bec <HAL_GetTick>
 80011e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2319      	movs	r3, #25
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa05 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0bf      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2222      	movs	r2, #34	; 0x22
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2210      	movs	r2, #16
 800120a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	893a      	ldrh	r2, [r7, #8]
 800121e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122a:	b29b      	uxth	r3, r3
 800122c:	2bff      	cmp	r3, #255	; 0xff
 800122e:	d90e      	bls.n	800124e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	22ff      	movs	r2, #255	; 0xff
 8001234:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	b2da      	uxtb	r2, r3
 800123c:	8979      	ldrh	r1, [r7, #10]
 800123e:	4b52      	ldr	r3, [pc, #328]	; (8001388 <HAL_I2C_Master_Receive+0x1e4>)
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fbbc 	bl	80019c4 <I2C_TransferConfig>
 800124c:	e06d      	b.n	800132a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125c:	b2da      	uxtb	r2, r3
 800125e:	8979      	ldrh	r1, [r7, #10]
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_I2C_Master_Receive+0x1e4>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 fbab 	bl	80019c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800126e:	e05c      	b.n	800132a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	6a39      	ldr	r1, [r7, #32]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa3f 	bl	80016f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e07c      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d034      	beq.n	800132a <HAL_I2C_Master_Receive+0x186>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d130      	bne.n	800132a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	2200      	movs	r2, #0
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f993 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e04d      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2bff      	cmp	r3, #255	; 0xff
 80012ea:	d90e      	bls.n	800130a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	8979      	ldrh	r1, [r7, #10]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 fb5e 	bl	80019c4 <I2C_TransferConfig>
 8001308:	e00f      	b.n	800132a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001318:	b2da      	uxtb	r2, r3
 800131a:	8979      	ldrh	r1, [r7, #10]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 fb4d 	bl	80019c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d19d      	bne.n	8001270 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	6a39      	ldr	r1, [r7, #32]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 f9a0 	bl	800167e <I2C_WaitOnSTOPFlagUntilTimeout>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e01a      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2220      	movs	r2, #32
 800134e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_I2C_Master_Receive+0x1e8>)
 800135c:	400b      	ands	r3, r1
 800135e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2220      	movs	r2, #32
 8001364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e000      	b.n	800137e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800137c:	2302      	movs	r3, #2
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	80002400 	.word	0x80002400
 800138c:	fe00e800 	.word	0xfe00e800

08001390 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	460b      	mov	r3, r1
 800139e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	f040 80f1 	bne.w	8001594 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013c0:	d101      	bne.n	80013c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	e0e7      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_I2C_IsDeviceReady+0x44>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e0e0      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2224      	movs	r2, #36	; 0x24
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <HAL_I2C_IsDeviceReady+0x72>
 80013f2:	897b      	ldrh	r3, [r7, #10]
 80013f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001400:	e004      	b.n	800140c <HAL_I2C_IsDeviceReady+0x7c>
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001408:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fbeb 	bl	8000bec <HAL_GetTick>
 8001416:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b20      	cmp	r3, #32
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b10      	cmp	r3, #16
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001444:	e034      	b.n	80014b0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800144c:	d01a      	beq.n	8001484 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fbcd 	bl	8000bec <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <HAL_I2C_IsDeviceReady+0xd4>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e088      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b20      	cmp	r3, #32
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_I2C_IsDeviceReady+0x12c>
 80014b6:	7fbb      	ldrb	r3, [r7, #30]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0c4      	beq.n	8001446 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d01a      	beq.n	8001500 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	2120      	movs	r1, #32
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f892 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e058      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e04a      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f877 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e03d      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d118      	bne.n	8001564 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001540:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	2120      	movs	r1, #32
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f856 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e01c      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2220      	movs	r2, #32
 8001562:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	f63f af3b 	bhi.w	80013ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
  }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ac:	b2db      	uxtb	r3, r3
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d103      	bne.n	80015d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	619a      	str	r2, [r3, #24]
  }
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160e:	e022      	b.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001616:	d01e      	beq.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001618:	f7ff fae8 	bl	8000bec <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d302      	bcc.n	800162e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d113      	bne.n	8001656 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f043 0220 	orr.w	r2, r3, #32
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	429a      	cmp	r2, r3
 8001672:	d0cd      	beq.n	8001610 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800168a:	e028      	b.n	80016de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f8ab 	bl	80017ec <I2C_IsErrorOccurred>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e026      	b.n	80016ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a0:	f7ff faa4 	bl	8000bec <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d302      	bcc.n	80016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d113      	bne.n	80016de <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e007      	b.n	80016ee <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d1cf      	bne.n	800168c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001704:	e064      	b.n	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f86e 	bl	80017ec <I2C_IsErrorOccurred>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e062      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d138      	bne.n	800179a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b04      	cmp	r3, #4
 8001734:	d105      	bne.n	8001742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e04e      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b10      	cmp	r3, #16
 800174e:	d107      	bne.n	8001760 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2210      	movs	r2, #16
 8001756:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2204      	movs	r2, #4
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
 800175e:	e002      	b.n	8001766 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2220      	movs	r2, #32
 800176c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800177a:	400b      	ands	r3, r1
 800177c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e022      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff fa27 	bl	8000bec <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10f      	bne.n	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e007      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d193      	bne.n	8001706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d075      	beq.n	8001904 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2210      	movs	r2, #16
 800181e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001820:	e056      	b.n	80018d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001828:	d052      	beq.n	80018d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f9df 	bl	8000bec <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_IsErrorOccurred+0x54>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d147      	bne.n	80018d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001852:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001862:	d12e      	bne.n	80018c2 <I2C_IsErrorOccurred+0xd6>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186a:	d02a      	beq.n	80018c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d027      	beq.n	80018c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001880:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001882:	f7ff f9b3 	bl	8000bec <HAL_GetTick>
 8001886:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	e01b      	b.n	80018c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800188a:	f7ff f9af 	bl	8000bec <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b19      	cmp	r3, #25
 8001896:	d914      	bls.n	80018c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d1dc      	bne.n	800188a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d003      	beq.n	80018e6 <I2C_IsErrorOccurred+0xfa>
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d09d      	beq.n	8001822 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2220      	movs	r2, #32
 80018f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01c      	beq.n	80019b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe1c 	bl	80015b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <I2C_IsErrorOccurred+0x1d4>)
 800198c:	400b      	ands	r3, r1
 800198e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fe00e800 	.word	0xfe00e800

080019c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	817b      	strh	r3, [r7, #10]
 80019d2:	4613      	mov	r3, r2
 80019d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019dc:	7a7b      	ldrb	r3, [r7, #9]
 80019de:	041b      	lsls	r3, r3, #16
 80019e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019e4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	0d5b      	lsrs	r3, r3, #21
 80019fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <I2C_TransferConfig+0x5c>)
 8001a04:	430b      	orrs	r3, r1
 8001a06:	43db      	mvns	r3, r3
 8001a08:	ea02 0103 	and.w	r1, r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	03ff63ff 	.word	0x03ff63ff

08001a24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d138      	bne.n	8001aac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e032      	b.n	8001aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	; 0x24
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
  }
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d139      	bne.n	8001b42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e033      	b.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	58000400 	.word	0x58000400

08001b6c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <LL_PWR_EnableBootC2+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <LL_PWR_EnableBootC2+0x18>)
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	58000400 	.word	0x58000400

08001b88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_PWREx_GetVoltageRange+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	58000400 	.word	0x58000400

08001ba0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001ba8:	f7ff ffe0 	bl	8001b6c <LL_PWR_EnableBootC2>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d101      	bne.n	8001bca <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	58000400 	.word	0x58000400

08001bd8 <LL_RCC_HSE_EnableTcxo>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <LL_RCC_HSE_DisableTcxo>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c22:	d101      	bne.n	8001c28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_HSE_Enable>:
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_HSE_Disable>:
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_HSE_IsReady>:
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c7c:	d101      	bne.n	8001c82 <LL_RCC_HSE_IsReady+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_RCC_HSE_IsReady+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_HSI_Enable>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_RCC_HSI_Disable>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_HSI_IsReady>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	d101      	bne.n	8001cdc <LL_RCC_HSI_IsReady+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_RCC_HSI_IsReady+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	061b      	lsls	r3, r3, #24
 8001cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d101      	bne.n	8001d26 <LL_RCC_LSE_IsReady+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_RCC_LSE_IsReady+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d101      	bne.n	8001d88 <LL_RCC_LSI_IsReady+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_RCC_LSI_IsReady+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6013      	str	r3, [r2, #0]
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d101      	bne.n	8001de0 <LL_RCC_MSI_IsReady+0x16>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <LL_RCC_MSI_IsReady+0x18>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d101      	bne.n	8001e00 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001efc:	f023 020f 	bic.w	r2, r3, #15
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800200a:	d101      	bne.n	8002010 <LL_RCC_PLL_IsReady+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_RCC_PLL_IsReady+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d101      	bne.n	800208c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020aa:	d101      	bne.n	80020b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ce:	d101      	bne.n	80020d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020f0:	d101      	bne.n	80020f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002112:	d101      	bne.n	8002118 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e38b      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	f7ff fea6 	bl	8001e86 <LL_RCC_GetSysClkSource>
 800213a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	f7ff ff8f 	bl	800205e <LL_RCC_PLL_GetMainSource>
 8002140:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80c9 	beq.w	80022e2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x3e>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d17b      	bne.n	8002254 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d178      	bne.n	8002254 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002162:	f7ff fe32 	bl	8001dca <LL_RCC_MSI_IsReady>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x54>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e36a      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x72>
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	e006      	b.n	80021a4 <HAL_RCC_OscConfig+0x80>
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d222      	bcs.n	80021ee <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fd6f 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e348      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fe26 	bl	8001e38 <LL_RCC_MSI_SetCalibTrimming>
 80021ec:	e021      	b.n	8002232 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe0d 	bl	8001e38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fd34 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e30d      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002232:	f000 fcf5 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002236:	4603      	mov	r3, r0
 8002238:	4aa1      	ldr	r2, [pc, #644]	; (80024c0 <HAL_RCC_OscConfig+0x39c>)
 800223a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800223c:	4ba1      	ldr	r3, [pc, #644]	; (80024c4 <HAL_RCC_OscConfig+0x3a0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fc87 	bl	8000b54 <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d047      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	e2fc      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800225c:	f7ff fd99 	bl	8001d92 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002260:	f7fe fcc4 	bl	8000bec <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002268:	f7fe fcc0 	bl	8000bec <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e2e9      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800227a:	f7ff fda6 	bl	8001dca <LL_RCC_MSI_IsReady>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f1      	beq.n	8002268 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fdc2 	bl	8001e38 <LL_RCC_MSI_SetCalibTrimming>
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b6:	f7ff fd7a 	bl	8001dae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fc97 	bl	8000bec <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c2:	f7fe fc93 	bl	8000bec <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e2bc      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80022d4:	f7ff fd79 	bl	8001dca <LL_RCC_MSI_IsReady>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f1      	bne.n	80022c2 <HAL_RCC_OscConfig+0x19e>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d05f      	beq.n	80023ae <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x1dc>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d10d      	bne.n	8002316 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d10a      	bne.n	8002316 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	f7ff fcb3 	bl	8001c6a <LL_RCC_HSE_IsReady>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d050      	beq.n	80023ac <HAL_RCC_OscConfig+0x288>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d14c      	bne.n	80023ac <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e29b      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0x218>
 8002336:	f7ff fc7c 	bl	8001c32 <LL_RCC_HSE_Enable>
 800233a:	e00d      	b.n	8002358 <HAL_RCC_OscConfig+0x234>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002344:	d104      	bne.n	8002350 <HAL_RCC_OscConfig+0x22c>
 8002346:	f7ff fc47 	bl	8001bd8 <LL_RCC_HSE_EnableTcxo>
 800234a:	f7ff fc72 	bl	8001c32 <LL_RCC_HSE_Enable>
 800234e:	e003      	b.n	8002358 <HAL_RCC_OscConfig+0x234>
 8002350:	f7ff fc7d 	bl	8001c4e <LL_RCC_HSE_Disable>
 8002354:	f7ff fc4e 	bl	8001bf4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fc44 	bl	8000bec <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fc40 	bl	8000bec <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e269      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800237a:	f7ff fc76 	bl	8001c6a <LL_RCC_HSE_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x244>
 8002384:	e013      	b.n	80023ae <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fc31 	bl	8000bec <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238e:	f7fe fc2d 	bl	8000bec <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e256      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80023a0:	f7ff fc63 	bl	8001c6a <LL_RCC_HSE_IsReady>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f1      	bne.n	800238e <HAL_RCC_OscConfig+0x26a>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04b      	beq.n	8002452 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x2a8>
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d113      	bne.n	80023ee <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d110      	bne.n	80023ee <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023cc:	f7ff fc7a 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2be>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e235      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fc7d 	bl	8001ce6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e031      	b.n	8002452 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	f7ff fc49 	bl	8001c8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fbf7 	bl	8000bec <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002402:	f7fe fbf3 	bl	8000bec <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e21c      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002414:	f7ff fc56 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f1      	beq.n	8002402 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc5f 	bl	8001ce6 <LL_RCC_HSI_SetCalibTrimming>
 8002428:	e013      	b.n	8002452 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242a:	f7ff fc3d 	bl	8001ca8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fbdd 	bl	8000bec <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f7fe fbd9 	bl	8000bec <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e202      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002448:	f7ff fc3c 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f1      	bne.n	8002436 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d06f      	beq.n	800253e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d057      	beq.n	8002516 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	429a      	cmp	r2, r3
 800247c:	d036      	beq.n	80024ec <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1db      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80024a0:	f7ff fc56 	bl	8001d50 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024a4:	f7fe fba2 	bl	8000bec <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80024aa:	e00d      	b.n	80024c8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fb9e 	bl	8000bec <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b11      	cmp	r3, #17
 80024b8:	d906      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1c7      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80024c8:	f7ff fc52 	bl	8001d70 <LL_RCC_LSI_IsReady>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ec      	bne.n	80024ac <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	f023 0210 	bic.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	f7ff fc20 	bl	8001d30 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fb7c 	bl	8000bec <HAL_GetTick>
 80024f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7fe fb78 	bl	8000bec <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b11      	cmp	r3, #17
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1a1      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800250a:	f7ff fc31 	bl	8001d70 <LL_RCC_LSI_IsReady>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f1      	beq.n	80024f8 <HAL_RCC_OscConfig+0x3d4>
 8002514:	e013      	b.n	800253e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	f7ff fc1b 	bl	8001d50 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fb67 	bl	8000bec <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fb63 	bl	8000bec <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b11      	cmp	r3, #17
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e18c      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002534:	f7ff fc1c 	bl	8001d70 <LL_RCC_LSI_IsReady>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f1      	bne.n	8002522 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80d8 	beq.w	80026fc <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800254c:	f7ff fb32 	bl	8001bb4 <LL_PWR_IsEnabledBkUpAccess>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002556:	f7ff fafb 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe fb47 	bl	8000bec <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fb43 	bl	8000bec <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e16c      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002574:	f7ff fb1e 	bl	8001bb4 <LL_PWR_IsEnabledBkUpAccess>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f1      	beq.n	8002562 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d07b      	beq.n	800267e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b85      	cmp	r3, #133	; 0x85
 800258c:	d003      	beq.n	8002596 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d109      	bne.n	80025aa <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fb1f 	bl	8000bec <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fb11 	bl	8000bec <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e138      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025dc:	f7ff fb97 	bl	8001d0e <LL_RCC_LSE_IsReady>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ef      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b81      	cmp	r3, #129	; 0x81
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b85      	cmp	r3, #133	; 0x85
 80025f4:	d121      	bne.n	800263a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe faf9 	bl	8000bec <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe faeb 	bl	8000bec <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e112      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ec      	beq.n	8002612 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002638:	e060      	b.n	80026fc <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fad7 	bl	8000bec <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fac9 	bl	8000bec <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0f0      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ec      	bne.n	8002656 <HAL_RCC_OscConfig+0x532>
 800267c:	e03e      	b.n	80026fc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fab5 	bl	8000bec <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe faa7 	bl	8000bec <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0ce      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ec      	bne.n	800269a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fa94 	bl	8000bec <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fa86 	bl	8000bec <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0ad      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80026f2:	f7ff fb0c 	bl	8001d0e <LL_RCC_LSE_IsReady>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ef      	bne.n	80026dc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a3 	beq.w	800284c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d076      	beq.n	80027fa <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	2b02      	cmp	r3, #2
 8002712:	d14b      	bne.n	80027ac <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002714:	f7ff fc62 	bl	8001fdc <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fa68 	bl	8000bec <HAL_GetTick>
 800271c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fa64 	bl	8000bec <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b0a      	cmp	r3, #10
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e08d      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002732:	f7ff fc61 	bl	8001ff8 <LL_RCC_PLL_IsReady>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f1      	bne.n	8002720 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <HAL_RCC_OscConfig+0x734>)
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002754:	0212      	lsls	r2, r2, #8
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002768:	430a      	orrs	r2, r1
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	4313      	orrs	r3, r2
 8002770:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002772:	f7ff fc25 	bl	8001fc0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fa31 	bl	8000bec <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fa2d 	bl	8000bec <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b0a      	cmp	r3, #10
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e056      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80027a0:	f7ff fc2a 	bl	8001ff8 <LL_RCC_PLL_IsReady>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f1      	beq.n	800278e <HAL_RCC_OscConfig+0x66a>
 80027aa:	e04f      	b.n	800284c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	f7ff fc16 	bl	8001fdc <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ca:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fa0a 	bl	8000bec <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fa06 	bl	8000bec <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b0a      	cmp	r3, #10
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e02f      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027ee:	f7ff fc03 	bl	8001ff8 <LL_RCC_PLL_IsReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f1      	bne.n	80027dc <HAL_RCC_OscConfig+0x6b8>
 80027f8:	e028      	b.n	800284c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e023      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	429a      	cmp	r2, r3
 800281a:	d115      	bne.n	8002848 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	429a      	cmp	r2, r3
 8002828:	d10e      	bne.n	8002848 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	429a      	cmp	r2, r3
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	11c1808c 	.word	0x11c1808c

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e12c      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d91b      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b95      	ldr	r3, [pc, #596]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4993      	ldr	r1, [pc, #588]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288e:	f7fe f9ad 	bl	8000bec <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002896:	f7fe f9a9 	bl	8000bec <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e110      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a8:	4b8a      	ldr	r3, [pc, #552]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d1ef      	bne.n	8002896 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fae8 	bl	8001e9c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028cc:	f7fe f98e 	bl	8000bec <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d4:	f7fe f98a 	bl	8000bec <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0f1      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028e6:	f7ff fbc5 	bl	8002074 <LL_RCC_IsActiveFlag_HPRE>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f1      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fade 	bl	8001ec2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002906:	f7fe f971 	bl	8000bec <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800290e:	f7fe f96d 	bl	8000bec <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0d4      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002920:	f7ff fbb9 	bl	8002096 <LL_RCC_IsActiveFlag_C2HPRE>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f1      	beq.n	800290e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fad6 	bl	8001eec <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002940:	f7fe f954 	bl	8000bec <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002948:	f7fe f950 	bl	8000bec <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0b7      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800295a:	f7ff fbae 	bl	80020ba <LL_RCC_IsActiveFlag_SHDHPRE>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f1      	beq.n	8002948 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff facf 	bl	8001f18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800297a:	f7fe f937 	bl	8000bec <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002982:	f7fe f933 	bl	8000bec <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e09a      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002994:	f7ff fba3 	bl	80020de <LL_RCC_IsActiveFlag_PPRE1>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f1      	beq.n	8002982 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d017      	beq.n	80029da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fac4 	bl	8001f3e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029b6:	f7fe f919 	bl	8000bec <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029be:	f7fe f915 	bl	8000bec <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e07c      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029d0:	f7ff fb96 	bl	8002100 <LL_RCC_IsActiveFlag_PPRE2>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f1      	beq.n	80029be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d043      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029ee:	f7ff f93c 	bl	8001c6a <LL_RCC_HSE_IsReady>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11e      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e066      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a04:	f7ff faf8 	bl	8001ff8 <LL_RCC_PLL_IsReady>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d113      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e05b      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a1a:	f7ff f9d6 	bl	8001dca <LL_RCC_MSI_IsReady>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e050      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a28:	f7ff f94c 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e049      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fa10 	bl	8001e60 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe f8d4 	bl	8000bec <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe f8d0 	bl	8000bec <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e035      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	f7ff fa12 	bl	8001e86 <LL_RCC_GetSysClkSource>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d1ec      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d21b      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 0207 	bic.w	r2, r3, #7
 8002a84:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe f8ae 	bl	8000bec <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a94:	f7fe f8aa 	bl	8000bec <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e011      	b.n	8002aca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x278>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1ef      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ab4:	f000 f8b4 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_RCC_ClockConfig+0x27c>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_RCC_ClockConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe f846 	bl	8000b54 <HAL_InitTick>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58004000 	.word	0x58004000
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	f7ff f9ca 	bl	8001e86 <LL_RCC_GetSysClkSource>
 8002af2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af4:	f7ff fab3 	bl	800205e <LL_RCC_PLL_GetMainSource>
 8002af8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x2c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d139      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d136      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b0c:	f7ff f96d 	bl	8001dea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d115      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x62>
 8002b16:	f7ff f968 	bl	8001dea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x4e>
 8002b20:	f7ff f973 	bl	8001e0a <LL_RCC_MSI_GetRange>
 8002b24:	4603      	mov	r3, r0
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	e005      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x5a>
 8002b2e:	f7ff f977 	bl	8001e20 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b32:	4603      	mov	r3, r0
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x8c>
 8002b42:	f7ff f952 	bl	8001dea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x7a>
 8002b4c:	f7ff f95d 	bl	8001e0a <LL_RCC_MSI_GetRange>
 8002b50:	4603      	mov	r3, r0
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	e005      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0x86>
 8002b5a:	f7ff f961 	bl	8001e20 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d115      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b78:	e012      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b8c:	f7ff f840 	bl	8001c10 <LL_RCC_HSE_IsEnabledDiv2>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b9e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba0:	f7ff f971 	bl	8001e86 <LL_RCC_GetSysClkSource>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d12f      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002baa:	f7ff fa58 	bl	800205e <LL_RCC_PLL_GetMainSource>
 8002bae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0xde>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d003      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xe4>
 8002bbc:	e00d      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bc0:	60fb      	str	r3, [r7, #12]
        break;
 8002bc2:	e00d      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bc4:	f7ff f824 	bl	8001c10 <LL_RCC_HSE_IsEnabledDiv2>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bd0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bd6:	60fb      	str	r3, [r7, #12]
        break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	60fb      	str	r3, [r7, #12]
        break;
 8002bde:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002be0:	f7ff fa1b 	bl	800201a <LL_RCC_PLL_GetN>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	fb03 f402 	mul.w	r4, r3, r2
 8002bec:	f7ff fa2c 	bl	8002048 <LL_RCC_PLL_GetDivider>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	fbb4 f4f3 	udiv	r4, r4, r3
 8002bfa:	f7ff fa1a 	bl	8002032 <LL_RCC_PLL_GetR>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0f5b      	lsrs	r3, r3, #29
 8002c02:	3301      	adds	r3, #1
 8002c04:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	08003f78 	.word	0x08003f78
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	01e84800 	.word	0x01e84800

08002c20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b598      	push	{r3, r4, r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c24:	f7ff ff5c 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	f7ff f99b 	bl	8001f64 <LL_RCC_GetAHBPrescaler>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x24>)
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd98      	pop	{r3, r4, r7, pc}
 8002c44:	08003f18 	.word	0x08003f18

08002c48 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b598      	push	{r3, r4, r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c4c:	f7ff ffe8 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c50:	4604      	mov	r4, r0
 8002c52:	f7ff f99f 	bl	8001f94 <LL_RCC_GetAPB1Prescaler>
 8002c56:	4603      	mov	r3, r0
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd98      	pop	{r3, r4, r7, pc}
 8002c68:	08003f58 	.word	0x08003f58

08002c6c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b598      	push	{r3, r4, r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002c70:	f7ff ffd6 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c74:	4604      	mov	r4, r0
 8002c76:	f7ff f998 	bl	8001faa <LL_RCC_GetAPB2Prescaler>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	0adb      	lsrs	r3, r3, #11
 8002c7e:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd98      	pop	{r3, r4, r7, pc}
 8002c8c:	08003f58 	.word	0x08003f58

08002c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002ca8:	f7ff f967 	bl	8001f7a <LL_RCC_GetAHB3Prescaler>
 8002cac:	4603      	mov	r3, r0
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a09      	ldr	r2, [pc, #36]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9c      	lsrs	r4, r3, #18
 8002ccc:	f7fe ff5c 	bl	8001b88 <HAL_PWREx_GetVoltageRange>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 f80b 	bl	8002cf0 <RCC_SetFlashLatency>
 8002cda:	4603      	mov	r3, r0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	08003f78 	.word	0x08003f78
 8002ce8:	08003f18 	.word	0x08003f18
 8002cec:	431bde83 	.word	0x431bde83

08002cf0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002cfa:	4a3a      	ldr	r2, [pc, #232]	; (8002de4 <RCC_SetFlashLatency+0xf4>)
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	3304      	adds	r3, #4
 8002d08:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002d0a:	4a37      	ldr	r2, [pc, #220]	; (8002de8 <RCC_SetFlashLatency+0xf8>)
 8002d0c:	f107 0318 	add.w	r3, r7, #24
 8002d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d14:	6018      	str	r0, [r3, #0]
 8002d16:	3304      	adds	r3, #4
 8002d18:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <RCC_SetFlashLatency+0xfc>)
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d11b      	bne.n	8002d6a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
 8002d36:	e014      	b.n	8002d62 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	3338      	adds	r3, #56	; 0x38
 8002d3e:	443b      	add	r3, r7
 8002d40:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d807      	bhi.n	8002d5c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3338      	adds	r3, #56	; 0x38
 8002d52:	443b      	add	r3, r7
 8002d54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d5a:	e021      	b.n	8002da0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	3301      	adds	r3, #1
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d9e7      	bls.n	8002d38 <RCC_SetFlashLatency+0x48>
 8002d68:	e01a      	b.n	8002da0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	e014      	b.n	8002d9a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	3338      	adds	r3, #56	; 0x38
 8002d76:	443b      	add	r3, r7
 8002d78:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d92:	e005      	b.n	8002da0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	3301      	adds	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d9e7      	bls.n	8002d70 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <RCC_SetFlashLatency+0x100>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 0207 	bic.w	r2, r3, #7
 8002da8:	4911      	ldr	r1, [pc, #68]	; (8002df0 <RCC_SetFlashLatency+0x100>)
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002db0:	f7fd ff1c 	bl	8000bec <HAL_GetTick>
 8002db4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002db6:	e008      	b.n	8002dca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002db8:	f7fd ff18 	bl	8000bec <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e007      	b.n	8002dda <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <RCC_SetFlashLatency+0x100>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1ef      	bne.n	8002db8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3738      	adds	r7, #56	; 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	08003efc 	.word	0x08003efc
 8002de8:	08003f04 	.word	0x08003f04
 8002dec:	08003f0c 	.word	0x08003f0c
 8002df0:	58004000 	.word	0x58004000

08002df4 <LL_RCC_LSE_IsReady>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d101      	bne.n	8002e0c <LL_RCC_LSE_IsReady+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_RCC_LSE_IsReady+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_SetUSARTClockSource>:
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_SetI2SClockSource>:
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_SetLPUARTClockSource>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <LL_RCC_SetI2CClockSource>:
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_SetLPTIMClockSource>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_SetRNGClockSource>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_SetADCClockSource>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_SetRTCClockSource>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_GetRTCClockSource>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_ForceBackupDomainReset>:
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_ReleaseBackupDomainReset>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fec:	2300      	movs	r3, #0
 8002fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d058      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002ffc:	f7fe fda8 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7fd fdf4 	bl	8000bec <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fd fdf0 	bl	8000bec <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
        break;
 800301a:	e006      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800301c:	4b7b      	ldr	r3, [pc, #492]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d1ee      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d13c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003030:	f7ff ffa7 	bl	8002f82 <LL_RCC_GetRTCClockSource>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	429a      	cmp	r2, r3
 800303c:	d00f      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800304c:	f7ff ffa5 	bl	8002f9a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	f7ff ffb3 	bl	8002fba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d014      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fdc0 	bl	8000bec <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800306e:	e00b      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fd fdbc 	bl	8000bec <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d902      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	74fb      	strb	r3, [r7, #19]
            break;
 8003086:	e004      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003088:	f7ff feb4 	bl	8002df4 <LL_RCC_LSE_IsReady>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1ee      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5b 	bl	8002f58 <LL_RCC_SetRTCClockSource>
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
 80030a8:	e001      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fea9 	bl	8002e16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe9e 	bl	8002e16 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fec0 	bl	8002e70 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fee6 	bl	8002ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fedb 	bl	8002ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fed0 	bl	8002ed2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fea9 	bl	8002e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fe9e 	bl	8002e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fe93 	bl	8002e9a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe5e 	bl	8002e46 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d107      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fea5 	bl	8002f04 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d011      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fea3 	bl	8002f2e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d107      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003202:	7cbb      	ldrb	r3, [r7, #18]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58000400 	.word	0x58000400

08003210 <LL_RCC_GetUSARTClockSource>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	4313      	orrs	r3, r2
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <LL_RCC_GetLPUARTClockSource>:
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4013      	ands	r3, r2
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e042      	b.n	80032ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fb70 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	; 0x24
 8003280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f8c3 	bl	8003420 <UART_SetConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e022      	b.n	80032ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb2b 	bl	8003908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fbb1 	bl	8003a4a <UART_CheckIdleState>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b08a      	sub	sp, #40	; 0x28
 80032f6:	af02      	add	r7, sp, #8
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003308:	2b20      	cmp	r3, #32
 800330a:	f040 8083 	bne.w	8003414 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_UART_Transmit+0x28>
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07b      	b.n	8003416 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_UART_Transmit+0x3a>
 8003328:	2302      	movs	r3, #2
 800332a:	e074      	b.n	8003416 <HAL_UART_Transmit+0x124>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2221      	movs	r2, #33	; 0x21
 8003340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003344:	f7fd fc52 	bl	8000bec <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	88fa      	ldrh	r2, [r7, #6]
 800334e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d108      	bne.n	8003376 <HAL_UART_Transmit+0x84>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e003      	b.n	800337e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003386:	e02c      	b.n	80033e2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fba4 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e039      	b.n	8003416 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	3302      	adds	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e007      	b.n	80033d0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1cc      	bne.n	8003388 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fb71 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b08c      	sub	sp, #48	; 0x30
 8003426:	af00      	add	r7, sp, #0
 8003428:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	431a      	orrs	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4313      	orrs	r3, r2
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <UART_SetConfig+0x280>)
 8003450:	4013      	ands	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003458:	430b      	orrs	r3, r1
 800345a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a89      	ldr	r2, [pc, #548]	; (80036a4 <UART_SetConfig+0x284>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003488:	4313      	orrs	r3, r2
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003496:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f023 010f 	bic.w	r1, r3, #15
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7a      	ldr	r2, [pc, #488]	; (80036a8 <UART_SetConfig+0x288>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d127      	bne.n	8003514 <UART_SetConfig+0xf4>
 80034c4:	2003      	movs	r0, #3
 80034c6:	f7ff fea3 	bl	8003210 <LL_RCC_GetUSARTClockSource>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d81b      	bhi.n	800350c <UART_SetConfig+0xec>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0xbc>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003505 	.word	0x08003505
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e080      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80034f4:	2302      	movs	r3, #2
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fa:	e07c      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80034fc:	2304      	movs	r3, #4
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003502:	e078      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003504:	2308      	movs	r3, #8
 8003506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350a:	e074      	b.n	80035f6 <UART_SetConfig+0x1d6>
 800350c:	2310      	movs	r3, #16
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003512:	e070      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a64      	ldr	r2, [pc, #400]	; (80036ac <UART_SetConfig+0x28c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d138      	bne.n	8003590 <UART_SetConfig+0x170>
 800351e:	200c      	movs	r0, #12
 8003520:	f7ff fe76 	bl	8003210 <LL_RCC_GetUSARTClockSource>
 8003524:	4603      	mov	r3, r0
 8003526:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d82c      	bhi.n	8003588 <UART_SetConfig+0x168>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x114>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003569 	.word	0x08003569
 8003538:	08003589 	.word	0x08003589
 800353c:	08003589 	.word	0x08003589
 8003540:	08003589 	.word	0x08003589
 8003544:	08003579 	.word	0x08003579
 8003548:	08003589 	.word	0x08003589
 800354c:	08003589 	.word	0x08003589
 8003550:	08003589 	.word	0x08003589
 8003554:	08003571 	.word	0x08003571
 8003558:	08003589 	.word	0x08003589
 800355c:	08003589 	.word	0x08003589
 8003560:	08003589 	.word	0x08003589
 8003564:	08003581 	.word	0x08003581
 8003568:	2300      	movs	r3, #0
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e042      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003576:	e03e      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800357e:	e03a      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003586:	e036      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358e:	e032      	b.n	80035f6 <UART_SetConfig+0x1d6>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <UART_SetConfig+0x284>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12a      	bne.n	80035f0 <UART_SetConfig+0x1d0>
 800359a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800359e:	f7ff fe49 	bl	8003234 <LL_RCC_GetLPUARTClockSource>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a8:	d01a      	beq.n	80035e0 <UART_SetConfig+0x1c0>
 80035aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ae:	d81b      	bhi.n	80035e8 <UART_SetConfig+0x1c8>
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b4:	d00c      	beq.n	80035d0 <UART_SetConfig+0x1b0>
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d815      	bhi.n	80035e8 <UART_SetConfig+0x1c8>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0x1a8>
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d008      	beq.n	80035d8 <UART_SetConfig+0x1b8>
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x1c8>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e012      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e00e      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80035d8:	2304      	movs	r3, #4
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e00a      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80035e0:	2308      	movs	r3, #8
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e006      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ee:	e002      	b.n	80035f6 <UART_SetConfig+0x1d6>
 80035f0:	2310      	movs	r3, #16
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <UART_SetConfig+0x284>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	f040 80a4 	bne.w	800374a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003606:	2b08      	cmp	r3, #8
 8003608:	d823      	bhi.n	8003652 <UART_SetConfig+0x232>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <UART_SetConfig+0x1f0>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003635 	.word	0x08003635
 8003614:	08003653 	.word	0x08003653
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003653 	.word	0x08003653
 8003620:	08003643 	.word	0x08003643
 8003624:	08003653 	.word	0x08003653
 8003628:	08003653 	.word	0x08003653
 800362c:	08003653 	.word	0x08003653
 8003630:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003634:	f7ff fb08 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800363a:	e010      	b.n	800365e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <UART_SetConfig+0x290>)
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003640:	e00d      	b.n	800365e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7ff fa4d 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003648:	e009      	b.n	800365e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003650:	e005      	b.n	800365e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800365c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8137 	beq.w	80038d4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <UART_SetConfig+0x294>)
 800366c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003670:	461a      	mov	r2, r3
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	fbb3 f3f2 	udiv	r3, r3, r2
 8003678:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	429a      	cmp	r2, r3
 8003688:	d305      	bcc.n	8003696 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800369c:	e11a      	b.n	80038d4 <UART_SetConfig+0x4b4>
 800369e:	bf00      	nop
 80036a0:	cfff69f3 	.word	0xcfff69f3
 80036a4:	40008000 	.word	0x40008000
 80036a8:	40013800 	.word	0x40013800
 80036ac:	40004400 	.word	0x40004400
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	08003fb8 	.word	0x08003fb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	2200      	movs	r2, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	60fa      	str	r2, [r7, #12]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	4a8e      	ldr	r2, [pc, #568]	; (8003900 <UART_SetConfig+0x4e0>)
 80036c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2200      	movs	r2, #0
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036da:	f7fc fd4d 	bl	8000178 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	020b      	lsls	r3, r1, #8
 80036f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036f4:	0202      	lsls	r2, r0, #8
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	6849      	ldr	r1, [r1, #4]
 80036fa:	0849      	lsrs	r1, r1, #1
 80036fc:	2000      	movs	r0, #0
 80036fe:	460c      	mov	r4, r1
 8003700:	4605      	mov	r5, r0
 8003702:	eb12 0804 	adds.w	r8, r2, r4
 8003706:	eb43 0905 	adc.w	r9, r3, r5
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	469a      	mov	sl, r3
 8003712:	4693      	mov	fp, r2
 8003714:	4652      	mov	r2, sl
 8003716:	465b      	mov	r3, fp
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fc fd2c 	bl	8000178 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372e:	d308      	bcc.n	8003742 <UART_SetConfig+0x322>
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d204      	bcs.n	8003742 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	60da      	str	r2, [r3, #12]
 8003740:	e0c8      	b.n	80038d4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003748:	e0c4      	b.n	80038d4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003752:	d168      	bne.n	8003826 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003758:	2b08      	cmp	r3, #8
 800375a:	d828      	bhi.n	80037ae <UART_SetConfig+0x38e>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <UART_SetConfig+0x344>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003789 	.word	0x08003789
 8003768:	08003791 	.word	0x08003791
 800376c:	08003799 	.word	0x08003799
 8003770:	080037af 	.word	0x080037af
 8003774:	0800379f 	.word	0x0800379f
 8003778:	080037af 	.word	0x080037af
 800377c:	080037af 	.word	0x080037af
 8003780:	080037af 	.word	0x080037af
 8003784:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003788:	f7ff fa5e 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800378e:	e014      	b.n	80037ba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003790:	f7ff fa6c 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003796:	e010      	b.n	80037ba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b5a      	ldr	r3, [pc, #360]	; (8003904 <UART_SetConfig+0x4e4>)
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800379c:	e00d      	b.n	80037ba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7ff f99f 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037ac:	e005      	b.n	80037ba <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8089 	beq.w	80038d4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <UART_SetConfig+0x4e0>)
 80037c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	441a      	add	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d916      	bls.n	800381e <UART_SetConfig+0x3fe>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f6:	d212      	bcs.n	800381e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f023 030f 	bic.w	r3, r3, #15
 8003800:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b29a      	uxth	r2, r3
 800380e:	8bfb      	ldrh	r3, [r7, #30]
 8003810:	4313      	orrs	r3, r2
 8003812:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	8bfa      	ldrh	r2, [r7, #30]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e05a      	b.n	80038d4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003824:	e056      	b.n	80038d4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800382a:	2b08      	cmp	r3, #8
 800382c:	d827      	bhi.n	800387e <UART_SetConfig+0x45e>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <UART_SetConfig+0x414>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003859 	.word	0x08003859
 8003838:	08003861 	.word	0x08003861
 800383c:	08003869 	.word	0x08003869
 8003840:	0800387f 	.word	0x0800387f
 8003844:	0800386f 	.word	0x0800386f
 8003848:	0800387f 	.word	0x0800387f
 800384c:	0800387f 	.word	0x0800387f
 8003850:	0800387f 	.word	0x0800387f
 8003854:	08003877 	.word	0x08003877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003858:	f7ff f9f6 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800385c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800385e:	e014      	b.n	800388a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003860:	f7ff fa04 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8003864:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003866:	e010      	b.n	800388a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <UART_SetConfig+0x4e4>)
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800386c:	e00d      	b.n	800388a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386e:	f7ff f937 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003874:	e009      	b.n	800388a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800387c:	e005      	b.n	800388a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003888:	bf00      	nop
    }

    if (pclk != 0U)
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	2b00      	cmp	r3, #0
 800388e:	d021      	beq.n	80038d4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <UART_SetConfig+0x4e0>)
 8003896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389a:	461a      	mov	r2, r3
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	fbb3 f2f2 	udiv	r2, r3, r2
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	441a      	add	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b0f      	cmp	r3, #15
 80038ba:	d908      	bls.n	80038ce <UART_SetConfig+0x4ae>
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c2:	d204      	bcs.n	80038ce <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	e002      	b.n	80038d4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2201      	movs	r2, #1
 80038e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80038f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fe:	bf00      	nop
 8003900:	08003fb8 	.word	0x08003fb8
 8003904:	00f42400 	.word	0x00f42400

08003908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d10a      	bne.n	8003a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a5a:	f7fd f8c7 	bl	8000bec <HAL_GetTick>
 8003a5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d10e      	bne.n	8003a8c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f82f 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e025      	b.n	8003ad8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d10e      	bne.n	8003ab8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f819 	bl	8003ae0 <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e00f      	b.n	8003ad8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b09c      	sub	sp, #112	; 0x70
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	e0a9      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af8:	f000 80a5 	beq.w	8003c46 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7fd f876 	bl	8000bec <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d140      	bne.n	8003b94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b32:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e6      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b64:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e069      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d051      	beq.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb0:	d149      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
 8003bdc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e6      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c0e:	623a      	str	r2, [r7, #32]
 8003c10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e010      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	f43f af46 	beq.w	8003af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3770      	adds	r7, #112	; 0x70
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e027      	b.n	8003cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2224      	movs	r2, #36	; 0x24
 8003c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e02d      	b.n	8003d54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f84f 	bl	8003dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e02d      	b.n	8003dd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f811 	bl	8003dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003df8:	e031      	b.n	8003e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003dfe:	2308      	movs	r3, #8
 8003e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	0e5b      	lsrs	r3, r3, #25
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	0f5b      	lsrs	r3, r3, #29
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	7b3a      	ldrb	r2, [r7, #12]
 8003e26:	4910      	ldr	r1, [pc, #64]	; (8003e68 <UARTEx_SetNbDataToProcess+0x90>)
 8003e28:	5c8a      	ldrb	r2, [r1, r2]
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e2e:	7b3a      	ldrb	r2, [r7, #12]
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <UARTEx_SetNbDataToProcess+0x94>)
 8003e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	7b7a      	ldrb	r2, [r7, #13]
 8003e44:	4908      	ldr	r1, [pc, #32]	; (8003e68 <UARTEx_SetNbDataToProcess+0x90>)
 8003e46:	5c8a      	ldrb	r2, [r1, r2]
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e4c:	7b7a      	ldrb	r2, [r7, #13]
 8003e4e:	4907      	ldr	r1, [pc, #28]	; (8003e6c <UARTEx_SetNbDataToProcess+0x94>)
 8003e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	08003fd0 	.word	0x08003fd0
 8003e6c:	08003fd8 	.word	0x08003fd8

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4d0d      	ldr	r5, [pc, #52]	; (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	42a6      	cmp	r6, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4d0b      	ldr	r5, [pc, #44]	; (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	; (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 f820 	bl	8003ec8 <_init>
 8003e88:	1b64      	subs	r4, r4, r5
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	42a6      	cmp	r6, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e98:	4798      	blx	r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea2:	4798      	blx	r3
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	08003fe8 	.word	0x08003fe8
 8003eac:	08003fe8 	.word	0x08003fe8
 8003eb0:	08003fe8 	.word	0x08003fe8
 8003eb4:	08003fec 	.word	0x08003fec

08003eb8 <memset>:
 8003eb8:	4402      	add	r2, r0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr
