
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a430  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800a570  0800a570  0001a570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab9c  0800ab9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  0800ad84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800ad84  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012648  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002686  00000000  00000000  00032852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  000361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5a7  00000000  00000000  000373b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c40  00000000  00000000  00054957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b488a  00000000  00000000  00067597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011be21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  0011be74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a558 	.word	0x0800a558

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800a558 	.word	0x0800a558

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001108:	f000 b9ac 	b.w	8001464 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83e 	bl	8001194 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4628      	mov	r0, r5
 800112c:	4621      	mov	r1, r4
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	f7ff fcab 	bl	8000a8c <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__aeabi_d2ulz+0x34>)
 800115c:	2200      	movs	r2, #0
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff fa21 	bl	80005a8 <__aeabi_dmul>
 8001166:	f7ff fcf7 	bl	8000b58 <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f9a2 	bl	80004b4 <__aeabi_ui2d>
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff fa18 	bl	80005a8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7ff f85a 	bl	8000238 <__aeabi_dsub>
 8001184:	f7ff fce8 	bl	8000b58 <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <__udivmoddi4>:
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001198:	9e08      	ldr	r6, [sp, #32]
 800119a:	460d      	mov	r5, r1
 800119c:	4604      	mov	r4, r0
 800119e:	4688      	mov	r8, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14d      	bne.n	8001240 <__udivmoddi4+0xac>
 80011a4:	428a      	cmp	r2, r1
 80011a6:	4694      	mov	ip, r2
 80011a8:	d968      	bls.n	800127c <__udivmoddi4+0xe8>
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b152      	cbz	r2, 80011c6 <__udivmoddi4+0x32>
 80011b0:	fa01 f302 	lsl.w	r3, r1, r2
 80011b4:	f1c2 0120 	rsb	r1, r2, #32
 80011b8:	fa20 f101 	lsr.w	r1, r0, r1
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	ea41 0803 	orr.w	r8, r1, r3
 80011c4:	4094      	lsls	r4, r2
 80011c6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ca:	0c21      	lsrs	r1, r4, #16
 80011cc:	fbb8 fef5 	udiv	lr, r8, r5
 80011d0:	fa1f f78c 	uxth.w	r7, ip
 80011d4:	fb05 831e 	mls	r3, r5, lr, r8
 80011d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011dc:	fb0e f107 	mul.w	r1, lr, r7
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x68>
 80011e4:	eb1c 0303 	adds.w	r3, ip, r3
 80011e8:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80011ec:	f080 811e 	bcs.w	800142c <__udivmoddi4+0x298>
 80011f0:	4299      	cmp	r1, r3
 80011f2:	f240 811b 	bls.w	800142c <__udivmoddi4+0x298>
 80011f6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fa:	4463      	add	r3, ip
 80011fc:	1a5b      	subs	r3, r3, r1
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	fbb3 f0f5 	udiv	r0, r3, r5
 8001204:	fb05 3310 	mls	r3, r5, r0, r3
 8001208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120c:	fb00 f707 	mul.w	r7, r0, r7
 8001210:	42a7      	cmp	r7, r4
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x96>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800121c:	f080 8108 	bcs.w	8001430 <__udivmoddi4+0x29c>
 8001220:	42a7      	cmp	r7, r4
 8001222:	f240 8105 	bls.w	8001430 <__udivmoddi4+0x29c>
 8001226:	4464      	add	r4, ip
 8001228:	3802      	subs	r0, #2
 800122a:	1be4      	subs	r4, r4, r7
 800122c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001230:	2100      	movs	r1, #0
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa8>
 8001234:	40d4      	lsrs	r4, r2
 8001236:	2300      	movs	r3, #0
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	428b      	cmp	r3, r1
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0xc2>
 8001244:	2e00      	cmp	r6, #0
 8001246:	f000 80ee 	beq.w	8001426 <__udivmoddi4+0x292>
 800124a:	2100      	movs	r1, #0
 800124c:	e9c6 0500 	strd	r0, r5, [r6]
 8001250:	4608      	mov	r0, r1
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	fab3 f183 	clz	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	d14a      	bne.n	80012f4 <__udivmoddi4+0x160>
 800125e:	42ab      	cmp	r3, r5
 8001260:	d302      	bcc.n	8001268 <__udivmoddi4+0xd4>
 8001262:	4282      	cmp	r2, r0
 8001264:	f200 80f9 	bhi.w	800145a <__udivmoddi4+0x2c6>
 8001268:	1a84      	subs	r4, r0, r2
 800126a:	eb65 0303 	sbc.w	r3, r5, r3
 800126e:	2001      	movs	r0, #1
 8001270:	4698      	mov	r8, r3
 8001272:	2e00      	cmp	r6, #0
 8001274:	d0e2      	beq.n	800123c <__udivmoddi4+0xa8>
 8001276:	e9c6 4800 	strd	r4, r8, [r6]
 800127a:	e7df      	b.n	800123c <__udivmoddi4+0xa8>
 800127c:	b902      	cbnz	r2, 8001280 <__udivmoddi4+0xec>
 800127e:	deff      	udf	#255	; 0xff
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8091 	bne.w	80013ac <__udivmoddi4+0x218>
 800128a:	eba1 050c 	sub.w	r5, r1, ip
 800128e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001292:	fa1f fe8c 	uxth.w	lr, ip
 8001296:	2101      	movs	r1, #1
 8001298:	fbb5 f3f7 	udiv	r3, r5, r7
 800129c:	fb07 5013 	mls	r0, r7, r3, r5
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012a6:	fb0e f003 	mul.w	r0, lr, r3
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x12c>
 80012ae:	eb1c 0505 	adds.w	r5, ip, r5
 80012b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x12a>
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	f200 80cb 	bhi.w	8001454 <__udivmoddi4+0x2c0>
 80012be:	4643      	mov	r3, r8
 80012c0:	1a2d      	subs	r5, r5, r0
 80012c2:	b2a4      	uxth	r4, r4
 80012c4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012c8:	fb07 5510 	mls	r5, r7, r0, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb0e fe00 	mul.w	lr, lr, r0
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0x156>
 80012d8:	eb1c 0404 	adds.w	r4, ip, r4
 80012dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x154>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f200 80bb 	bhi.w	800145e <__udivmoddi4+0x2ca>
 80012e8:	4628      	mov	r0, r5
 80012ea:	eba4 040e 	sub.w	r4, r4, lr
 80012ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x9e>
 80012f4:	f1c1 0720 	rsb	r7, r1, #32
 80012f8:	408b      	lsls	r3, r1
 80012fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa20 f407 	lsr.w	r4, r0, r7
 8001306:	fa05 f301 	lsl.w	r3, r5, r1
 800130a:	431c      	orrs	r4, r3
 800130c:	40fd      	lsrs	r5, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fa00 f301 	lsl.w	r3, r0, r1
 8001316:	fbb5 f8f9 	udiv	r8, r5, r9
 800131a:	0c20      	lsrs	r0, r4, #16
 800131c:	fa1f fe8c 	uxth.w	lr, ip
 8001320:	fb09 5518 	mls	r5, r9, r8, r5
 8001324:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	42a8      	cmp	r0, r5
 800132e:	fa02 f201 	lsl.w	r2, r2, r1
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b8>
 8001334:	eb1c 0505 	adds.w	r5, ip, r5
 8001338:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2bc>
 8001340:	42a8      	cmp	r0, r5
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2bc>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	4465      	add	r5, ip
 800134c:	1a2d      	subs	r5, r5, r0
 800134e:	b2a4      	uxth	r4, r4
 8001350:	fbb5 f0f9 	udiv	r0, r5, r9
 8001354:	fb09 5510 	mls	r5, r9, r0, r5
 8001358:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800135c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001360:	45ae      	cmp	lr, r5
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x1e2>
 8001364:	eb1c 0505 	adds.w	r5, ip, r5
 8001368:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800136c:	d26c      	bcs.n	8001448 <__udivmoddi4+0x2b4>
 800136e:	45ae      	cmp	lr, r5
 8001370:	d96a      	bls.n	8001448 <__udivmoddi4+0x2b4>
 8001372:	3802      	subs	r0, #2
 8001374:	4465      	add	r5, ip
 8001376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800137a:	fba0 9402 	umull	r9, r4, r0, r2
 800137e:	eba5 050e 	sub.w	r5, r5, lr
 8001382:	42a5      	cmp	r5, r4
 8001384:	46c8      	mov	r8, r9
 8001386:	46a6      	mov	lr, r4
 8001388:	d356      	bcc.n	8001438 <__udivmoddi4+0x2a4>
 800138a:	d053      	beq.n	8001434 <__udivmoddi4+0x2a0>
 800138c:	b15e      	cbz	r6, 80013a6 <__udivmoddi4+0x212>
 800138e:	ebb3 0208 	subs.w	r2, r3, r8
 8001392:	eb65 050e 	sbc.w	r5, r5, lr
 8001396:	fa05 f707 	lsl.w	r7, r5, r7
 800139a:	fa22 f301 	lsr.w	r3, r2, r1
 800139e:	40cd      	lsrs	r5, r1
 80013a0:	431f      	orrs	r7, r3
 80013a2:	e9c6 7500 	strd	r7, r5, [r6]
 80013a6:	2100      	movs	r1, #0
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	f1c2 0320 	rsb	r3, r2, #32
 80013b0:	fa20 f103 	lsr.w	r1, r0, r3
 80013b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b8:	fa25 f303 	lsr.w	r3, r5, r3
 80013bc:	4095      	lsls	r5, r2
 80013be:	430d      	orrs	r5, r1
 80013c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013cc:	fb07 3011 	mls	r0, r7, r1, r3
 80013d0:	0c2b      	lsrs	r3, r5, #16
 80013d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013d6:	fb01 f00e 	mul.w	r0, r1, lr
 80013da:	4298      	cmp	r0, r3
 80013dc:	fa04 f402 	lsl.w	r4, r4, r2
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x260>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013ea:	d22f      	bcs.n	800144c <__udivmoddi4+0x2b8>
 80013ec:	4298      	cmp	r0, r3
 80013ee:	d92d      	bls.n	800144c <__udivmoddi4+0x2b8>
 80013f0:	3902      	subs	r1, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013fc:	fb07 3310 	mls	r3, r7, r0, r3
 8001400:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001404:	fb00 f30e 	mul.w	r3, r0, lr
 8001408:	42ab      	cmp	r3, r5
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x28a>
 800140c:	eb1c 0505 	adds.w	r5, ip, r5
 8001410:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001414:	d216      	bcs.n	8001444 <__udivmoddi4+0x2b0>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d914      	bls.n	8001444 <__udivmoddi4+0x2b0>
 800141a:	3802      	subs	r0, #2
 800141c:	4465      	add	r5, ip
 800141e:	1aed      	subs	r5, r5, r3
 8001420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001424:	e738      	b.n	8001298 <__udivmoddi4+0x104>
 8001426:	4631      	mov	r1, r6
 8001428:	4630      	mov	r0, r6
 800142a:	e707      	b.n	800123c <__udivmoddi4+0xa8>
 800142c:	4686      	mov	lr, r0
 800142e:	e6e5      	b.n	80011fc <__udivmoddi4+0x68>
 8001430:	4618      	mov	r0, r3
 8001432:	e6fa      	b.n	800122a <__udivmoddi4+0x96>
 8001434:	454b      	cmp	r3, r9
 8001436:	d2a9      	bcs.n	800138c <__udivmoddi4+0x1f8>
 8001438:	ebb9 0802 	subs.w	r8, r9, r2
 800143c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001440:	3801      	subs	r0, #1
 8001442:	e7a3      	b.n	800138c <__udivmoddi4+0x1f8>
 8001444:	4640      	mov	r0, r8
 8001446:	e7ea      	b.n	800141e <__udivmoddi4+0x28a>
 8001448:	4620      	mov	r0, r4
 800144a:	e794      	b.n	8001376 <__udivmoddi4+0x1e2>
 800144c:	4641      	mov	r1, r8
 800144e:	e7d1      	b.n	80013f4 <__udivmoddi4+0x260>
 8001450:	46d0      	mov	r8, sl
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b8>
 8001454:	3b02      	subs	r3, #2
 8001456:	4465      	add	r5, ip
 8001458:	e732      	b.n	80012c0 <__udivmoddi4+0x12c>
 800145a:	4608      	mov	r0, r1
 800145c:	e709      	b.n	8001272 <__udivmoddi4+0xde>
 800145e:	4464      	add	r4, ip
 8001460:	3802      	subs	r0, #2
 8001462:	e742      	b.n	80012ea <__udivmoddi4+0x156>

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f023 0218 	bic.w	r2, r3, #24
 8001488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d4:	f5ad 6da3 	sub.w	sp, sp, #1304	; 0x518
 80014d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f000 fc71 	bl	8001dc0 <HAL_Init>

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f887 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f000 f969 	bl	80017b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014e6:	f000 f91b 	bl	8001720 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014ea:	f000 f8db 	bl	80016a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  struct GPS_Data_t teseoData;
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f001 fcc2 	bl	8002e78 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 80014f4:	2374      	movs	r3, #116	; 0x74
 80014f6:	b299      	uxth	r1, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	2202      	movs	r2, #2
 80014fc:	4836      	ldr	r0, [pc, #216]	; (80015d8 <main+0x108>)
 80014fe:	f001 f8c1 	bl	8002684 <HAL_I2C_IsDeviceReady>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507

	  if (ret != HAL_OK) {
 8001508:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <main+0x4e>
		  sprintf((char*)buff, "Device is not ready \r\n");
 8001510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001514:	4931      	ldr	r1, [pc, #196]	; (80015dc <main+0x10c>)
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fd9e 	bl	8006058 <siprintf>
 800151c:	e018      	b.n	8001550 <main+0x80>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 800151e:	2374      	movs	r3, #116	; 0x74
 8001520:	b299      	uxth	r1, r3
 8001522:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	4829      	ldr	r0, [pc, #164]	; (80015d8 <main+0x108>)
 8001532:	f000 ffb1 	bl	8002498 <HAL_I2C_Master_Receive>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 3507 	strb.w	r3, [r7, #1287]	; 0x507

		  if (ret != HAL_OK) {
 800153c:	f897 3507 	ldrb.w	r3, [r7, #1287]	; 0x507
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <main+0x80>
			  sprintf((char*)buff, "Error Rx \r\n");
 8001544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001548:	4925      	ldr	r1, [pc, #148]	; (80015e0 <main+0x110>)
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fd84 	bl	8006058 <siprintf>
		  }
	  }

	  teseoData = Parse_NMEA(receivedData);
 8001550:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8001554:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8001558:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f982 	bl	8001868 <Parse_NMEA>

	  char data[47];
	  sprintf(data, "Time: %.3f Lat: %.6f Lon:%.6f\r\n", teseoData.time, teseoData.latitude, teseoData.longitude);
 8001564:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8001568:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffc2 	bl	80004f8 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
 8001578:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800157c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffb8 	bl	80004f8 <__aeabi_f2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8001590:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffae 	bl	80004f8 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4638      	mov	r0, r7
 80015a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a6:	e9cd 4500 	strd	r4, r5, [sp]
 80015aa:	4642      	mov	r2, r8
 80015ac:	464b      	mov	r3, r9
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <main+0x114>)
 80015b0:	f004 fd52 	bl	8006058 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof data, HAL_MAX_DELAY);
 80015b4:	4639      	mov	r1, r7
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	222f      	movs	r2, #47	; 0x2f
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <main+0x118>)
 80015be:	f003 f804 	bl	80045ca <HAL_UART_Transmit>
	  printf("%s", data);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <main+0x11c>)
 80015c8:	f004 fd2a 	bl	8006020 <iprintf>
	  HAL_Delay(500);
 80015cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d0:	f000 fc6c 	bl	8001eac <HAL_Delay>
  {
 80015d4:	e78e      	b.n	80014f4 <main+0x24>
 80015d6:	bf00      	nop
 80015d8:	200001fc 	.word	0x200001fc
 80015dc:	0800a570 	.word	0x0800a570
 80015e0:	0800a588 	.word	0x0800a588
 80015e4:	0800a594 	.word	0x0800a594
 80015e8:	20000248 	.word	0x20000248
 80015ec:	0800a5b4 	.word	0x0800a5b4

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09a      	sub	sp, #104	; 0x68
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2248      	movs	r2, #72	; 0x48
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fe9e 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001616:	f001 fc07 	bl	8002e28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff ff2a 	bl	8001474 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <SystemClock_Config+0xb0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <SystemClock_Config+0xb0>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <SystemClock_Config+0xb0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800163c:	2324      	movs	r3, #36	; 0x24
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001640:	2381      	movs	r3, #129	; 0x81
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001648:	2300      	movs	r3, #0
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800164c:	2360      	movs	r3, #96	; 0x60
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001650:	2300      	movs	r3, #0
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fecf 	bl	80033fc <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001664:	f000 f9d2 	bl	8001a0c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001668:	236f      	movs	r3, #111	; 0x6f
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f002 fa53 	bl	8003b34 <HAL_RCC_ClockConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001694:	f000 f9ba 	bl	8001a0c <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3768      	adds	r7, #104	; 0x68
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58000400 	.word	0x58000400

080016a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_I2C1_Init+0x74>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <MX_I2C1_Init+0x78>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b0:	f640 6214 	movw	r2, #3604	; 0xe14
 80016b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_I2C1_Init+0x74>)
 80016be:	2201      	movs	r2, #1
 80016c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_I2C1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_I2C1_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_I2C1_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <MX_I2C1_Init+0x74>)
 80016e2:	f000 fe49 	bl	8002378 <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016ec:	f000 f98e 	bl	8001a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <MX_I2C1_Init+0x74>)
 80016f4:	f001 fb02 	bl	8002cfc <HAL_I2CEx_ConfigAnalogFilter>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80016fe:	f000 f985 	bl	8001a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001702:	2100      	movs	r1, #0
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_I2C1_Init+0x74>)
 8001706:	f001 fb43 	bl	8002d90 <HAL_I2CEx_ConfigDigitalFilter>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001710:	f000 f97c 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200001fc 	.word	0x200001fc
 800171c:	40005400 	.word	0x40005400

08001720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001726:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <MX_USART2_UART_Init+0x94>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800176a:	f002 fede 	bl	800452a <HAL_UART_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001774:	f000 f94a 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800177c:	f003 fcee 	bl	800515c <HAL_UARTEx_SetTxFifoThreshold>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001786:	f000 f941 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800178e:	f003 fd23 	bl	80051d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001798:	f000 f938 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_USART2_UART_Init+0x90>)
 800179e:	f003 fca5 	bl	80050ec <HAL_UARTEx_DisableFifoMode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f000 f930 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000248 	.word	0x20000248
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fe6e 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2004      	movs	r0, #4
 80017c4:	f7ff fe6b 	bl	800149e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff fe68 	bl	800149e <LL_AHB2_GRP1_EnableClock>

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <DDM_To_DD>:

/* USER CODE BEGIN 4 */
float DDM_To_DD(float ddm) {
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    float degree = floor(ddm/100);
 80017dc:	4920      	ldr	r1, [pc, #128]	; (8001860 <DDM_To_DD+0x8c>)
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fbec 	bl	8000fbc <__aeabi_fdiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe86 	bl	80004f8 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f008 fe30 	bl	800a458 <floor>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9ca 	bl	8000b98 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	617b      	str	r3, [r7, #20]
    float minute = ddm - ((degree * 100));
 8001808:	4915      	ldr	r1, [pc, #84]	; (8001860 <DDM_To_DD+0x8c>)
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff fb22 	bl	8000e54 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fa13 	bl	8000c40 <__aeabi_fsub>
 800181a:	4603      	mov	r3, r0
 800181c:	613b      	str	r3, [r7, #16]

    float dd = degree + minute / 60.0;
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7fe fe6a 	bl	80004f8 <__aeabi_f2d>
 8001824:	4604      	mov	r4, r0
 8001826:	460d      	mov	r5, r1
 8001828:	6938      	ldr	r0, [r7, #16]
 800182a:	f7fe fe65 	bl	80004f8 <__aeabi_f2d>
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <DDM_To_DD+0x90>)
 8001834:	f7fe ffe2 	bl	80007fc <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4620      	mov	r0, r4
 800183e:	4629      	mov	r1, r5
 8001840:	f7fe fcfc 	bl	800023c <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f9a4 	bl	8000b98 <__aeabi_d2f>
 8001850:	4603      	mov	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]

    return dd;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bdb0      	pop	{r4, r5, r7, pc}
 800185e:	bf00      	nop
 8001860:	42c80000 	.word	0x42c80000
 8001864:	404e0000 	.word	0x404e0000

08001868 <Parse_NMEA>:

struct GPS_Data_t Parse_NMEA(uint8_t* receivedData) {
 8001868:	b580      	push	{r7, lr}
 800186a:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800186e:	af02      	add	r7, sp, #8
 8001870:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001874:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8001878:	6018      	str	r0, [r3, #0]
 800187a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800187e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001882:	6019      	str	r1, [r3, #0]
	char *desiredNMEA = "GPGGA";
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <Parse_NMEA+0x13c>)
 8001886:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
	char filteredMessage[512];
	char *ptr;

	struct GPS_Data_t data;

	strcpy(stringData, (char*)receivedData);
 800188a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800188e:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001892:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4610      	mov	r0, r2
 800189a:	f004 fc6c 	bl	8006176 <strcpy>
	ptr = strstr(stringData, desiredNMEA);
 800189e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80018a2:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fc6d 	bl	8006186 <strstr>
 80018ac:	f8c7 0618 	str.w	r0, [r7, #1560]	; 0x618

	int position = ptr - stringData;
 80018b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80018b4:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	int i = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

	while(stringData[position] != '\n') {
 80018c4:	e01a      	b.n	80018fc <Parse_NMEA+0x94>
		filteredMessage[i] = stringData[position];
 80018c6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80018ca:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 80018ce:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80018d2:	4413      	add	r3, r2
 80018d4:	7819      	ldrb	r1, [r3, #0]
 80018d6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80018da:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 80018de:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80018e2:	4413      	add	r3, r2
 80018e4:	460a      	mov	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
		i++;
 80018e8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80018ec:	3301      	adds	r3, #1
 80018ee:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
		position++;
 80018f2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80018f6:	3301      	adds	r3, #1
 80018f8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	while(stringData[position] != '\n') {
 80018fc:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001900:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8001904:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b0a      	cmp	r3, #10
 800190e:	d1da      	bne.n	80018c6 <Parse_NMEA+0x5e>
	}

	printf("GPGGA: %s\r\n", filteredMessage);
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4619      	mov	r1, r3
 8001916:	4824      	ldr	r0, [pc, #144]	; (80019a8 <Parse_NMEA+0x140>)
 8001918:	f004 fb82 	bl	8006020 <iprintf>

	sscanf(filteredMessage, "GPGGA,%f,%f,S,%f,E,", &data.time, &data.latitude, &data.longitude);
 800191c:	f107 010c 	add.w	r1, r7, #12
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	f103 0208 	add.w	r2, r3, #8
 8001928:	f107 0018 	add.w	r0, r7, #24
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	3304      	adds	r3, #4
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	460b      	mov	r3, r1
 8001936:	491d      	ldr	r1, [pc, #116]	; (80019ac <Parse_NMEA+0x144>)
 8001938:	f004 fbae 	bl	8006098 <siscanf>

	data.longitude = DDM_To_DD(data.longitude);
 800193c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001940:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff44 	bl	80017d4 <DDM_To_DD>
 800194c:	4602      	mov	r2, r0
 800194e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001952:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001956:	605a      	str	r2, [r3, #4]
	data.latitude = -1 * DDM_To_DD(data.latitude);
 8001958:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800195c:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff36 	bl	80017d4 <DDM_To_DD>
 8001968:	4603      	mov	r3, r0
 800196a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800196e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001972:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001976:	601a      	str	r2, [r3, #0]

	return data;
 8001978:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800197c:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001986:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 800198a:	460b      	mov	r3, r1
 800198c:	ca07      	ldmia	r2, {r0, r1, r2}
 800198e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001992:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001996:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	f507 67c5 	add.w	r7, r7, #1576	; 0x628
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	0800a5b8 	.word	0x0800a5b8
 80019a8:	0800a5c0 	.word	0x0800a5c0
 80019ac:	0800a5cc 	.word	0x0800a5cc

080019b0 <__io_putchar>:

int __io_putchar(int ch) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80019b8:	1d39      	adds	r1, r7, #4
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	2201      	movs	r2, #1
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <__io_putchar+0x20>)
 80019c2:	f002 fe02 	bl	80045ca <HAL_UART_Transmit>
	return ch;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000248 	.word	0x20000248

080019d4 <__io_getchar>:

int __io_getchar(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	int ch = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]

	while(!__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 80019de:	bf00      	nop
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <__io_getchar+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d008      	beq.n	8001a00 <__io_getchar+0x2c>
		HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, 0xFFF);
 80019ee:	1d39      	adds	r1, r7, #4
 80019f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019f4:	2201      	movs	r2, #1
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <__io_getchar+0x34>)
 80019f8:	f002 fe7d 	bl	80046f6 <HAL_UART_Receive>
		return ch;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	e7ff      	b.n	8001a00 <__io_getchar+0x2c>
	}
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000248 	.word	0x20000248

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>

08001a16 <LL_AHB2_GRP1_EnableClock>:
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4013      	ands	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4013      	ands	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fc4b 	bl	8005340 <memset>
  if(hi2c->Instance==I2C1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_I2C_MspInit+0x84>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d125      	bne.n	8001b00 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001abc:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fbf6 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ace:	f7ff ff9d 	bl	8001a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f7ff ff9f 	bl	8001a16 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001ad8:	23c0      	movs	r3, #192	; 0xc0
 8001ada:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001adc:	2312      	movs	r3, #18
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_I2C_MspInit+0x88>)
 8001af4:	f000 fae0 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001afc:	f7ff ffa3 	bl	8001a46 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3758      	adds	r7, #88	; 0x58
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	48000400 	.word	0x48000400

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b096      	sub	sp, #88	; 0x58
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2238      	movs	r2, #56	; 0x38
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fc05 	bl	8005340 <memset>
  if(huart->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x88>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d126      	bne.n	8001b8e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b48:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fbb0 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b5a:	f7ff ff57 	bl	8001a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b62:	f7ff ff70 	bl	8001a46 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff ff55 	bl	8001a16 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f000 fa95 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3758      	adds	r7, #88	; 0x58
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40004400 	.word	0x40004400

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f947 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
	return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c02:	f003 fb73 	bl	80052ec <__errno>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2216      	movs	r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_exit>:

void _exit (int status)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe7 	bl	8001bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c2a:	e7fe      	b.n	8001c2a <_exit+0x12>

08001c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e00a      	b.n	8001c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c3e:	f7ff fec9 	bl	80019d4 <__io_getchar>
 8001c42:	4601      	mov	r1, r0
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf0      	blt.n	8001c3e <_read+0x12>
	}

return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e009      	b.n	8001c8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe95 	bl	80019b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf1      	blt.n	8001c78 <_write+0x12>
	}
	return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:

int _close(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc4:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f003 fadc 	bl	80052ec <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20008000 	.word	0x20008000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	200002d8 	.word	0x200002d8
 8001d68:	200002f0 	.word	0x200002f0

08001d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d70:	f7ff fb7a 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <LoopForever+0xe>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	; (8001db8 <LoopForever+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d9a:	f003 faad 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7ff fb97 	bl	80014d0 <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   r0, =_estack
 8001da4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001db0:	0800aba4 	.word	0x0800aba4
  ldr r2, =_sbss
 8001db4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001db8:	200002f0 	.word	0x200002f0

08001dbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f000 f942 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dd0:	f002 f892 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_Init+0x3c>)
 8001dd8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f810 	bl	8001e00 <HAL_InitTick>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	e001      	b.n	8001df0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dec:	f7ff fe43 	bl	8001a76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_InitTick+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d024      	beq.n	8001e5e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e14:	f002 f870 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_InitTick+0x6c>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f936 	bl	800209e <HAL_SYSTICK_Config>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	d809      	bhi.n	8001e52 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e46:	f000 f910 	bl	800206a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_InitTick+0x70>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e007      	b.n	8001e62 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e004      	b.n	8001e62 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e001      	b.n	8001e62 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_IncTick+0x1c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_IncTick+0x20>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_IncTick+0x20>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000008 	.word	0x20000008
 8001e94:	200002dc 	.word	0x200002dc

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_GetTick+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	200002dc 	.word	0x200002dc

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffe0 	bl	8001e98 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f7ff ff90 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff49 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff60 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff92 	bl	8001fac <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff61 	bl	8001f58 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb2 	bl	8002010 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c6:	e140      	b.n	800234a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8132 	beq.w	8002344 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 808c 	beq.w	8002344 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x1bc>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a44      	ldr	r2, [pc, #272]	; (800236c <HAL_GPIO_Init+0x2b4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x1b8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a43      	ldr	r2, [pc, #268]	; (8002370 <HAL_GPIO_Init+0x2b8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x1b4>
 8002268:	2302      	movs	r3, #2
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 800226c:	2307      	movs	r3, #7
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x1be>
 8002274:	2300      	movs	r3, #0
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002286:	4938      	ldr	r1, [pc, #224]	; (8002368 <HAL_GPIO_Init+0x2b0>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b8:	4a2e      	ldr	r2, [pc, #184]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_GPIO_Init+0x2bc>)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f aeb7 	bne.w	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	48000400 	.word	0x48000400
 8002370:	48000800 	.word	0x48000800
 8002374:	58000800 	.word	0x58000800

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e081      	b.n	800248e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fb70 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e006      	b.n	8002400 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d104      	bne.n	8002412 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69d9      	ldr	r1, [r3, #28]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1a      	ldr	r2, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
 80024a8:	4613      	mov	r3, r2
 80024aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	f040 80db 	bne.w	8002670 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2C_Master_Receive+0x30>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0d4      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d0:	f7ff fce2 	bl	8001e98 <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2319      	movs	r3, #25
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f9f8 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0bf      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2222      	movs	r2, #34	; 0x22
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2210      	movs	r2, #16
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	893a      	ldrh	r2, [r7, #8]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2bff      	cmp	r3, #255	; 0xff
 8002522:	d90e      	bls.n	8002542 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	b2da      	uxtb	r2, r3
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_I2C_Master_Receive+0x1e4>)
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fbae 	bl	8002c9c <I2C_TransferConfig>
 8002540:	e06d      	b.n	800261e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	b2da      	uxtb	r2, r3
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_I2C_Master_Receive+0x1e4>)
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fb9d 	bl	8002c9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002562:	e05c      	b.n	800261e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	6a39      	ldr	r1, [r7, #32]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa31 	bl	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e07c      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d034      	beq.n	800261e <HAL_I2C_Master_Receive+0x186>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d130      	bne.n	800261e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f986 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e04d      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2bff      	cmp	r3, #255	; 0xff
 80025de:	d90e      	bls.n	80025fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb50 	bl	8002c9c <I2C_TransferConfig>
 80025fc:	e00f      	b.n	800261e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	8979      	ldrh	r1, [r7, #10]
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fb3f 	bl	8002c9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d19d      	bne.n	8002564 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6a39      	ldr	r1, [r7, #32]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f993 	bl	8002958 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e01a      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2220      	movs	r2, #32
 8002642:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_I2C_Master_Receive+0x1e8>)
 8002650:	400b      	ands	r3, r1
 8002652:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	80002400 	.word	0x80002400
 8002680:	fe00e800 	.word	0xfe00e800

08002684 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	460b      	mov	r3, r1
 8002692:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	f040 80f1 	bne.w	8002888 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	e0e7      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_I2C_IsDeviceReady+0x44>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e0e0      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_IsDeviceReady+0x72>
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f4:	e004      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x7c>
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002706:	f7ff fbc7 	bl	8001e98 <HAL_GetTick>
 800270a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b10      	cmp	r3, #16
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002738:	e034      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002740:	d01a      	beq.n	8002778 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff fba9 	bl	8001e98 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <HAL_I2C_IsDeviceReady+0xd4>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10f      	bne.n	8002778 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e088      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_I2C_IsDeviceReady+0x12c>
 80027aa:	7fbb      	ldrb	r3, [r7, #30]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0c4      	beq.n	800273a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d01a      	beq.n	80027f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f885 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e058      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e04a      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2120      	movs	r1, #32
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f86a 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e03d      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2220      	movs	r2, #32
 800281c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d118      	bne.n	8002858 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002834:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	2120      	movs	r1, #32
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f849 	bl	80028d8 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e01c      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2220      	movs	r2, #32
 8002856:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	f63f af3b 	bhi.w	80026de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d103      	bne.n	80028b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d007      	beq.n	80028ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	619a      	str	r2, [r3, #24]
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	e022      	b.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f0:	d01e      	beq.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fad1 	bl	8001e98 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00f      	b.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0cd      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e028      	b.n	80029b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8aa 	bl	8002ac4 <I2C_IsErrorOccurred>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e026      	b.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7ff fa8d 	bl	8001e98 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	d302      	bcc.n	8002990 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d113      	bne.n	80029b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d1cf      	bne.n	8002966 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029dc:	e064      	b.n	8002aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f86e 	bl	8002ac4 <I2C_IsErrorOccurred>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e062      	b.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d138      	bne.n	8002a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d105      	bne.n	8002a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e04e      	b.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d107      	bne.n	8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2204      	movs	r2, #4
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
 8002a36:	e002      	b.n	8002a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2220      	movs	r2, #32
 8002a44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff fa11 	bl	8001e98 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e007      	b.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d193      	bne.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fe00e800 	.word	0xfe00e800

08002ac4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d075      	beq.n	8002bdc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002af8:	e056      	b.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d052      	beq.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7ff f9c9 	bl	8001e98 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_IsErrorOccurred+0x54>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d147      	bne.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3a:	d12e      	bne.n	8002b9a <I2C_IsErrorOccurred+0xd6>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b42:	d02a      	beq.n	8002b9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d027      	beq.n	8002b9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b58:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b5a:	f7ff f99d 	bl	8001e98 <HAL_GetTick>
 8002b5e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b60:	e01b      	b.n	8002b9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b62:	f7ff f999 	bl	8001e98 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b19      	cmp	r3, #25
 8002b6e:	d914      	bls.n	8002b9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d1dc      	bne.n	8002b62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d003      	beq.n	8002bbe <I2C_IsErrorOccurred+0xfa>
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d09d      	beq.n	8002afa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01c      	beq.n	8002c8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fe1d 	bl	8002892 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <I2C_IsErrorOccurred+0x1d4>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fe00e800 	.word	0xfe00e800

08002c9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	4613      	mov	r3, r2
 8002cac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cb4:	7a7b      	ldrb	r3, [r7, #9]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cbc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <I2C_TransferConfig+0x5c>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	ea02 0103 	and.w	r1, r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	03ff63ff 	.word	0x03ff63ff

08002cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d138      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e032      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d139      	bne.n	8002e1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e033      	b.n	8002e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002de2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	58000400 	.word	0x58000400

08002e44 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <LL_PWR_EnableBootC2+0x18>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <LL_PWR_EnableBootC2+0x18>)
 8002e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	58000400 	.word	0x58000400

08002e60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_PWREx_GetVoltageRange+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	58000400 	.word	0x58000400

08002e78 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002e80:	f7ff ffe0 	bl	8002e44 <LL_PWR_EnableBootC2>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <LL_PWR_IsEnabledBkUpAccess>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9c:	d101      	bne.n	8002ea2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	58000400 	.word	0x58000400

08002eb0 <LL_RCC_HSE_EnableTcxo>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_HSE_DisableTcxo>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efa:	d101      	bne.n	8002f00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <LL_RCC_HSE_Enable>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_HSE_Disable>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <LL_RCC_HSE_IsReady>:
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f54:	d101      	bne.n	8002f5a <LL_RCC_HSE_IsReady+0x18>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <LL_RCC_HSE_IsReady+0x1a>
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_HSI_Enable>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_HSI_Disable>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_HSI_IsReady>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d101      	bne.n	8002fb4 <LL_RCC_HSI_IsReady+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_RCC_HSI_IsReady+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_HSI_SetCalibTrimming>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d101      	bne.n	8002ffe <LL_RCC_LSE_IsReady+0x18>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_RCC_LSE_IsReady+0x1a>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d101      	bne.n	8003060 <LL_RCC_LSI_IsReady+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_RCC_LSI_IsReady+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d101      	bne.n	80030b8 <LL_RCC_MSI_IsReady+0x16>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <LL_RCC_MSI_IsReady+0x18>
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d101      	bne.n	80030d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031d4:	f023 020f 	bic.w	r2, r3, #15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800324a:	4618      	mov	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e2:	d101      	bne.n	80032e8 <LL_RCC_PLL_IsReady+0x18>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_RCC_PLL_IsReady+0x1a>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0303 	and.w	r3, r3, #3
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335e:	d101      	bne.n	8003364 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003376:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003382:	d101      	bne.n	8003388 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d101      	bne.n	80033ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c8:	d101      	bne.n	80033ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ea:	d101      	bne.n	80033f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e38b      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340e:	f7ff fea6 	bl	800315e <LL_RCC_GetSysClkSource>
 8003412:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003414:	f7ff ff8f 	bl	8003336 <LL_RCC_PLL_GetMainSource>
 8003418:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80c9 	beq.w	80035ba <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x3e>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d17b      	bne.n	800352c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d178      	bne.n	800352c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800343a:	f7ff fe32 	bl	80030a2 <LL_RCC_MSI_IsReady>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x54>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e36a      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x72>
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	e006      	b.n	800347c <HAL_RCC_OscConfig+0x80>
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	4293      	cmp	r3, r2
 800347e:	d222      	bcs.n	80034c6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fd6f 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e348      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349e:	f043 0308 	orr.w	r3, r3, #8
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fe26 	bl	8003110 <LL_RCC_MSI_SetCalibTrimming>
 80034c4:	e021      	b.n	800350a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe0d 	bl	8003110 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fd34 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e30d      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800350a:	f000 fcf5 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 800350e:	4603      	mov	r3, r0
 8003510:	4aa1      	ldr	r2, [pc, #644]	; (8003798 <HAL_RCC_OscConfig+0x39c>)
 8003512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003514:	4ba1      	ldr	r3, [pc, #644]	; (800379c <HAL_RCC_OscConfig+0x3a0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fc71 	bl	8001e00 <HAL_InitTick>
 800351e:	4603      	mov	r3, r0
 8003520:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d047      	beq.n	80035b8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	e2fc      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02c      	beq.n	800358e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003534:	f7ff fd99 	bl	800306a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003538:	f7fe fcae 	bl	8001e98 <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003540:	f7fe fcaa 	bl	8001e98 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e2e9      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003552:	f7ff fda6 	bl	80030a2 <LL_RCC_MSI_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f1      	beq.n	8003540 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fdc2 	bl	8003110 <LL_RCC_MSI_SetCalibTrimming>
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800358e:	f7ff fd7a 	bl	8003086 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003592:	f7fe fc81 	bl	8001e98 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800359a:	f7fe fc7d 	bl	8001e98 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e2bc      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80035ac:	f7ff fd79 	bl	80030a2 <LL_RCC_MSI_IsReady>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f1      	bne.n	800359a <HAL_RCC_OscConfig+0x19e>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d05f      	beq.n	8003686 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1dc>
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d10d      	bne.n	80035ee <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d10a      	bne.n	80035ee <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	f7ff fcb3 	bl	8002f42 <LL_RCC_HSE_IsReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d050      	beq.n	8003684 <HAL_RCC_OscConfig+0x288>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d14c      	bne.n	8003684 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e29b      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0x218>
 800360e:	f7ff fc7c 	bl	8002f0a <LL_RCC_HSE_Enable>
 8003612:	e00d      	b.n	8003630 <HAL_RCC_OscConfig+0x234>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800361c:	d104      	bne.n	8003628 <HAL_RCC_OscConfig+0x22c>
 800361e:	f7ff fc47 	bl	8002eb0 <LL_RCC_HSE_EnableTcxo>
 8003622:	f7ff fc72 	bl	8002f0a <LL_RCC_HSE_Enable>
 8003626:	e003      	b.n	8003630 <HAL_RCC_OscConfig+0x234>
 8003628:	f7ff fc7d 	bl	8002f26 <LL_RCC_HSE_Disable>
 800362c:	f7ff fc4e 	bl	8002ecc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fc2e 	bl	8001e98 <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe fc2a 	bl	8001e98 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e269      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003652:	f7ff fc76 	bl	8002f42 <LL_RCC_HSE_IsReady>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f1      	beq.n	8003640 <HAL_RCC_OscConfig+0x244>
 800365c:	e013      	b.n	8003686 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe fc1b 	bl	8001e98 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003666:	f7fe fc17 	bl	8001e98 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	; 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e256      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003678:	f7ff fc63 	bl	8002f42 <LL_RCC_HSE_IsReady>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f1      	bne.n	8003666 <HAL_RCC_OscConfig+0x26a>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04b      	beq.n	800372a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x2a8>
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d113      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d110      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	f7ff fc7a 	bl	8002f9c <LL_RCC_HSI_IsReady>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x2be>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e235      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fc7d 	bl	8002fbe <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	e031      	b.n	800372a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d019      	beq.n	8003702 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ce:	f7ff fc49 	bl	8002f64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fe fbe1 	bl	8001e98 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fe fbdd 	bl	8001e98 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e21c      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80036ec:	f7ff fc56 	bl	8002f9c <LL_RCC_HSI_IsReady>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f1      	beq.n	80036da <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fc5f 	bl	8002fbe <LL_RCC_HSI_SetCalibTrimming>
 8003700:	e013      	b.n	800372a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	f7ff fc3d 	bl	8002f80 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe fbc7 	bl	8001e98 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fe fbc3 	bl	8001e98 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e202      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003720:	f7ff fc3c 	bl	8002f9c <LL_RCC_HSI_IsReady>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f1      	bne.n	800370e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d06f      	beq.n	8003816 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d057      	beq.n	80037ee <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	429a      	cmp	r2, r3
 8003754:	d036      	beq.n	80037c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1db      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8003778:	f7ff fc56 	bl	8003028 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800377c:	f7fe fb8c 	bl	8001e98 <HAL_GetTick>
 8003780:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003782:	e00d      	b.n	80037a0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fb88 	bl	8001e98 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b11      	cmp	r3, #17
 8003790:	d906      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e1c7      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
 8003796:	bf00      	nop
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80037a0:	f7ff fc52 	bl	8003048 <LL_RCC_LSI_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ec      	bne.n	8003784 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b2:	f023 0210 	bic.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c4:	f7ff fc20 	bl	8003008 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe fb66 	bl	8001e98 <HAL_GetTick>
 80037cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe fb62 	bl	8001e98 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b11      	cmp	r3, #17
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1a1      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80037e2:	f7ff fc31 	bl	8003048 <LL_RCC_LSI_IsReady>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f1      	beq.n	80037d0 <HAL_RCC_OscConfig+0x3d4>
 80037ec:	e013      	b.n	8003816 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ee:	f7ff fc1b 	bl	8003028 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe fb51 	bl	8001e98 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fb4d 	bl	8001e98 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b11      	cmp	r3, #17
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e18c      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800380c:	f7ff fc1c 	bl	8003048 <LL_RCC_LSI_IsReady>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f1      	bne.n	80037fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80d8 	beq.w	80039d4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003824:	f7ff fb32 	bl	8002e8c <LL_PWR_IsEnabledBkUpAccess>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d113      	bne.n	8003856 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800382e:	f7ff fafb 	bl	8002e28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe fb31 	bl	8001e98 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe fb2d 	bl	8001e98 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e16c      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800384c:	f7ff fb1e 	bl	8002e8c <LL_PWR_IsEnabledBkUpAccess>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f1      	beq.n	800383a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07b      	beq.n	8003956 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b85      	cmp	r3, #133	; 0x85
 8003864:	d003      	beq.n	800386e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d109      	bne.n	8003882 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fe fb09 	bl	8001e98 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fafb 	bl	8001e98 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e138      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80038b4:	f7ff fb97 	bl	8002fe6 <LL_RCC_LSE_IsReady>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ef      	beq.n	800389e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b81      	cmp	r3, #129	; 0x81
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b85      	cmp	r3, #133	; 0x85
 80038cc:	d121      	bne.n	8003912 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fae3 	bl	8001e98 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe fad5 	bl	8001e98 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e112      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ec      	beq.n	80038ea <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003910:	e060      	b.n	80039d4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fac1 	bl	8001e98 <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe fab3 	bl	8001e98 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0f0      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ec      	bne.n	800392e <HAL_RCC_OscConfig+0x532>
 8003954:	e03e      	b.n	80039d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fe fa9f 	bl	8001e98 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800395c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fe fa91 	bl	8001e98 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0ce      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ec      	bne.n	8003972 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe fa7e 	bl	8001e98 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fe fa70 	bl	8001e98 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0ad      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80039ca:	f7ff fb0c 	bl	8002fe6 <LL_RCC_LSE_IsReady>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ef      	bne.n	80039b4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a3 	beq.w	8003b24 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d076      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d14b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	f7ff fc62 	bl	80032b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fa52 	bl	8001e98 <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fa4e 	bl	8001e98 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b0a      	cmp	r3, #10
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e08d      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003a0a:	f7ff fc61 	bl	80032d0 <LL_RCC_PLL_IsReady>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f1      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <HAL_RCC_OscConfig+0x734>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a26:	4311      	orrs	r1, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a2c:	0212      	lsls	r2, r2, #8
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a40:	430a      	orrs	r2, r1
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4a:	f7ff fc25 	bl	8003298 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fa1b 	bl	8001e98 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7fe fa17 	bl	8001e98 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b0a      	cmp	r3, #10
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e056      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003a78:	f7ff fc2a 	bl	80032d0 <LL_RCC_PLL_IsReady>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f1      	beq.n	8003a66 <HAL_RCC_OscConfig+0x66a>
 8003a82:	e04f      	b.n	8003b24 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a84:	f7ff fc16 	bl	80032b4 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe f9f4 	bl	8001e98 <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe f9f0 	bl	8001e98 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b0a      	cmp	r3, #10
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e02f      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003ac6:	f7ff fc03 	bl	80032d0 <LL_RCC_PLL_IsReady>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f1      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x6b8>
 8003ad0:	e028      	b.n	8003b24 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e023      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 0203 	and.w	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d115      	bne.n	8003b20 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10e      	bne.n	8003b20 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	11c1808c 	.word	0x11c1808c

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e12c      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b98      	ldr	r3, [pc, #608]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d91b      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b95      	ldr	r3, [pc, #596]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4993      	ldr	r1, [pc, #588]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fe f997 	bl	8001e98 <HAL_GetTick>
 8003b6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b6e:	f7fe f993 	bl	8001e98 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e110      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b80:	4b8a      	ldr	r3, [pc, #552]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d1ef      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fae8 	bl	8003174 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe f978 	bl	8001e98 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bac:	f7fe f974 	bl	8001e98 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0f1      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003bbe:	f7ff fbc5 	bl	800334c <LL_RCC_IsActiveFlag_HPRE>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f1      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d016      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fade 	bl	800319a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bde:	f7fe f95b 	bl	8001e98 <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003be6:	f7fe f957 	bl	8001e98 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0d4      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bf8:	f7ff fbb9 	bl	800336e <LL_RCC_IsActiveFlag_C2HPRE>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f1      	beq.n	8003be6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fad6 	bl	80031c4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c18:	f7fe f93e 	bl	8001e98 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c20:	f7fe f93a 	bl	8001e98 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0b7      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c32:	f7ff fbae 	bl	8003392 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f1      	beq.n	8003c20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d016      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff facf 	bl	80031f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c52:	f7fe f921 	bl	8001e98 <HAL_GetTick>
 8003c56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c5a:	f7fe f91d 	bl	8001e98 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e09a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c6c:	f7ff fba3 	bl	80033b6 <LL_RCC_IsActiveFlag_PPRE1>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f1      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fac4 	bl	8003216 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c8e:	f7fe f903 	bl	8001e98 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c96:	f7fe f8ff 	bl	8001e98 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e07c      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ca8:	f7ff fb96 	bl	80033d8 <LL_RCC_IsActiveFlag_PPRE2>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f1      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d043      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003cc6:	f7ff f93c 	bl	8002f42 <LL_RCC_HSE_IsReady>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11e      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e066      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d106      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003cdc:	f7ff faf8 	bl	80032d0 <LL_RCC_PLL_IsReady>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e05b      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003cf2:	f7ff f9d6 	bl	80030a2 <LL_RCC_MSI_IsReady>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e050      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003d00:	f7ff f94c 	bl	8002f9c <LL_RCC_HSI_IsReady>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e049      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fa10 	bl	8003138 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fe f8be 	bl	8001e98 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe f8ba 	bl	8001e98 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e035      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	f7ff fa12 	bl	800315e <LL_RCC_GetSysClkSource>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d1ec      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d46:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d21b      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 0207 	bic.w	r2, r3, #7
 8003d5c:	4913      	ldr	r1, [pc, #76]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fe f898 	bl	8001e98 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d6c:	f7fe f894 	bl	8001e98 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e011      	b.n	8003da2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x278>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1ef      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d8c:	f000 f8b4 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_RCC_ClockConfig+0x27c>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCC_ClockConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f830 	bl	8001e00 <HAL_InitTick>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	58004000 	.word	0x58004000
 8003db0:	20000000 	.word	0x20000000
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc6:	f7ff f9ca 	bl	800315e <LL_RCC_GetSysClkSource>
 8003dca:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	f7ff fab3 	bl	8003336 <LL_RCC_PLL_GetMainSource>
 8003dd0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d139      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d136      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003de4:	f7ff f96d 	bl	80030c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d115      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x62>
 8003dee:	f7ff f968 	bl	80030c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_GetSysClockFreq+0x4e>
 8003df8:	f7ff f973 	bl	80030e2 <LL_RCC_MSI_GetRange>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	e005      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x5a>
 8003e06:	f7ff f977 	bl	80030f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_RCC_GetSysClockFreq+0x134>)
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	e014      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x8c>
 8003e1a:	f7ff f952 	bl	80030c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x7a>
 8003e24:	f7ff f95d 	bl	80030e2 <LL_RCC_MSI_GetRange>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x86>
 8003e32:	f7ff f961 	bl	80030f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003e36:	4603      	mov	r3, r0
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	4a2b      	ldr	r2, [pc, #172]	; (8003eec <HAL_RCC_GetSysClockFreq+0x134>)
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d115      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e50:	e012      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e00c      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e64:	f7ff f840 	bl	8002ee8 <LL_RCC_HSE_IsEnabledDiv2>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e001      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e76:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	f7ff f971 	bl	800315e <LL_RCC_GetSysClkSource>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d12f      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e82:	f7ff fa58 	bl	8003336 <LL_RCC_PLL_GetMainSource>
 8003e86:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0xde>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d003      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0xe4>
 8003e94:	e00d      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003e98:	60fb      	str	r3, [r7, #12]
        break;
 8003e9a:	e00d      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e9c:	f7ff f824 	bl	8002ee8 <LL_RCC_HSE_IsEnabledDiv2>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ea8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003eae:	60fb      	str	r3, [r7, #12]
        break;
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	60fb      	str	r3, [r7, #12]
        break;
 8003eb6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003eb8:	f7ff fa1b 	bl	80032f2 <LL_RCC_PLL_GetN>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	fb03 f402 	mul.w	r4, r3, r2
 8003ec4:	f7ff fa2c 	bl	8003320 <LL_RCC_PLL_GetDivider>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	3301      	adds	r3, #1
 8003ece:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ed2:	f7ff fa1a 	bl	800330a <LL_RCC_PLL_GetR>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	0f5b      	lsrs	r3, r3, #29
 8003eda:	3301      	adds	r3, #1
 8003edc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ee0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ee2:	697b      	ldr	r3, [r7, #20]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	0800a668 	.word	0x0800a668
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	01e84800 	.word	0x01e84800

08003ef8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b598      	push	{r3, r4, r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003efc:	f7ff ff5c 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003f00:	4604      	mov	r4, r0
 8003f02:	f7ff f99b 	bl	800323c <LL_RCC_GetAHBPrescaler>
 8003f06:	4603      	mov	r3, r0
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <HAL_RCC_GetHCLKFreq+0x24>)
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd98      	pop	{r3, r4, r7, pc}
 8003f1c:	0800a608 	.word	0x0800a608

08003f20 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f20:	b598      	push	{r3, r4, r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f24:	f7ff ffe8 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	f7ff f99f 	bl	800326c <LL_RCC_GetAPB1Prescaler>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	4a03      	ldr	r2, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd98      	pop	{r3, r4, r7, pc}
 8003f40:	0800a648 	.word	0x0800a648

08003f44 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b598      	push	{r3, r4, r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003f48:	f7ff ffd6 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	f7ff f998 	bl	8003282 <LL_RCC_GetAPB2Prescaler>
 8003f52:	4603      	mov	r3, r0
 8003f54:	0adb      	lsrs	r3, r3, #11
 8003f56:	4a03      	ldr	r2, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd98      	pop	{r3, r4, r7, pc}
 8003f64:	0800a648 	.word	0x0800a648

08003f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f80:	f7ff f967 	bl	8003252 <LL_RCC_GetAHB3Prescaler>
 8003f84:	4603      	mov	r3, r0
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0c9c      	lsrs	r4, r3, #18
 8003fa4:	f7fe ff5c 	bl	8002e60 <HAL_PWREx_GetVoltageRange>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4619      	mov	r1, r3
 8003fac:	4620      	mov	r0, r4
 8003fae:	f000 f80b 	bl	8003fc8 <RCC_SetFlashLatency>
 8003fb2:	4603      	mov	r3, r0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}
 8003fbc:	0800a668 	.word	0x0800a668
 8003fc0:	0800a608 	.word	0x0800a608
 8003fc4:	431bde83 	.word	0x431bde83

08003fc8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08e      	sub	sp, #56	; 0x38
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003fd2:	4a3a      	ldr	r2, [pc, #232]	; (80040bc <RCC_SetFlashLatency+0xf4>)
 8003fd4:	f107 0320 	add.w	r3, r7, #32
 8003fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fdc:	6018      	str	r0, [r3, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <RCC_SetFlashLatency+0xf8>)
 8003fe4:	f107 0318 	add.w	r3, r7, #24
 8003fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fec:	6018      	str	r0, [r3, #0]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003ff2:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <RCC_SetFlashLatency+0xfc>)
 8003ff4:	f107 030c 	add.w	r3, r7, #12
 8003ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ffe:	2300      	movs	r3, #0
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d11b      	bne.n	8004042 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800400a:	2300      	movs	r3, #0
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
 800400e:	e014      	b.n	800403a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	3338      	adds	r3, #56	; 0x38
 8004016:	443b      	add	r3, r7
 8004018:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4293      	cmp	r3, r2
 8004022:	d807      	bhi.n	8004034 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	3338      	adds	r3, #56	; 0x38
 800402a:	443b      	add	r3, r7
 800402c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004032:	e021      	b.n	8004078 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	3301      	adds	r3, #1
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2b02      	cmp	r3, #2
 800403e:	d9e7      	bls.n	8004010 <RCC_SetFlashLatency+0x48>
 8004040:	e01a      	b.n	8004078 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004042:	2300      	movs	r3, #0
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	e014      	b.n	8004072 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	3338      	adds	r3, #56	; 0x38
 800404e:	443b      	add	r3, r7
 8004050:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4293      	cmp	r3, r2
 800405a:	d807      	bhi.n	800406c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3338      	adds	r3, #56	; 0x38
 8004062:	443b      	add	r3, r7
 8004064:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800406a:	e005      	b.n	8004078 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	3301      	adds	r3, #1
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	2b02      	cmp	r3, #2
 8004076:	d9e7      	bls.n	8004048 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <RCC_SetFlashLatency+0x100>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 0207 	bic.w	r2, r3, #7
 8004080:	4911      	ldr	r1, [pc, #68]	; (80040c8 <RCC_SetFlashLatency+0x100>)
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004088:	f7fd ff06 	bl	8001e98 <HAL_GetTick>
 800408c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800408e:	e008      	b.n	80040a2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004090:	f7fd ff02 	bl	8001e98 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e007      	b.n	80040b2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <RCC_SetFlashLatency+0x100>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1ef      	bne.n	8004090 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3738      	adds	r7, #56	; 0x38
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	0800a5e0 	.word	0x0800a5e0
 80040c0:	0800a5e8 	.word	0x0800a5e8
 80040c4:	0800a5f0 	.word	0x0800a5f0
 80040c8:	58004000 	.word	0x58004000

080040cc <LL_RCC_LSE_IsReady>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d101      	bne.n	80040e4 <LL_RCC_LSE_IsReady+0x18>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <LL_RCC_LSE_IsReady+0x1a>
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_SetUSARTClockSource>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	43db      	mvns	r3, r3
 8004104:	401a      	ands	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <LL_RCC_SetI2SClockSource>:
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <LL_RCC_SetLPUARTClockSource>:
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800415c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <LL_RCC_SetI2CClockSource>:
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800418a:	43db      	mvns	r3, r3
 800418c:	401a      	ands	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <LL_RCC_SetLPTIMClockSource>:
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	43db      	mvns	r3, r3
 80041c2:	401a      	ands	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <LL_RCC_SetRNGClockSource>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <LL_RCC_SetADCClockSource>:
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800420e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800421a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <LL_RCC_SetRTCClockSource>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_RCC_GetRTCClockSource>:
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <LL_RCC_ForceBackupDomainReset>:
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80042c0:	2300      	movs	r3, #0
 80042c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d058      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80042d4:	f7fe fda8 	bl	8002e28 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d8:	f7fd fdde 	bl	8001e98 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e0:	f7fd fdda 	bl	8001e98 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d902      	bls.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	74fb      	strb	r3, [r7, #19]
        break;
 80042f2:	e006      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80042f4:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d13c      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004308:	f7ff ffa7 	bl	800425a <LL_RCC_GetRTCClockSource>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	429a      	cmp	r2, r3
 8004314:	d00f      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004324:	f7ff ffa5 	bl	8004272 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004328:	f7ff ffb3 	bl	8004292 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800432c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d014      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fdaa 	bl	8001e98 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fda6 	bl	8001e98 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d902      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	74fb      	strb	r3, [r7, #19]
            break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004360:	f7ff feb4 	bl	80040cc <LL_RCC_LSE_IsReady>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d1ee      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff5b 	bl	8004230 <LL_RCC_SetRTCClockSource>
 800437a:	e004      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
 8004380:	e001      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fea9 	bl	80040ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fe9e 	bl	80040ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fec0 	bl	8004148 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fee6 	bl	80041aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fedb 	bl	80041aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fed0 	bl	80041aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fea9 	bl	8004172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fe9e 	bl	8004172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fe93 	bl	8004172 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d011      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fe5e 	bl	800411e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d107      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d010      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fea5 	bl	80041dc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fea3 	bl	8004206 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c8:	d107      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80044da:	7cbb      	ldrb	r3, [r7, #18]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	58000400 	.word	0x58000400

080044e8 <LL_RCC_GetUSARTClockSource>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	4313      	orrs	r3, r2
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <LL_RCC_GetLPUARTClockSource>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004518:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4013      	ands	r3, r2
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e042      	b.n	80045c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fade 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f995 	bl	800489c <UART_SetConfig>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e022      	b.n	80045c2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fbfd 	bl	8004d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004598:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fc83 	bl	8004ec6 <UART_CheckIdleState>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b08a      	sub	sp, #40	; 0x28
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	f040 8083 	bne.w	80046ec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_UART_Transmit+0x28>
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07b      	b.n	80046ee <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Transmit+0x3a>
 8004600:	2302      	movs	r3, #2
 8004602:	e074      	b.n	80046ee <HAL_UART_Transmit+0x124>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2221      	movs	r2, #33	; 0x21
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461c:	f7fd fc3c 	bl	8001e98 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463a:	d108      	bne.n	800464e <HAL_UART_Transmit+0x84>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e003      	b.n	8004656 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800465e:	e02c      	b.n	80046ba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2200      	movs	r2, #0
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fc76 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e039      	b.n	80046ee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	3302      	adds	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e007      	b.n	80046a8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1cc      	bne.n	8004660 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2140      	movs	r1, #64	; 0x40
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc43 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e006      	b.n	80046ee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e000      	b.n	80046ee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b08a      	sub	sp, #40	; 0x28
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 80c0 	bne.w	8004892 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_Receive+0x28>
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0b8      	b.n	8004894 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_UART_Receive+0x3a>
 800472c:	2302      	movs	r3, #2
 800472e:	e0b1      	b.n	8004894 <HAL_UART_Receive+0x19e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2222      	movs	r2, #34	; 0x22
 8004744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474e:	f7fd fba3 	bl	8001e98 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	d10e      	bne.n	800478c <HAL_UART_Receive+0x96>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_Receive+0x8c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f240 12ff 	movw	r2, #511	; 0x1ff
 800477c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004780:	e02d      	b.n	80047de <HAL_UART_Receive+0xe8>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	22ff      	movs	r2, #255	; 0xff
 8004786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800478a:	e028      	b.n	80047de <HAL_UART_Receive+0xe8>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10d      	bne.n	80047b0 <HAL_UART_Receive+0xba>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_UART_Receive+0xb0>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	22ff      	movs	r2, #255	; 0xff
 80047a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047a4:	e01b      	b.n	80047de <HAL_UART_Receive+0xe8>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	227f      	movs	r2, #127	; 0x7f
 80047aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047ae:	e016      	b.n	80047de <HAL_UART_Receive+0xe8>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b8:	d10d      	bne.n	80047d6 <HAL_UART_Receive+0xe0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Receive+0xd6>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	227f      	movs	r2, #127	; 0x7f
 80047c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047ca:	e008      	b.n	80047de <HAL_UART_Receive+0xe8>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	223f      	movs	r2, #63	; 0x3f
 80047d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047d4:	e003      	b.n	80047de <HAL_UART_Receive+0xe8>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d108      	bne.n	8004802 <HAL_UART_Receive+0x10c>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e003      	b.n	800480a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004812:	e032      	b.n	800487a <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	2120      	movs	r1, #32
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fb9c 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e032      	b.n	8004894 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10c      	bne.n	800484e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b29a      	uxth	r2, r3
 800483c:	8a7b      	ldrh	r3, [r7, #18]
 800483e:	4013      	ands	r3, r2
 8004840:	b29a      	uxth	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e00c      	b.n	8004868 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8a7b      	ldrh	r3, [r7, #18]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4013      	ands	r3, r2
 800485c:	b2da      	uxtb	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1c6      	bne.n	8004814 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a0:	b08c      	sub	sp, #48	; 0x30
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b94      	ldr	r3, [pc, #592]	; (8004b1c <UART_SetConfig+0x280>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a89      	ldr	r2, [pc, #548]	; (8004b20 <UART_SetConfig+0x284>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004904:	4313      	orrs	r3, r2
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004912:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800491c:	430b      	orrs	r3, r1
 800491e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f023 010f 	bic.w	r1, r3, #15
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7a      	ldr	r2, [pc, #488]	; (8004b24 <UART_SetConfig+0x288>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d127      	bne.n	8004990 <UART_SetConfig+0xf4>
 8004940:	2003      	movs	r0, #3
 8004942:	f7ff fdd1 	bl	80044e8 <LL_RCC_GetUSARTClockSource>
 8004946:	4603      	mov	r3, r0
 8004948:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800494c:	2b03      	cmp	r3, #3
 800494e:	d81b      	bhi.n	8004988 <UART_SetConfig+0xec>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0xbc>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	08004969 	.word	0x08004969
 800495c:	08004979 	.word	0x08004979
 8004960:	08004971 	.word	0x08004971
 8004964:	08004981 	.word	0x08004981
 8004968:	2301      	movs	r3, #1
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e080      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e07c      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e078      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e074      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e070      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a64      	ldr	r2, [pc, #400]	; (8004b28 <UART_SetConfig+0x28c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d138      	bne.n	8004a0c <UART_SetConfig+0x170>
 800499a:	200c      	movs	r0, #12
 800499c:	f7ff fda4 	bl	80044e8 <LL_RCC_GetUSARTClockSource>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d82c      	bhi.n	8004a04 <UART_SetConfig+0x168>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x114>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	08004a05 	.word	0x08004a05
 80049bc:	08004a05 	.word	0x08004a05
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a05 	.word	0x08004a05
 80049c8:	08004a05 	.word	0x08004a05
 80049cc:	08004a05 	.word	0x08004a05
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e042      	b.n	8004a72 <UART_SetConfig+0x1d6>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f2:	e03e      	b.n	8004a72 <UART_SetConfig+0x1d6>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e03a      	b.n	8004a72 <UART_SetConfig+0x1d6>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e036      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a0a:	e032      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a43      	ldr	r2, [pc, #268]	; (8004b20 <UART_SetConfig+0x284>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d12a      	bne.n	8004a6c <UART_SetConfig+0x1d0>
 8004a16:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004a1a:	f7ff fd77 	bl	800450c <LL_RCC_GetLPUARTClockSource>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a24:	d01a      	beq.n	8004a5c <UART_SetConfig+0x1c0>
 8004a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a2a:	d81b      	bhi.n	8004a64 <UART_SetConfig+0x1c8>
 8004a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a30:	d00c      	beq.n	8004a4c <UART_SetConfig+0x1b0>
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	d815      	bhi.n	8004a64 <UART_SetConfig+0x1c8>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <UART_SetConfig+0x1a8>
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d008      	beq.n	8004a54 <UART_SetConfig+0x1b8>
 8004a42:	e00f      	b.n	8004a64 <UART_SetConfig+0x1c8>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e012      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e00e      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e00a      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a62:	e006      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6a:	e002      	b.n	8004a72 <UART_SetConfig+0x1d6>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <UART_SetConfig+0x284>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 80a4 	bne.w	8004bc6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d823      	bhi.n	8004ace <UART_SetConfig+0x232>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0x1f0>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004acf 	.word	0x08004acf
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004abf 	.word	0x08004abf
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004acf 	.word	0x08004acf
 8004aa8:	08004acf 	.word	0x08004acf
 8004aac:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7ff fa36 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <UART_SetConfig+0x290>)
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004abc:	e00d      	b.n	8004ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7ff f97b 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004acc:	e005      	b.n	8004ada <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8137 	beq.w	8004d50 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <UART_SetConfig+0x294>)
 8004ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d305      	bcc.n	8004b12 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d910      	bls.n	8004b34 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b18:	e11a      	b.n	8004d50 <UART_SetConfig+0x4b4>
 8004b1a:	bf00      	nop
 8004b1c:	cfff69f3 	.word	0xcfff69f3
 8004b20:	40008000 	.word	0x40008000
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	0800a6a8 	.word	0x0800a6a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	2200      	movs	r2, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	4a8e      	ldr	r2, [pc, #568]	; (8004d7c <UART_SetConfig+0x4e0>)
 8004b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b56:	f7fc facd 	bl	80010f4 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	020b      	lsls	r3, r1, #8
 8004b6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b70:	0202      	lsls	r2, r0, #8
 8004b72:	6979      	ldr	r1, [r7, #20]
 8004b74:	6849      	ldr	r1, [r1, #4]
 8004b76:	0849      	lsrs	r1, r1, #1
 8004b78:	2000      	movs	r0, #0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	eb12 0804 	adds.w	r8, r2, r4
 8004b82:	eb43 0905 	adc.w	r9, r3, r5
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	469a      	mov	sl, r3
 8004b8e:	4693      	mov	fp, r2
 8004b90:	4652      	mov	r2, sl
 8004b92:	465b      	mov	r3, fp
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fc faac 	bl	80010f4 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004baa:	d308      	bcc.n	8004bbe <UART_SetConfig+0x322>
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb2:	d204      	bcs.n	8004bbe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	e0c8      	b.n	8004d50 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bc4:	e0c4      	b.n	8004d50 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d168      	bne.n	8004ca2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004bd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d828      	bhi.n	8004c2a <UART_SetConfig+0x38e>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x344>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c2b 	.word	0x08004c2b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7ff f98c 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0a:	e014      	b.n	8004c36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7ff f99a 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c12:	e010      	b.n	8004c36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7ff f8cd 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c20:	e009      	b.n	8004c36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c28:	e005      	b.n	8004c36 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8089 	beq.w	8004d50 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	4a4e      	ldr	r2, [pc, #312]	; (8004d7c <UART_SetConfig+0x4e0>)
 8004c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c50:	005a      	lsls	r2, r3, #1
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	441a      	add	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	2b0f      	cmp	r3, #15
 8004c6a:	d916      	bls.n	8004c9a <UART_SetConfig+0x3fe>
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c72:	d212      	bcs.n	8004c9a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f023 030f 	bic.w	r3, r3, #15
 8004c7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	8bfb      	ldrh	r3, [r7, #30]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	8bfa      	ldrh	r2, [r7, #30]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e05a      	b.n	8004d50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ca0:	e056      	b.n	8004d50 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d827      	bhi.n	8004cfa <UART_SetConfig+0x45e>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x414>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004ceb 	.word	0x08004ceb
 8004cc4:	08004cfb 	.word	0x08004cfb
 8004cc8:	08004cfb 	.word	0x08004cfb
 8004ccc:	08004cfb 	.word	0x08004cfb
 8004cd0:	08004cf3 	.word	0x08004cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7ff f924 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cda:	e014      	b.n	8004d06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cdc:	f7ff f932 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce2:	e010      	b.n	8004d06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce4:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <UART_SetConfig+0x4e4>)
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ce8:	e00d      	b.n	8004d06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cea:	f7ff f865 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf0:	e009      	b.n	8004d06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf8:	e005      	b.n	8004d06 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d04:	bf00      	nop
    }

    if (pclk != 0U)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d021      	beq.n	8004d50 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <UART_SetConfig+0x4e0>)
 8004d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	441a      	add	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d908      	bls.n	8004d4a <UART_SetConfig+0x4ae>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3e:	d204      	bcs.n	8004d4a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a3a      	ldr	r2, [r7, #32]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	e002      	b.n	8004d50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3730      	adds	r7, #48	; 0x30
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	0800a6a8 	.word	0x0800a6a8
 8004d80:	00f42400 	.word	0x00f42400

08004d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01a      	beq.n	8004e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e82:	d10a      	bne.n	8004e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af02      	add	r7, sp, #8
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed6:	f7fc ffdf 	bl	8001e98 <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d10e      	bne.n	8004f08 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f82f 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e025      	b.n	8004f54 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d10e      	bne.n	8004f34 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f819 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e00f      	b.n	8004f54 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b09c      	sub	sp, #112	; 0x70
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e0a9      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	f000 80a5 	beq.w	80050c2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fc ff8e 	bl	8001e98 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x32>
 8004f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d140      	bne.n	8005010 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fae:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fe2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e069      	b.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d051      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502c:	d149      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005036:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800504c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
 8005058:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800505c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	613b      	str	r3, [r7, #16]
   return(result);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	66bb      	str	r3, [r7, #104]	; 0x68
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800508a:	623a      	str	r2, [r7, #32]
 800508c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	69f9      	ldr	r1, [r7, #28]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	61bb      	str	r3, [r7, #24]
   return(result);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e010      	b.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	f43f af46 	beq.w	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3770      	adds	r7, #112	; 0x70
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_UARTEx_DisableFifoMode+0x16>
 80050fe:	2302      	movs	r3, #2
 8005100:	e027      	b.n	8005152 <HAL_UARTEx_DisableFifoMode+0x66>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2224      	movs	r2, #36	; 0x24
 800510e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e02d      	b.n	80051d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	; 0x24
 8005180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f84f 	bl	8005254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e02d      	b.n	800524c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	; 0x24
 80051fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f811 	bl	8005254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005274:	e031      	b.n	80052da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005276:	2308      	movs	r3, #8
 8005278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800527a:	2308      	movs	r3, #8
 800527c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0e5b      	lsrs	r3, r3, #25
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	0f5b      	lsrs	r3, r3, #29
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	7b3a      	ldrb	r2, [r7, #12]
 80052a2:	4910      	ldr	r1, [pc, #64]	; (80052e4 <UARTEx_SetNbDataToProcess+0x90>)
 80052a4:	5c8a      	ldrb	r2, [r1, r2]
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052aa:	7b3a      	ldrb	r2, [r7, #12]
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <UARTEx_SetNbDataToProcess+0x94>)
 80052ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	7b7a      	ldrb	r2, [r7, #13]
 80052c0:	4908      	ldr	r1, [pc, #32]	; (80052e4 <UARTEx_SetNbDataToProcess+0x90>)
 80052c2:	5c8a      	ldrb	r2, [r1, r2]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c8:	7b7a      	ldrb	r2, [r7, #13]
 80052ca:	4907      	ldr	r1, [pc, #28]	; (80052e8 <UARTEx_SetNbDataToProcess+0x94>)
 80052cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	0800a6c0 	.word	0x0800a6c0
 80052e8:	0800a6c8 	.word	0x0800a6c8

080052ec <__errno>:
 80052ec:	4b01      	ldr	r3, [pc, #4]	; (80052f4 <__errno+0x8>)
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4d0d      	ldr	r5, [pc, #52]	; (8005330 <__libc_init_array+0x38>)
 80052fc:	4c0d      	ldr	r4, [pc, #52]	; (8005334 <__libc_init_array+0x3c>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	2600      	movs	r6, #0
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	4d0b      	ldr	r5, [pc, #44]	; (8005338 <__libc_init_array+0x40>)
 800530a:	4c0c      	ldr	r4, [pc, #48]	; (800533c <__libc_init_array+0x44>)
 800530c:	f005 f924 	bl	800a558 <_init>
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	2600      	movs	r6, #0
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f855 3b04 	ldr.w	r3, [r5], #4
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	0800ab9c 	.word	0x0800ab9c
 8005334:	0800ab9c 	.word	0x0800ab9c
 8005338:	0800ab9c 	.word	0x0800ab9c
 800533c:	0800aba0 	.word	0x0800aba0

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <__cvt>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	461f      	mov	r7, r3
 800535a:	4614      	mov	r4, r2
 800535c:	bfb8      	it	lt
 800535e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005364:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005366:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800536a:	bfb6      	itet	lt
 800536c:	461f      	movlt	r7, r3
 800536e:	2300      	movge	r3, #0
 8005370:	232d      	movlt	r3, #45	; 0x2d
 8005372:	7013      	strb	r3, [r2, #0]
 8005374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005376:	f023 0820 	bic.w	r8, r3, #32
 800537a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800537e:	d005      	beq.n	800538c <__cvt+0x3c>
 8005380:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005384:	d100      	bne.n	8005388 <__cvt+0x38>
 8005386:	3501      	adds	r5, #1
 8005388:	2302      	movs	r3, #2
 800538a:	e000      	b.n	800538e <__cvt+0x3e>
 800538c:	2303      	movs	r3, #3
 800538e:	aa07      	add	r2, sp, #28
 8005390:	9204      	str	r2, [sp, #16]
 8005392:	aa06      	add	r2, sp, #24
 8005394:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005398:	e9cd 3500 	strd	r3, r5, [sp]
 800539c:	4622      	mov	r2, r4
 800539e:	463b      	mov	r3, r7
 80053a0:	f001 fe42 	bl	8007028 <_dtoa_r>
 80053a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053a8:	4606      	mov	r6, r0
 80053aa:	d102      	bne.n	80053b2 <__cvt+0x62>
 80053ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053ae:	07db      	lsls	r3, r3, #31
 80053b0:	d522      	bpl.n	80053f8 <__cvt+0xa8>
 80053b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053b6:	eb06 0905 	add.w	r9, r6, r5
 80053ba:	d110      	bne.n	80053de <__cvt+0x8e>
 80053bc:	7833      	ldrb	r3, [r6, #0]
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d10a      	bne.n	80053d8 <__cvt+0x88>
 80053c2:	2200      	movs	r2, #0
 80053c4:	2300      	movs	r3, #0
 80053c6:	4620      	mov	r0, r4
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fb fb55 	bl	8000a78 <__aeabi_dcmpeq>
 80053ce:	b918      	cbnz	r0, 80053d8 <__cvt+0x88>
 80053d0:	f1c5 0501 	rsb	r5, r5, #1
 80053d4:	f8ca 5000 	str.w	r5, [sl]
 80053d8:	f8da 3000 	ldr.w	r3, [sl]
 80053dc:	4499      	add	r9, r3
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4620      	mov	r0, r4
 80053e4:	4639      	mov	r1, r7
 80053e6:	f7fb fb47 	bl	8000a78 <__aeabi_dcmpeq>
 80053ea:	b108      	cbz	r0, 80053f0 <__cvt+0xa0>
 80053ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80053f0:	2230      	movs	r2, #48	; 0x30
 80053f2:	9b07      	ldr	r3, [sp, #28]
 80053f4:	454b      	cmp	r3, r9
 80053f6:	d307      	bcc.n	8005408 <__cvt+0xb8>
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053fc:	1b9b      	subs	r3, r3, r6
 80053fe:	4630      	mov	r0, r6
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	b008      	add	sp, #32
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	9107      	str	r1, [sp, #28]
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e7f0      	b.n	80053f2 <__cvt+0xa2>

08005410 <__exponent>:
 8005410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005412:	4603      	mov	r3, r0
 8005414:	2900      	cmp	r1, #0
 8005416:	bfb8      	it	lt
 8005418:	4249      	neglt	r1, r1
 800541a:	f803 2b02 	strb.w	r2, [r3], #2
 800541e:	bfb4      	ite	lt
 8005420:	222d      	movlt	r2, #45	; 0x2d
 8005422:	222b      	movge	r2, #43	; 0x2b
 8005424:	2909      	cmp	r1, #9
 8005426:	7042      	strb	r2, [r0, #1]
 8005428:	dd2a      	ble.n	8005480 <__exponent+0x70>
 800542a:	f10d 0407 	add.w	r4, sp, #7
 800542e:	46a4      	mov	ip, r4
 8005430:	270a      	movs	r7, #10
 8005432:	46a6      	mov	lr, r4
 8005434:	460a      	mov	r2, r1
 8005436:	fb91 f6f7 	sdiv	r6, r1, r7
 800543a:	fb07 1516 	mls	r5, r7, r6, r1
 800543e:	3530      	adds	r5, #48	; 0x30
 8005440:	2a63      	cmp	r2, #99	; 0x63
 8005442:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005446:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800544a:	4631      	mov	r1, r6
 800544c:	dcf1      	bgt.n	8005432 <__exponent+0x22>
 800544e:	3130      	adds	r1, #48	; 0x30
 8005450:	f1ae 0502 	sub.w	r5, lr, #2
 8005454:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005458:	1c44      	adds	r4, r0, #1
 800545a:	4629      	mov	r1, r5
 800545c:	4561      	cmp	r1, ip
 800545e:	d30a      	bcc.n	8005476 <__exponent+0x66>
 8005460:	f10d 0209 	add.w	r2, sp, #9
 8005464:	eba2 020e 	sub.w	r2, r2, lr
 8005468:	4565      	cmp	r5, ip
 800546a:	bf88      	it	hi
 800546c:	2200      	movhi	r2, #0
 800546e:	4413      	add	r3, r2
 8005470:	1a18      	subs	r0, r3, r0
 8005472:	b003      	add	sp, #12
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800547a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800547e:	e7ed      	b.n	800545c <__exponent+0x4c>
 8005480:	2330      	movs	r3, #48	; 0x30
 8005482:	3130      	adds	r1, #48	; 0x30
 8005484:	7083      	strb	r3, [r0, #2]
 8005486:	70c1      	strb	r1, [r0, #3]
 8005488:	1d03      	adds	r3, r0, #4
 800548a:	e7f1      	b.n	8005470 <__exponent+0x60>

0800548c <_printf_float>:
 800548c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005490:	b091      	sub	sp, #68	; 0x44
 8005492:	460c      	mov	r4, r1
 8005494:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005498:	4616      	mov	r6, r2
 800549a:	461f      	mov	r7, r3
 800549c:	4605      	mov	r5, r0
 800549e:	f003 f80b 	bl	80084b8 <_localeconv_r>
 80054a2:	6803      	ldr	r3, [r0, #0]
 80054a4:	9309      	str	r3, [sp, #36]	; 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fa fe6a 	bl	8000180 <strlen>
 80054ac:	2300      	movs	r3, #0
 80054ae:	930e      	str	r3, [sp, #56]	; 0x38
 80054b0:	f8d8 3000 	ldr.w	r3, [r8]
 80054b4:	900a      	str	r0, [sp, #40]	; 0x28
 80054b6:	3307      	adds	r3, #7
 80054b8:	f023 0307 	bic.w	r3, r3, #7
 80054bc:	f103 0208 	add.w	r2, r3, #8
 80054c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054c4:	f8d4 b000 	ldr.w	fp, [r4]
 80054c8:	f8c8 2000 	str.w	r2, [r8]
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054e0:	4b9c      	ldr	r3, [pc, #624]	; (8005754 <_printf_float+0x2c8>)
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7fb faf8 	bl	8000adc <__aeabi_dcmpun>
 80054ec:	bb70      	cbnz	r0, 800554c <_printf_float+0xc0>
 80054ee:	4b99      	ldr	r3, [pc, #612]	; (8005754 <_printf_float+0x2c8>)
 80054f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f6:	4640      	mov	r0, r8
 80054f8:	f7fb fad2 	bl	8000aa0 <__aeabi_dcmple>
 80054fc:	bb30      	cbnz	r0, 800554c <_printf_float+0xc0>
 80054fe:	2200      	movs	r2, #0
 8005500:	2300      	movs	r3, #0
 8005502:	4640      	mov	r0, r8
 8005504:	4651      	mov	r1, sl
 8005506:	f7fb fac1 	bl	8000a8c <__aeabi_dcmplt>
 800550a:	b110      	cbz	r0, 8005512 <_printf_float+0x86>
 800550c:	232d      	movs	r3, #45	; 0x2d
 800550e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005512:	4b91      	ldr	r3, [pc, #580]	; (8005758 <_printf_float+0x2cc>)
 8005514:	4891      	ldr	r0, [pc, #580]	; (800575c <_printf_float+0x2d0>)
 8005516:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800551a:	bf94      	ite	ls
 800551c:	4698      	movls	r8, r3
 800551e:	4680      	movhi	r8, r0
 8005520:	2303      	movs	r3, #3
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	f02b 0304 	bic.w	r3, fp, #4
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	f04f 0a00 	mov.w	sl, #0
 800552e:	9700      	str	r7, [sp, #0]
 8005530:	4633      	mov	r3, r6
 8005532:	aa0f      	add	r2, sp, #60	; 0x3c
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f9d2 	bl	80058e0 <_printf_common>
 800553c:	3001      	adds	r0, #1
 800553e:	f040 808f 	bne.w	8005660 <_printf_float+0x1d4>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005546:	b011      	add	sp, #68	; 0x44
 8005548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554c:	4642      	mov	r2, r8
 800554e:	4653      	mov	r3, sl
 8005550:	4640      	mov	r0, r8
 8005552:	4651      	mov	r1, sl
 8005554:	f7fb fac2 	bl	8000adc <__aeabi_dcmpun>
 8005558:	b140      	cbz	r0, 800556c <_printf_float+0xe0>
 800555a:	f1ba 0f00 	cmp.w	sl, #0
 800555e:	bfbc      	itt	lt
 8005560:	232d      	movlt	r3, #45	; 0x2d
 8005562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005566:	487e      	ldr	r0, [pc, #504]	; (8005760 <_printf_float+0x2d4>)
 8005568:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <_printf_float+0x2d8>)
 800556a:	e7d4      	b.n	8005516 <_printf_float+0x8a>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005574:	d142      	bne.n	80055fc <_printf_float+0x170>
 8005576:	2306      	movs	r3, #6
 8005578:	6063      	str	r3, [r4, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	9206      	str	r2, [sp, #24]
 800557e:	aa0e      	add	r2, sp, #56	; 0x38
 8005580:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005584:	aa0d      	add	r2, sp, #52	; 0x34
 8005586:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800558a:	9203      	str	r2, [sp, #12]
 800558c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005590:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	6863      	ldr	r3, [r4, #4]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4642      	mov	r2, r8
 800559c:	4653      	mov	r3, sl
 800559e:	4628      	mov	r0, r5
 80055a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80055a2:	f7ff fed5 	bl	8005350 <__cvt>
 80055a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055a8:	2947      	cmp	r1, #71	; 0x47
 80055aa:	4680      	mov	r8, r0
 80055ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055ae:	d108      	bne.n	80055c2 <_printf_float+0x136>
 80055b0:	1cc8      	adds	r0, r1, #3
 80055b2:	db02      	blt.n	80055ba <_printf_float+0x12e>
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	4299      	cmp	r1, r3
 80055b8:	dd40      	ble.n	800563c <_printf_float+0x1b0>
 80055ba:	f1a9 0902 	sub.w	r9, r9, #2
 80055be:	fa5f f989 	uxtb.w	r9, r9
 80055c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055c6:	d81f      	bhi.n	8005608 <_printf_float+0x17c>
 80055c8:	3901      	subs	r1, #1
 80055ca:	464a      	mov	r2, r9
 80055cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055d0:	910d      	str	r1, [sp, #52]	; 0x34
 80055d2:	f7ff ff1d 	bl	8005410 <__exponent>
 80055d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055d8:	1813      	adds	r3, r2, r0
 80055da:	2a01      	cmp	r2, #1
 80055dc:	4682      	mov	sl, r0
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	dc02      	bgt.n	80055e8 <_printf_float+0x15c>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	07d2      	lsls	r2, r2, #31
 80055e6:	d501      	bpl.n	80055ec <_printf_float+0x160>
 80055e8:	3301      	adds	r3, #1
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d09c      	beq.n	800552e <_printf_float+0xa2>
 80055f4:	232d      	movs	r3, #45	; 0x2d
 80055f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fa:	e798      	b.n	800552e <_printf_float+0xa2>
 80055fc:	2947      	cmp	r1, #71	; 0x47
 80055fe:	d1bc      	bne.n	800557a <_printf_float+0xee>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1ba      	bne.n	800557a <_printf_float+0xee>
 8005604:	2301      	movs	r3, #1
 8005606:	e7b7      	b.n	8005578 <_printf_float+0xec>
 8005608:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800560c:	d118      	bne.n	8005640 <_printf_float+0x1b4>
 800560e:	2900      	cmp	r1, #0
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	dd0b      	ble.n	800562c <_printf_float+0x1a0>
 8005614:	6121      	str	r1, [r4, #16]
 8005616:	b913      	cbnz	r3, 800561e <_printf_float+0x192>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	07d0      	lsls	r0, r2, #31
 800561c:	d502      	bpl.n	8005624 <_printf_float+0x198>
 800561e:	3301      	adds	r3, #1
 8005620:	440b      	add	r3, r1
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	65a1      	str	r1, [r4, #88]	; 0x58
 8005626:	f04f 0a00 	mov.w	sl, #0
 800562a:	e7df      	b.n	80055ec <_printf_float+0x160>
 800562c:	b913      	cbnz	r3, 8005634 <_printf_float+0x1a8>
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	07d2      	lsls	r2, r2, #31
 8005632:	d501      	bpl.n	8005638 <_printf_float+0x1ac>
 8005634:	3302      	adds	r3, #2
 8005636:	e7f4      	b.n	8005622 <_printf_float+0x196>
 8005638:	2301      	movs	r3, #1
 800563a:	e7f2      	b.n	8005622 <_printf_float+0x196>
 800563c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005642:	4299      	cmp	r1, r3
 8005644:	db05      	blt.n	8005652 <_printf_float+0x1c6>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6121      	str	r1, [r4, #16]
 800564a:	07d8      	lsls	r0, r3, #31
 800564c:	d5ea      	bpl.n	8005624 <_printf_float+0x198>
 800564e:	1c4b      	adds	r3, r1, #1
 8005650:	e7e7      	b.n	8005622 <_printf_float+0x196>
 8005652:	2900      	cmp	r1, #0
 8005654:	bfd4      	ite	le
 8005656:	f1c1 0202 	rsble	r2, r1, #2
 800565a:	2201      	movgt	r2, #1
 800565c:	4413      	add	r3, r2
 800565e:	e7e0      	b.n	8005622 <_printf_float+0x196>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	055a      	lsls	r2, r3, #21
 8005664:	d407      	bmi.n	8005676 <_printf_float+0x1ea>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	4642      	mov	r2, r8
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	d12b      	bne.n	80056cc <_printf_float+0x240>
 8005674:	e765      	b.n	8005542 <_printf_float+0xb6>
 8005676:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800567a:	f240 80dc 	bls.w	8005836 <_printf_float+0x3aa>
 800567e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005682:	2200      	movs	r2, #0
 8005684:	2300      	movs	r3, #0
 8005686:	f7fb f9f7 	bl	8000a78 <__aeabi_dcmpeq>
 800568a:	2800      	cmp	r0, #0
 800568c:	d033      	beq.n	80056f6 <_printf_float+0x26a>
 800568e:	4a36      	ldr	r2, [pc, #216]	; (8005768 <_printf_float+0x2dc>)
 8005690:	2301      	movs	r3, #1
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	f43f af52 	beq.w	8005542 <_printf_float+0xb6>
 800569e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056a2:	429a      	cmp	r2, r3
 80056a4:	db02      	blt.n	80056ac <_printf_float+0x220>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	07d8      	lsls	r0, r3, #31
 80056aa:	d50f      	bpl.n	80056cc <_printf_float+0x240>
 80056ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b0:	4631      	mov	r1, r6
 80056b2:	4628      	mov	r0, r5
 80056b4:	47b8      	blx	r7
 80056b6:	3001      	adds	r0, #1
 80056b8:	f43f af43 	beq.w	8005542 <_printf_float+0xb6>
 80056bc:	f04f 0800 	mov.w	r8, #0
 80056c0:	f104 091a 	add.w	r9, r4, #26
 80056c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4543      	cmp	r3, r8
 80056ca:	dc09      	bgt.n	80056e0 <_printf_float+0x254>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	079b      	lsls	r3, r3, #30
 80056d0:	f100 8101 	bmi.w	80058d6 <_printf_float+0x44a>
 80056d4:	68e0      	ldr	r0, [r4, #12]
 80056d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d8:	4298      	cmp	r0, r3
 80056da:	bfb8      	it	lt
 80056dc:	4618      	movlt	r0, r3
 80056de:	e732      	b.n	8005546 <_printf_float+0xba>
 80056e0:	2301      	movs	r3, #1
 80056e2:	464a      	mov	r2, r9
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f af29 	beq.w	8005542 <_printf_float+0xb6>
 80056f0:	f108 0801 	add.w	r8, r8, #1
 80056f4:	e7e6      	b.n	80056c4 <_printf_float+0x238>
 80056f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dc37      	bgt.n	800576c <_printf_float+0x2e0>
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <_printf_float+0x2dc>)
 80056fe:	2301      	movs	r3, #1
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f af1b 	beq.w	8005542 <_printf_float+0xb6>
 800570c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005710:	4313      	orrs	r3, r2
 8005712:	d102      	bne.n	800571a <_printf_float+0x28e>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07d9      	lsls	r1, r3, #31
 8005718:	d5d8      	bpl.n	80056cc <_printf_float+0x240>
 800571a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800571e:	4631      	mov	r1, r6
 8005720:	4628      	mov	r0, r5
 8005722:	47b8      	blx	r7
 8005724:	3001      	adds	r0, #1
 8005726:	f43f af0c 	beq.w	8005542 <_printf_float+0xb6>
 800572a:	f04f 0900 	mov.w	r9, #0
 800572e:	f104 0a1a 	add.w	sl, r4, #26
 8005732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005734:	425b      	negs	r3, r3
 8005736:	454b      	cmp	r3, r9
 8005738:	dc01      	bgt.n	800573e <_printf_float+0x2b2>
 800573a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800573c:	e794      	b.n	8005668 <_printf_float+0x1dc>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f aefa 	beq.w	8005542 <_printf_float+0xb6>
 800574e:	f109 0901 	add.w	r9, r9, #1
 8005752:	e7ee      	b.n	8005732 <_printf_float+0x2a6>
 8005754:	7fefffff 	.word	0x7fefffff
 8005758:	0800a6d4 	.word	0x0800a6d4
 800575c:	0800a6d8 	.word	0x0800a6d8
 8005760:	0800a6e0 	.word	0x0800a6e0
 8005764:	0800a6dc 	.word	0x0800a6dc
 8005768:	0800ab41 	.word	0x0800ab41
 800576c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800576e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005770:	429a      	cmp	r2, r3
 8005772:	bfa8      	it	ge
 8005774:	461a      	movge	r2, r3
 8005776:	2a00      	cmp	r2, #0
 8005778:	4691      	mov	r9, r2
 800577a:	dc37      	bgt.n	80057ec <_printf_float+0x360>
 800577c:	f04f 0b00 	mov.w	fp, #0
 8005780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005784:	f104 021a 	add.w	r2, r4, #26
 8005788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800578c:	ebaa 0309 	sub.w	r3, sl, r9
 8005790:	455b      	cmp	r3, fp
 8005792:	dc33      	bgt.n	80057fc <_printf_float+0x370>
 8005794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005798:	429a      	cmp	r2, r3
 800579a:	db3b      	blt.n	8005814 <_printf_float+0x388>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	07da      	lsls	r2, r3, #31
 80057a0:	d438      	bmi.n	8005814 <_printf_float+0x388>
 80057a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057a6:	eba3 020a 	sub.w	r2, r3, sl
 80057aa:	eba3 0901 	sub.w	r9, r3, r1
 80057ae:	4591      	cmp	r9, r2
 80057b0:	bfa8      	it	ge
 80057b2:	4691      	movge	r9, r2
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	dc34      	bgt.n	8005824 <_printf_float+0x398>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057c2:	f104 0a1a 	add.w	sl, r4, #26
 80057c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	eba3 0309 	sub.w	r3, r3, r9
 80057d0:	4543      	cmp	r3, r8
 80057d2:	f77f af7b 	ble.w	80056cc <_printf_float+0x240>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4652      	mov	r2, sl
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f aeae 	beq.w	8005542 <_printf_float+0xb6>
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	e7ec      	b.n	80057c6 <_printf_float+0x33a>
 80057ec:	4613      	mov	r3, r2
 80057ee:	4631      	mov	r1, r6
 80057f0:	4642      	mov	r2, r8
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	d1c0      	bne.n	800577c <_printf_float+0x2f0>
 80057fa:	e6a2      	b.n	8005542 <_printf_float+0xb6>
 80057fc:	2301      	movs	r3, #1
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	920b      	str	r2, [sp, #44]	; 0x2c
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f ae9b 	beq.w	8005542 <_printf_float+0xb6>
 800580c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800580e:	f10b 0b01 	add.w	fp, fp, #1
 8005812:	e7b9      	b.n	8005788 <_printf_float+0x2fc>
 8005814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	d1bf      	bne.n	80057a2 <_printf_float+0x316>
 8005822:	e68e      	b.n	8005542 <_printf_float+0xb6>
 8005824:	464b      	mov	r3, r9
 8005826:	eb08 020a 	add.w	r2, r8, sl
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	d1c2      	bne.n	80057ba <_printf_float+0x32e>
 8005834:	e685      	b.n	8005542 <_printf_float+0xb6>
 8005836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005838:	2a01      	cmp	r2, #1
 800583a:	dc01      	bgt.n	8005840 <_printf_float+0x3b4>
 800583c:	07db      	lsls	r3, r3, #31
 800583e:	d537      	bpl.n	80058b0 <_printf_float+0x424>
 8005840:	2301      	movs	r3, #1
 8005842:	4642      	mov	r2, r8
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	f43f ae79 	beq.w	8005542 <_printf_float+0xb6>
 8005850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f ae71 	beq.w	8005542 <_printf_float+0xb6>
 8005860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	f7fb f906 	bl	8000a78 <__aeabi_dcmpeq>
 800586c:	b9d8      	cbnz	r0, 80058a6 <_printf_float+0x41a>
 800586e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005870:	f108 0201 	add.w	r2, r8, #1
 8005874:	3b01      	subs	r3, #1
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d10e      	bne.n	800589e <_printf_float+0x412>
 8005880:	e65f      	b.n	8005542 <_printf_float+0xb6>
 8005882:	2301      	movs	r3, #1
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae58 	beq.w	8005542 <_printf_float+0xb6>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005898:	3b01      	subs	r3, #1
 800589a:	4543      	cmp	r3, r8
 800589c:	dcf1      	bgt.n	8005882 <_printf_float+0x3f6>
 800589e:	4653      	mov	r3, sl
 80058a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058a4:	e6e1      	b.n	800566a <_printf_float+0x1de>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	f104 091a 	add.w	r9, r4, #26
 80058ae:	e7f2      	b.n	8005896 <_printf_float+0x40a>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4642      	mov	r2, r8
 80058b4:	e7df      	b.n	8005876 <_printf_float+0x3ea>
 80058b6:	2301      	movs	r3, #1
 80058b8:	464a      	mov	r2, r9
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae3e 	beq.w	8005542 <_printf_float+0xb6>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	68e3      	ldr	r3, [r4, #12]
 80058cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058ce:	1a5b      	subs	r3, r3, r1
 80058d0:	4543      	cmp	r3, r8
 80058d2:	dcf0      	bgt.n	80058b6 <_printf_float+0x42a>
 80058d4:	e6fe      	b.n	80056d4 <_printf_float+0x248>
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	f104 0919 	add.w	r9, r4, #25
 80058de:	e7f4      	b.n	80058ca <_printf_float+0x43e>

080058e0 <_printf_common>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	4616      	mov	r6, r2
 80058e6:	4699      	mov	r9, r3
 80058e8:	688a      	ldr	r2, [r1, #8]
 80058ea:	690b      	ldr	r3, [r1, #16]
 80058ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058f0:	4293      	cmp	r3, r2
 80058f2:	bfb8      	it	lt
 80058f4:	4613      	movlt	r3, r2
 80058f6:	6033      	str	r3, [r6, #0]
 80058f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058fc:	4607      	mov	r7, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	b10a      	cbz	r2, 8005906 <_printf_common+0x26>
 8005902:	3301      	adds	r3, #1
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	0699      	lsls	r1, r3, #26
 800590a:	bf42      	ittt	mi
 800590c:	6833      	ldrmi	r3, [r6, #0]
 800590e:	3302      	addmi	r3, #2
 8005910:	6033      	strmi	r3, [r6, #0]
 8005912:	6825      	ldr	r5, [r4, #0]
 8005914:	f015 0506 	ands.w	r5, r5, #6
 8005918:	d106      	bne.n	8005928 <_printf_common+0x48>
 800591a:	f104 0a19 	add.w	sl, r4, #25
 800591e:	68e3      	ldr	r3, [r4, #12]
 8005920:	6832      	ldr	r2, [r6, #0]
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	42ab      	cmp	r3, r5
 8005926:	dc26      	bgt.n	8005976 <_printf_common+0x96>
 8005928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800592c:	1e13      	subs	r3, r2, #0
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	bf18      	it	ne
 8005932:	2301      	movne	r3, #1
 8005934:	0692      	lsls	r2, r2, #26
 8005936:	d42b      	bmi.n	8005990 <_printf_common+0xb0>
 8005938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800593c:	4649      	mov	r1, r9
 800593e:	4638      	mov	r0, r7
 8005940:	47c0      	blx	r8
 8005942:	3001      	adds	r0, #1
 8005944:	d01e      	beq.n	8005984 <_printf_common+0xa4>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	68e5      	ldr	r5, [r4, #12]
 800594a:	6832      	ldr	r2, [r6, #0]
 800594c:	f003 0306 	and.w	r3, r3, #6
 8005950:	2b04      	cmp	r3, #4
 8005952:	bf08      	it	eq
 8005954:	1aad      	subeq	r5, r5, r2
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	bf0c      	ite	eq
 800595c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005960:	2500      	movne	r5, #0
 8005962:	4293      	cmp	r3, r2
 8005964:	bfc4      	itt	gt
 8005966:	1a9b      	subgt	r3, r3, r2
 8005968:	18ed      	addgt	r5, r5, r3
 800596a:	2600      	movs	r6, #0
 800596c:	341a      	adds	r4, #26
 800596e:	42b5      	cmp	r5, r6
 8005970:	d11a      	bne.n	80059a8 <_printf_common+0xc8>
 8005972:	2000      	movs	r0, #0
 8005974:	e008      	b.n	8005988 <_printf_common+0xa8>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4649      	mov	r1, r9
 800597c:	4638      	mov	r0, r7
 800597e:	47c0      	blx	r8
 8005980:	3001      	adds	r0, #1
 8005982:	d103      	bne.n	800598c <_printf_common+0xac>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	3501      	adds	r5, #1
 800598e:	e7c6      	b.n	800591e <_printf_common+0x3e>
 8005990:	18e1      	adds	r1, r4, r3
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	2030      	movs	r0, #48	; 0x30
 8005996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800599a:	4422      	add	r2, r4
 800599c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a4:	3302      	adds	r3, #2
 80059a6:	e7c7      	b.n	8005938 <_printf_common+0x58>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4622      	mov	r2, r4
 80059ac:	4649      	mov	r1, r9
 80059ae:	4638      	mov	r0, r7
 80059b0:	47c0      	blx	r8
 80059b2:	3001      	adds	r0, #1
 80059b4:	d0e6      	beq.n	8005984 <_printf_common+0xa4>
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7d9      	b.n	800596e <_printf_common+0x8e>
	...

080059bc <_printf_i>:
 80059bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	7e0f      	ldrb	r7, [r1, #24]
 80059c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059c4:	2f78      	cmp	r7, #120	; 0x78
 80059c6:	4691      	mov	r9, r2
 80059c8:	4680      	mov	r8, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	469a      	mov	sl, r3
 80059ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059d2:	d807      	bhi.n	80059e4 <_printf_i+0x28>
 80059d4:	2f62      	cmp	r7, #98	; 0x62
 80059d6:	d80a      	bhi.n	80059ee <_printf_i+0x32>
 80059d8:	2f00      	cmp	r7, #0
 80059da:	f000 80d8 	beq.w	8005b8e <_printf_i+0x1d2>
 80059de:	2f58      	cmp	r7, #88	; 0x58
 80059e0:	f000 80a3 	beq.w	8005b2a <_printf_i+0x16e>
 80059e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059ec:	e03a      	b.n	8005a64 <_printf_i+0xa8>
 80059ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059f2:	2b15      	cmp	r3, #21
 80059f4:	d8f6      	bhi.n	80059e4 <_printf_i+0x28>
 80059f6:	a101      	add	r1, pc, #4	; (adr r1, 80059fc <_printf_i+0x40>)
 80059f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059fc:	08005a55 	.word	0x08005a55
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	080059e5 	.word	0x080059e5
 8005a08:	080059e5 	.word	0x080059e5
 8005a0c:	080059e5 	.word	0x080059e5
 8005a10:	080059e5 	.word	0x080059e5
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	080059e5 	.word	0x080059e5
 8005a1c:	080059e5 	.word	0x080059e5
 8005a20:	080059e5 	.word	0x080059e5
 8005a24:	080059e5 	.word	0x080059e5
 8005a28:	08005b75 	.word	0x08005b75
 8005a2c:	08005a99 	.word	0x08005a99
 8005a30:	08005b57 	.word	0x08005b57
 8005a34:	080059e5 	.word	0x080059e5
 8005a38:	080059e5 	.word	0x080059e5
 8005a3c:	08005b97 	.word	0x08005b97
 8005a40:	080059e5 	.word	0x080059e5
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	080059e5 	.word	0x080059e5
 8005a4c:	080059e5 	.word	0x080059e5
 8005a50:	08005b5f 	.word	0x08005b5f
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	602a      	str	r2, [r5, #0]
 8005a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0a3      	b.n	8005bb0 <_printf_i+0x1f4>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	6829      	ldr	r1, [r5, #0]
 8005a6c:	0606      	lsls	r6, r0, #24
 8005a6e:	f101 0304 	add.w	r3, r1, #4
 8005a72:	d50a      	bpl.n	8005a8a <_printf_i+0xce>
 8005a74:	680e      	ldr	r6, [r1, #0]
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	da03      	bge.n	8005a84 <_printf_i+0xc8>
 8005a7c:	232d      	movs	r3, #45	; 0x2d
 8005a7e:	4276      	negs	r6, r6
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a84:	485e      	ldr	r0, [pc, #376]	; (8005c00 <_printf_i+0x244>)
 8005a86:	230a      	movs	r3, #10
 8005a88:	e019      	b.n	8005abe <_printf_i+0x102>
 8005a8a:	680e      	ldr	r6, [r1, #0]
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a92:	bf18      	it	ne
 8005a94:	b236      	sxthne	r6, r6
 8005a96:	e7ef      	b.n	8005a78 <_printf_i+0xbc>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	6820      	ldr	r0, [r4, #0]
 8005a9c:	1d19      	adds	r1, r3, #4
 8005a9e:	6029      	str	r1, [r5, #0]
 8005aa0:	0601      	lsls	r1, r0, #24
 8005aa2:	d501      	bpl.n	8005aa8 <_printf_i+0xec>
 8005aa4:	681e      	ldr	r6, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <_printf_i+0xf2>
 8005aa8:	0646      	lsls	r6, r0, #25
 8005aaa:	d5fb      	bpl.n	8005aa4 <_printf_i+0xe8>
 8005aac:	881e      	ldrh	r6, [r3, #0]
 8005aae:	4854      	ldr	r0, [pc, #336]	; (8005c00 <_printf_i+0x244>)
 8005ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2308      	moveq	r3, #8
 8005ab6:	230a      	movne	r3, #10
 8005ab8:	2100      	movs	r1, #0
 8005aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005abe:	6865      	ldr	r5, [r4, #4]
 8005ac0:	60a5      	str	r5, [r4, #8]
 8005ac2:	2d00      	cmp	r5, #0
 8005ac4:	bfa2      	ittt	ge
 8005ac6:	6821      	ldrge	r1, [r4, #0]
 8005ac8:	f021 0104 	bicge.w	r1, r1, #4
 8005acc:	6021      	strge	r1, [r4, #0]
 8005ace:	b90e      	cbnz	r6, 8005ad4 <_printf_i+0x118>
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	d04d      	beq.n	8005b70 <_printf_i+0x1b4>
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ada:	fb03 6711 	mls	r7, r3, r1, r6
 8005ade:	5dc7      	ldrb	r7, [r0, r7]
 8005ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ae4:	4637      	mov	r7, r6
 8005ae6:	42bb      	cmp	r3, r7
 8005ae8:	460e      	mov	r6, r1
 8005aea:	d9f4      	bls.n	8005ad6 <_printf_i+0x11a>
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d10b      	bne.n	8005b08 <_printf_i+0x14c>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	07de      	lsls	r6, r3, #31
 8005af4:	d508      	bpl.n	8005b08 <_printf_i+0x14c>
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	6861      	ldr	r1, [r4, #4]
 8005afa:	4299      	cmp	r1, r3
 8005afc:	bfde      	ittt	le
 8005afe:	2330      	movle	r3, #48	; 0x30
 8005b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b08:	1b52      	subs	r2, r2, r5
 8005b0a:	6122      	str	r2, [r4, #16]
 8005b0c:	f8cd a000 	str.w	sl, [sp]
 8005b10:	464b      	mov	r3, r9
 8005b12:	aa03      	add	r2, sp, #12
 8005b14:	4621      	mov	r1, r4
 8005b16:	4640      	mov	r0, r8
 8005b18:	f7ff fee2 	bl	80058e0 <_printf_common>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d14c      	bne.n	8005bba <_printf_i+0x1fe>
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b24:	b004      	add	sp, #16
 8005b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2a:	4835      	ldr	r0, [pc, #212]	; (8005c00 <_printf_i+0x244>)
 8005b2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b30:	6829      	ldr	r1, [r5, #0]
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b38:	6029      	str	r1, [r5, #0]
 8005b3a:	061d      	lsls	r5, r3, #24
 8005b3c:	d514      	bpl.n	8005b68 <_printf_i+0x1ac>
 8005b3e:	07df      	lsls	r7, r3, #31
 8005b40:	bf44      	itt	mi
 8005b42:	f043 0320 	orrmi.w	r3, r3, #32
 8005b46:	6023      	strmi	r3, [r4, #0]
 8005b48:	b91e      	cbnz	r6, 8005b52 <_printf_i+0x196>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f023 0320 	bic.w	r3, r3, #32
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2310      	movs	r3, #16
 8005b54:	e7b0      	b.n	8005ab8 <_printf_i+0xfc>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f043 0320 	orr.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	2378      	movs	r3, #120	; 0x78
 8005b60:	4828      	ldr	r0, [pc, #160]	; (8005c04 <_printf_i+0x248>)
 8005b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b66:	e7e3      	b.n	8005b30 <_printf_i+0x174>
 8005b68:	0659      	lsls	r1, r3, #25
 8005b6a:	bf48      	it	mi
 8005b6c:	b2b6      	uxthmi	r6, r6
 8005b6e:	e7e6      	b.n	8005b3e <_printf_i+0x182>
 8005b70:	4615      	mov	r5, r2
 8005b72:	e7bb      	b.n	8005aec <_printf_i+0x130>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6826      	ldr	r6, [r4, #0]
 8005b78:	6961      	ldr	r1, [r4, #20]
 8005b7a:	1d18      	adds	r0, r3, #4
 8005b7c:	6028      	str	r0, [r5, #0]
 8005b7e:	0635      	lsls	r5, r6, #24
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	d501      	bpl.n	8005b88 <_printf_i+0x1cc>
 8005b84:	6019      	str	r1, [r3, #0]
 8005b86:	e002      	b.n	8005b8e <_printf_i+0x1d2>
 8005b88:	0670      	lsls	r0, r6, #25
 8005b8a:	d5fb      	bpl.n	8005b84 <_printf_i+0x1c8>
 8005b8c:	8019      	strh	r1, [r3, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6123      	str	r3, [r4, #16]
 8005b92:	4615      	mov	r5, r2
 8005b94:	e7ba      	b.n	8005b0c <_printf_i+0x150>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	602a      	str	r2, [r5, #0]
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	6862      	ldr	r2, [r4, #4]
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f7fa faf4 	bl	8000190 <memchr>
 8005ba8:	b108      	cbz	r0, 8005bae <_printf_i+0x1f2>
 8005baa:	1b40      	subs	r0, r0, r5
 8005bac:	6060      	str	r0, [r4, #4]
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb8:	e7a8      	b.n	8005b0c <_printf_i+0x150>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	47d0      	blx	sl
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d0ab      	beq.n	8005b20 <_printf_i+0x164>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	079b      	lsls	r3, r3, #30
 8005bcc:	d413      	bmi.n	8005bf6 <_printf_i+0x23a>
 8005bce:	68e0      	ldr	r0, [r4, #12]
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	4298      	cmp	r0, r3
 8005bd4:	bfb8      	it	lt
 8005bd6:	4618      	movlt	r0, r3
 8005bd8:	e7a4      	b.n	8005b24 <_printf_i+0x168>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4632      	mov	r2, r6
 8005bde:	4649      	mov	r1, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	47d0      	blx	sl
 8005be4:	3001      	adds	r0, #1
 8005be6:	d09b      	beq.n	8005b20 <_printf_i+0x164>
 8005be8:	3501      	adds	r5, #1
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	9903      	ldr	r1, [sp, #12]
 8005bee:	1a5b      	subs	r3, r3, r1
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	dcf2      	bgt.n	8005bda <_printf_i+0x21e>
 8005bf4:	e7eb      	b.n	8005bce <_printf_i+0x212>
 8005bf6:	2500      	movs	r5, #0
 8005bf8:	f104 0619 	add.w	r6, r4, #25
 8005bfc:	e7f5      	b.n	8005bea <_printf_i+0x22e>
 8005bfe:	bf00      	nop
 8005c00:	0800a6e4 	.word	0x0800a6e4
 8005c04:	0800a6f5 	.word	0x0800a6f5

08005c08 <_scanf_float>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	4617      	mov	r7, r2
 8005c10:	9303      	str	r3, [sp, #12]
 8005c12:	688b      	ldr	r3, [r1, #8]
 8005c14:	1e5a      	subs	r2, r3, #1
 8005c16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c1a:	bf83      	ittte	hi
 8005c1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c20:	195b      	addhi	r3, r3, r5
 8005c22:	9302      	strhi	r3, [sp, #8]
 8005c24:	2300      	movls	r3, #0
 8005c26:	bf86      	itte	hi
 8005c28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c2c:	608b      	strhi	r3, [r1, #8]
 8005c2e:	9302      	strls	r3, [sp, #8]
 8005c30:	680b      	ldr	r3, [r1, #0]
 8005c32:	468b      	mov	fp, r1
 8005c34:	2500      	movs	r5, #0
 8005c36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c42:	4680      	mov	r8, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	465e      	mov	r6, fp
 8005c48:	46aa      	mov	sl, r5
 8005c4a:	46a9      	mov	r9, r5
 8005c4c:	9501      	str	r5, [sp, #4]
 8005c4e:	68a2      	ldr	r2, [r4, #8]
 8005c50:	b152      	cbz	r2, 8005c68 <_scanf_float+0x60>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b4e      	cmp	r3, #78	; 0x4e
 8005c58:	d864      	bhi.n	8005d24 <_scanf_float+0x11c>
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d83c      	bhi.n	8005cd8 <_scanf_float+0xd0>
 8005c5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c62:	b2c8      	uxtb	r0, r1
 8005c64:	280e      	cmp	r0, #14
 8005c66:	d93a      	bls.n	8005cde <_scanf_float+0xd6>
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	d003      	beq.n	8005c76 <_scanf_float+0x6e>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c7a:	f1ba 0f01 	cmp.w	sl, #1
 8005c7e:	f200 8113 	bhi.w	8005ea8 <_scanf_float+0x2a0>
 8005c82:	455e      	cmp	r6, fp
 8005c84:	f200 8105 	bhi.w	8005e92 <_scanf_float+0x28a>
 8005c88:	2501      	movs	r5, #1
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	b007      	add	sp, #28
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c96:	2a0d      	cmp	r2, #13
 8005c98:	d8e6      	bhi.n	8005c68 <_scanf_float+0x60>
 8005c9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ca0 <_scanf_float+0x98>)
 8005c9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ca0:	08005ddf 	.word	0x08005ddf
 8005ca4:	08005c69 	.word	0x08005c69
 8005ca8:	08005c69 	.word	0x08005c69
 8005cac:	08005c69 	.word	0x08005c69
 8005cb0:	08005e3f 	.word	0x08005e3f
 8005cb4:	08005e17 	.word	0x08005e17
 8005cb8:	08005c69 	.word	0x08005c69
 8005cbc:	08005c69 	.word	0x08005c69
 8005cc0:	08005ded 	.word	0x08005ded
 8005cc4:	08005c69 	.word	0x08005c69
 8005cc8:	08005c69 	.word	0x08005c69
 8005ccc:	08005c69 	.word	0x08005c69
 8005cd0:	08005c69 	.word	0x08005c69
 8005cd4:	08005da5 	.word	0x08005da5
 8005cd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005cdc:	e7db      	b.n	8005c96 <_scanf_float+0x8e>
 8005cde:	290e      	cmp	r1, #14
 8005ce0:	d8c2      	bhi.n	8005c68 <_scanf_float+0x60>
 8005ce2:	a001      	add	r0, pc, #4	; (adr r0, 8005ce8 <_scanf_float+0xe0>)
 8005ce4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ce8:	08005d97 	.word	0x08005d97
 8005cec:	08005c69 	.word	0x08005c69
 8005cf0:	08005d97 	.word	0x08005d97
 8005cf4:	08005e2b 	.word	0x08005e2b
 8005cf8:	08005c69 	.word	0x08005c69
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d81 	.word	0x08005d81
 8005d04:	08005d81 	.word	0x08005d81
 8005d08:	08005d81 	.word	0x08005d81
 8005d0c:	08005d81 	.word	0x08005d81
 8005d10:	08005d81 	.word	0x08005d81
 8005d14:	08005d81 	.word	0x08005d81
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005d81 	.word	0x08005d81
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	2b6e      	cmp	r3, #110	; 0x6e
 8005d26:	d809      	bhi.n	8005d3c <_scanf_float+0x134>
 8005d28:	2b60      	cmp	r3, #96	; 0x60
 8005d2a:	d8b2      	bhi.n	8005c92 <_scanf_float+0x8a>
 8005d2c:	2b54      	cmp	r3, #84	; 0x54
 8005d2e:	d077      	beq.n	8005e20 <_scanf_float+0x218>
 8005d30:	2b59      	cmp	r3, #89	; 0x59
 8005d32:	d199      	bne.n	8005c68 <_scanf_float+0x60>
 8005d34:	2d07      	cmp	r5, #7
 8005d36:	d197      	bne.n	8005c68 <_scanf_float+0x60>
 8005d38:	2508      	movs	r5, #8
 8005d3a:	e029      	b.n	8005d90 <_scanf_float+0x188>
 8005d3c:	2b74      	cmp	r3, #116	; 0x74
 8005d3e:	d06f      	beq.n	8005e20 <_scanf_float+0x218>
 8005d40:	2b79      	cmp	r3, #121	; 0x79
 8005d42:	e7f6      	b.n	8005d32 <_scanf_float+0x12a>
 8005d44:	6821      	ldr	r1, [r4, #0]
 8005d46:	05c8      	lsls	r0, r1, #23
 8005d48:	d51a      	bpl.n	8005d80 <_scanf_float+0x178>
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d50:	6021      	str	r1, [r4, #0]
 8005d52:	f109 0901 	add.w	r9, r9, #1
 8005d56:	b11b      	cbz	r3, 8005d60 <_scanf_float+0x158>
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	9302      	str	r3, [sp, #8]
 8005d5e:	60a2      	str	r2, [r4, #8]
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	f340 8084 	ble.w	8005e80 <_scanf_float+0x278>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	e766      	b.n	8005c4e <_scanf_float+0x46>
 8005d80:	eb1a 0f05 	cmn.w	sl, r5
 8005d84:	f47f af70 	bne.w	8005c68 <_scanf_float+0x60>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d8e:	6022      	str	r2, [r4, #0]
 8005d90:	f806 3b01 	strb.w	r3, [r6], #1
 8005d94:	e7e4      	b.n	8005d60 <_scanf_float+0x158>
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	0610      	lsls	r0, r2, #24
 8005d9a:	f57f af65 	bpl.w	8005c68 <_scanf_float+0x60>
 8005d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da2:	e7f4      	b.n	8005d8e <_scanf_float+0x186>
 8005da4:	f1ba 0f00 	cmp.w	sl, #0
 8005da8:	d10e      	bne.n	8005dc8 <_scanf_float+0x1c0>
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	d10e      	bne.n	8005dce <_scanf_float+0x1c6>
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005db6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005dba:	d108      	bne.n	8005dce <_scanf_float+0x1c6>
 8005dbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dc0:	6022      	str	r2, [r4, #0]
 8005dc2:	f04f 0a01 	mov.w	sl, #1
 8005dc6:	e7e3      	b.n	8005d90 <_scanf_float+0x188>
 8005dc8:	f1ba 0f02 	cmp.w	sl, #2
 8005dcc:	d055      	beq.n	8005e7a <_scanf_float+0x272>
 8005dce:	2d01      	cmp	r5, #1
 8005dd0:	d002      	beq.n	8005dd8 <_scanf_float+0x1d0>
 8005dd2:	2d04      	cmp	r5, #4
 8005dd4:	f47f af48 	bne.w	8005c68 <_scanf_float+0x60>
 8005dd8:	3501      	adds	r5, #1
 8005dda:	b2ed      	uxtb	r5, r5
 8005ddc:	e7d8      	b.n	8005d90 <_scanf_float+0x188>
 8005dde:	f1ba 0f01 	cmp.w	sl, #1
 8005de2:	f47f af41 	bne.w	8005c68 <_scanf_float+0x60>
 8005de6:	f04f 0a02 	mov.w	sl, #2
 8005dea:	e7d1      	b.n	8005d90 <_scanf_float+0x188>
 8005dec:	b97d      	cbnz	r5, 8005e0e <_scanf_float+0x206>
 8005dee:	f1b9 0f00 	cmp.w	r9, #0
 8005df2:	f47f af3c 	bne.w	8005c6e <_scanf_float+0x66>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005dfc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e00:	f47f af39 	bne.w	8005c76 <_scanf_float+0x6e>
 8005e04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	2501      	movs	r5, #1
 8005e0c:	e7c0      	b.n	8005d90 <_scanf_float+0x188>
 8005e0e:	2d03      	cmp	r5, #3
 8005e10:	d0e2      	beq.n	8005dd8 <_scanf_float+0x1d0>
 8005e12:	2d05      	cmp	r5, #5
 8005e14:	e7de      	b.n	8005dd4 <_scanf_float+0x1cc>
 8005e16:	2d02      	cmp	r5, #2
 8005e18:	f47f af26 	bne.w	8005c68 <_scanf_float+0x60>
 8005e1c:	2503      	movs	r5, #3
 8005e1e:	e7b7      	b.n	8005d90 <_scanf_float+0x188>
 8005e20:	2d06      	cmp	r5, #6
 8005e22:	f47f af21 	bne.w	8005c68 <_scanf_float+0x60>
 8005e26:	2507      	movs	r5, #7
 8005e28:	e7b2      	b.n	8005d90 <_scanf_float+0x188>
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	0591      	lsls	r1, r2, #22
 8005e2e:	f57f af1b 	bpl.w	8005c68 <_scanf_float+0x60>
 8005e32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e3c:	e7a8      	b.n	8005d90 <_scanf_float+0x188>
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e48:	d006      	beq.n	8005e58 <_scanf_float+0x250>
 8005e4a:	0550      	lsls	r0, r2, #21
 8005e4c:	f57f af0c 	bpl.w	8005c68 <_scanf_float+0x60>
 8005e50:	f1b9 0f00 	cmp.w	r9, #0
 8005e54:	f43f af0f 	beq.w	8005c76 <_scanf_float+0x6e>
 8005e58:	0591      	lsls	r1, r2, #22
 8005e5a:	bf58      	it	pl
 8005e5c:	9901      	ldrpl	r1, [sp, #4]
 8005e5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e62:	bf58      	it	pl
 8005e64:	eba9 0101 	subpl.w	r1, r9, r1
 8005e68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005e6c:	bf58      	it	pl
 8005e6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	f04f 0900 	mov.w	r9, #0
 8005e78:	e78a      	b.n	8005d90 <_scanf_float+0x188>
 8005e7a:	f04f 0a03 	mov.w	sl, #3
 8005e7e:	e787      	b.n	8005d90 <_scanf_float+0x188>
 8005e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e84:	4639      	mov	r1, r7
 8005e86:	4640      	mov	r0, r8
 8005e88:	4798      	blx	r3
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	f43f aedf 	beq.w	8005c4e <_scanf_float+0x46>
 8005e90:	e6ea      	b.n	8005c68 <_scanf_float+0x60>
 8005e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4798      	blx	r3
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	e6ec      	b.n	8005c82 <_scanf_float+0x7a>
 8005ea8:	1e6b      	subs	r3, r5, #1
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d825      	bhi.n	8005efa <_scanf_float+0x2f2>
 8005eae:	2d02      	cmp	r5, #2
 8005eb0:	d836      	bhi.n	8005f20 <_scanf_float+0x318>
 8005eb2:	455e      	cmp	r6, fp
 8005eb4:	f67f aee8 	bls.w	8005c88 <_scanf_float+0x80>
 8005eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ebc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4798      	blx	r3
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	e7f1      	b.n	8005eb2 <_scanf_float+0x2aa>
 8005ece:	9802      	ldr	r0, [sp, #8]
 8005ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ed4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005ed8:	9002      	str	r0, [sp, #8]
 8005eda:	463a      	mov	r2, r7
 8005edc:	4640      	mov	r0, r8
 8005ede:	4798      	blx	r3
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005eea:	fa5f fa8a 	uxtb.w	sl, sl
 8005eee:	f1ba 0f02 	cmp.w	sl, #2
 8005ef2:	d1ec      	bne.n	8005ece <_scanf_float+0x2c6>
 8005ef4:	3d03      	subs	r5, #3
 8005ef6:	b2ed      	uxtb	r5, r5
 8005ef8:	1b76      	subs	r6, r6, r5
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	05da      	lsls	r2, r3, #23
 8005efe:	d52f      	bpl.n	8005f60 <_scanf_float+0x358>
 8005f00:	055b      	lsls	r3, r3, #21
 8005f02:	d510      	bpl.n	8005f26 <_scanf_float+0x31e>
 8005f04:	455e      	cmp	r6, fp
 8005f06:	f67f aebf 	bls.w	8005c88 <_scanf_float+0x80>
 8005f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f12:	463a      	mov	r2, r7
 8005f14:	4640      	mov	r0, r8
 8005f16:	4798      	blx	r3
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	e7f1      	b.n	8005f04 <_scanf_float+0x2fc>
 8005f20:	46aa      	mov	sl, r5
 8005f22:	9602      	str	r6, [sp, #8]
 8005f24:	e7df      	b.n	8005ee6 <_scanf_float+0x2de>
 8005f26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	2965      	cmp	r1, #101	; 0x65
 8005f2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005f32:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	d00c      	beq.n	8005f54 <_scanf_float+0x34c>
 8005f3a:	2945      	cmp	r1, #69	; 0x45
 8005f3c:	d00a      	beq.n	8005f54 <_scanf_float+0x34c>
 8005f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f42:	463a      	mov	r2, r7
 8005f44:	4640      	mov	r0, r8
 8005f46:	4798      	blx	r3
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	1eb5      	subs	r5, r6, #2
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f58:	463a      	mov	r2, r7
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4798      	blx	r3
 8005f5e:	462e      	mov	r6, r5
 8005f60:	6825      	ldr	r5, [r4, #0]
 8005f62:	f015 0510 	ands.w	r5, r5, #16
 8005f66:	d155      	bne.n	8006014 <_scanf_float+0x40c>
 8005f68:	7035      	strb	r5, [r6, #0]
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d11b      	bne.n	8005fae <_scanf_float+0x3a6>
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	454b      	cmp	r3, r9
 8005f7a:	eba3 0209 	sub.w	r2, r3, r9
 8005f7e:	d123      	bne.n	8005fc8 <_scanf_float+0x3c0>
 8005f80:	2200      	movs	r2, #0
 8005f82:	4659      	mov	r1, fp
 8005f84:	4640      	mov	r0, r8
 8005f86:	f000 ff1f 	bl	8006dc8 <_strtod_r>
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	f012 0f02 	tst.w	r2, #2
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4606      	mov	r6, r0
 8005f96:	460f      	mov	r7, r1
 8005f98:	d021      	beq.n	8005fde <_scanf_float+0x3d6>
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	9903      	ldr	r1, [sp, #12]
 8005f9e:	600a      	str	r2, [r1, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	e9c3 6700 	strd	r6, r7, [r3]
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60e3      	str	r3, [r4, #12]
 8005fac:	e66d      	b.n	8005c8a <_scanf_float+0x82>
 8005fae:	9b04      	ldr	r3, [sp, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0e5      	beq.n	8005f80 <_scanf_float+0x378>
 8005fb4:	9905      	ldr	r1, [sp, #20]
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	462a      	mov	r2, r5
 8005fba:	3101      	adds	r1, #1
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	f000 ff85 	bl	8006ecc <_strtol_r>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	9e05      	ldr	r6, [sp, #20]
 8005fc6:	1ac2      	subs	r2, r0, r3
 8005fc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005fcc:	429e      	cmp	r6, r3
 8005fce:	bf28      	it	cs
 8005fd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005fd4:	4910      	ldr	r1, [pc, #64]	; (8006018 <_scanf_float+0x410>)
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f000 f83e 	bl	8006058 <siprintf>
 8005fdc:	e7d0      	b.n	8005f80 <_scanf_float+0x378>
 8005fde:	f012 0f04 	tst.w	r2, #4
 8005fe2:	f103 0204 	add.w	r2, r3, #4
 8005fe6:	d1d9      	bne.n	8005f9c <_scanf_float+0x394>
 8005fe8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005fec:	f8cc 2000 	str.w	r2, [ip]
 8005ff0:	f8d3 8000 	ldr.w	r8, [r3]
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	f7fa fd70 	bl	8000adc <__aeabi_dcmpun>
 8005ffc:	b128      	cbz	r0, 800600a <_scanf_float+0x402>
 8005ffe:	4807      	ldr	r0, [pc, #28]	; (800601c <_scanf_float+0x414>)
 8006000:	f000 f826 	bl	8006050 <nanf>
 8006004:	f8c8 0000 	str.w	r0, [r8]
 8006008:	e7cd      	b.n	8005fa6 <_scanf_float+0x39e>
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	f7fa fdc3 	bl	8000b98 <__aeabi_d2f>
 8006012:	e7f7      	b.n	8006004 <_scanf_float+0x3fc>
 8006014:	2500      	movs	r5, #0
 8006016:	e638      	b.n	8005c8a <_scanf_float+0x82>
 8006018:	0800a706 	.word	0x0800a706
 800601c:	0800ab93 	.word	0x0800ab93

08006020 <iprintf>:
 8006020:	b40f      	push	{r0, r1, r2, r3}
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <iprintf+0x2c>)
 8006024:	b513      	push	{r0, r1, r4, lr}
 8006026:	681c      	ldr	r4, [r3, #0]
 8006028:	b124      	cbz	r4, 8006034 <iprintf+0x14>
 800602a:	69a3      	ldr	r3, [r4, #24]
 800602c:	b913      	cbnz	r3, 8006034 <iprintf+0x14>
 800602e:	4620      	mov	r0, r4
 8006030:	f001 fe40 	bl	8007cb4 <__sinit>
 8006034:	ab05      	add	r3, sp, #20
 8006036:	9a04      	ldr	r2, [sp, #16]
 8006038:	68a1      	ldr	r1, [r4, #8]
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	4620      	mov	r0, r4
 800603e:	f003 fb79 	bl	8009734 <_vfiprintf_r>
 8006042:	b002      	add	sp, #8
 8006044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006048:	b004      	add	sp, #16
 800604a:	4770      	bx	lr
 800604c:	2000000c 	.word	0x2000000c

08006050 <nanf>:
 8006050:	4800      	ldr	r0, [pc, #0]	; (8006054 <nanf+0x4>)
 8006052:	4770      	bx	lr
 8006054:	7fc00000 	.word	0x7fc00000

08006058 <siprintf>:
 8006058:	b40e      	push	{r1, r2, r3}
 800605a:	b500      	push	{lr}
 800605c:	b09c      	sub	sp, #112	; 0x70
 800605e:	ab1d      	add	r3, sp, #116	; 0x74
 8006060:	9002      	str	r0, [sp, #8]
 8006062:	9006      	str	r0, [sp, #24]
 8006064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006068:	4809      	ldr	r0, [pc, #36]	; (8006090 <siprintf+0x38>)
 800606a:	9107      	str	r1, [sp, #28]
 800606c:	9104      	str	r1, [sp, #16]
 800606e:	4909      	ldr	r1, [pc, #36]	; (8006094 <siprintf+0x3c>)
 8006070:	f853 2b04 	ldr.w	r2, [r3], #4
 8006074:	9105      	str	r1, [sp, #20]
 8006076:	6800      	ldr	r0, [r0, #0]
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	a902      	add	r1, sp, #8
 800607c:	f003 f860 	bl	8009140 <_svfiprintf_r>
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	b01c      	add	sp, #112	; 0x70
 8006088:	f85d eb04 	ldr.w	lr, [sp], #4
 800608c:	b003      	add	sp, #12
 800608e:	4770      	bx	lr
 8006090:	2000000c 	.word	0x2000000c
 8006094:	ffff0208 	.word	0xffff0208

08006098 <siscanf>:
 8006098:	b40e      	push	{r1, r2, r3}
 800609a:	b530      	push	{r4, r5, lr}
 800609c:	b09c      	sub	sp, #112	; 0x70
 800609e:	ac1f      	add	r4, sp, #124	; 0x7c
 80060a0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80060a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80060a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80060ac:	9002      	str	r0, [sp, #8]
 80060ae:	9006      	str	r0, [sp, #24]
 80060b0:	f7fa f866 	bl	8000180 <strlen>
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <siscanf+0x4c>)
 80060b6:	9003      	str	r0, [sp, #12]
 80060b8:	9007      	str	r0, [sp, #28]
 80060ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80060bc:	480a      	ldr	r0, [pc, #40]	; (80060e8 <siscanf+0x50>)
 80060be:	9401      	str	r4, [sp, #4]
 80060c0:	2300      	movs	r3, #0
 80060c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c4:	9314      	str	r3, [sp, #80]	; 0x50
 80060c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060ce:	462a      	mov	r2, r5
 80060d0:	4623      	mov	r3, r4
 80060d2:	a902      	add	r1, sp, #8
 80060d4:	6800      	ldr	r0, [r0, #0]
 80060d6:	f003 f98d 	bl	80093f4 <__ssvfiscanf_r>
 80060da:	b01c      	add	sp, #112	; 0x70
 80060dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e0:	b003      	add	sp, #12
 80060e2:	4770      	bx	lr
 80060e4:	0800610f 	.word	0x0800610f
 80060e8:	2000000c 	.word	0x2000000c

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f003 fda0 	bl	8009c38 <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	; 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__seofread>:
 800610e:	2000      	movs	r0, #0
 8006110:	4770      	bx	lr

08006112 <__swrite>:
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	461f      	mov	r7, r3
 8006118:	898b      	ldrh	r3, [r1, #12]
 800611a:	05db      	lsls	r3, r3, #23
 800611c:	4605      	mov	r5, r0
 800611e:	460c      	mov	r4, r1
 8006120:	4616      	mov	r6, r2
 8006122:	d505      	bpl.n	8006130 <__swrite+0x1e>
 8006124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006128:	2302      	movs	r3, #2
 800612a:	2200      	movs	r2, #0
 800612c:	f002 f9cc 	bl	80084c8 <_lseek_r>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	4632      	mov	r2, r6
 800613e:	463b      	mov	r3, r7
 8006140:	4628      	mov	r0, r5
 8006142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	f000 bec3 	b.w	8006ed0 <_write_r>

0800614a <__sseek>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f002 f9b9 	bl	80084c8 <_lseek_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	bf15      	itete	ne
 800615c:	6560      	strne	r0, [r4, #84]	; 0x54
 800615e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006166:	81a3      	strheq	r3, [r4, #12]
 8006168:	bf18      	it	ne
 800616a:	81a3      	strhne	r3, [r4, #12]
 800616c:	bd10      	pop	{r4, pc}

0800616e <__sclose>:
 800616e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006172:	f000 bebf 	b.w	8006ef4 <_close_r>

08006176 <strcpy>:
 8006176:	4603      	mov	r3, r0
 8006178:	f811 2b01 	ldrb.w	r2, [r1], #1
 800617c:	f803 2b01 	strb.w	r2, [r3], #1
 8006180:	2a00      	cmp	r2, #0
 8006182:	d1f9      	bne.n	8006178 <strcpy+0x2>
 8006184:	4770      	bx	lr

08006186 <strstr>:
 8006186:	780a      	ldrb	r2, [r1, #0]
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	b96a      	cbnz	r2, 80061a8 <strstr+0x22>
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	429a      	cmp	r2, r3
 8006190:	d109      	bne.n	80061a6 <strstr+0x20>
 8006192:	460c      	mov	r4, r1
 8006194:	4605      	mov	r5, r0
 8006196:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f6      	beq.n	800618c <strstr+0x6>
 800619e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80061a2:	429e      	cmp	r6, r3
 80061a4:	d0f7      	beq.n	8006196 <strstr+0x10>
 80061a6:	3001      	adds	r0, #1
 80061a8:	7803      	ldrb	r3, [r0, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ef      	bne.n	800618e <strstr+0x8>
 80061ae:	4618      	mov	r0, r3
 80061b0:	e7ec      	b.n	800618c <strstr+0x6>

080061b2 <sulp>:
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	460f      	mov	r7, r1
 80061b8:	4690      	mov	r8, r2
 80061ba:	f002 fd2b 	bl	8008c14 <__ulp>
 80061be:	4604      	mov	r4, r0
 80061c0:	460d      	mov	r5, r1
 80061c2:	f1b8 0f00 	cmp.w	r8, #0
 80061c6:	d011      	beq.n	80061ec <sulp+0x3a>
 80061c8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80061cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dd0b      	ble.n	80061ec <sulp+0x3a>
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061da:	2400      	movs	r4, #0
 80061dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061e0:	4622      	mov	r2, r4
 80061e2:	462b      	mov	r3, r5
 80061e4:	f7fa f9e0 	bl	80005a8 <__aeabi_dmul>
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	0000      	movs	r0, r0
	...

080061f8 <_strtod_l>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	b09f      	sub	sp, #124	; 0x7c
 80061fe:	469b      	mov	fp, r3
 8006200:	2300      	movs	r3, #0
 8006202:	931a      	str	r3, [sp, #104]	; 0x68
 8006204:	4b9e      	ldr	r3, [pc, #632]	; (8006480 <_strtod_l+0x288>)
 8006206:	9215      	str	r2, [sp, #84]	; 0x54
 8006208:	681f      	ldr	r7, [r3, #0]
 800620a:	4682      	mov	sl, r0
 800620c:	4638      	mov	r0, r7
 800620e:	460e      	mov	r6, r1
 8006210:	f7f9 ffb6 	bl	8000180 <strlen>
 8006214:	f04f 0800 	mov.w	r8, #0
 8006218:	4604      	mov	r4, r0
 800621a:	f04f 0900 	mov.w	r9, #0
 800621e:	9619      	str	r6, [sp, #100]	; 0x64
 8006220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	2a2b      	cmp	r2, #43	; 0x2b
 8006226:	d04c      	beq.n	80062c2 <_strtod_l+0xca>
 8006228:	d83a      	bhi.n	80062a0 <_strtod_l+0xa8>
 800622a:	2a0d      	cmp	r2, #13
 800622c:	d833      	bhi.n	8006296 <_strtod_l+0x9e>
 800622e:	2a08      	cmp	r2, #8
 8006230:	d833      	bhi.n	800629a <_strtod_l+0xa2>
 8006232:	2a00      	cmp	r2, #0
 8006234:	d03d      	beq.n	80062b2 <_strtod_l+0xba>
 8006236:	2300      	movs	r3, #0
 8006238:	930a      	str	r3, [sp, #40]	; 0x28
 800623a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800623c:	782b      	ldrb	r3, [r5, #0]
 800623e:	2b30      	cmp	r3, #48	; 0x30
 8006240:	f040 80aa 	bne.w	8006398 <_strtod_l+0x1a0>
 8006244:	786b      	ldrb	r3, [r5, #1]
 8006246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800624a:	2b58      	cmp	r3, #88	; 0x58
 800624c:	d166      	bne.n	800631c <_strtod_l+0x124>
 800624e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	ab1a      	add	r3, sp, #104	; 0x68
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4a8b      	ldr	r2, [pc, #556]	; (8006484 <_strtod_l+0x28c>)
 8006258:	f8cd b008 	str.w	fp, [sp, #8]
 800625c:	ab1b      	add	r3, sp, #108	; 0x6c
 800625e:	a919      	add	r1, sp, #100	; 0x64
 8006260:	4650      	mov	r0, sl
 8006262:	f001 fe2b 	bl	8007ebc <__gethex>
 8006266:	f010 0607 	ands.w	r6, r0, #7
 800626a:	4604      	mov	r4, r0
 800626c:	d005      	beq.n	800627a <_strtod_l+0x82>
 800626e:	2e06      	cmp	r6, #6
 8006270:	d129      	bne.n	80062c6 <_strtod_l+0xce>
 8006272:	3501      	adds	r5, #1
 8006274:	2300      	movs	r3, #0
 8006276:	9519      	str	r5, [sp, #100]	; 0x64
 8006278:	930a      	str	r3, [sp, #40]	; 0x28
 800627a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 858a 	bne.w	8006d96 <_strtod_l+0xb9e>
 8006282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006284:	b1d3      	cbz	r3, 80062bc <_strtod_l+0xc4>
 8006286:	4642      	mov	r2, r8
 8006288:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800628c:	4610      	mov	r0, r2
 800628e:	4619      	mov	r1, r3
 8006290:	b01f      	add	sp, #124	; 0x7c
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	2a20      	cmp	r2, #32
 8006298:	d1cd      	bne.n	8006236 <_strtod_l+0x3e>
 800629a:	3301      	adds	r3, #1
 800629c:	9319      	str	r3, [sp, #100]	; 0x64
 800629e:	e7bf      	b.n	8006220 <_strtod_l+0x28>
 80062a0:	2a2d      	cmp	r2, #45	; 0x2d
 80062a2:	d1c8      	bne.n	8006236 <_strtod_l+0x3e>
 80062a4:	2201      	movs	r2, #1
 80062a6:	920a      	str	r2, [sp, #40]	; 0x28
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	9219      	str	r2, [sp, #100]	; 0x64
 80062ac:	785b      	ldrb	r3, [r3, #1]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1c3      	bne.n	800623a <_strtod_l+0x42>
 80062b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062b4:	9619      	str	r6, [sp, #100]	; 0x64
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 856b 	bne.w	8006d92 <_strtod_l+0xb9a>
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	e7e4      	b.n	800628c <_strtod_l+0x94>
 80062c2:	2200      	movs	r2, #0
 80062c4:	e7ef      	b.n	80062a6 <_strtod_l+0xae>
 80062c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80062c8:	b13a      	cbz	r2, 80062da <_strtod_l+0xe2>
 80062ca:	2135      	movs	r1, #53	; 0x35
 80062cc:	a81c      	add	r0, sp, #112	; 0x70
 80062ce:	f002 fda5 	bl	8008e1c <__copybits>
 80062d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062d4:	4650      	mov	r0, sl
 80062d6:	f002 f971 	bl	80085bc <_Bfree>
 80062da:	3e01      	subs	r6, #1
 80062dc:	2e04      	cmp	r6, #4
 80062de:	d806      	bhi.n	80062ee <_strtod_l+0xf6>
 80062e0:	e8df f006 	tbb	[pc, r6]
 80062e4:	1714030a 	.word	0x1714030a
 80062e8:	0a          	.byte	0x0a
 80062e9:	00          	.byte	0x00
 80062ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80062ee:	0721      	lsls	r1, r4, #28
 80062f0:	d5c3      	bpl.n	800627a <_strtod_l+0x82>
 80062f2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80062f6:	e7c0      	b.n	800627a <_strtod_l+0x82>
 80062f8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80062fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006302:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006306:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800630a:	e7f0      	b.n	80062ee <_strtod_l+0xf6>
 800630c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006488 <_strtod_l+0x290>
 8006310:	e7ed      	b.n	80062ee <_strtod_l+0xf6>
 8006312:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006316:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800631a:	e7e8      	b.n	80062ee <_strtod_l+0xf6>
 800631c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	9219      	str	r2, [sp, #100]	; 0x64
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b30      	cmp	r3, #48	; 0x30
 8006326:	d0f9      	beq.n	800631c <_strtod_l+0x124>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0a6      	beq.n	800627a <_strtod_l+0x82>
 800632c:	2301      	movs	r3, #1
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	2300      	movs	r3, #0
 8006336:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800633a:	469b      	mov	fp, r3
 800633c:	220a      	movs	r2, #10
 800633e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006340:	7805      	ldrb	r5, [r0, #0]
 8006342:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006346:	b2d9      	uxtb	r1, r3
 8006348:	2909      	cmp	r1, #9
 800634a:	d927      	bls.n	800639c <_strtod_l+0x1a4>
 800634c:	4622      	mov	r2, r4
 800634e:	4639      	mov	r1, r7
 8006350:	f003 fcd2 	bl	8009cf8 <strncmp>
 8006354:	2800      	cmp	r0, #0
 8006356:	d033      	beq.n	80063c0 <_strtod_l+0x1c8>
 8006358:	2000      	movs	r0, #0
 800635a:	462a      	mov	r2, r5
 800635c:	465c      	mov	r4, fp
 800635e:	9004      	str	r0, [sp, #16]
 8006360:	4603      	mov	r3, r0
 8006362:	2a65      	cmp	r2, #101	; 0x65
 8006364:	d001      	beq.n	800636a <_strtod_l+0x172>
 8006366:	2a45      	cmp	r2, #69	; 0x45
 8006368:	d114      	bne.n	8006394 <_strtod_l+0x19c>
 800636a:	b91c      	cbnz	r4, 8006374 <_strtod_l+0x17c>
 800636c:	9a07      	ldr	r2, [sp, #28]
 800636e:	4302      	orrs	r2, r0
 8006370:	d09f      	beq.n	80062b2 <_strtod_l+0xba>
 8006372:	2400      	movs	r4, #0
 8006374:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006376:	1c72      	adds	r2, r6, #1
 8006378:	9219      	str	r2, [sp, #100]	; 0x64
 800637a:	7872      	ldrb	r2, [r6, #1]
 800637c:	2a2b      	cmp	r2, #43	; 0x2b
 800637e:	d079      	beq.n	8006474 <_strtod_l+0x27c>
 8006380:	2a2d      	cmp	r2, #45	; 0x2d
 8006382:	f000 8083 	beq.w	800648c <_strtod_l+0x294>
 8006386:	2700      	movs	r7, #0
 8006388:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800638c:	2909      	cmp	r1, #9
 800638e:	f240 8083 	bls.w	8006498 <_strtod_l+0x2a0>
 8006392:	9619      	str	r6, [sp, #100]	; 0x64
 8006394:	2500      	movs	r5, #0
 8006396:	e09f      	b.n	80064d8 <_strtod_l+0x2e0>
 8006398:	2300      	movs	r3, #0
 800639a:	e7c8      	b.n	800632e <_strtod_l+0x136>
 800639c:	f1bb 0f08 	cmp.w	fp, #8
 80063a0:	bfd5      	itete	le
 80063a2:	9906      	ldrle	r1, [sp, #24]
 80063a4:	9905      	ldrgt	r1, [sp, #20]
 80063a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80063aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80063ae:	f100 0001 	add.w	r0, r0, #1
 80063b2:	bfd4      	ite	le
 80063b4:	9306      	strle	r3, [sp, #24]
 80063b6:	9305      	strgt	r3, [sp, #20]
 80063b8:	f10b 0b01 	add.w	fp, fp, #1
 80063bc:	9019      	str	r0, [sp, #100]	; 0x64
 80063be:	e7be      	b.n	800633e <_strtod_l+0x146>
 80063c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063c2:	191a      	adds	r2, r3, r4
 80063c4:	9219      	str	r2, [sp, #100]	; 0x64
 80063c6:	5d1a      	ldrb	r2, [r3, r4]
 80063c8:	f1bb 0f00 	cmp.w	fp, #0
 80063cc:	d036      	beq.n	800643c <_strtod_l+0x244>
 80063ce:	9004      	str	r0, [sp, #16]
 80063d0:	465c      	mov	r4, fp
 80063d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d912      	bls.n	8006400 <_strtod_l+0x208>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7c1      	b.n	8006362 <_strtod_l+0x16a>
 80063de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	9219      	str	r2, [sp, #100]	; 0x64
 80063e4:	785a      	ldrb	r2, [r3, #1]
 80063e6:	3001      	adds	r0, #1
 80063e8:	2a30      	cmp	r2, #48	; 0x30
 80063ea:	d0f8      	beq.n	80063de <_strtod_l+0x1e6>
 80063ec:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	f200 84d5 	bhi.w	8006da0 <_strtod_l+0xba8>
 80063f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063f8:	9004      	str	r0, [sp, #16]
 80063fa:	2000      	movs	r0, #0
 80063fc:	9308      	str	r3, [sp, #32]
 80063fe:	4604      	mov	r4, r0
 8006400:	3a30      	subs	r2, #48	; 0x30
 8006402:	f100 0301 	add.w	r3, r0, #1
 8006406:	d013      	beq.n	8006430 <_strtod_l+0x238>
 8006408:	9904      	ldr	r1, [sp, #16]
 800640a:	4419      	add	r1, r3
 800640c:	9104      	str	r1, [sp, #16]
 800640e:	4623      	mov	r3, r4
 8006410:	1905      	adds	r5, r0, r4
 8006412:	210a      	movs	r1, #10
 8006414:	42ab      	cmp	r3, r5
 8006416:	d113      	bne.n	8006440 <_strtod_l+0x248>
 8006418:	1823      	adds	r3, r4, r0
 800641a:	2b08      	cmp	r3, #8
 800641c:	f104 0401 	add.w	r4, r4, #1
 8006420:	4404      	add	r4, r0
 8006422:	dc1b      	bgt.n	800645c <_strtod_l+0x264>
 8006424:	9906      	ldr	r1, [sp, #24]
 8006426:	230a      	movs	r3, #10
 8006428:	fb03 2301 	mla	r3, r3, r1, r2
 800642c:	9306      	str	r3, [sp, #24]
 800642e:	2300      	movs	r3, #0
 8006430:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006432:	1c51      	adds	r1, r2, #1
 8006434:	9119      	str	r1, [sp, #100]	; 0x64
 8006436:	7852      	ldrb	r2, [r2, #1]
 8006438:	4618      	mov	r0, r3
 800643a:	e7ca      	b.n	80063d2 <_strtod_l+0x1da>
 800643c:	4658      	mov	r0, fp
 800643e:	e7d3      	b.n	80063e8 <_strtod_l+0x1f0>
 8006440:	2b08      	cmp	r3, #8
 8006442:	dc04      	bgt.n	800644e <_strtod_l+0x256>
 8006444:	9f06      	ldr	r7, [sp, #24]
 8006446:	434f      	muls	r7, r1
 8006448:	9706      	str	r7, [sp, #24]
 800644a:	3301      	adds	r3, #1
 800644c:	e7e2      	b.n	8006414 <_strtod_l+0x21c>
 800644e:	1c5f      	adds	r7, r3, #1
 8006450:	2f10      	cmp	r7, #16
 8006452:	bfde      	ittt	le
 8006454:	9f05      	ldrle	r7, [sp, #20]
 8006456:	434f      	mulle	r7, r1
 8006458:	9705      	strle	r7, [sp, #20]
 800645a:	e7f6      	b.n	800644a <_strtod_l+0x252>
 800645c:	2c10      	cmp	r4, #16
 800645e:	bfdf      	itttt	le
 8006460:	9905      	ldrle	r1, [sp, #20]
 8006462:	230a      	movle	r3, #10
 8006464:	fb03 2301 	mlale	r3, r3, r1, r2
 8006468:	9305      	strle	r3, [sp, #20]
 800646a:	e7e0      	b.n	800642e <_strtod_l+0x236>
 800646c:	2300      	movs	r3, #0
 800646e:	9304      	str	r3, [sp, #16]
 8006470:	2301      	movs	r3, #1
 8006472:	e77b      	b.n	800636c <_strtod_l+0x174>
 8006474:	2700      	movs	r7, #0
 8006476:	1cb2      	adds	r2, r6, #2
 8006478:	9219      	str	r2, [sp, #100]	; 0x64
 800647a:	78b2      	ldrb	r2, [r6, #2]
 800647c:	e784      	b.n	8006388 <_strtod_l+0x190>
 800647e:	bf00      	nop
 8006480:	0800a9bc 	.word	0x0800a9bc
 8006484:	0800a70c 	.word	0x0800a70c
 8006488:	7ff00000 	.word	0x7ff00000
 800648c:	2701      	movs	r7, #1
 800648e:	e7f2      	b.n	8006476 <_strtod_l+0x27e>
 8006490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006492:	1c51      	adds	r1, r2, #1
 8006494:	9119      	str	r1, [sp, #100]	; 0x64
 8006496:	7852      	ldrb	r2, [r2, #1]
 8006498:	2a30      	cmp	r2, #48	; 0x30
 800649a:	d0f9      	beq.n	8006490 <_strtod_l+0x298>
 800649c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064a0:	2908      	cmp	r1, #8
 80064a2:	f63f af77 	bhi.w	8006394 <_strtod_l+0x19c>
 80064a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80064aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	f04f 0e0a 	mov.w	lr, #10
 80064b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b4:	1c51      	adds	r1, r2, #1
 80064b6:	9119      	str	r1, [sp, #100]	; 0x64
 80064b8:	7852      	ldrb	r2, [r2, #1]
 80064ba:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80064be:	2d09      	cmp	r5, #9
 80064c0:	d935      	bls.n	800652e <_strtod_l+0x336>
 80064c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80064c4:	1b49      	subs	r1, r1, r5
 80064c6:	2908      	cmp	r1, #8
 80064c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80064cc:	dc02      	bgt.n	80064d4 <_strtod_l+0x2dc>
 80064ce:	4565      	cmp	r5, ip
 80064d0:	bfa8      	it	ge
 80064d2:	4665      	movge	r5, ip
 80064d4:	b107      	cbz	r7, 80064d8 <_strtod_l+0x2e0>
 80064d6:	426d      	negs	r5, r5
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d14c      	bne.n	8006576 <_strtod_l+0x37e>
 80064dc:	9907      	ldr	r1, [sp, #28]
 80064de:	4301      	orrs	r1, r0
 80064e0:	f47f aecb 	bne.w	800627a <_strtod_l+0x82>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aee4 	bne.w	80062b2 <_strtod_l+0xba>
 80064ea:	2a69      	cmp	r2, #105	; 0x69
 80064ec:	d026      	beq.n	800653c <_strtod_l+0x344>
 80064ee:	dc23      	bgt.n	8006538 <_strtod_l+0x340>
 80064f0:	2a49      	cmp	r2, #73	; 0x49
 80064f2:	d023      	beq.n	800653c <_strtod_l+0x344>
 80064f4:	2a4e      	cmp	r2, #78	; 0x4e
 80064f6:	f47f aedc 	bne.w	80062b2 <_strtod_l+0xba>
 80064fa:	499d      	ldr	r1, [pc, #628]	; (8006770 <_strtod_l+0x578>)
 80064fc:	a819      	add	r0, sp, #100	; 0x64
 80064fe:	f001 ff2b 	bl	8008358 <__match>
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f aed5 	beq.w	80062b2 <_strtod_l+0xba>
 8006508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b28      	cmp	r3, #40	; 0x28
 800650e:	d12c      	bne.n	800656a <_strtod_l+0x372>
 8006510:	4998      	ldr	r1, [pc, #608]	; (8006774 <_strtod_l+0x57c>)
 8006512:	aa1c      	add	r2, sp, #112	; 0x70
 8006514:	a819      	add	r0, sp, #100	; 0x64
 8006516:	f001 ff33 	bl	8008380 <__hexnan>
 800651a:	2805      	cmp	r0, #5
 800651c:	d125      	bne.n	800656a <_strtod_l+0x372>
 800651e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006520:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006524:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006528:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800652c:	e6a5      	b.n	800627a <_strtod_l+0x82>
 800652e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006532:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006536:	e7bc      	b.n	80064b2 <_strtod_l+0x2ba>
 8006538:	2a6e      	cmp	r2, #110	; 0x6e
 800653a:	e7dc      	b.n	80064f6 <_strtod_l+0x2fe>
 800653c:	498e      	ldr	r1, [pc, #568]	; (8006778 <_strtod_l+0x580>)
 800653e:	a819      	add	r0, sp, #100	; 0x64
 8006540:	f001 ff0a 	bl	8008358 <__match>
 8006544:	2800      	cmp	r0, #0
 8006546:	f43f aeb4 	beq.w	80062b2 <_strtod_l+0xba>
 800654a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800654c:	498b      	ldr	r1, [pc, #556]	; (800677c <_strtod_l+0x584>)
 800654e:	3b01      	subs	r3, #1
 8006550:	a819      	add	r0, sp, #100	; 0x64
 8006552:	9319      	str	r3, [sp, #100]	; 0x64
 8006554:	f001 ff00 	bl	8008358 <__match>
 8006558:	b910      	cbnz	r0, 8006560 <_strtod_l+0x368>
 800655a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800655c:	3301      	adds	r3, #1
 800655e:	9319      	str	r3, [sp, #100]	; 0x64
 8006560:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006780 <_strtod_l+0x588>
 8006564:	f04f 0800 	mov.w	r8, #0
 8006568:	e687      	b.n	800627a <_strtod_l+0x82>
 800656a:	4886      	ldr	r0, [pc, #536]	; (8006784 <_strtod_l+0x58c>)
 800656c:	f003 fb76 	bl	8009c5c <nan>
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	e681      	b.n	800627a <_strtod_l+0x82>
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	9806      	ldr	r0, [sp, #24]
 800657a:	1aeb      	subs	r3, r5, r3
 800657c:	f1bb 0f00 	cmp.w	fp, #0
 8006580:	bf08      	it	eq
 8006582:	46a3      	moveq	fp, r4
 8006584:	2c10      	cmp	r4, #16
 8006586:	9307      	str	r3, [sp, #28]
 8006588:	4626      	mov	r6, r4
 800658a:	bfa8      	it	ge
 800658c:	2610      	movge	r6, #16
 800658e:	f7f9 ff91 	bl	80004b4 <__aeabi_ui2d>
 8006592:	2c09      	cmp	r4, #9
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
 8006598:	dd13      	ble.n	80065c2 <_strtod_l+0x3ca>
 800659a:	4b7b      	ldr	r3, [pc, #492]	; (8006788 <_strtod_l+0x590>)
 800659c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065a0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065a4:	f7fa f800 	bl	80005a8 <__aeabi_dmul>
 80065a8:	4680      	mov	r8, r0
 80065aa:	9805      	ldr	r0, [sp, #20]
 80065ac:	4689      	mov	r9, r1
 80065ae:	f7f9 ff81 	bl	80004b4 <__aeabi_ui2d>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 fe3f 	bl	800023c <__adddf3>
 80065be:	4680      	mov	r8, r0
 80065c0:	4689      	mov	r9, r1
 80065c2:	2c0f      	cmp	r4, #15
 80065c4:	dc36      	bgt.n	8006634 <_strtod_l+0x43c>
 80065c6:	9b07      	ldr	r3, [sp, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f43f ae56 	beq.w	800627a <_strtod_l+0x82>
 80065ce:	dd22      	ble.n	8006616 <_strtod_l+0x41e>
 80065d0:	2b16      	cmp	r3, #22
 80065d2:	dc09      	bgt.n	80065e8 <_strtod_l+0x3f0>
 80065d4:	496c      	ldr	r1, [pc, #432]	; (8006788 <_strtod_l+0x590>)
 80065d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065de:	4642      	mov	r2, r8
 80065e0:	464b      	mov	r3, r9
 80065e2:	f7f9 ffe1 	bl	80005a8 <__aeabi_dmul>
 80065e6:	e7c3      	b.n	8006570 <_strtod_l+0x378>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80065ee:	4293      	cmp	r3, r2
 80065f0:	db20      	blt.n	8006634 <_strtod_l+0x43c>
 80065f2:	4d65      	ldr	r5, [pc, #404]	; (8006788 <_strtod_l+0x590>)
 80065f4:	f1c4 040f 	rsb	r4, r4, #15
 80065f8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80065fc:	4642      	mov	r2, r8
 80065fe:	464b      	mov	r3, r9
 8006600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006604:	f7f9 ffd0 	bl	80005a8 <__aeabi_dmul>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	1b1c      	subs	r4, r3, r4
 800660c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006614:	e7e5      	b.n	80065e2 <_strtod_l+0x3ea>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	3316      	adds	r3, #22
 800661a:	db0b      	blt.n	8006634 <_strtod_l+0x43c>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	1b5d      	subs	r5, r3, r5
 8006620:	4b59      	ldr	r3, [pc, #356]	; (8006788 <_strtod_l+0x590>)
 8006622:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006626:	e9d5 2300 	ldrd	r2, r3, [r5]
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7fa f8e5 	bl	80007fc <__aeabi_ddiv>
 8006632:	e79d      	b.n	8006570 <_strtod_l+0x378>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	1ba6      	subs	r6, r4, r6
 8006638:	441e      	add	r6, r3
 800663a:	2e00      	cmp	r6, #0
 800663c:	dd74      	ble.n	8006728 <_strtod_l+0x530>
 800663e:	f016 030f 	ands.w	r3, r6, #15
 8006642:	d00a      	beq.n	800665a <_strtod_l+0x462>
 8006644:	4950      	ldr	r1, [pc, #320]	; (8006788 <_strtod_l+0x590>)
 8006646:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800664a:	4642      	mov	r2, r8
 800664c:	464b      	mov	r3, r9
 800664e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006652:	f7f9 ffa9 	bl	80005a8 <__aeabi_dmul>
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	f036 060f 	bics.w	r6, r6, #15
 800665e:	d052      	beq.n	8006706 <_strtod_l+0x50e>
 8006660:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006664:	dd27      	ble.n	80066b6 <_strtod_l+0x4be>
 8006666:	f04f 0b00 	mov.w	fp, #0
 800666a:	f8cd b010 	str.w	fp, [sp, #16]
 800666e:	f8cd b020 	str.w	fp, [sp, #32]
 8006672:	f8cd b018 	str.w	fp, [sp, #24]
 8006676:	2322      	movs	r3, #34	; 0x22
 8006678:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006780 <_strtod_l+0x588>
 800667c:	f8ca 3000 	str.w	r3, [sl]
 8006680:	f04f 0800 	mov.w	r8, #0
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f43f adf7 	beq.w	800627a <_strtod_l+0x82>
 800668c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800668e:	4650      	mov	r0, sl
 8006690:	f001 ff94 	bl	80085bc <_Bfree>
 8006694:	9906      	ldr	r1, [sp, #24]
 8006696:	4650      	mov	r0, sl
 8006698:	f001 ff90 	bl	80085bc <_Bfree>
 800669c:	9904      	ldr	r1, [sp, #16]
 800669e:	4650      	mov	r0, sl
 80066a0:	f001 ff8c 	bl	80085bc <_Bfree>
 80066a4:	9908      	ldr	r1, [sp, #32]
 80066a6:	4650      	mov	r0, sl
 80066a8:	f001 ff88 	bl	80085bc <_Bfree>
 80066ac:	4659      	mov	r1, fp
 80066ae:	4650      	mov	r0, sl
 80066b0:	f001 ff84 	bl	80085bc <_Bfree>
 80066b4:	e5e1      	b.n	800627a <_strtod_l+0x82>
 80066b6:	4b35      	ldr	r3, [pc, #212]	; (800678c <_strtod_l+0x594>)
 80066b8:	9305      	str	r3, [sp, #20]
 80066ba:	2300      	movs	r3, #0
 80066bc:	1136      	asrs	r6, r6, #4
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	461f      	mov	r7, r3
 80066c4:	2e01      	cmp	r6, #1
 80066c6:	dc21      	bgt.n	800670c <_strtod_l+0x514>
 80066c8:	b10b      	cbz	r3, 80066ce <_strtod_l+0x4d6>
 80066ca:	4680      	mov	r8, r0
 80066cc:	4689      	mov	r9, r1
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <_strtod_l+0x594>)
 80066d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80066d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066e0:	f7f9 ff62 	bl	80005a8 <__aeabi_dmul>
 80066e4:	4b26      	ldr	r3, [pc, #152]	; (8006780 <_strtod_l+0x588>)
 80066e6:	460a      	mov	r2, r1
 80066e8:	400b      	ands	r3, r1
 80066ea:	4929      	ldr	r1, [pc, #164]	; (8006790 <_strtod_l+0x598>)
 80066ec:	428b      	cmp	r3, r1
 80066ee:	4680      	mov	r8, r0
 80066f0:	d8b9      	bhi.n	8006666 <_strtod_l+0x46e>
 80066f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80066f6:	428b      	cmp	r3, r1
 80066f8:	bf86      	itte	hi
 80066fa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8006794 <_strtod_l+0x59c>
 80066fe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8006702:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006706:	2300      	movs	r3, #0
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	e07f      	b.n	800680c <_strtod_l+0x614>
 800670c:	07f2      	lsls	r2, r6, #31
 800670e:	d505      	bpl.n	800671c <_strtod_l+0x524>
 8006710:	9b05      	ldr	r3, [sp, #20]
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 ff47 	bl	80005a8 <__aeabi_dmul>
 800671a:	2301      	movs	r3, #1
 800671c:	9a05      	ldr	r2, [sp, #20]
 800671e:	3208      	adds	r2, #8
 8006720:	3701      	adds	r7, #1
 8006722:	1076      	asrs	r6, r6, #1
 8006724:	9205      	str	r2, [sp, #20]
 8006726:	e7cd      	b.n	80066c4 <_strtod_l+0x4cc>
 8006728:	d0ed      	beq.n	8006706 <_strtod_l+0x50e>
 800672a:	4276      	negs	r6, r6
 800672c:	f016 020f 	ands.w	r2, r6, #15
 8006730:	d00a      	beq.n	8006748 <_strtod_l+0x550>
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <_strtod_l+0x590>)
 8006734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7fa f85c 	bl	80007fc <__aeabi_ddiv>
 8006744:	4680      	mov	r8, r0
 8006746:	4689      	mov	r9, r1
 8006748:	1136      	asrs	r6, r6, #4
 800674a:	d0dc      	beq.n	8006706 <_strtod_l+0x50e>
 800674c:	2e1f      	cmp	r6, #31
 800674e:	dd23      	ble.n	8006798 <_strtod_l+0x5a0>
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	f8cd b010 	str.w	fp, [sp, #16]
 8006758:	f8cd b020 	str.w	fp, [sp, #32]
 800675c:	f8cd b018 	str.w	fp, [sp, #24]
 8006760:	2322      	movs	r3, #34	; 0x22
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	f8ca 3000 	str.w	r3, [sl]
 800676e:	e789      	b.n	8006684 <_strtod_l+0x48c>
 8006770:	0800a6e1 	.word	0x0800a6e1
 8006774:	0800a720 	.word	0x0800a720
 8006778:	0800a6d9 	.word	0x0800a6d9
 800677c:	0800a864 	.word	0x0800a864
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	0800ab93 	.word	0x0800ab93
 8006788:	0800aa58 	.word	0x0800aa58
 800678c:	0800aa30 	.word	0x0800aa30
 8006790:	7ca00000 	.word	0x7ca00000
 8006794:	7fefffff 	.word	0x7fefffff
 8006798:	f016 0310 	ands.w	r3, r6, #16
 800679c:	bf18      	it	ne
 800679e:	236a      	movne	r3, #106	; 0x6a
 80067a0:	4fb1      	ldr	r7, [pc, #708]	; (8006a68 <_strtod_l+0x870>)
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	4640      	mov	r0, r8
 80067a6:	4649      	mov	r1, r9
 80067a8:	2300      	movs	r3, #0
 80067aa:	07f2      	lsls	r2, r6, #31
 80067ac:	d504      	bpl.n	80067b8 <_strtod_l+0x5c0>
 80067ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b2:	f7f9 fef9 	bl	80005a8 <__aeabi_dmul>
 80067b6:	2301      	movs	r3, #1
 80067b8:	1076      	asrs	r6, r6, #1
 80067ba:	f107 0708 	add.w	r7, r7, #8
 80067be:	d1f4      	bne.n	80067aa <_strtod_l+0x5b2>
 80067c0:	b10b      	cbz	r3, 80067c6 <_strtod_l+0x5ce>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	b1c3      	cbz	r3, 80067fc <_strtod_l+0x604>
 80067ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80067ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	4649      	mov	r1, r9
 80067d6:	dd11      	ble.n	80067fc <_strtod_l+0x604>
 80067d8:	2b1f      	cmp	r3, #31
 80067da:	f340 8124 	ble.w	8006a26 <_strtod_l+0x82e>
 80067de:	2b34      	cmp	r3, #52	; 0x34
 80067e0:	bfde      	ittt	le
 80067e2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067e6:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80067ea:	fa03 f202 	lslle.w	r2, r3, r2
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	bfcc      	ite	gt
 80067f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80067f8:	ea02 0901 	andle.w	r9, r2, r1
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7fa f938 	bl	8000a78 <__aeabi_dcmpeq>
 8006808:	2800      	cmp	r0, #0
 800680a:	d1a1      	bne.n	8006750 <_strtod_l+0x558>
 800680c:	9b06      	ldr	r3, [sp, #24]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	9908      	ldr	r1, [sp, #32]
 8006812:	4623      	mov	r3, r4
 8006814:	465a      	mov	r2, fp
 8006816:	4650      	mov	r0, sl
 8006818:	f001 ff38 	bl	800868c <__s2b>
 800681c:	9008      	str	r0, [sp, #32]
 800681e:	2800      	cmp	r0, #0
 8006820:	f43f af21 	beq.w	8006666 <_strtod_l+0x46e>
 8006824:	9b04      	ldr	r3, [sp, #16]
 8006826:	1b5d      	subs	r5, r3, r5
 8006828:	9b07      	ldr	r3, [sp, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfb4      	ite	lt
 800682e:	462b      	movlt	r3, r5
 8006830:	2300      	movge	r3, #0
 8006832:	930e      	str	r3, [sp, #56]	; 0x38
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	f04f 0b00 	mov.w	fp, #0
 800683a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800683e:	9314      	str	r3, [sp, #80]	; 0x50
 8006840:	f8cd b010 	str.w	fp, [sp, #16]
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	4650      	mov	r0, sl
 8006848:	6859      	ldr	r1, [r3, #4]
 800684a:	f001 fe77 	bl	800853c <_Balloc>
 800684e:	9006      	str	r0, [sp, #24]
 8006850:	2800      	cmp	r0, #0
 8006852:	f43f af10 	beq.w	8006676 <_strtod_l+0x47e>
 8006856:	9b08      	ldr	r3, [sp, #32]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	3202      	adds	r2, #2
 800685c:	f103 010c 	add.w	r1, r3, #12
 8006860:	0092      	lsls	r2, r2, #2
 8006862:	300c      	adds	r0, #12
 8006864:	f001 fe5c 	bl	8008520 <memcpy>
 8006868:	ab1c      	add	r3, sp, #112	; 0x70
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	ab1b      	add	r3, sp, #108	; 0x6c
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	4650      	mov	r0, sl
 8006876:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800687a:	f002 fa45 	bl	8008d08 <__d2b>
 800687e:	901a      	str	r0, [sp, #104]	; 0x68
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f aef8 	beq.w	8006676 <_strtod_l+0x47e>
 8006886:	2101      	movs	r1, #1
 8006888:	4650      	mov	r0, sl
 800688a:	f001 ff97 	bl	80087bc <__i2b>
 800688e:	9004      	str	r0, [sp, #16]
 8006890:	4603      	mov	r3, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aeef 	beq.w	8006676 <_strtod_l+0x47e>
 8006898:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800689a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800689c:	2d00      	cmp	r5, #0
 800689e:	bfab      	itete	ge
 80068a0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80068a2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80068a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80068a6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80068a8:	bfac      	ite	ge
 80068aa:	18ee      	addge	r6, r5, r3
 80068ac:	1b5c      	sublt	r4, r3, r5
 80068ae:	9b05      	ldr	r3, [sp, #20]
 80068b0:	1aed      	subs	r5, r5, r3
 80068b2:	4415      	add	r5, r2
 80068b4:	4b6d      	ldr	r3, [pc, #436]	; (8006a6c <_strtod_l+0x874>)
 80068b6:	3d01      	subs	r5, #1
 80068b8:	429d      	cmp	r5, r3
 80068ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068be:	f280 80c4 	bge.w	8006a4a <_strtod_l+0x852>
 80068c2:	1b5b      	subs	r3, r3, r5
 80068c4:	2b1f      	cmp	r3, #31
 80068c6:	eba2 0203 	sub.w	r2, r2, r3
 80068ca:	f04f 0701 	mov.w	r7, #1
 80068ce:	f300 80b1 	bgt.w	8006a34 <_strtod_l+0x83c>
 80068d2:	fa07 f303 	lsl.w	r3, r7, r3
 80068d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d8:	2500      	movs	r5, #0
 80068da:	18b7      	adds	r7, r6, r2
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	42be      	cmp	r6, r7
 80068e0:	4414      	add	r4, r2
 80068e2:	441c      	add	r4, r3
 80068e4:	4633      	mov	r3, r6
 80068e6:	bfa8      	it	ge
 80068e8:	463b      	movge	r3, r7
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	bfa8      	it	ge
 80068ee:	4623      	movge	r3, r4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfc2      	ittt	gt
 80068f4:	1aff      	subgt	r7, r7, r3
 80068f6:	1ae4      	subgt	r4, r4, r3
 80068f8:	1af6      	subgt	r6, r6, r3
 80068fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd17      	ble.n	8006930 <_strtod_l+0x738>
 8006900:	9904      	ldr	r1, [sp, #16]
 8006902:	461a      	mov	r2, r3
 8006904:	4650      	mov	r0, sl
 8006906:	f002 f817 	bl	8008938 <__pow5mult>
 800690a:	9004      	str	r0, [sp, #16]
 800690c:	2800      	cmp	r0, #0
 800690e:	f43f aeb2 	beq.w	8006676 <_strtod_l+0x47e>
 8006912:	4601      	mov	r1, r0
 8006914:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006916:	4650      	mov	r0, sl
 8006918:	f001 ff66 	bl	80087e8 <__multiply>
 800691c:	9009      	str	r0, [sp, #36]	; 0x24
 800691e:	2800      	cmp	r0, #0
 8006920:	f43f aea9 	beq.w	8006676 <_strtod_l+0x47e>
 8006924:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006926:	4650      	mov	r0, sl
 8006928:	f001 fe48 	bl	80085bc <_Bfree>
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	931a      	str	r3, [sp, #104]	; 0x68
 8006930:	2f00      	cmp	r7, #0
 8006932:	f300 808e 	bgt.w	8006a52 <_strtod_l+0x85a>
 8006936:	9b07      	ldr	r3, [sp, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dd08      	ble.n	800694e <_strtod_l+0x756>
 800693c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800693e:	9906      	ldr	r1, [sp, #24]
 8006940:	4650      	mov	r0, sl
 8006942:	f001 fff9 	bl	8008938 <__pow5mult>
 8006946:	9006      	str	r0, [sp, #24]
 8006948:	2800      	cmp	r0, #0
 800694a:	f43f ae94 	beq.w	8006676 <_strtod_l+0x47e>
 800694e:	2c00      	cmp	r4, #0
 8006950:	dd08      	ble.n	8006964 <_strtod_l+0x76c>
 8006952:	9906      	ldr	r1, [sp, #24]
 8006954:	4622      	mov	r2, r4
 8006956:	4650      	mov	r0, sl
 8006958:	f002 f848 	bl	80089ec <__lshift>
 800695c:	9006      	str	r0, [sp, #24]
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f ae89 	beq.w	8006676 <_strtod_l+0x47e>
 8006964:	2e00      	cmp	r6, #0
 8006966:	dd08      	ble.n	800697a <_strtod_l+0x782>
 8006968:	9904      	ldr	r1, [sp, #16]
 800696a:	4632      	mov	r2, r6
 800696c:	4650      	mov	r0, sl
 800696e:	f002 f83d 	bl	80089ec <__lshift>
 8006972:	9004      	str	r0, [sp, #16]
 8006974:	2800      	cmp	r0, #0
 8006976:	f43f ae7e 	beq.w	8006676 <_strtod_l+0x47e>
 800697a:	9a06      	ldr	r2, [sp, #24]
 800697c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800697e:	4650      	mov	r0, sl
 8006980:	f002 f8c0 	bl	8008b04 <__mdiff>
 8006984:	4683      	mov	fp, r0
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f ae75 	beq.w	8006676 <_strtod_l+0x47e>
 800698c:	2400      	movs	r4, #0
 800698e:	68c3      	ldr	r3, [r0, #12]
 8006990:	9904      	ldr	r1, [sp, #16]
 8006992:	60c4      	str	r4, [r0, #12]
 8006994:	930b      	str	r3, [sp, #44]	; 0x2c
 8006996:	f002 f899 	bl	8008acc <__mcmp>
 800699a:	42a0      	cmp	r0, r4
 800699c:	da6c      	bge.n	8006a78 <_strtod_l+0x880>
 800699e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a0:	ea53 0308 	orrs.w	r3, r3, r8
 80069a4:	f040 8092 	bne.w	8006acc <_strtod_l+0x8d4>
 80069a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 808d 	bne.w	8006acc <_strtod_l+0x8d4>
 80069b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069b6:	0d1b      	lsrs	r3, r3, #20
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069be:	f240 8085 	bls.w	8006acc <_strtod_l+0x8d4>
 80069c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80069c6:	b91b      	cbnz	r3, 80069d0 <_strtod_l+0x7d8>
 80069c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	dd7d      	ble.n	8006acc <_strtod_l+0x8d4>
 80069d0:	4659      	mov	r1, fp
 80069d2:	2201      	movs	r2, #1
 80069d4:	4650      	mov	r0, sl
 80069d6:	f002 f809 	bl	80089ec <__lshift>
 80069da:	9904      	ldr	r1, [sp, #16]
 80069dc:	4683      	mov	fp, r0
 80069de:	f002 f875 	bl	8008acc <__mcmp>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	dd72      	ble.n	8006acc <_strtod_l+0x8d4>
 80069e6:	9905      	ldr	r1, [sp, #20]
 80069e8:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <_strtod_l+0x878>)
 80069ea:	464b      	mov	r3, r9
 80069ec:	2900      	cmp	r1, #0
 80069ee:	f000 808d 	beq.w	8006b0c <_strtod_l+0x914>
 80069f2:	ea02 0109 	and.w	r1, r2, r9
 80069f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069fa:	f300 8087 	bgt.w	8006b0c <_strtod_l+0x914>
 80069fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a02:	f77f aead 	ble.w	8006760 <_strtod_l+0x568>
 8006a06:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <_strtod_l+0x87c>)
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f7f9 fdcb 	bl	80005a8 <__aeabi_dmul>
 8006a12:	460b      	mov	r3, r1
 8006a14:	4303      	orrs	r3, r0
 8006a16:	bf08      	it	eq
 8006a18:	2322      	moveq	r3, #34	; 0x22
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	4689      	mov	r9, r1
 8006a1e:	bf08      	it	eq
 8006a20:	f8ca 3000 	streq.w	r3, [sl]
 8006a24:	e632      	b.n	800668c <_strtod_l+0x494>
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	ea03 0808 	and.w	r8, r3, r8
 8006a32:	e6e3      	b.n	80067fc <_strtod_l+0x604>
 8006a34:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006a38:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006a3c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006a40:	35e2      	adds	r5, #226	; 0xe2
 8006a42:	fa07 f505 	lsl.w	r5, r7, r5
 8006a46:	970f      	str	r7, [sp, #60]	; 0x3c
 8006a48:	e747      	b.n	80068da <_strtod_l+0x6e2>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	2500      	movs	r5, #0
 8006a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a50:	e743      	b.n	80068da <_strtod_l+0x6e2>
 8006a52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a54:	463a      	mov	r2, r7
 8006a56:	4650      	mov	r0, sl
 8006a58:	f001 ffc8 	bl	80089ec <__lshift>
 8006a5c:	901a      	str	r0, [sp, #104]	; 0x68
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f47f af69 	bne.w	8006936 <_strtod_l+0x73e>
 8006a64:	e607      	b.n	8006676 <_strtod_l+0x47e>
 8006a66:	bf00      	nop
 8006a68:	0800a738 	.word	0x0800a738
 8006a6c:	fffffc02 	.word	0xfffffc02
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	39500000 	.word	0x39500000
 8006a78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a7c:	d165      	bne.n	8006b4a <_strtod_l+0x952>
 8006a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a84:	b35a      	cbz	r2, 8006ade <_strtod_l+0x8e6>
 8006a86:	4a9a      	ldr	r2, [pc, #616]	; (8006cf0 <_strtod_l+0xaf8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d12b      	bne.n	8006ae4 <_strtod_l+0x8ec>
 8006a8c:	9b05      	ldr	r3, [sp, #20]
 8006a8e:	4641      	mov	r1, r8
 8006a90:	b303      	cbz	r3, 8006ad4 <_strtod_l+0x8dc>
 8006a92:	4b98      	ldr	r3, [pc, #608]	; (8006cf4 <_strtod_l+0xafc>)
 8006a94:	464a      	mov	r2, r9
 8006a96:	4013      	ands	r3, r2
 8006a98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aa0:	d81b      	bhi.n	8006ada <_strtod_l+0x8e2>
 8006aa2:	0d1b      	lsrs	r3, r3, #20
 8006aa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d119      	bne.n	8006ae4 <_strtod_l+0x8ec>
 8006ab0:	4b91      	ldr	r3, [pc, #580]	; (8006cf8 <_strtod_l+0xb00>)
 8006ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d102      	bne.n	8006abe <_strtod_l+0x8c6>
 8006ab8:	3101      	adds	r1, #1
 8006aba:	f43f addc 	beq.w	8006676 <_strtod_l+0x47e>
 8006abe:	4b8d      	ldr	r3, [pc, #564]	; (8006cf4 <_strtod_l+0xafc>)
 8006ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006ac8:	f04f 0800 	mov.w	r8, #0
 8006acc:	9b05      	ldr	r3, [sp, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d199      	bne.n	8006a06 <_strtod_l+0x80e>
 8006ad2:	e5db      	b.n	800668c <_strtod_l+0x494>
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad8:	e7e8      	b.n	8006aac <_strtod_l+0x8b4>
 8006ada:	4613      	mov	r3, r2
 8006adc:	e7e6      	b.n	8006aac <_strtod_l+0x8b4>
 8006ade:	ea53 0308 	orrs.w	r3, r3, r8
 8006ae2:	d080      	beq.n	80069e6 <_strtod_l+0x7ee>
 8006ae4:	b1e5      	cbz	r5, 8006b20 <_strtod_l+0x928>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	421d      	tst	r5, r3
 8006aea:	d0ef      	beq.n	8006acc <_strtod_l+0x8d4>
 8006aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aee:	9a05      	ldr	r2, [sp, #20]
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	b1c3      	cbz	r3, 8006b28 <_strtod_l+0x930>
 8006af6:	f7ff fb5c 	bl	80061b2 <sulp>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b02:	f7f9 fb9b 	bl	800023c <__adddf3>
 8006b06:	4680      	mov	r8, r0
 8006b08:	4689      	mov	r9, r1
 8006b0a:	e7df      	b.n	8006acc <_strtod_l+0x8d4>
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006b16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006b1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006b1e:	e7d5      	b.n	8006acc <_strtod_l+0x8d4>
 8006b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b22:	ea13 0f08 	tst.w	r3, r8
 8006b26:	e7e0      	b.n	8006aea <_strtod_l+0x8f2>
 8006b28:	f7ff fb43 	bl	80061b2 <sulp>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b34:	f7f9 fb80 	bl	8000238 <__aeabi_dsub>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4689      	mov	r9, r1
 8006b40:	f7f9 ff9a 	bl	8000a78 <__aeabi_dcmpeq>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d0c1      	beq.n	8006acc <_strtod_l+0x8d4>
 8006b48:	e60a      	b.n	8006760 <_strtod_l+0x568>
 8006b4a:	9904      	ldr	r1, [sp, #16]
 8006b4c:	4658      	mov	r0, fp
 8006b4e:	f002 f937 	bl	8008dc0 <__ratio>
 8006b52:	2200      	movs	r2, #0
 8006b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b58:	4606      	mov	r6, r0
 8006b5a:	460f      	mov	r7, r1
 8006b5c:	f7f9 ffa0 	bl	8000aa0 <__aeabi_dcmple>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d070      	beq.n	8006c46 <_strtod_l+0xa4e>
 8006b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d042      	beq.n	8006bf0 <_strtod_l+0x9f8>
 8006b6a:	4f64      	ldr	r7, [pc, #400]	; (8006cfc <_strtod_l+0xb04>)
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	4d63      	ldr	r5, [pc, #396]	; (8006cfc <_strtod_l+0xb04>)
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b7e:	4b60      	ldr	r3, [pc, #384]	; (8006d00 <_strtod_l+0xb08>)
 8006b80:	429a      	cmp	r2, r3
 8006b82:	f040 80c5 	bne.w	8006d10 <_strtod_l+0xb18>
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4649      	mov	r1, r9
 8006b90:	f002 f840 	bl	8008c14 <__ulp>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 fd04 	bl	80005a8 <__aeabi_dmul>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	f7f9 fb4a 	bl	800023c <__adddf3>
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4952      	ldr	r1, [pc, #328]	; (8006cf4 <_strtod_l+0xafc>)
 8006bac:	4a55      	ldr	r2, [pc, #340]	; (8006d04 <_strtod_l+0xb0c>)
 8006bae:	4019      	ands	r1, r3
 8006bb0:	4291      	cmp	r1, r2
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	d95d      	bls.n	8006c72 <_strtod_l+0xa7a>
 8006bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bb8:	4b4f      	ldr	r3, [pc, #316]	; (8006cf8 <_strtod_l+0xb00>)
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d103      	bne.n	8006bc6 <_strtod_l+0x9ce>
 8006bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f43f ad58 	beq.w	8006676 <_strtod_l+0x47e>
 8006bc6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8006cf8 <_strtod_l+0xb00>
 8006bca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006bce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f001 fcf3 	bl	80085bc <_Bfree>
 8006bd6:	9906      	ldr	r1, [sp, #24]
 8006bd8:	4650      	mov	r0, sl
 8006bda:	f001 fcef 	bl	80085bc <_Bfree>
 8006bde:	9904      	ldr	r1, [sp, #16]
 8006be0:	4650      	mov	r0, sl
 8006be2:	f001 fceb 	bl	80085bc <_Bfree>
 8006be6:	4659      	mov	r1, fp
 8006be8:	4650      	mov	r0, sl
 8006bea:	f001 fce7 	bl	80085bc <_Bfree>
 8006bee:	e629      	b.n	8006844 <_strtod_l+0x64c>
 8006bf0:	f1b8 0f00 	cmp.w	r8, #0
 8006bf4:	d119      	bne.n	8006c2a <_strtod_l+0xa32>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bfc:	b9e3      	cbnz	r3, 8006c38 <_strtod_l+0xa40>
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	; (8006cfc <_strtod_l+0xb04>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	4639      	mov	r1, r7
 8006c06:	f7f9 ff41 	bl	8000a8c <__aeabi_dcmplt>
 8006c0a:	b9c8      	cbnz	r0, 8006c40 <_strtod_l+0xa48>
 8006c0c:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <_strtod_l+0xb10>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 fcc8 	bl	80005a8 <__aeabi_dmul>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c20:	9416      	str	r4, [sp, #88]	; 0x58
 8006c22:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c24:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006c28:	e7a2      	b.n	8006b70 <_strtod_l+0x978>
 8006c2a:	f1b8 0f01 	cmp.w	r8, #1
 8006c2e:	d103      	bne.n	8006c38 <_strtod_l+0xa40>
 8006c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f43f ad94 	beq.w	8006760 <_strtod_l+0x568>
 8006c38:	4f34      	ldr	r7, [pc, #208]	; (8006d0c <_strtod_l+0xb14>)
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	2400      	movs	r4, #0
 8006c3e:	e796      	b.n	8006b6e <_strtod_l+0x976>
 8006c40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006c42:	4d31      	ldr	r5, [pc, #196]	; (8006d08 <_strtod_l+0xb10>)
 8006c44:	e7ea      	b.n	8006c1c <_strtod_l+0xa24>
 8006c46:	4b30      	ldr	r3, [pc, #192]	; (8006d08 <_strtod_l+0xb10>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fcab 	bl	80005a8 <__aeabi_dmul>
 8006c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	b933      	cbnz	r3, 8006c68 <_strtod_l+0xa70>
 8006c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c5e:	9010      	str	r0, [sp, #64]	; 0x40
 8006c60:	9311      	str	r3, [sp, #68]	; 0x44
 8006c62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c66:	e783      	b.n	8006b70 <_strtod_l+0x978>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c70:	e7f7      	b.n	8006c62 <_strtod_l+0xa6a>
 8006c72:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006c76:	9b05      	ldr	r3, [sp, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1a8      	bne.n	8006bce <_strtod_l+0x9d6>
 8006c7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c82:	0d1b      	lsrs	r3, r3, #20
 8006c84:	051b      	lsls	r3, r3, #20
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d1a1      	bne.n	8006bce <_strtod_l+0x9d6>
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7fa fa49 	bl	8001124 <__aeabi_d2lz>
 8006c92:	f7f9 fc5b 	bl	800054c <__aeabi_l2d>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 facb 	bl	8000238 <__aeabi_dsub>
 8006ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ca8:	ea43 0308 	orr.w	r3, r3, r8
 8006cac:	4313      	orrs	r3, r2
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	d068      	beq.n	8006d86 <_strtod_l+0xb8e>
 8006cb4:	a30a      	add	r3, pc, #40	; (adr r3, 8006ce0 <_strtod_l+0xae8>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fee7 	bl	8000a8c <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f47f ace4 	bne.w	800668c <_strtod_l+0x494>
 8006cc4:	a308      	add	r3, pc, #32	; (adr r3, 8006ce8 <_strtod_l+0xaf0>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7f9 fefb 	bl	8000ac8 <__aeabi_dcmpgt>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	f43f af7b 	beq.w	8006bce <_strtod_l+0x9d6>
 8006cd8:	e4d8      	b.n	800668c <_strtod_l+0x494>
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	94a03595 	.word	0x94a03595
 8006ce4:	3fdfffff 	.word	0x3fdfffff
 8006ce8:	35afe535 	.word	0x35afe535
 8006cec:	3fe00000 	.word	0x3fe00000
 8006cf0:	000fffff 	.word	0x000fffff
 8006cf4:	7ff00000 	.word	0x7ff00000
 8006cf8:	7fefffff 	.word	0x7fefffff
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	7fe00000 	.word	0x7fe00000
 8006d04:	7c9fffff 	.word	0x7c9fffff
 8006d08:	3fe00000 	.word	0x3fe00000
 8006d0c:	bff00000 	.word	0xbff00000
 8006d10:	9b05      	ldr	r3, [sp, #20]
 8006d12:	b313      	cbz	r3, 8006d5a <_strtod_l+0xb62>
 8006d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d1a:	d81e      	bhi.n	8006d5a <_strtod_l+0xb62>
 8006d1c:	a326      	add	r3, pc, #152	; (adr r3, 8006db8 <_strtod_l+0xbc0>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 febb 	bl	8000aa0 <__aeabi_dcmple>
 8006d2a:	b190      	cbz	r0, 8006d52 <_strtod_l+0xb5a>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7f9 ff12 	bl	8000b58 <__aeabi_d2uiz>
 8006d34:	2801      	cmp	r0, #1
 8006d36:	bf38      	it	cc
 8006d38:	2001      	movcc	r0, #1
 8006d3a:	f7f9 fbbb 	bl	80004b4 <__aeabi_ui2d>
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	b9d3      	cbnz	r3, 8006d7c <_strtod_l+0xb84>
 8006d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4a:	9012      	str	r0, [sp, #72]	; 0x48
 8006d4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d4e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d54:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006d58:	1a9f      	subs	r7, r3, r2
 8006d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d5e:	f001 ff59 	bl	8008c14 <__ulp>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 fc1d 	bl	80005a8 <__aeabi_dmul>
 8006d6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d72:	f7f9 fa63 	bl	800023c <__adddf3>
 8006d76:	4680      	mov	r8, r0
 8006d78:	4689      	mov	r9, r1
 8006d7a:	e77c      	b.n	8006c76 <_strtod_l+0xa7e>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006d84:	e7e3      	b.n	8006d4e <_strtod_l+0xb56>
 8006d86:	a30e      	add	r3, pc, #56	; (adr r3, 8006dc0 <_strtod_l+0xbc8>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fe7e 	bl	8000a8c <__aeabi_dcmplt>
 8006d90:	e79f      	b.n	8006cd2 <_strtod_l+0xada>
 8006d92:	2300      	movs	r3, #0
 8006d94:	930a      	str	r3, [sp, #40]	; 0x28
 8006d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	f7ff ba71 	b.w	8006282 <_strtod_l+0x8a>
 8006da0:	2a65      	cmp	r2, #101	; 0x65
 8006da2:	f43f ab63 	beq.w	800646c <_strtod_l+0x274>
 8006da6:	2a45      	cmp	r2, #69	; 0x45
 8006da8:	f43f ab60 	beq.w	800646c <_strtod_l+0x274>
 8006dac:	2301      	movs	r3, #1
 8006dae:	f7ff bb95 	b.w	80064dc <_strtod_l+0x2e4>
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	ffc00000 	.word	0xffc00000
 8006dbc:	41dfffff 	.word	0x41dfffff
 8006dc0:	94a03595 	.word	0x94a03595
 8006dc4:	3fcfffff 	.word	0x3fcfffff

08006dc8 <_strtod_r>:
 8006dc8:	4b01      	ldr	r3, [pc, #4]	; (8006dd0 <_strtod_r+0x8>)
 8006dca:	f7ff ba15 	b.w	80061f8 <_strtod_l>
 8006dce:	bf00      	nop
 8006dd0:	20000074 	.word	0x20000074

08006dd4 <_strtol_l.constprop.0>:
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dda:	4680      	mov	r8, r0
 8006ddc:	d001      	beq.n	8006de2 <_strtol_l.constprop.0+0xe>
 8006dde:	2b24      	cmp	r3, #36	; 0x24
 8006de0:	d906      	bls.n	8006df0 <_strtol_l.constprop.0+0x1c>
 8006de2:	f7fe fa83 	bl	80052ec <__errno>
 8006de6:	2316      	movs	r3, #22
 8006de8:	6003      	str	r3, [r0, #0]
 8006dea:	2000      	movs	r0, #0
 8006dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df0:	4f35      	ldr	r7, [pc, #212]	; (8006ec8 <_strtol_l.constprop.0+0xf4>)
 8006df2:	460d      	mov	r5, r1
 8006df4:	4628      	mov	r0, r5
 8006df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dfa:	5de6      	ldrb	r6, [r4, r7]
 8006dfc:	f016 0608 	ands.w	r6, r6, #8
 8006e00:	d1f8      	bne.n	8006df4 <_strtol_l.constprop.0+0x20>
 8006e02:	2c2d      	cmp	r4, #45	; 0x2d
 8006e04:	d12f      	bne.n	8006e66 <_strtol_l.constprop.0+0x92>
 8006e06:	782c      	ldrb	r4, [r5, #0]
 8006e08:	2601      	movs	r6, #1
 8006e0a:	1c85      	adds	r5, r0, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d057      	beq.n	8006ec0 <_strtol_l.constprop.0+0xec>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d109      	bne.n	8006e28 <_strtol_l.constprop.0+0x54>
 8006e14:	2c30      	cmp	r4, #48	; 0x30
 8006e16:	d107      	bne.n	8006e28 <_strtol_l.constprop.0+0x54>
 8006e18:	7828      	ldrb	r0, [r5, #0]
 8006e1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006e1e:	2858      	cmp	r0, #88	; 0x58
 8006e20:	d149      	bne.n	8006eb6 <_strtol_l.constprop.0+0xe2>
 8006e22:	786c      	ldrb	r4, [r5, #1]
 8006e24:	2310      	movs	r3, #16
 8006e26:	3502      	adds	r5, #2
 8006e28:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006e2c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006e30:	2700      	movs	r7, #0
 8006e32:	fbbe f9f3 	udiv	r9, lr, r3
 8006e36:	4638      	mov	r0, r7
 8006e38:	fb03 ea19 	mls	sl, r3, r9, lr
 8006e3c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e40:	f1bc 0f09 	cmp.w	ip, #9
 8006e44:	d814      	bhi.n	8006e70 <_strtol_l.constprop.0+0x9c>
 8006e46:	4664      	mov	r4, ip
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	dd22      	ble.n	8006e92 <_strtol_l.constprop.0+0xbe>
 8006e4c:	2f00      	cmp	r7, #0
 8006e4e:	db1d      	blt.n	8006e8c <_strtol_l.constprop.0+0xb8>
 8006e50:	4581      	cmp	r9, r0
 8006e52:	d31b      	bcc.n	8006e8c <_strtol_l.constprop.0+0xb8>
 8006e54:	d101      	bne.n	8006e5a <_strtol_l.constprop.0+0x86>
 8006e56:	45a2      	cmp	sl, r4
 8006e58:	db18      	blt.n	8006e8c <_strtol_l.constprop.0+0xb8>
 8006e5a:	fb00 4003 	mla	r0, r0, r3, r4
 8006e5e:	2701      	movs	r7, #1
 8006e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e64:	e7ea      	b.n	8006e3c <_strtol_l.constprop.0+0x68>
 8006e66:	2c2b      	cmp	r4, #43	; 0x2b
 8006e68:	bf04      	itt	eq
 8006e6a:	782c      	ldrbeq	r4, [r5, #0]
 8006e6c:	1c85      	addeq	r5, r0, #2
 8006e6e:	e7cd      	b.n	8006e0c <_strtol_l.constprop.0+0x38>
 8006e70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e74:	f1bc 0f19 	cmp.w	ip, #25
 8006e78:	d801      	bhi.n	8006e7e <_strtol_l.constprop.0+0xaa>
 8006e7a:	3c37      	subs	r4, #55	; 0x37
 8006e7c:	e7e4      	b.n	8006e48 <_strtol_l.constprop.0+0x74>
 8006e7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e82:	f1bc 0f19 	cmp.w	ip, #25
 8006e86:	d804      	bhi.n	8006e92 <_strtol_l.constprop.0+0xbe>
 8006e88:	3c57      	subs	r4, #87	; 0x57
 8006e8a:	e7dd      	b.n	8006e48 <_strtol_l.constprop.0+0x74>
 8006e8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e90:	e7e6      	b.n	8006e60 <_strtol_l.constprop.0+0x8c>
 8006e92:	2f00      	cmp	r7, #0
 8006e94:	da07      	bge.n	8006ea6 <_strtol_l.constprop.0+0xd2>
 8006e96:	2322      	movs	r3, #34	; 0x22
 8006e98:	f8c8 3000 	str.w	r3, [r8]
 8006e9c:	4670      	mov	r0, lr
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	d0a4      	beq.n	8006dec <_strtol_l.constprop.0+0x18>
 8006ea2:	1e69      	subs	r1, r5, #1
 8006ea4:	e005      	b.n	8006eb2 <_strtol_l.constprop.0+0xde>
 8006ea6:	b106      	cbz	r6, 8006eaa <_strtol_l.constprop.0+0xd6>
 8006ea8:	4240      	negs	r0, r0
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	d09e      	beq.n	8006dec <_strtol_l.constprop.0+0x18>
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d1f7      	bne.n	8006ea2 <_strtol_l.constprop.0+0xce>
 8006eb2:	6011      	str	r1, [r2, #0]
 8006eb4:	e79a      	b.n	8006dec <_strtol_l.constprop.0+0x18>
 8006eb6:	2430      	movs	r4, #48	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1b5      	bne.n	8006e28 <_strtol_l.constprop.0+0x54>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	e7b3      	b.n	8006e28 <_strtol_l.constprop.0+0x54>
 8006ec0:	2c30      	cmp	r4, #48	; 0x30
 8006ec2:	d0a9      	beq.n	8006e18 <_strtol_l.constprop.0+0x44>
 8006ec4:	230a      	movs	r3, #10
 8006ec6:	e7af      	b.n	8006e28 <_strtol_l.constprop.0+0x54>
 8006ec8:	0800a761 	.word	0x0800a761

08006ecc <_strtol_r>:
 8006ecc:	f7ff bf82 	b.w	8006dd4 <_strtol_l.constprop.0>

08006ed0 <_write_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	; (8006ef0 <_write_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7fa fec1 	bl	8001c66 <_write>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_write_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_write_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	200002ec 	.word	0x200002ec

08006ef4 <_close_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d06      	ldr	r5, [pc, #24]	; (8006f10 <_close_r+0x1c>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fa fecd 	bl	8001c9e <_close>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_close_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_close_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200002ec 	.word	0x200002ec

08006f14 <quorem>:
 8006f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	6903      	ldr	r3, [r0, #16]
 8006f1a:	690c      	ldr	r4, [r1, #16]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	4607      	mov	r7, r0
 8006f20:	db7d      	blt.n	800701e <quorem+0x10a>
 8006f22:	3c01      	subs	r4, #1
 8006f24:	f101 0814 	add.w	r8, r1, #20
 8006f28:	f100 0514 	add.w	r5, r0, #20
 8006f2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f46:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f4a:	d32e      	bcc.n	8006faa <quorem+0x96>
 8006f4c:	f04f 0e00 	mov.w	lr, #0
 8006f50:	4640      	mov	r0, r8
 8006f52:	46ac      	mov	ip, r5
 8006f54:	46f2      	mov	sl, lr
 8006f56:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f5a:	b293      	uxth	r3, r2
 8006f5c:	fb06 e303 	mla	r3, r6, r3, lr
 8006f60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f64:	0c12      	lsrs	r2, r2, #16
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	fb06 e202 	mla	r2, r6, r2, lr
 8006f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f70:	f8dc a000 	ldr.w	sl, [ip]
 8006f74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	fa13 f38a 	uxtah	r3, r3, sl
 8006f7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f96:	d2de      	bcs.n	8006f56 <quorem+0x42>
 8006f98:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f9c:	b92b      	cbnz	r3, 8006faa <quorem+0x96>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	d32e      	bcc.n	8007006 <quorem+0xf2>
 8006fa8:	613c      	str	r4, [r7, #16]
 8006faa:	4638      	mov	r0, r7
 8006fac:	f001 fd8e 	bl	8008acc <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	db24      	blt.n	8006ffe <quorem+0xea>
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f04f 0c00 	mov.w	ip, #0
 8006fbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8006fc4:	b293      	uxth	r3, r2
 8006fc6:	ebac 0303 	sub.w	r3, ip, r3
 8006fca:	0c12      	lsrs	r2, r2, #16
 8006fcc:	fa13 f38e 	uxtah	r3, r3, lr
 8006fd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fde:	45c1      	cmp	r9, r8
 8006fe0:	f840 3b04 	str.w	r3, [r0], #4
 8006fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fe8:	d2e8      	bcs.n	8006fbc <quorem+0xa8>
 8006fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff2:	b922      	cbnz	r2, 8006ffe <quorem+0xea>
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	d30a      	bcc.n	8007012 <quorem+0xfe>
 8006ffc:	613c      	str	r4, [r7, #16]
 8006ffe:	4630      	mov	r0, r6
 8007000:	b003      	add	sp, #12
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	3b04      	subs	r3, #4
 800700a:	2a00      	cmp	r2, #0
 800700c:	d1cc      	bne.n	8006fa8 <quorem+0x94>
 800700e:	3c01      	subs	r4, #1
 8007010:	e7c7      	b.n	8006fa2 <quorem+0x8e>
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	3b04      	subs	r3, #4
 8007016:	2a00      	cmp	r2, #0
 8007018:	d1f0      	bne.n	8006ffc <quorem+0xe8>
 800701a:	3c01      	subs	r4, #1
 800701c:	e7eb      	b.n	8006ff6 <quorem+0xe2>
 800701e:	2000      	movs	r0, #0
 8007020:	e7ee      	b.n	8007000 <quorem+0xec>
 8007022:	0000      	movs	r0, r0
 8007024:	0000      	movs	r0, r0
	...

08007028 <_dtoa_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800702e:	b099      	sub	sp, #100	; 0x64
 8007030:	4616      	mov	r6, r2
 8007032:	461f      	mov	r7, r3
 8007034:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007038:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800703c:	4605      	mov	r5, r0
 800703e:	b974      	cbnz	r4, 800705e <_dtoa_r+0x36>
 8007040:	2010      	movs	r0, #16
 8007042:	f001 fa53 	bl	80084ec <malloc>
 8007046:	4602      	mov	r2, r0
 8007048:	6268      	str	r0, [r5, #36]	; 0x24
 800704a:	b920      	cbnz	r0, 8007056 <_dtoa_r+0x2e>
 800704c:	4ba8      	ldr	r3, [pc, #672]	; (80072f0 <_dtoa_r+0x2c8>)
 800704e:	21ea      	movs	r1, #234	; 0xea
 8007050:	48a8      	ldr	r0, [pc, #672]	; (80072f4 <_dtoa_r+0x2cc>)
 8007052:	f002 ffe1 	bl	800a018 <__assert_func>
 8007056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800705a:	6004      	str	r4, [r0, #0]
 800705c:	60c4      	str	r4, [r0, #12]
 800705e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	b151      	cbz	r1, 800707a <_dtoa_r+0x52>
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	604a      	str	r2, [r1, #4]
 8007068:	2301      	movs	r3, #1
 800706a:	4093      	lsls	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	4628      	mov	r0, r5
 8007070:	f001 faa4 	bl	80085bc <_Bfree>
 8007074:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	1e3b      	subs	r3, r7, #0
 800707c:	bfb9      	ittee	lt
 800707e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007082:	9305      	strlt	r3, [sp, #20]
 8007084:	2300      	movge	r3, #0
 8007086:	f8c8 3000 	strge.w	r3, [r8]
 800708a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800708e:	4b9a      	ldr	r3, [pc, #616]	; (80072f8 <_dtoa_r+0x2d0>)
 8007090:	bfbc      	itt	lt
 8007092:	2201      	movlt	r2, #1
 8007094:	f8c8 2000 	strlt.w	r2, [r8]
 8007098:	ea33 0309 	bics.w	r3, r3, r9
 800709c:	d119      	bne.n	80070d2 <_dtoa_r+0xaa>
 800709e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070aa:	4333      	orrs	r3, r6
 80070ac:	f000 8580 	beq.w	8007bb0 <_dtoa_r+0xb88>
 80070b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070b2:	b953      	cbnz	r3, 80070ca <_dtoa_r+0xa2>
 80070b4:	4b91      	ldr	r3, [pc, #580]	; (80072fc <_dtoa_r+0x2d4>)
 80070b6:	e022      	b.n	80070fe <_dtoa_r+0xd6>
 80070b8:	4b91      	ldr	r3, [pc, #580]	; (8007300 <_dtoa_r+0x2d8>)
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	3308      	adds	r3, #8
 80070be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	9803      	ldr	r0, [sp, #12]
 80070c4:	b019      	add	sp, #100	; 0x64
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	4b8c      	ldr	r3, [pc, #560]	; (80072fc <_dtoa_r+0x2d4>)
 80070cc:	9303      	str	r3, [sp, #12]
 80070ce:	3303      	adds	r3, #3
 80070d0:	e7f5      	b.n	80070be <_dtoa_r+0x96>
 80070d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	f7f9 fcc9 	bl	8000a78 <__aeabi_dcmpeq>
 80070e6:	4680      	mov	r8, r0
 80070e8:	b158      	cbz	r0, 8007102 <_dtoa_r+0xda>
 80070ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070ec:	2301      	movs	r3, #1
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8559 	beq.w	8007baa <_dtoa_r+0xb82>
 80070f8:	4882      	ldr	r0, [pc, #520]	; (8007304 <_dtoa_r+0x2dc>)
 80070fa:	6018      	str	r0, [r3, #0]
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	e7df      	b.n	80070c2 <_dtoa_r+0x9a>
 8007102:	ab16      	add	r3, sp, #88	; 0x58
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	ab17      	add	r3, sp, #92	; 0x5c
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	4628      	mov	r0, r5
 800710c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007110:	f001 fdfa 	bl	8008d08 <__d2b>
 8007114:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007118:	4683      	mov	fp, r0
 800711a:	2c00      	cmp	r4, #0
 800711c:	d07e      	beq.n	800721c <_dtoa_r+0x1f4>
 800711e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007120:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800712c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007130:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007134:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007138:	4b73      	ldr	r3, [pc, #460]	; (8007308 <_dtoa_r+0x2e0>)
 800713a:	2200      	movs	r2, #0
 800713c:	f7f9 f87c 	bl	8000238 <__aeabi_dsub>
 8007140:	a365      	add	r3, pc, #404	; (adr r3, 80072d8 <_dtoa_r+0x2b0>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 fa2f 	bl	80005a8 <__aeabi_dmul>
 800714a:	a365      	add	r3, pc, #404	; (adr r3, 80072e0 <_dtoa_r+0x2b8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f874 	bl	800023c <__adddf3>
 8007154:	4606      	mov	r6, r0
 8007156:	4620      	mov	r0, r4
 8007158:	460f      	mov	r7, r1
 800715a:	f7f9 f9bb 	bl	80004d4 <__aeabi_i2d>
 800715e:	a362      	add	r3, pc, #392	; (adr r3, 80072e8 <_dtoa_r+0x2c0>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fa20 	bl	80005a8 <__aeabi_dmul>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	f7f9 f864 	bl	800023c <__adddf3>
 8007174:	4606      	mov	r6, r0
 8007176:	460f      	mov	r7, r1
 8007178:	f7f9 fcc6 	bl	8000b08 <__aeabi_d2iz>
 800717c:	2200      	movs	r2, #0
 800717e:	4682      	mov	sl, r0
 8007180:	2300      	movs	r3, #0
 8007182:	4630      	mov	r0, r6
 8007184:	4639      	mov	r1, r7
 8007186:	f7f9 fc81 	bl	8000a8c <__aeabi_dcmplt>
 800718a:	b148      	cbz	r0, 80071a0 <_dtoa_r+0x178>
 800718c:	4650      	mov	r0, sl
 800718e:	f7f9 f9a1 	bl	80004d4 <__aeabi_i2d>
 8007192:	4632      	mov	r2, r6
 8007194:	463b      	mov	r3, r7
 8007196:	f7f9 fc6f 	bl	8000a78 <__aeabi_dcmpeq>
 800719a:	b908      	cbnz	r0, 80071a0 <_dtoa_r+0x178>
 800719c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071a0:	f1ba 0f16 	cmp.w	sl, #22
 80071a4:	d857      	bhi.n	8007256 <_dtoa_r+0x22e>
 80071a6:	4b59      	ldr	r3, [pc, #356]	; (800730c <_dtoa_r+0x2e4>)
 80071a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b4:	f7f9 fc6a 	bl	8000a8c <__aeabi_dcmplt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d04e      	beq.n	800725a <_dtoa_r+0x232>
 80071bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071c0:	2300      	movs	r3, #0
 80071c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071c6:	1b1c      	subs	r4, r3, r4
 80071c8:	1e63      	subs	r3, r4, #1
 80071ca:	9309      	str	r3, [sp, #36]	; 0x24
 80071cc:	bf45      	ittet	mi
 80071ce:	f1c4 0301 	rsbmi	r3, r4, #1
 80071d2:	9306      	strmi	r3, [sp, #24]
 80071d4:	2300      	movpl	r3, #0
 80071d6:	2300      	movmi	r3, #0
 80071d8:	bf4c      	ite	mi
 80071da:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071dc:	9306      	strpl	r3, [sp, #24]
 80071de:	f1ba 0f00 	cmp.w	sl, #0
 80071e2:	db3c      	blt.n	800725e <_dtoa_r+0x236>
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80071ea:	4453      	add	r3, sl
 80071ec:	9309      	str	r3, [sp, #36]	; 0x24
 80071ee:	2300      	movs	r3, #0
 80071f0:	930a      	str	r3, [sp, #40]	; 0x28
 80071f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	f200 808d 	bhi.w	8007314 <_dtoa_r+0x2ec>
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	bfc4      	itt	gt
 80071fe:	3b04      	subgt	r3, #4
 8007200:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007204:	f1a3 0302 	sub.w	r3, r3, #2
 8007208:	bfcc      	ite	gt
 800720a:	2400      	movgt	r4, #0
 800720c:	2401      	movle	r4, #1
 800720e:	2b03      	cmp	r3, #3
 8007210:	f200 808c 	bhi.w	800732c <_dtoa_r+0x304>
 8007214:	e8df f003 	tbb	[pc, r3]
 8007218:	5b4d4f2d 	.word	0x5b4d4f2d
 800721c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007220:	441c      	add	r4, r3
 8007222:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007226:	2b20      	cmp	r3, #32
 8007228:	bfc3      	ittte	gt
 800722a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800722e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007232:	fa09 f303 	lslgt.w	r3, r9, r3
 8007236:	f1c3 0320 	rsble	r3, r3, #32
 800723a:	bfc6      	itte	gt
 800723c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007240:	4318      	orrgt	r0, r3
 8007242:	fa06 f003 	lslle.w	r0, r6, r3
 8007246:	f7f9 f935 	bl	80004b4 <__aeabi_ui2d>
 800724a:	2301      	movs	r3, #1
 800724c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007250:	3c01      	subs	r4, #1
 8007252:	9313      	str	r3, [sp, #76]	; 0x4c
 8007254:	e770      	b.n	8007138 <_dtoa_r+0x110>
 8007256:	2301      	movs	r3, #1
 8007258:	e7b3      	b.n	80071c2 <_dtoa_r+0x19a>
 800725a:	900f      	str	r0, [sp, #60]	; 0x3c
 800725c:	e7b2      	b.n	80071c4 <_dtoa_r+0x19c>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	eba3 030a 	sub.w	r3, r3, sl
 8007264:	9306      	str	r3, [sp, #24]
 8007266:	f1ca 0300 	rsb	r3, sl, #0
 800726a:	930a      	str	r3, [sp, #40]	; 0x28
 800726c:	2300      	movs	r3, #0
 800726e:	930e      	str	r3, [sp, #56]	; 0x38
 8007270:	e7bf      	b.n	80071f2 <_dtoa_r+0x1ca>
 8007272:	2300      	movs	r3, #0
 8007274:	930b      	str	r3, [sp, #44]	; 0x2c
 8007276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007278:	2b00      	cmp	r3, #0
 800727a:	dc5a      	bgt.n	8007332 <_dtoa_r+0x30a>
 800727c:	f04f 0901 	mov.w	r9, #1
 8007280:	f8cd 9020 	str.w	r9, [sp, #32]
 8007284:	464b      	mov	r3, r9
 8007286:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800728a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	6042      	str	r2, [r0, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	f102 0614 	add.w	r6, r2, #20
 8007296:	429e      	cmp	r6, r3
 8007298:	6841      	ldr	r1, [r0, #4]
 800729a:	d950      	bls.n	800733e <_dtoa_r+0x316>
 800729c:	4628      	mov	r0, r5
 800729e:	f001 f94d 	bl	800853c <_Balloc>
 80072a2:	9003      	str	r0, [sp, #12]
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d14e      	bne.n	8007346 <_dtoa_r+0x31e>
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <_dtoa_r+0x2e8>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072b0:	e6ce      	b.n	8007050 <_dtoa_r+0x28>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7de      	b.n	8007274 <_dtoa_r+0x24c>
 80072b6:	2300      	movs	r3, #0
 80072b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072bc:	eb0a 0903 	add.w	r9, sl, r3
 80072c0:	f109 0301 	add.w	r3, r9, #1
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	9308      	str	r3, [sp, #32]
 80072c8:	bfb8      	it	lt
 80072ca:	2301      	movlt	r3, #1
 80072cc:	e7dd      	b.n	800728a <_dtoa_r+0x262>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e7f2      	b.n	80072b8 <_dtoa_r+0x290>
 80072d2:	bf00      	nop
 80072d4:	f3af 8000 	nop.w
 80072d8:	636f4361 	.word	0x636f4361
 80072dc:	3fd287a7 	.word	0x3fd287a7
 80072e0:	8b60c8b3 	.word	0x8b60c8b3
 80072e4:	3fc68a28 	.word	0x3fc68a28
 80072e8:	509f79fb 	.word	0x509f79fb
 80072ec:	3fd34413 	.word	0x3fd34413
 80072f0:	0800a86e 	.word	0x0800a86e
 80072f4:	0800a885 	.word	0x0800a885
 80072f8:	7ff00000 	.word	0x7ff00000
 80072fc:	0800a86a 	.word	0x0800a86a
 8007300:	0800a861 	.word	0x0800a861
 8007304:	0800ab42 	.word	0x0800ab42
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	0800aa58 	.word	0x0800aa58
 8007310:	0800a8e0 	.word	0x0800a8e0
 8007314:	2401      	movs	r4, #1
 8007316:	2300      	movs	r3, #0
 8007318:	9322      	str	r3, [sp, #136]	; 0x88
 800731a:	940b      	str	r4, [sp, #44]	; 0x2c
 800731c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007320:	2200      	movs	r2, #0
 8007322:	f8cd 9020 	str.w	r9, [sp, #32]
 8007326:	2312      	movs	r3, #18
 8007328:	9223      	str	r2, [sp, #140]	; 0x8c
 800732a:	e7ae      	b.n	800728a <_dtoa_r+0x262>
 800732c:	2301      	movs	r3, #1
 800732e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007330:	e7f4      	b.n	800731c <_dtoa_r+0x2f4>
 8007332:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007336:	f8cd 9020 	str.w	r9, [sp, #32]
 800733a:	464b      	mov	r3, r9
 800733c:	e7a5      	b.n	800728a <_dtoa_r+0x262>
 800733e:	3101      	adds	r1, #1
 8007340:	6041      	str	r1, [r0, #4]
 8007342:	0052      	lsls	r2, r2, #1
 8007344:	e7a5      	b.n	8007292 <_dtoa_r+0x26a>
 8007346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007348:	9a03      	ldr	r2, [sp, #12]
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	9b08      	ldr	r3, [sp, #32]
 800734e:	2b0e      	cmp	r3, #14
 8007350:	f200 80a8 	bhi.w	80074a4 <_dtoa_r+0x47c>
 8007354:	2c00      	cmp	r4, #0
 8007356:	f000 80a5 	beq.w	80074a4 <_dtoa_r+0x47c>
 800735a:	f1ba 0f00 	cmp.w	sl, #0
 800735e:	dd34      	ble.n	80073ca <_dtoa_r+0x3a2>
 8007360:	4a9a      	ldr	r2, [pc, #616]	; (80075cc <_dtoa_r+0x5a4>)
 8007362:	f00a 030f 	and.w	r3, sl, #15
 8007366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800736a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007376:	ea4f 142a 	mov.w	r4, sl, asr #4
 800737a:	d016      	beq.n	80073aa <_dtoa_r+0x382>
 800737c:	4b94      	ldr	r3, [pc, #592]	; (80075d0 <_dtoa_r+0x5a8>)
 800737e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007382:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007386:	f7f9 fa39 	bl	80007fc <__aeabi_ddiv>
 800738a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800738e:	f004 040f 	and.w	r4, r4, #15
 8007392:	2703      	movs	r7, #3
 8007394:	4e8e      	ldr	r6, [pc, #568]	; (80075d0 <_dtoa_r+0x5a8>)
 8007396:	b954      	cbnz	r4, 80073ae <_dtoa_r+0x386>
 8007398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800739c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a0:	f7f9 fa2c 	bl	80007fc <__aeabi_ddiv>
 80073a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073a8:	e029      	b.n	80073fe <_dtoa_r+0x3d6>
 80073aa:	2702      	movs	r7, #2
 80073ac:	e7f2      	b.n	8007394 <_dtoa_r+0x36c>
 80073ae:	07e1      	lsls	r1, r4, #31
 80073b0:	d508      	bpl.n	80073c4 <_dtoa_r+0x39c>
 80073b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073ba:	f7f9 f8f5 	bl	80005a8 <__aeabi_dmul>
 80073be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073c2:	3701      	adds	r7, #1
 80073c4:	1064      	asrs	r4, r4, #1
 80073c6:	3608      	adds	r6, #8
 80073c8:	e7e5      	b.n	8007396 <_dtoa_r+0x36e>
 80073ca:	f000 80a5 	beq.w	8007518 <_dtoa_r+0x4f0>
 80073ce:	f1ca 0400 	rsb	r4, sl, #0
 80073d2:	4b7e      	ldr	r3, [pc, #504]	; (80075cc <_dtoa_r+0x5a4>)
 80073d4:	4e7e      	ldr	r6, [pc, #504]	; (80075d0 <_dtoa_r+0x5a8>)
 80073d6:	f004 020f 	and.w	r2, r4, #15
 80073da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e6:	f7f9 f8df 	bl	80005a8 <__aeabi_dmul>
 80073ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073ee:	1124      	asrs	r4, r4, #4
 80073f0:	2300      	movs	r3, #0
 80073f2:	2702      	movs	r7, #2
 80073f4:	2c00      	cmp	r4, #0
 80073f6:	f040 8084 	bne.w	8007502 <_dtoa_r+0x4da>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1d2      	bne.n	80073a4 <_dtoa_r+0x37c>
 80073fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 808b 	beq.w	800751c <_dtoa_r+0x4f4>
 8007406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800740a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800740e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007412:	4b70      	ldr	r3, [pc, #448]	; (80075d4 <_dtoa_r+0x5ac>)
 8007414:	2200      	movs	r2, #0
 8007416:	f7f9 fb39 	bl	8000a8c <__aeabi_dcmplt>
 800741a:	2800      	cmp	r0, #0
 800741c:	d07e      	beq.n	800751c <_dtoa_r+0x4f4>
 800741e:	9b08      	ldr	r3, [sp, #32]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d07b      	beq.n	800751c <_dtoa_r+0x4f4>
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	dd38      	ble.n	800749c <_dtoa_r+0x474>
 800742a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800742e:	4b6a      	ldr	r3, [pc, #424]	; (80075d8 <_dtoa_r+0x5b0>)
 8007430:	2200      	movs	r2, #0
 8007432:	f7f9 f8b9 	bl	80005a8 <__aeabi_dmul>
 8007436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800743a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800743e:	3701      	adds	r7, #1
 8007440:	464c      	mov	r4, r9
 8007442:	4638      	mov	r0, r7
 8007444:	f7f9 f846 	bl	80004d4 <__aeabi_i2d>
 8007448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744c:	f7f9 f8ac 	bl	80005a8 <__aeabi_dmul>
 8007450:	4b62      	ldr	r3, [pc, #392]	; (80075dc <_dtoa_r+0x5b4>)
 8007452:	2200      	movs	r2, #0
 8007454:	f7f8 fef2 	bl	800023c <__adddf3>
 8007458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800745c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007460:	9611      	str	r6, [sp, #68]	; 0x44
 8007462:	2c00      	cmp	r4, #0
 8007464:	d15d      	bne.n	8007522 <_dtoa_r+0x4fa>
 8007466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746a:	4b5d      	ldr	r3, [pc, #372]	; (80075e0 <_dtoa_r+0x5b8>)
 800746c:	2200      	movs	r2, #0
 800746e:	f7f8 fee3 	bl	8000238 <__aeabi_dsub>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800747a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800747c:	4633      	mov	r3, r6
 800747e:	f7f9 fb23 	bl	8000ac8 <__aeabi_dcmpgt>
 8007482:	2800      	cmp	r0, #0
 8007484:	f040 829c 	bne.w	80079c0 <_dtoa_r+0x998>
 8007488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800748c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800748e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007492:	f7f9 fafb 	bl	8000a8c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8290 	bne.w	80079bc <_dtoa_r+0x994>
 800749c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80074a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f2c0 8152 	blt.w	8007750 <_dtoa_r+0x728>
 80074ac:	f1ba 0f0e 	cmp.w	sl, #14
 80074b0:	f300 814e 	bgt.w	8007750 <_dtoa_r+0x728>
 80074b4:	4b45      	ldr	r3, [pc, #276]	; (80075cc <_dtoa_r+0x5a4>)
 80074b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f280 80db 	bge.w	8007680 <_dtoa_r+0x658>
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f300 80d7 	bgt.w	8007680 <_dtoa_r+0x658>
 80074d2:	f040 8272 	bne.w	80079ba <_dtoa_r+0x992>
 80074d6:	4b42      	ldr	r3, [pc, #264]	; (80075e0 <_dtoa_r+0x5b8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074de:	f7f9 f863 	bl	80005a8 <__aeabi_dmul>
 80074e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e6:	f7f9 fae5 	bl	8000ab4 <__aeabi_dcmpge>
 80074ea:	9c08      	ldr	r4, [sp, #32]
 80074ec:	4626      	mov	r6, r4
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f040 8248 	bne.w	8007984 <_dtoa_r+0x95c>
 80074f4:	9f03      	ldr	r7, [sp, #12]
 80074f6:	2331      	movs	r3, #49	; 0x31
 80074f8:	f807 3b01 	strb.w	r3, [r7], #1
 80074fc:	f10a 0a01 	add.w	sl, sl, #1
 8007500:	e244      	b.n	800798c <_dtoa_r+0x964>
 8007502:	07e2      	lsls	r2, r4, #31
 8007504:	d505      	bpl.n	8007512 <_dtoa_r+0x4ea>
 8007506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800750a:	f7f9 f84d 	bl	80005a8 <__aeabi_dmul>
 800750e:	3701      	adds	r7, #1
 8007510:	2301      	movs	r3, #1
 8007512:	1064      	asrs	r4, r4, #1
 8007514:	3608      	adds	r6, #8
 8007516:	e76d      	b.n	80073f4 <_dtoa_r+0x3cc>
 8007518:	2702      	movs	r7, #2
 800751a:	e770      	b.n	80073fe <_dtoa_r+0x3d6>
 800751c:	9c08      	ldr	r4, [sp, #32]
 800751e:	46d0      	mov	r8, sl
 8007520:	e78f      	b.n	8007442 <_dtoa_r+0x41a>
 8007522:	9903      	ldr	r1, [sp, #12]
 8007524:	4b29      	ldr	r3, [pc, #164]	; (80075cc <_dtoa_r+0x5a4>)
 8007526:	4421      	add	r1, r4
 8007528:	9112      	str	r1, [sp, #72]	; 0x48
 800752a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800752c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007538:	2900      	cmp	r1, #0
 800753a:	d055      	beq.n	80075e8 <_dtoa_r+0x5c0>
 800753c:	4929      	ldr	r1, [pc, #164]	; (80075e4 <_dtoa_r+0x5bc>)
 800753e:	2000      	movs	r0, #0
 8007540:	f7f9 f95c 	bl	80007fc <__aeabi_ddiv>
 8007544:	463b      	mov	r3, r7
 8007546:	4632      	mov	r2, r6
 8007548:	f7f8 fe76 	bl	8000238 <__aeabi_dsub>
 800754c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007550:	9f03      	ldr	r7, [sp, #12]
 8007552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007556:	f7f9 fad7 	bl	8000b08 <__aeabi_d2iz>
 800755a:	4604      	mov	r4, r0
 800755c:	f7f8 ffba 	bl	80004d4 <__aeabi_i2d>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007568:	f7f8 fe66 	bl	8000238 <__aeabi_dsub>
 800756c:	3430      	adds	r4, #48	; 0x30
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007576:	f807 4b01 	strb.w	r4, [r7], #1
 800757a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800757e:	f7f9 fa85 	bl	8000a8c <__aeabi_dcmplt>
 8007582:	2800      	cmp	r0, #0
 8007584:	d174      	bne.n	8007670 <_dtoa_r+0x648>
 8007586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758a:	4912      	ldr	r1, [pc, #72]	; (80075d4 <_dtoa_r+0x5ac>)
 800758c:	2000      	movs	r0, #0
 800758e:	f7f8 fe53 	bl	8000238 <__aeabi_dsub>
 8007592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007596:	f7f9 fa79 	bl	8000a8c <__aeabi_dcmplt>
 800759a:	2800      	cmp	r0, #0
 800759c:	f040 80b7 	bne.w	800770e <_dtoa_r+0x6e6>
 80075a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075a2:	429f      	cmp	r7, r3
 80075a4:	f43f af7a 	beq.w	800749c <_dtoa_r+0x474>
 80075a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <_dtoa_r+0x5b0>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	f7f8 fffa 	bl	80005a8 <__aeabi_dmul>
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <_dtoa_r+0x5b0>)
 80075b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075ba:	2200      	movs	r2, #0
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	f7f8 fff2 	bl	80005a8 <__aeabi_dmul>
 80075c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c8:	e7c3      	b.n	8007552 <_dtoa_r+0x52a>
 80075ca:	bf00      	nop
 80075cc:	0800aa58 	.word	0x0800aa58
 80075d0:	0800aa30 	.word	0x0800aa30
 80075d4:	3ff00000 	.word	0x3ff00000
 80075d8:	40240000 	.word	0x40240000
 80075dc:	401c0000 	.word	0x401c0000
 80075e0:	40140000 	.word	0x40140000
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f8 ffdc 	bl	80005a8 <__aeabi_dmul>
 80075f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075f6:	9c03      	ldr	r4, [sp, #12]
 80075f8:	9314      	str	r3, [sp, #80]	; 0x50
 80075fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075fe:	f7f9 fa83 	bl	8000b08 <__aeabi_d2iz>
 8007602:	9015      	str	r0, [sp, #84]	; 0x54
 8007604:	f7f8 ff66 	bl	80004d4 <__aeabi_i2d>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007610:	f7f8 fe12 	bl	8000238 <__aeabi_dsub>
 8007614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007616:	3330      	adds	r3, #48	; 0x30
 8007618:	f804 3b01 	strb.w	r3, [r4], #1
 800761c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800761e:	429c      	cmp	r4, r3
 8007620:	4606      	mov	r6, r0
 8007622:	460f      	mov	r7, r1
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	d124      	bne.n	8007674 <_dtoa_r+0x64c>
 800762a:	4ba4      	ldr	r3, [pc, #656]	; (80078bc <_dtoa_r+0x894>)
 800762c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007630:	f7f8 fe04 	bl	800023c <__adddf3>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f9 fa44 	bl	8000ac8 <__aeabi_dcmpgt>
 8007640:	2800      	cmp	r0, #0
 8007642:	d163      	bne.n	800770c <_dtoa_r+0x6e4>
 8007644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007648:	499c      	ldr	r1, [pc, #624]	; (80078bc <_dtoa_r+0x894>)
 800764a:	2000      	movs	r0, #0
 800764c:	f7f8 fdf4 	bl	8000238 <__aeabi_dsub>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	f7f9 fa18 	bl	8000a8c <__aeabi_dcmplt>
 800765c:	2800      	cmp	r0, #0
 800765e:	f43f af1d 	beq.w	800749c <_dtoa_r+0x474>
 8007662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007664:	1e7b      	subs	r3, r7, #1
 8007666:	9314      	str	r3, [sp, #80]	; 0x50
 8007668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800766c:	2b30      	cmp	r3, #48	; 0x30
 800766e:	d0f8      	beq.n	8007662 <_dtoa_r+0x63a>
 8007670:	46c2      	mov	sl, r8
 8007672:	e03b      	b.n	80076ec <_dtoa_r+0x6c4>
 8007674:	4b92      	ldr	r3, [pc, #584]	; (80078c0 <_dtoa_r+0x898>)
 8007676:	f7f8 ff97 	bl	80005a8 <__aeabi_dmul>
 800767a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800767e:	e7bc      	b.n	80075fa <_dtoa_r+0x5d2>
 8007680:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007684:	9f03      	ldr	r7, [sp, #12]
 8007686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	f7f9 f8b5 	bl	80007fc <__aeabi_ddiv>
 8007692:	f7f9 fa39 	bl	8000b08 <__aeabi_d2iz>
 8007696:	4604      	mov	r4, r0
 8007698:	f7f8 ff1c 	bl	80004d4 <__aeabi_i2d>
 800769c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a0:	f7f8 ff82 	bl	80005a8 <__aeabi_dmul>
 80076a4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4640      	mov	r0, r8
 80076ae:	4649      	mov	r1, r9
 80076b0:	f7f8 fdc2 	bl	8000238 <__aeabi_dsub>
 80076b4:	f807 6b01 	strb.w	r6, [r7], #1
 80076b8:	9e03      	ldr	r6, [sp, #12]
 80076ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80076be:	1bbe      	subs	r6, r7, r6
 80076c0:	45b4      	cmp	ip, r6
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	d136      	bne.n	8007736 <_dtoa_r+0x70e>
 80076c8:	f7f8 fdb8 	bl	800023c <__adddf3>
 80076cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f7f9 f9f8 	bl	8000ac8 <__aeabi_dcmpgt>
 80076d8:	bb58      	cbnz	r0, 8007732 <_dtoa_r+0x70a>
 80076da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076de:	4640      	mov	r0, r8
 80076e0:	4649      	mov	r1, r9
 80076e2:	f7f9 f9c9 	bl	8000a78 <__aeabi_dcmpeq>
 80076e6:	b108      	cbz	r0, 80076ec <_dtoa_r+0x6c4>
 80076e8:	07e1      	lsls	r1, r4, #31
 80076ea:	d422      	bmi.n	8007732 <_dtoa_r+0x70a>
 80076ec:	4628      	mov	r0, r5
 80076ee:	4659      	mov	r1, fp
 80076f0:	f000 ff64 	bl	80085bc <_Bfree>
 80076f4:	2300      	movs	r3, #0
 80076f6:	703b      	strb	r3, [r7, #0]
 80076f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076fa:	f10a 0001 	add.w	r0, sl, #1
 80076fe:	6018      	str	r0, [r3, #0]
 8007700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007702:	2b00      	cmp	r3, #0
 8007704:	f43f acdd 	beq.w	80070c2 <_dtoa_r+0x9a>
 8007708:	601f      	str	r7, [r3, #0]
 800770a:	e4da      	b.n	80070c2 <_dtoa_r+0x9a>
 800770c:	4627      	mov	r7, r4
 800770e:	463b      	mov	r3, r7
 8007710:	461f      	mov	r7, r3
 8007712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007716:	2a39      	cmp	r2, #57	; 0x39
 8007718:	d107      	bne.n	800772a <_dtoa_r+0x702>
 800771a:	9a03      	ldr	r2, [sp, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d1f7      	bne.n	8007710 <_dtoa_r+0x6e8>
 8007720:	9903      	ldr	r1, [sp, #12]
 8007722:	2230      	movs	r2, #48	; 0x30
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	700a      	strb	r2, [r1, #0]
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	3201      	adds	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e79e      	b.n	8007670 <_dtoa_r+0x648>
 8007732:	46d0      	mov	r8, sl
 8007734:	e7eb      	b.n	800770e <_dtoa_r+0x6e6>
 8007736:	4b62      	ldr	r3, [pc, #392]	; (80078c0 <_dtoa_r+0x898>)
 8007738:	2200      	movs	r2, #0
 800773a:	f7f8 ff35 	bl	80005a8 <__aeabi_dmul>
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	f7f9 f997 	bl	8000a78 <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	d09b      	beq.n	8007686 <_dtoa_r+0x65e>
 800774e:	e7cd      	b.n	80076ec <_dtoa_r+0x6c4>
 8007750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007752:	2a00      	cmp	r2, #0
 8007754:	f000 80d0 	beq.w	80078f8 <_dtoa_r+0x8d0>
 8007758:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800775a:	2a01      	cmp	r2, #1
 800775c:	f300 80b2 	bgt.w	80078c4 <_dtoa_r+0x89c>
 8007760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007762:	2a00      	cmp	r2, #0
 8007764:	f000 80a6 	beq.w	80078b4 <_dtoa_r+0x88c>
 8007768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800776c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800776e:	9f06      	ldr	r7, [sp, #24]
 8007770:	9a06      	ldr	r2, [sp, #24]
 8007772:	441a      	add	r2, r3
 8007774:	9206      	str	r2, [sp, #24]
 8007776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007778:	2101      	movs	r1, #1
 800777a:	441a      	add	r2, r3
 800777c:	4628      	mov	r0, r5
 800777e:	9209      	str	r2, [sp, #36]	; 0x24
 8007780:	f001 f81c 	bl	80087bc <__i2b>
 8007784:	4606      	mov	r6, r0
 8007786:	2f00      	cmp	r7, #0
 8007788:	dd0c      	ble.n	80077a4 <_dtoa_r+0x77c>
 800778a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	dd09      	ble.n	80077a4 <_dtoa_r+0x77c>
 8007790:	42bb      	cmp	r3, r7
 8007792:	9a06      	ldr	r2, [sp, #24]
 8007794:	bfa8      	it	ge
 8007796:	463b      	movge	r3, r7
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	9206      	str	r2, [sp, #24]
 800779c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779e:	1aff      	subs	r7, r7, r3
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	9309      	str	r3, [sp, #36]	; 0x24
 80077a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a6:	b1f3      	cbz	r3, 80077e6 <_dtoa_r+0x7be>
 80077a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80a8 	beq.w	8007900 <_dtoa_r+0x8d8>
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	dd10      	ble.n	80077d6 <_dtoa_r+0x7ae>
 80077b4:	4631      	mov	r1, r6
 80077b6:	4622      	mov	r2, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f001 f8bd 	bl	8008938 <__pow5mult>
 80077be:	465a      	mov	r2, fp
 80077c0:	4601      	mov	r1, r0
 80077c2:	4606      	mov	r6, r0
 80077c4:	4628      	mov	r0, r5
 80077c6:	f001 f80f 	bl	80087e8 <__multiply>
 80077ca:	4659      	mov	r1, fp
 80077cc:	4680      	mov	r8, r0
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 fef4 	bl	80085bc <_Bfree>
 80077d4:	46c3      	mov	fp, r8
 80077d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d8:	1b1a      	subs	r2, r3, r4
 80077da:	d004      	beq.n	80077e6 <_dtoa_r+0x7be>
 80077dc:	4659      	mov	r1, fp
 80077de:	4628      	mov	r0, r5
 80077e0:	f001 f8aa 	bl	8008938 <__pow5mult>
 80077e4:	4683      	mov	fp, r0
 80077e6:	2101      	movs	r1, #1
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 ffe7 	bl	80087bc <__i2b>
 80077ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	f340 8086 	ble.w	8007904 <_dtoa_r+0x8dc>
 80077f8:	461a      	mov	r2, r3
 80077fa:	4601      	mov	r1, r0
 80077fc:	4628      	mov	r0, r5
 80077fe:	f001 f89b 	bl	8008938 <__pow5mult>
 8007802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007804:	2b01      	cmp	r3, #1
 8007806:	4604      	mov	r4, r0
 8007808:	dd7f      	ble.n	800790a <_dtoa_r+0x8e2>
 800780a:	f04f 0800 	mov.w	r8, #0
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007814:	6918      	ldr	r0, [r3, #16]
 8007816:	f000 ff83 	bl	8008720 <__hi0bits>
 800781a:	f1c0 0020 	rsb	r0, r0, #32
 800781e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007820:	4418      	add	r0, r3
 8007822:	f010 001f 	ands.w	r0, r0, #31
 8007826:	f000 8092 	beq.w	800794e <_dtoa_r+0x926>
 800782a:	f1c0 0320 	rsb	r3, r0, #32
 800782e:	2b04      	cmp	r3, #4
 8007830:	f340 808a 	ble.w	8007948 <_dtoa_r+0x920>
 8007834:	f1c0 001c 	rsb	r0, r0, #28
 8007838:	9b06      	ldr	r3, [sp, #24]
 800783a:	4403      	add	r3, r0
 800783c:	9306      	str	r3, [sp, #24]
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	4403      	add	r3, r0
 8007842:	4407      	add	r7, r0
 8007844:	9309      	str	r3, [sp, #36]	; 0x24
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dd05      	ble.n	8007858 <_dtoa_r+0x830>
 800784c:	4659      	mov	r1, fp
 800784e:	461a      	mov	r2, r3
 8007850:	4628      	mov	r0, r5
 8007852:	f001 f8cb 	bl	80089ec <__lshift>
 8007856:	4683      	mov	fp, r0
 8007858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd05      	ble.n	800786a <_dtoa_r+0x842>
 800785e:	4621      	mov	r1, r4
 8007860:	461a      	mov	r2, r3
 8007862:	4628      	mov	r0, r5
 8007864:	f001 f8c2 	bl	80089ec <__lshift>
 8007868:	4604      	mov	r4, r0
 800786a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d070      	beq.n	8007952 <_dtoa_r+0x92a>
 8007870:	4621      	mov	r1, r4
 8007872:	4658      	mov	r0, fp
 8007874:	f001 f92a 	bl	8008acc <__mcmp>
 8007878:	2800      	cmp	r0, #0
 800787a:	da6a      	bge.n	8007952 <_dtoa_r+0x92a>
 800787c:	2300      	movs	r3, #0
 800787e:	4659      	mov	r1, fp
 8007880:	220a      	movs	r2, #10
 8007882:	4628      	mov	r0, r5
 8007884:	f000 febc 	bl	8008600 <__multadd>
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800788e:	4683      	mov	fp, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8194 	beq.w	8007bbe <_dtoa_r+0xb96>
 8007896:	4631      	mov	r1, r6
 8007898:	2300      	movs	r3, #0
 800789a:	220a      	movs	r2, #10
 800789c:	4628      	mov	r0, r5
 800789e:	f000 feaf 	bl	8008600 <__multadd>
 80078a2:	f1b9 0f00 	cmp.w	r9, #0
 80078a6:	4606      	mov	r6, r0
 80078a8:	f300 8093 	bgt.w	80079d2 <_dtoa_r+0x9aa>
 80078ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	dc57      	bgt.n	8007962 <_dtoa_r+0x93a>
 80078b2:	e08e      	b.n	80079d2 <_dtoa_r+0x9aa>
 80078b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078ba:	e757      	b.n	800776c <_dtoa_r+0x744>
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	40240000 	.word	0x40240000
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	1e5c      	subs	r4, r3, #1
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	bfbf      	itttt	lt
 80078ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80078d2:	1ae2      	sublt	r2, r4, r3
 80078d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80078d6:	bfb6      	itet	lt
 80078d8:	189b      	addlt	r3, r3, r2
 80078da:	1b1c      	subge	r4, r3, r4
 80078dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	bfb8      	it	lt
 80078e2:	2400      	movlt	r4, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bfb9      	ittee	lt
 80078e8:	9b06      	ldrlt	r3, [sp, #24]
 80078ea:	9a08      	ldrlt	r2, [sp, #32]
 80078ec:	9f06      	ldrge	r7, [sp, #24]
 80078ee:	9b08      	ldrge	r3, [sp, #32]
 80078f0:	bfbc      	itt	lt
 80078f2:	1a9f      	sublt	r7, r3, r2
 80078f4:	2300      	movlt	r3, #0
 80078f6:	e73b      	b.n	8007770 <_dtoa_r+0x748>
 80078f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078fa:	9f06      	ldr	r7, [sp, #24]
 80078fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078fe:	e742      	b.n	8007786 <_dtoa_r+0x75e>
 8007900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007902:	e76b      	b.n	80077dc <_dtoa_r+0x7b4>
 8007904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007906:	2b01      	cmp	r3, #1
 8007908:	dc19      	bgt.n	800793e <_dtoa_r+0x916>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	b9bb      	cbnz	r3, 800793e <_dtoa_r+0x916>
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007914:	b99b      	cbnz	r3, 800793e <_dtoa_r+0x916>
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800791c:	0d1b      	lsrs	r3, r3, #20
 800791e:	051b      	lsls	r3, r3, #20
 8007920:	b183      	cbz	r3, 8007944 <_dtoa_r+0x91c>
 8007922:	9b06      	ldr	r3, [sp, #24]
 8007924:	3301      	adds	r3, #1
 8007926:	9306      	str	r3, [sp, #24]
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	3301      	adds	r3, #1
 800792c:	9309      	str	r3, [sp, #36]	; 0x24
 800792e:	f04f 0801 	mov.w	r8, #1
 8007932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	f47f af6a 	bne.w	800780e <_dtoa_r+0x7e6>
 800793a:	2001      	movs	r0, #1
 800793c:	e76f      	b.n	800781e <_dtoa_r+0x7f6>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	e7f6      	b.n	8007932 <_dtoa_r+0x90a>
 8007944:	4698      	mov	r8, r3
 8007946:	e7f4      	b.n	8007932 <_dtoa_r+0x90a>
 8007948:	f43f af7d 	beq.w	8007846 <_dtoa_r+0x81e>
 800794c:	4618      	mov	r0, r3
 800794e:	301c      	adds	r0, #28
 8007950:	e772      	b.n	8007838 <_dtoa_r+0x810>
 8007952:	9b08      	ldr	r3, [sp, #32]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc36      	bgt.n	80079c6 <_dtoa_r+0x99e>
 8007958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795a:	2b02      	cmp	r3, #2
 800795c:	dd33      	ble.n	80079c6 <_dtoa_r+0x99e>
 800795e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007962:	f1b9 0f00 	cmp.w	r9, #0
 8007966:	d10d      	bne.n	8007984 <_dtoa_r+0x95c>
 8007968:	4621      	mov	r1, r4
 800796a:	464b      	mov	r3, r9
 800796c:	2205      	movs	r2, #5
 800796e:	4628      	mov	r0, r5
 8007970:	f000 fe46 	bl	8008600 <__multadd>
 8007974:	4601      	mov	r1, r0
 8007976:	4604      	mov	r4, r0
 8007978:	4658      	mov	r0, fp
 800797a:	f001 f8a7 	bl	8008acc <__mcmp>
 800797e:	2800      	cmp	r0, #0
 8007980:	f73f adb8 	bgt.w	80074f4 <_dtoa_r+0x4cc>
 8007984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007986:	9f03      	ldr	r7, [sp, #12]
 8007988:	ea6f 0a03 	mvn.w	sl, r3
 800798c:	f04f 0800 	mov.w	r8, #0
 8007990:	4621      	mov	r1, r4
 8007992:	4628      	mov	r0, r5
 8007994:	f000 fe12 	bl	80085bc <_Bfree>
 8007998:	2e00      	cmp	r6, #0
 800799a:	f43f aea7 	beq.w	80076ec <_dtoa_r+0x6c4>
 800799e:	f1b8 0f00 	cmp.w	r8, #0
 80079a2:	d005      	beq.n	80079b0 <_dtoa_r+0x988>
 80079a4:	45b0      	cmp	r8, r6
 80079a6:	d003      	beq.n	80079b0 <_dtoa_r+0x988>
 80079a8:	4641      	mov	r1, r8
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 fe06 	bl	80085bc <_Bfree>
 80079b0:	4631      	mov	r1, r6
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 fe02 	bl	80085bc <_Bfree>
 80079b8:	e698      	b.n	80076ec <_dtoa_r+0x6c4>
 80079ba:	2400      	movs	r4, #0
 80079bc:	4626      	mov	r6, r4
 80079be:	e7e1      	b.n	8007984 <_dtoa_r+0x95c>
 80079c0:	46c2      	mov	sl, r8
 80079c2:	4626      	mov	r6, r4
 80079c4:	e596      	b.n	80074f4 <_dtoa_r+0x4cc>
 80079c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80fd 	beq.w	8007bcc <_dtoa_r+0xba4>
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	dd05      	ble.n	80079e2 <_dtoa_r+0x9ba>
 80079d6:	4631      	mov	r1, r6
 80079d8:	463a      	mov	r2, r7
 80079da:	4628      	mov	r0, r5
 80079dc:	f001 f806 	bl	80089ec <__lshift>
 80079e0:	4606      	mov	r6, r0
 80079e2:	f1b8 0f00 	cmp.w	r8, #0
 80079e6:	d05c      	beq.n	8007aa2 <_dtoa_r+0xa7a>
 80079e8:	6871      	ldr	r1, [r6, #4]
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fda6 	bl	800853c <_Balloc>
 80079f0:	4607      	mov	r7, r0
 80079f2:	b928      	cbnz	r0, 8007a00 <_dtoa_r+0x9d8>
 80079f4:	4b80      	ldr	r3, [pc, #512]	; (8007bf8 <_dtoa_r+0xbd0>)
 80079f6:	4602      	mov	r2, r0
 80079f8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079fc:	f7ff bb28 	b.w	8007050 <_dtoa_r+0x28>
 8007a00:	6932      	ldr	r2, [r6, #16]
 8007a02:	3202      	adds	r2, #2
 8007a04:	0092      	lsls	r2, r2, #2
 8007a06:	f106 010c 	add.w	r1, r6, #12
 8007a0a:	300c      	adds	r0, #12
 8007a0c:	f000 fd88 	bl	8008520 <memcpy>
 8007a10:	2201      	movs	r2, #1
 8007a12:	4639      	mov	r1, r7
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 ffe9 	bl	80089ec <__lshift>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	9308      	str	r3, [sp, #32]
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	444b      	add	r3, r9
 8007a24:	930a      	str	r3, [sp, #40]	; 0x28
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	46b0      	mov	r8, r6
 8007a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a30:	4606      	mov	r6, r0
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	4621      	mov	r1, r4
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4658      	mov	r0, fp
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	f7ff fa6a 	bl	8006f14 <quorem>
 8007a40:	4603      	mov	r3, r0
 8007a42:	3330      	adds	r3, #48	; 0x30
 8007a44:	9006      	str	r0, [sp, #24]
 8007a46:	4641      	mov	r1, r8
 8007a48:	4658      	mov	r0, fp
 8007a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4c:	f001 f83e 	bl	8008acc <__mcmp>
 8007a50:	4632      	mov	r2, r6
 8007a52:	4681      	mov	r9, r0
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f001 f854 	bl	8008b04 <__mdiff>
 8007a5c:	68c2      	ldr	r2, [r0, #12]
 8007a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a60:	4607      	mov	r7, r0
 8007a62:	bb02      	cbnz	r2, 8007aa6 <_dtoa_r+0xa7e>
 8007a64:	4601      	mov	r1, r0
 8007a66:	4658      	mov	r0, fp
 8007a68:	f001 f830 	bl	8008acc <__mcmp>
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4639      	mov	r1, r7
 8007a72:	4628      	mov	r0, r5
 8007a74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007a78:	f000 fda0 	bl	80085bc <_Bfree>
 8007a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a80:	9f08      	ldr	r7, [sp, #32]
 8007a82:	ea43 0102 	orr.w	r1, r3, r2
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8c:	d10d      	bne.n	8007aaa <_dtoa_r+0xa82>
 8007a8e:	2b39      	cmp	r3, #57	; 0x39
 8007a90:	d029      	beq.n	8007ae6 <_dtoa_r+0xabe>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	dd01      	ble.n	8007a9c <_dtoa_r+0xa74>
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	3331      	adds	r3, #49	; 0x31
 8007a9c:	9a04      	ldr	r2, [sp, #16]
 8007a9e:	7013      	strb	r3, [r2, #0]
 8007aa0:	e776      	b.n	8007990 <_dtoa_r+0x968>
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	e7b9      	b.n	8007a1a <_dtoa_r+0x9f2>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	e7e2      	b.n	8007a70 <_dtoa_r+0xa48>
 8007aaa:	f1b9 0f00 	cmp.w	r9, #0
 8007aae:	db06      	blt.n	8007abe <_dtoa_r+0xa96>
 8007ab0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007ab2:	ea41 0909 	orr.w	r9, r1, r9
 8007ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab8:	ea59 0101 	orrs.w	r1, r9, r1
 8007abc:	d120      	bne.n	8007b00 <_dtoa_r+0xad8>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	ddec      	ble.n	8007a9c <_dtoa_r+0xa74>
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	9308      	str	r3, [sp, #32]
 8007aca:	f000 ff8f 	bl	80089ec <__lshift>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4683      	mov	fp, r0
 8007ad2:	f000 fffb 	bl	8008acc <__mcmp>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	9b08      	ldr	r3, [sp, #32]
 8007ada:	dc02      	bgt.n	8007ae2 <_dtoa_r+0xaba>
 8007adc:	d1de      	bne.n	8007a9c <_dtoa_r+0xa74>
 8007ade:	07da      	lsls	r2, r3, #31
 8007ae0:	d5dc      	bpl.n	8007a9c <_dtoa_r+0xa74>
 8007ae2:	2b39      	cmp	r3, #57	; 0x39
 8007ae4:	d1d8      	bne.n	8007a98 <_dtoa_r+0xa70>
 8007ae6:	9a04      	ldr	r2, [sp, #16]
 8007ae8:	2339      	movs	r3, #57	; 0x39
 8007aea:	7013      	strb	r3, [r2, #0]
 8007aec:	463b      	mov	r3, r7
 8007aee:	461f      	mov	r7, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007af6:	2a39      	cmp	r2, #57	; 0x39
 8007af8:	d050      	beq.n	8007b9c <_dtoa_r+0xb74>
 8007afa:	3201      	adds	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	e747      	b.n	8007990 <_dtoa_r+0x968>
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	dd03      	ble.n	8007b0c <_dtoa_r+0xae4>
 8007b04:	2b39      	cmp	r3, #57	; 0x39
 8007b06:	d0ee      	beq.n	8007ae6 <_dtoa_r+0xabe>
 8007b08:	3301      	adds	r3, #1
 8007b0a:	e7c7      	b.n	8007a9c <_dtoa_r+0xa74>
 8007b0c:	9a08      	ldr	r2, [sp, #32]
 8007b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b14:	428a      	cmp	r2, r1
 8007b16:	d02a      	beq.n	8007b6e <_dtoa_r+0xb46>
 8007b18:	4659      	mov	r1, fp
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fd6e 	bl	8008600 <__multadd>
 8007b24:	45b0      	cmp	r8, r6
 8007b26:	4683      	mov	fp, r0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	f04f 020a 	mov.w	r2, #10
 8007b30:	4641      	mov	r1, r8
 8007b32:	4628      	mov	r0, r5
 8007b34:	d107      	bne.n	8007b46 <_dtoa_r+0xb1e>
 8007b36:	f000 fd63 	bl	8008600 <__multadd>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	9b08      	ldr	r3, [sp, #32]
 8007b40:	3301      	adds	r3, #1
 8007b42:	9308      	str	r3, [sp, #32]
 8007b44:	e775      	b.n	8007a32 <_dtoa_r+0xa0a>
 8007b46:	f000 fd5b 	bl	8008600 <__multadd>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220a      	movs	r2, #10
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 fd54 	bl	8008600 <__multadd>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	e7f0      	b.n	8007b3e <_dtoa_r+0xb16>
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	9a03      	ldr	r2, [sp, #12]
 8007b62:	bfcc      	ite	gt
 8007b64:	464f      	movgt	r7, r9
 8007b66:	2701      	movle	r7, #1
 8007b68:	4417      	add	r7, r2
 8007b6a:	f04f 0800 	mov.w	r8, #0
 8007b6e:	4659      	mov	r1, fp
 8007b70:	2201      	movs	r2, #1
 8007b72:	4628      	mov	r0, r5
 8007b74:	9308      	str	r3, [sp, #32]
 8007b76:	f000 ff39 	bl	80089ec <__lshift>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4683      	mov	fp, r0
 8007b7e:	f000 ffa5 	bl	8008acc <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	dcb2      	bgt.n	8007aec <_dtoa_r+0xac4>
 8007b86:	d102      	bne.n	8007b8e <_dtoa_r+0xb66>
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d4ae      	bmi.n	8007aec <_dtoa_r+0xac4>
 8007b8e:	463b      	mov	r3, r7
 8007b90:	461f      	mov	r7, r3
 8007b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b96:	2a30      	cmp	r2, #48	; 0x30
 8007b98:	d0fa      	beq.n	8007b90 <_dtoa_r+0xb68>
 8007b9a:	e6f9      	b.n	8007990 <_dtoa_r+0x968>
 8007b9c:	9a03      	ldr	r2, [sp, #12]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d1a5      	bne.n	8007aee <_dtoa_r+0xac6>
 8007ba2:	f10a 0a01 	add.w	sl, sl, #1
 8007ba6:	2331      	movs	r3, #49	; 0x31
 8007ba8:	e779      	b.n	8007a9e <_dtoa_r+0xa76>
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <_dtoa_r+0xbd4>)
 8007bac:	f7ff baa7 	b.w	80070fe <_dtoa_r+0xd6>
 8007bb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f47f aa80 	bne.w	80070b8 <_dtoa_r+0x90>
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <_dtoa_r+0xbd8>)
 8007bba:	f7ff baa0 	b.w	80070fe <_dtoa_r+0xd6>
 8007bbe:	f1b9 0f00 	cmp.w	r9, #0
 8007bc2:	dc03      	bgt.n	8007bcc <_dtoa_r+0xba4>
 8007bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	f73f aecb 	bgt.w	8007962 <_dtoa_r+0x93a>
 8007bcc:	9f03      	ldr	r7, [sp, #12]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	f7ff f99f 	bl	8006f14 <quorem>
 8007bd6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007bda:	f807 3b01 	strb.w	r3, [r7], #1
 8007bde:	9a03      	ldr	r2, [sp, #12]
 8007be0:	1aba      	subs	r2, r7, r2
 8007be2:	4591      	cmp	r9, r2
 8007be4:	ddba      	ble.n	8007b5c <_dtoa_r+0xb34>
 8007be6:	4659      	mov	r1, fp
 8007be8:	2300      	movs	r3, #0
 8007bea:	220a      	movs	r2, #10
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fd07 	bl	8008600 <__multadd>
 8007bf2:	4683      	mov	fp, r0
 8007bf4:	e7eb      	b.n	8007bce <_dtoa_r+0xba6>
 8007bf6:	bf00      	nop
 8007bf8:	0800a8e0 	.word	0x0800a8e0
 8007bfc:	0800ab41 	.word	0x0800ab41
 8007c00:	0800a861 	.word	0x0800a861

08007c04 <std>:
 8007c04:	2300      	movs	r3, #0
 8007c06:	b510      	push	{r4, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c12:	6083      	str	r3, [r0, #8]
 8007c14:	8181      	strh	r1, [r0, #12]
 8007c16:	6643      	str	r3, [r0, #100]	; 0x64
 8007c18:	81c2      	strh	r2, [r0, #14]
 8007c1a:	6183      	str	r3, [r0, #24]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	2208      	movs	r2, #8
 8007c20:	305c      	adds	r0, #92	; 0x5c
 8007c22:	f7fd fb8d 	bl	8005340 <memset>
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <std+0x38>)
 8007c28:	6263      	str	r3, [r4, #36]	; 0x24
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <std+0x3c>)
 8007c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c2e:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <std+0x40>)
 8007c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c32:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <std+0x44>)
 8007c34:	6224      	str	r4, [r4, #32]
 8007c36:	6323      	str	r3, [r4, #48]	; 0x30
 8007c38:	bd10      	pop	{r4, pc}
 8007c3a:	bf00      	nop
 8007c3c:	080060ed 	.word	0x080060ed
 8007c40:	08006113 	.word	0x08006113
 8007c44:	0800614b 	.word	0x0800614b
 8007c48:	0800616f 	.word	0x0800616f

08007c4c <_cleanup_r>:
 8007c4c:	4901      	ldr	r1, [pc, #4]	; (8007c54 <_cleanup_r+0x8>)
 8007c4e:	f000 b8af 	b.w	8007db0 <_fwalk_reent>
 8007c52:	bf00      	nop
 8007c54:	0800a159 	.word	0x0800a159

08007c58 <__sfmoreglue>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	2268      	movs	r2, #104	; 0x68
 8007c5c:	1e4d      	subs	r5, r1, #1
 8007c5e:	4355      	muls	r5, r2
 8007c60:	460e      	mov	r6, r1
 8007c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c66:	f001 f99b 	bl	8008fa0 <_malloc_r>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	b140      	cbz	r0, 8007c80 <__sfmoreglue+0x28>
 8007c6e:	2100      	movs	r1, #0
 8007c70:	e9c0 1600 	strd	r1, r6, [r0]
 8007c74:	300c      	adds	r0, #12
 8007c76:	60a0      	str	r0, [r4, #8]
 8007c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c7c:	f7fd fb60 	bl	8005340 <memset>
 8007c80:	4620      	mov	r0, r4
 8007c82:	bd70      	pop	{r4, r5, r6, pc}

08007c84 <__sfp_lock_acquire>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__sfp_lock_acquire+0x8>)
 8007c86:	f000 bc1c 	b.w	80084c2 <__retarget_lock_acquire_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	200002e1 	.word	0x200002e1

08007c90 <__sfp_lock_release>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__sfp_lock_release+0x8>)
 8007c92:	f000 bc17 	b.w	80084c4 <__retarget_lock_release_recursive>
 8007c96:	bf00      	nop
 8007c98:	200002e1 	.word	0x200002e1

08007c9c <__sinit_lock_acquire>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	; (8007ca4 <__sinit_lock_acquire+0x8>)
 8007c9e:	f000 bc10 	b.w	80084c2 <__retarget_lock_acquire_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	200002e2 	.word	0x200002e2

08007ca8 <__sinit_lock_release>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	; (8007cb0 <__sinit_lock_release+0x8>)
 8007caa:	f000 bc0b 	b.w	80084c4 <__retarget_lock_release_recursive>
 8007cae:	bf00      	nop
 8007cb0:	200002e2 	.word	0x200002e2

08007cb4 <__sinit>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	f7ff fff0 	bl	8007c9c <__sinit_lock_acquire>
 8007cbc:	69a3      	ldr	r3, [r4, #24]
 8007cbe:	b11b      	cbz	r3, 8007cc8 <__sinit+0x14>
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	f7ff bff0 	b.w	8007ca8 <__sinit_lock_release>
 8007cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <__sinit+0x68>)
 8007cd0:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <__sinit+0x6c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	bf04      	itt	eq
 8007cda:	2301      	moveq	r3, #1
 8007cdc:	61a3      	streq	r3, [r4, #24]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 f820 	bl	8007d24 <__sfp>
 8007ce4:	6060      	str	r0, [r4, #4]
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 f81c 	bl	8007d24 <__sfp>
 8007cec:	60a0      	str	r0, [r4, #8]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 f818 	bl	8007d24 <__sfp>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	60e0      	str	r0, [r4, #12]
 8007cf8:	2104      	movs	r1, #4
 8007cfa:	6860      	ldr	r0, [r4, #4]
 8007cfc:	f7ff ff82 	bl	8007c04 <std>
 8007d00:	68a0      	ldr	r0, [r4, #8]
 8007d02:	2201      	movs	r2, #1
 8007d04:	2109      	movs	r1, #9
 8007d06:	f7ff ff7d 	bl	8007c04 <std>
 8007d0a:	68e0      	ldr	r0, [r4, #12]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	2112      	movs	r1, #18
 8007d10:	f7ff ff78 	bl	8007c04 <std>
 8007d14:	2301      	movs	r3, #1
 8007d16:	61a3      	str	r3, [r4, #24]
 8007d18:	e7d2      	b.n	8007cc0 <__sinit+0xc>
 8007d1a:	bf00      	nop
 8007d1c:	0800a6d0 	.word	0x0800a6d0
 8007d20:	08007c4d 	.word	0x08007c4d

08007d24 <__sfp>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	4607      	mov	r7, r0
 8007d28:	f7ff ffac 	bl	8007c84 <__sfp_lock_acquire>
 8007d2c:	4b1e      	ldr	r3, [pc, #120]	; (8007da8 <__sfp+0x84>)
 8007d2e:	681e      	ldr	r6, [r3, #0]
 8007d30:	69b3      	ldr	r3, [r6, #24]
 8007d32:	b913      	cbnz	r3, 8007d3a <__sfp+0x16>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ffbd 	bl	8007cb4 <__sinit>
 8007d3a:	3648      	adds	r6, #72	; 0x48
 8007d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	d503      	bpl.n	8007d4c <__sfp+0x28>
 8007d44:	6833      	ldr	r3, [r6, #0]
 8007d46:	b30b      	cbz	r3, 8007d8c <__sfp+0x68>
 8007d48:	6836      	ldr	r6, [r6, #0]
 8007d4a:	e7f7      	b.n	8007d3c <__sfp+0x18>
 8007d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d50:	b9d5      	cbnz	r5, 8007d88 <__sfp+0x64>
 8007d52:	4b16      	ldr	r3, [pc, #88]	; (8007dac <__sfp+0x88>)
 8007d54:	60e3      	str	r3, [r4, #12]
 8007d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d5c:	f000 fbb0 	bl	80084c0 <__retarget_lock_init_recursive>
 8007d60:	f7ff ff96 	bl	8007c90 <__sfp_lock_release>
 8007d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d6c:	6025      	str	r5, [r4, #0]
 8007d6e:	61a5      	str	r5, [r4, #24]
 8007d70:	2208      	movs	r2, #8
 8007d72:	4629      	mov	r1, r5
 8007d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d78:	f7fd fae2 	bl	8005340 <memset>
 8007d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d84:	4620      	mov	r0, r4
 8007d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d88:	3468      	adds	r4, #104	; 0x68
 8007d8a:	e7d9      	b.n	8007d40 <__sfp+0x1c>
 8007d8c:	2104      	movs	r1, #4
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f7ff ff62 	bl	8007c58 <__sfmoreglue>
 8007d94:	4604      	mov	r4, r0
 8007d96:	6030      	str	r0, [r6, #0]
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d1d5      	bne.n	8007d48 <__sfp+0x24>
 8007d9c:	f7ff ff78 	bl	8007c90 <__sfp_lock_release>
 8007da0:	230c      	movs	r3, #12
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	e7ee      	b.n	8007d84 <__sfp+0x60>
 8007da6:	bf00      	nop
 8007da8:	0800a6d0 	.word	0x0800a6d0
 8007dac:	ffff0001 	.word	0xffff0001

08007db0 <_fwalk_reent>:
 8007db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db4:	4606      	mov	r6, r0
 8007db6:	4688      	mov	r8, r1
 8007db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dbc:	2700      	movs	r7, #0
 8007dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8007dc6:	d505      	bpl.n	8007dd4 <_fwalk_reent+0x24>
 8007dc8:	6824      	ldr	r4, [r4, #0]
 8007dca:	2c00      	cmp	r4, #0
 8007dcc:	d1f7      	bne.n	8007dbe <_fwalk_reent+0xe>
 8007dce:	4638      	mov	r0, r7
 8007dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd4:	89ab      	ldrh	r3, [r5, #12]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d907      	bls.n	8007dea <_fwalk_reent+0x3a>
 8007dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dde:	3301      	adds	r3, #1
 8007de0:	d003      	beq.n	8007dea <_fwalk_reent+0x3a>
 8007de2:	4629      	mov	r1, r5
 8007de4:	4630      	mov	r0, r6
 8007de6:	47c0      	blx	r8
 8007de8:	4307      	orrs	r7, r0
 8007dea:	3568      	adds	r5, #104	; 0x68
 8007dec:	e7e9      	b.n	8007dc2 <_fwalk_reent+0x12>

08007dee <rshift>:
 8007dee:	6903      	ldr	r3, [r0, #16]
 8007df0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007df8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dfc:	f100 0414 	add.w	r4, r0, #20
 8007e00:	dd45      	ble.n	8007e8e <rshift+0xa0>
 8007e02:	f011 011f 	ands.w	r1, r1, #31
 8007e06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e0e:	d10c      	bne.n	8007e2a <rshift+0x3c>
 8007e10:	f100 0710 	add.w	r7, r0, #16
 8007e14:	4629      	mov	r1, r5
 8007e16:	42b1      	cmp	r1, r6
 8007e18:	d334      	bcc.n	8007e84 <rshift+0x96>
 8007e1a:	1a9b      	subs	r3, r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	1eea      	subs	r2, r5, #3
 8007e20:	4296      	cmp	r6, r2
 8007e22:	bf38      	it	cc
 8007e24:	2300      	movcc	r3, #0
 8007e26:	4423      	add	r3, r4
 8007e28:	e015      	b.n	8007e56 <rshift+0x68>
 8007e2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e2e:	f1c1 0820 	rsb	r8, r1, #32
 8007e32:	40cf      	lsrs	r7, r1
 8007e34:	f105 0e04 	add.w	lr, r5, #4
 8007e38:	46a1      	mov	r9, r4
 8007e3a:	4576      	cmp	r6, lr
 8007e3c:	46f4      	mov	ip, lr
 8007e3e:	d815      	bhi.n	8007e6c <rshift+0x7e>
 8007e40:	1a9a      	subs	r2, r3, r2
 8007e42:	0092      	lsls	r2, r2, #2
 8007e44:	3a04      	subs	r2, #4
 8007e46:	3501      	adds	r5, #1
 8007e48:	42ae      	cmp	r6, r5
 8007e4a:	bf38      	it	cc
 8007e4c:	2200      	movcc	r2, #0
 8007e4e:	18a3      	adds	r3, r4, r2
 8007e50:	50a7      	str	r7, [r4, r2]
 8007e52:	b107      	cbz	r7, 8007e56 <rshift+0x68>
 8007e54:	3304      	adds	r3, #4
 8007e56:	1b1a      	subs	r2, r3, r4
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e5e:	bf08      	it	eq
 8007e60:	2300      	moveq	r3, #0
 8007e62:	6102      	str	r2, [r0, #16]
 8007e64:	bf08      	it	eq
 8007e66:	6143      	streq	r3, [r0, #20]
 8007e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e6c:	f8dc c000 	ldr.w	ip, [ip]
 8007e70:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e74:	ea4c 0707 	orr.w	r7, ip, r7
 8007e78:	f849 7b04 	str.w	r7, [r9], #4
 8007e7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e80:	40cf      	lsrs	r7, r1
 8007e82:	e7da      	b.n	8007e3a <rshift+0x4c>
 8007e84:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e88:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e8c:	e7c3      	b.n	8007e16 <rshift+0x28>
 8007e8e:	4623      	mov	r3, r4
 8007e90:	e7e1      	b.n	8007e56 <rshift+0x68>

08007e92 <__hexdig_fun>:
 8007e92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d802      	bhi.n	8007ea0 <__hexdig_fun+0xe>
 8007e9a:	3820      	subs	r0, #32
 8007e9c:	b2c0      	uxtb	r0, r0
 8007e9e:	4770      	bx	lr
 8007ea0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d801      	bhi.n	8007eac <__hexdig_fun+0x1a>
 8007ea8:	3847      	subs	r0, #71	; 0x47
 8007eaa:	e7f7      	b.n	8007e9c <__hexdig_fun+0xa>
 8007eac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007eb0:	2b05      	cmp	r3, #5
 8007eb2:	d801      	bhi.n	8007eb8 <__hexdig_fun+0x26>
 8007eb4:	3827      	subs	r0, #39	; 0x27
 8007eb6:	e7f1      	b.n	8007e9c <__hexdig_fun+0xa>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr

08007ebc <__gethex>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	b08b      	sub	sp, #44	; 0x2c
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	4bb2      	ldr	r3, [pc, #712]	; (8008190 <__gethex+0x2d4>)
 8007ec8:	9002      	str	r0, [sp, #8]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	4690      	mov	r8, r2
 8007ed2:	f7f8 f955 	bl	8000180 <strlen>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	f8db 2000 	ldr.w	r2, [fp]
 8007edc:	4403      	add	r3, r0
 8007ede:	4682      	mov	sl, r0
 8007ee0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ee4:	9306      	str	r3, [sp, #24]
 8007ee6:	1c93      	adds	r3, r2, #2
 8007ee8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007eec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007ef0:	32fe      	adds	r2, #254	; 0xfe
 8007ef2:	18d1      	adds	r1, r2, r3
 8007ef4:	461f      	mov	r7, r3
 8007ef6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007efa:	9101      	str	r1, [sp, #4]
 8007efc:	2830      	cmp	r0, #48	; 0x30
 8007efe:	d0f8      	beq.n	8007ef2 <__gethex+0x36>
 8007f00:	f7ff ffc7 	bl	8007e92 <__hexdig_fun>
 8007f04:	4604      	mov	r4, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d13a      	bne.n	8007f80 <__gethex+0xc4>
 8007f0a:	9903      	ldr	r1, [sp, #12]
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f001 fef2 	bl	8009cf8 <strncmp>
 8007f14:	4605      	mov	r5, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d166      	bne.n	8007fe8 <__gethex+0x12c>
 8007f1a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f1e:	eb07 060a 	add.w	r6, r7, sl
 8007f22:	f7ff ffb6 	bl	8007e92 <__hexdig_fun>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d060      	beq.n	8007fec <__gethex+0x130>
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	7818      	ldrb	r0, [r3, #0]
 8007f2e:	2830      	cmp	r0, #48	; 0x30
 8007f30:	461f      	mov	r7, r3
 8007f32:	f103 0301 	add.w	r3, r3, #1
 8007f36:	d0f9      	beq.n	8007f2c <__gethex+0x70>
 8007f38:	f7ff ffab 	bl	8007e92 <__hexdig_fun>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	fab0 f480 	clz	r4, r0
 8007f42:	0964      	lsrs	r4, r4, #5
 8007f44:	4635      	mov	r5, r6
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	463a      	mov	r2, r7
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	7830      	ldrb	r0, [r6, #0]
 8007f50:	f7ff ff9f 	bl	8007e92 <__hexdig_fun>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d1f8      	bne.n	8007f4a <__gethex+0x8e>
 8007f58:	9903      	ldr	r1, [sp, #12]
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f001 fecb 	bl	8009cf8 <strncmp>
 8007f62:	b980      	cbnz	r0, 8007f86 <__gethex+0xca>
 8007f64:	b94d      	cbnz	r5, 8007f7a <__gethex+0xbe>
 8007f66:	eb06 050a 	add.w	r5, r6, sl
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	3201      	adds	r2, #1
 8007f70:	7830      	ldrb	r0, [r6, #0]
 8007f72:	f7ff ff8e 	bl	8007e92 <__hexdig_fun>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1f8      	bne.n	8007f6c <__gethex+0xb0>
 8007f7a:	1bad      	subs	r5, r5, r6
 8007f7c:	00ad      	lsls	r5, r5, #2
 8007f7e:	e004      	b.n	8007f8a <__gethex+0xce>
 8007f80:	2400      	movs	r4, #0
 8007f82:	4625      	mov	r5, r4
 8007f84:	e7e0      	b.n	8007f48 <__gethex+0x8c>
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	d1f7      	bne.n	8007f7a <__gethex+0xbe>
 8007f8a:	7833      	ldrb	r3, [r6, #0]
 8007f8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f90:	2b50      	cmp	r3, #80	; 0x50
 8007f92:	d139      	bne.n	8008008 <__gethex+0x14c>
 8007f94:	7873      	ldrb	r3, [r6, #1]
 8007f96:	2b2b      	cmp	r3, #43	; 0x2b
 8007f98:	d02a      	beq.n	8007ff0 <__gethex+0x134>
 8007f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8007f9c:	d02c      	beq.n	8007ff8 <__gethex+0x13c>
 8007f9e:	1c71      	adds	r1, r6, #1
 8007fa0:	f04f 0900 	mov.w	r9, #0
 8007fa4:	7808      	ldrb	r0, [r1, #0]
 8007fa6:	f7ff ff74 	bl	8007e92 <__hexdig_fun>
 8007faa:	1e43      	subs	r3, r0, #1
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b18      	cmp	r3, #24
 8007fb0:	d82a      	bhi.n	8008008 <__gethex+0x14c>
 8007fb2:	f1a0 0210 	sub.w	r2, r0, #16
 8007fb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fba:	f7ff ff6a 	bl	8007e92 <__hexdig_fun>
 8007fbe:	1e43      	subs	r3, r0, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b18      	cmp	r3, #24
 8007fc4:	d91b      	bls.n	8007ffe <__gethex+0x142>
 8007fc6:	f1b9 0f00 	cmp.w	r9, #0
 8007fca:	d000      	beq.n	8007fce <__gethex+0x112>
 8007fcc:	4252      	negs	r2, r2
 8007fce:	4415      	add	r5, r2
 8007fd0:	f8cb 1000 	str.w	r1, [fp]
 8007fd4:	b1d4      	cbz	r4, 800800c <__gethex+0x150>
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bf14      	ite	ne
 8007fdc:	2700      	movne	r7, #0
 8007fde:	2706      	moveq	r7, #6
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	b00b      	add	sp, #44	; 0x2c
 8007fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe8:	463e      	mov	r6, r7
 8007fea:	4625      	mov	r5, r4
 8007fec:	2401      	movs	r4, #1
 8007fee:	e7cc      	b.n	8007f8a <__gethex+0xce>
 8007ff0:	f04f 0900 	mov.w	r9, #0
 8007ff4:	1cb1      	adds	r1, r6, #2
 8007ff6:	e7d5      	b.n	8007fa4 <__gethex+0xe8>
 8007ff8:	f04f 0901 	mov.w	r9, #1
 8007ffc:	e7fa      	b.n	8007ff4 <__gethex+0x138>
 8007ffe:	230a      	movs	r3, #10
 8008000:	fb03 0202 	mla	r2, r3, r2, r0
 8008004:	3a10      	subs	r2, #16
 8008006:	e7d6      	b.n	8007fb6 <__gethex+0xfa>
 8008008:	4631      	mov	r1, r6
 800800a:	e7e1      	b.n	8007fd0 <__gethex+0x114>
 800800c:	1bf3      	subs	r3, r6, r7
 800800e:	3b01      	subs	r3, #1
 8008010:	4621      	mov	r1, r4
 8008012:	2b07      	cmp	r3, #7
 8008014:	dc0a      	bgt.n	800802c <__gethex+0x170>
 8008016:	9802      	ldr	r0, [sp, #8]
 8008018:	f000 fa90 	bl	800853c <_Balloc>
 800801c:	4604      	mov	r4, r0
 800801e:	b940      	cbnz	r0, 8008032 <__gethex+0x176>
 8008020:	4b5c      	ldr	r3, [pc, #368]	; (8008194 <__gethex+0x2d8>)
 8008022:	4602      	mov	r2, r0
 8008024:	21de      	movs	r1, #222	; 0xde
 8008026:	485c      	ldr	r0, [pc, #368]	; (8008198 <__gethex+0x2dc>)
 8008028:	f001 fff6 	bl	800a018 <__assert_func>
 800802c:	3101      	adds	r1, #1
 800802e:	105b      	asrs	r3, r3, #1
 8008030:	e7ef      	b.n	8008012 <__gethex+0x156>
 8008032:	f100 0914 	add.w	r9, r0, #20
 8008036:	f04f 0b00 	mov.w	fp, #0
 800803a:	f1ca 0301 	rsb	r3, sl, #1
 800803e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008042:	f8cd b004 	str.w	fp, [sp, #4]
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	42b7      	cmp	r7, r6
 800804a:	d33f      	bcc.n	80080cc <__gethex+0x210>
 800804c:	9f04      	ldr	r7, [sp, #16]
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	f847 3b04 	str.w	r3, [r7], #4
 8008054:	eba7 0709 	sub.w	r7, r7, r9
 8008058:	10bf      	asrs	r7, r7, #2
 800805a:	6127      	str	r7, [r4, #16]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fb5f 	bl	8008720 <__hi0bits>
 8008062:	017f      	lsls	r7, r7, #5
 8008064:	f8d8 6000 	ldr.w	r6, [r8]
 8008068:	1a3f      	subs	r7, r7, r0
 800806a:	42b7      	cmp	r7, r6
 800806c:	dd62      	ble.n	8008134 <__gethex+0x278>
 800806e:	1bbf      	subs	r7, r7, r6
 8008070:	4639      	mov	r1, r7
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fef5 	bl	8008e62 <__any_on>
 8008078:	4682      	mov	sl, r0
 800807a:	b1a8      	cbz	r0, 80080a8 <__gethex+0x1ec>
 800807c:	1e7b      	subs	r3, r7, #1
 800807e:	1159      	asrs	r1, r3, #5
 8008080:	f003 021f 	and.w	r2, r3, #31
 8008084:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008088:	f04f 0a01 	mov.w	sl, #1
 800808c:	fa0a f202 	lsl.w	r2, sl, r2
 8008090:	420a      	tst	r2, r1
 8008092:	d009      	beq.n	80080a8 <__gethex+0x1ec>
 8008094:	4553      	cmp	r3, sl
 8008096:	dd05      	ble.n	80080a4 <__gethex+0x1e8>
 8008098:	1eb9      	subs	r1, r7, #2
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fee1 	bl	8008e62 <__any_on>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d144      	bne.n	800812e <__gethex+0x272>
 80080a4:	f04f 0a02 	mov.w	sl, #2
 80080a8:	4639      	mov	r1, r7
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff fe9f 	bl	8007dee <rshift>
 80080b0:	443d      	add	r5, r7
 80080b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080b6:	42ab      	cmp	r3, r5
 80080b8:	da4a      	bge.n	8008150 <__gethex+0x294>
 80080ba:	9802      	ldr	r0, [sp, #8]
 80080bc:	4621      	mov	r1, r4
 80080be:	f000 fa7d 	bl	80085bc <_Bfree>
 80080c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080c4:	2300      	movs	r3, #0
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	27a3      	movs	r7, #163	; 0xa3
 80080ca:	e789      	b.n	8007fe0 <__gethex+0x124>
 80080cc:	1e73      	subs	r3, r6, #1
 80080ce:	9a06      	ldr	r2, [sp, #24]
 80080d0:	9307      	str	r3, [sp, #28]
 80080d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d019      	beq.n	800810e <__gethex+0x252>
 80080da:	f1bb 0f20 	cmp.w	fp, #32
 80080de:	d107      	bne.n	80080f0 <__gethex+0x234>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	9a01      	ldr	r2, [sp, #4]
 80080e4:	f843 2b04 	str.w	r2, [r3], #4
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	469b      	mov	fp, r3
 80080f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080f4:	f7ff fecd 	bl	8007e92 <__hexdig_fun>
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	f000 000f 	and.w	r0, r0, #15
 80080fe:	fa00 f00b 	lsl.w	r0, r0, fp
 8008102:	4303      	orrs	r3, r0
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f10b 0b04 	add.w	fp, fp, #4
 800810a:	9b07      	ldr	r3, [sp, #28]
 800810c:	e00d      	b.n	800812a <__gethex+0x26e>
 800810e:	9a08      	ldr	r2, [sp, #32]
 8008110:	1e73      	subs	r3, r6, #1
 8008112:	4413      	add	r3, r2
 8008114:	42bb      	cmp	r3, r7
 8008116:	d3e0      	bcc.n	80080da <__gethex+0x21e>
 8008118:	4618      	mov	r0, r3
 800811a:	9903      	ldr	r1, [sp, #12]
 800811c:	9309      	str	r3, [sp, #36]	; 0x24
 800811e:	4652      	mov	r2, sl
 8008120:	f001 fdea 	bl	8009cf8 <strncmp>
 8008124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008126:	2800      	cmp	r0, #0
 8008128:	d1d7      	bne.n	80080da <__gethex+0x21e>
 800812a:	461e      	mov	r6, r3
 800812c:	e78c      	b.n	8008048 <__gethex+0x18c>
 800812e:	f04f 0a03 	mov.w	sl, #3
 8008132:	e7b9      	b.n	80080a8 <__gethex+0x1ec>
 8008134:	da09      	bge.n	800814a <__gethex+0x28e>
 8008136:	1bf7      	subs	r7, r6, r7
 8008138:	4621      	mov	r1, r4
 800813a:	9802      	ldr	r0, [sp, #8]
 800813c:	463a      	mov	r2, r7
 800813e:	f000 fc55 	bl	80089ec <__lshift>
 8008142:	1bed      	subs	r5, r5, r7
 8008144:	4604      	mov	r4, r0
 8008146:	f100 0914 	add.w	r9, r0, #20
 800814a:	f04f 0a00 	mov.w	sl, #0
 800814e:	e7b0      	b.n	80080b2 <__gethex+0x1f6>
 8008150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008154:	42a8      	cmp	r0, r5
 8008156:	dd71      	ble.n	800823c <__gethex+0x380>
 8008158:	1b45      	subs	r5, r0, r5
 800815a:	42ae      	cmp	r6, r5
 800815c:	dc35      	bgt.n	80081ca <__gethex+0x30e>
 800815e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d029      	beq.n	80081ba <__gethex+0x2fe>
 8008166:	2b03      	cmp	r3, #3
 8008168:	d02b      	beq.n	80081c2 <__gethex+0x306>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d11c      	bne.n	80081a8 <__gethex+0x2ec>
 800816e:	42ae      	cmp	r6, r5
 8008170:	d11a      	bne.n	80081a8 <__gethex+0x2ec>
 8008172:	2e01      	cmp	r6, #1
 8008174:	d112      	bne.n	800819c <__gethex+0x2e0>
 8008176:	9a05      	ldr	r2, [sp, #20]
 8008178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	2301      	movs	r3, #1
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	f8c9 3000 	str.w	r3, [r9]
 8008186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008188:	2762      	movs	r7, #98	; 0x62
 800818a:	601c      	str	r4, [r3, #0]
 800818c:	e728      	b.n	8007fe0 <__gethex+0x124>
 800818e:	bf00      	nop
 8008190:	0800a9bc 	.word	0x0800a9bc
 8008194:	0800a8e0 	.word	0x0800a8e0
 8008198:	0800a954 	.word	0x0800a954
 800819c:	1e71      	subs	r1, r6, #1
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 fe5f 	bl	8008e62 <__any_on>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d1e6      	bne.n	8008176 <__gethex+0x2ba>
 80081a8:	9802      	ldr	r0, [sp, #8]
 80081aa:	4621      	mov	r1, r4
 80081ac:	f000 fa06 	bl	80085bc <_Bfree>
 80081b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081b2:	2300      	movs	r3, #0
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	2750      	movs	r7, #80	; 0x50
 80081b8:	e712      	b.n	8007fe0 <__gethex+0x124>
 80081ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f3      	bne.n	80081a8 <__gethex+0x2ec>
 80081c0:	e7d9      	b.n	8008176 <__gethex+0x2ba>
 80081c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1d6      	bne.n	8008176 <__gethex+0x2ba>
 80081c8:	e7ee      	b.n	80081a8 <__gethex+0x2ec>
 80081ca:	1e6f      	subs	r7, r5, #1
 80081cc:	f1ba 0f00 	cmp.w	sl, #0
 80081d0:	d131      	bne.n	8008236 <__gethex+0x37a>
 80081d2:	b127      	cbz	r7, 80081de <__gethex+0x322>
 80081d4:	4639      	mov	r1, r7
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fe43 	bl	8008e62 <__any_on>
 80081dc:	4682      	mov	sl, r0
 80081de:	117b      	asrs	r3, r7, #5
 80081e0:	2101      	movs	r1, #1
 80081e2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80081e6:	f007 071f 	and.w	r7, r7, #31
 80081ea:	fa01 f707 	lsl.w	r7, r1, r7
 80081ee:	421f      	tst	r7, r3
 80081f0:	4629      	mov	r1, r5
 80081f2:	4620      	mov	r0, r4
 80081f4:	bf18      	it	ne
 80081f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80081fa:	1b76      	subs	r6, r6, r5
 80081fc:	f7ff fdf7 	bl	8007dee <rshift>
 8008200:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008204:	2702      	movs	r7, #2
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	d048      	beq.n	800829e <__gethex+0x3e2>
 800820c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d015      	beq.n	8008240 <__gethex+0x384>
 8008214:	2b03      	cmp	r3, #3
 8008216:	d017      	beq.n	8008248 <__gethex+0x38c>
 8008218:	2b01      	cmp	r3, #1
 800821a:	d109      	bne.n	8008230 <__gethex+0x374>
 800821c:	f01a 0f02 	tst.w	sl, #2
 8008220:	d006      	beq.n	8008230 <__gethex+0x374>
 8008222:	f8d9 0000 	ldr.w	r0, [r9]
 8008226:	ea4a 0a00 	orr.w	sl, sl, r0
 800822a:	f01a 0f01 	tst.w	sl, #1
 800822e:	d10e      	bne.n	800824e <__gethex+0x392>
 8008230:	f047 0710 	orr.w	r7, r7, #16
 8008234:	e033      	b.n	800829e <__gethex+0x3e2>
 8008236:	f04f 0a01 	mov.w	sl, #1
 800823a:	e7d0      	b.n	80081de <__gethex+0x322>
 800823c:	2701      	movs	r7, #1
 800823e:	e7e2      	b.n	8008206 <__gethex+0x34a>
 8008240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008242:	f1c3 0301 	rsb	r3, r3, #1
 8008246:	9315      	str	r3, [sp, #84]	; 0x54
 8008248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f0      	beq.n	8008230 <__gethex+0x374>
 800824e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008252:	f104 0314 	add.w	r3, r4, #20
 8008256:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800825a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800825e:	f04f 0c00 	mov.w	ip, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f853 2b04 	ldr.w	r2, [r3], #4
 8008268:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800826c:	d01c      	beq.n	80082a8 <__gethex+0x3ec>
 800826e:	3201      	adds	r2, #1
 8008270:	6002      	str	r2, [r0, #0]
 8008272:	2f02      	cmp	r7, #2
 8008274:	f104 0314 	add.w	r3, r4, #20
 8008278:	d13d      	bne.n	80082f6 <__gethex+0x43a>
 800827a:	f8d8 2000 	ldr.w	r2, [r8]
 800827e:	3a01      	subs	r2, #1
 8008280:	42b2      	cmp	r2, r6
 8008282:	d10a      	bne.n	800829a <__gethex+0x3de>
 8008284:	1171      	asrs	r1, r6, #5
 8008286:	2201      	movs	r2, #1
 8008288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800828c:	f006 061f 	and.w	r6, r6, #31
 8008290:	fa02 f606 	lsl.w	r6, r2, r6
 8008294:	421e      	tst	r6, r3
 8008296:	bf18      	it	ne
 8008298:	4617      	movne	r7, r2
 800829a:	f047 0720 	orr.w	r7, r7, #32
 800829e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082a0:	601c      	str	r4, [r3, #0]
 80082a2:	9b05      	ldr	r3, [sp, #20]
 80082a4:	601d      	str	r5, [r3, #0]
 80082a6:	e69b      	b.n	8007fe0 <__gethex+0x124>
 80082a8:	4299      	cmp	r1, r3
 80082aa:	f843 cc04 	str.w	ip, [r3, #-4]
 80082ae:	d8d8      	bhi.n	8008262 <__gethex+0x3a6>
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	459b      	cmp	fp, r3
 80082b4:	db17      	blt.n	80082e6 <__gethex+0x42a>
 80082b6:	6861      	ldr	r1, [r4, #4]
 80082b8:	9802      	ldr	r0, [sp, #8]
 80082ba:	3101      	adds	r1, #1
 80082bc:	f000 f93e 	bl	800853c <_Balloc>
 80082c0:	4681      	mov	r9, r0
 80082c2:	b918      	cbnz	r0, 80082cc <__gethex+0x410>
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <__gethex+0x474>)
 80082c6:	4602      	mov	r2, r0
 80082c8:	2184      	movs	r1, #132	; 0x84
 80082ca:	e6ac      	b.n	8008026 <__gethex+0x16a>
 80082cc:	6922      	ldr	r2, [r4, #16]
 80082ce:	3202      	adds	r2, #2
 80082d0:	f104 010c 	add.w	r1, r4, #12
 80082d4:	0092      	lsls	r2, r2, #2
 80082d6:	300c      	adds	r0, #12
 80082d8:	f000 f922 	bl	8008520 <memcpy>
 80082dc:	4621      	mov	r1, r4
 80082de:	9802      	ldr	r0, [sp, #8]
 80082e0:	f000 f96c 	bl	80085bc <_Bfree>
 80082e4:	464c      	mov	r4, r9
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082ee:	6122      	str	r2, [r4, #16]
 80082f0:	2201      	movs	r2, #1
 80082f2:	615a      	str	r2, [r3, #20]
 80082f4:	e7bd      	b.n	8008272 <__gethex+0x3b6>
 80082f6:	6922      	ldr	r2, [r4, #16]
 80082f8:	455a      	cmp	r2, fp
 80082fa:	dd0b      	ble.n	8008314 <__gethex+0x458>
 80082fc:	2101      	movs	r1, #1
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff fd75 	bl	8007dee <rshift>
 8008304:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008308:	3501      	adds	r5, #1
 800830a:	42ab      	cmp	r3, r5
 800830c:	f6ff aed5 	blt.w	80080ba <__gethex+0x1fe>
 8008310:	2701      	movs	r7, #1
 8008312:	e7c2      	b.n	800829a <__gethex+0x3de>
 8008314:	f016 061f 	ands.w	r6, r6, #31
 8008318:	d0fa      	beq.n	8008310 <__gethex+0x454>
 800831a:	4453      	add	r3, sl
 800831c:	f1c6 0620 	rsb	r6, r6, #32
 8008320:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008324:	f000 f9fc 	bl	8008720 <__hi0bits>
 8008328:	42b0      	cmp	r0, r6
 800832a:	dbe7      	blt.n	80082fc <__gethex+0x440>
 800832c:	e7f0      	b.n	8008310 <__gethex+0x454>
 800832e:	bf00      	nop
 8008330:	0800a8e0 	.word	0x0800a8e0

08008334 <L_shift>:
 8008334:	f1c2 0208 	rsb	r2, r2, #8
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	b570      	push	{r4, r5, r6, lr}
 800833c:	f1c2 0620 	rsb	r6, r2, #32
 8008340:	6843      	ldr	r3, [r0, #4]
 8008342:	6804      	ldr	r4, [r0, #0]
 8008344:	fa03 f506 	lsl.w	r5, r3, r6
 8008348:	432c      	orrs	r4, r5
 800834a:	40d3      	lsrs	r3, r2
 800834c:	6004      	str	r4, [r0, #0]
 800834e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008352:	4288      	cmp	r0, r1
 8008354:	d3f4      	bcc.n	8008340 <L_shift+0xc>
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__match>:
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	6803      	ldr	r3, [r0, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008362:	b914      	cbnz	r4, 800836a <__match+0x12>
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	2001      	movs	r0, #1
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008372:	2d19      	cmp	r5, #25
 8008374:	bf98      	it	ls
 8008376:	3220      	addls	r2, #32
 8008378:	42a2      	cmp	r2, r4
 800837a:	d0f0      	beq.n	800835e <__match+0x6>
 800837c:	2000      	movs	r0, #0
 800837e:	e7f3      	b.n	8008368 <__match+0x10>

08008380 <__hexnan>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	680b      	ldr	r3, [r1, #0]
 8008386:	115e      	asrs	r6, r3, #5
 8008388:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800838c:	f013 031f 	ands.w	r3, r3, #31
 8008390:	b087      	sub	sp, #28
 8008392:	bf18      	it	ne
 8008394:	3604      	addne	r6, #4
 8008396:	2500      	movs	r5, #0
 8008398:	1f37      	subs	r7, r6, #4
 800839a:	4690      	mov	r8, r2
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	4682      	mov	sl, r0
 80083a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80083a6:	46b9      	mov	r9, r7
 80083a8:	463c      	mov	r4, r7
 80083aa:	9502      	str	r5, [sp, #8]
 80083ac:	46ab      	mov	fp, r5
 80083ae:	7851      	ldrb	r1, [r2, #1]
 80083b0:	1c53      	adds	r3, r2, #1
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	b341      	cbz	r1, 8008408 <__hexnan+0x88>
 80083b6:	4608      	mov	r0, r1
 80083b8:	9205      	str	r2, [sp, #20]
 80083ba:	9104      	str	r1, [sp, #16]
 80083bc:	f7ff fd69 	bl	8007e92 <__hexdig_fun>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d14f      	bne.n	8008464 <__hexnan+0xe4>
 80083c4:	9904      	ldr	r1, [sp, #16]
 80083c6:	9a05      	ldr	r2, [sp, #20]
 80083c8:	2920      	cmp	r1, #32
 80083ca:	d818      	bhi.n	80083fe <__hexnan+0x7e>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	459b      	cmp	fp, r3
 80083d0:	dd13      	ble.n	80083fa <__hexnan+0x7a>
 80083d2:	454c      	cmp	r4, r9
 80083d4:	d206      	bcs.n	80083e4 <__hexnan+0x64>
 80083d6:	2d07      	cmp	r5, #7
 80083d8:	dc04      	bgt.n	80083e4 <__hexnan+0x64>
 80083da:	462a      	mov	r2, r5
 80083dc:	4649      	mov	r1, r9
 80083de:	4620      	mov	r0, r4
 80083e0:	f7ff ffa8 	bl	8008334 <L_shift>
 80083e4:	4544      	cmp	r4, r8
 80083e6:	d950      	bls.n	800848a <__hexnan+0x10a>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f1a4 0904 	sub.w	r9, r4, #4
 80083ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80083f2:	f8cd b008 	str.w	fp, [sp, #8]
 80083f6:	464c      	mov	r4, r9
 80083f8:	461d      	mov	r5, r3
 80083fa:	9a03      	ldr	r2, [sp, #12]
 80083fc:	e7d7      	b.n	80083ae <__hexnan+0x2e>
 80083fe:	2929      	cmp	r1, #41	; 0x29
 8008400:	d156      	bne.n	80084b0 <__hexnan+0x130>
 8008402:	3202      	adds	r2, #2
 8008404:	f8ca 2000 	str.w	r2, [sl]
 8008408:	f1bb 0f00 	cmp.w	fp, #0
 800840c:	d050      	beq.n	80084b0 <__hexnan+0x130>
 800840e:	454c      	cmp	r4, r9
 8008410:	d206      	bcs.n	8008420 <__hexnan+0xa0>
 8008412:	2d07      	cmp	r5, #7
 8008414:	dc04      	bgt.n	8008420 <__hexnan+0xa0>
 8008416:	462a      	mov	r2, r5
 8008418:	4649      	mov	r1, r9
 800841a:	4620      	mov	r0, r4
 800841c:	f7ff ff8a 	bl	8008334 <L_shift>
 8008420:	4544      	cmp	r4, r8
 8008422:	d934      	bls.n	800848e <__hexnan+0x10e>
 8008424:	f1a8 0204 	sub.w	r2, r8, #4
 8008428:	4623      	mov	r3, r4
 800842a:	f853 1b04 	ldr.w	r1, [r3], #4
 800842e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008432:	429f      	cmp	r7, r3
 8008434:	d2f9      	bcs.n	800842a <__hexnan+0xaa>
 8008436:	1b3b      	subs	r3, r7, r4
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	3304      	adds	r3, #4
 800843e:	3401      	adds	r4, #1
 8008440:	3e03      	subs	r6, #3
 8008442:	42b4      	cmp	r4, r6
 8008444:	bf88      	it	hi
 8008446:	2304      	movhi	r3, #4
 8008448:	4443      	add	r3, r8
 800844a:	2200      	movs	r2, #0
 800844c:	f843 2b04 	str.w	r2, [r3], #4
 8008450:	429f      	cmp	r7, r3
 8008452:	d2fb      	bcs.n	800844c <__hexnan+0xcc>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	b91b      	cbnz	r3, 8008460 <__hexnan+0xe0>
 8008458:	4547      	cmp	r7, r8
 800845a:	d127      	bne.n	80084ac <__hexnan+0x12c>
 800845c:	2301      	movs	r3, #1
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	2005      	movs	r0, #5
 8008462:	e026      	b.n	80084b2 <__hexnan+0x132>
 8008464:	3501      	adds	r5, #1
 8008466:	2d08      	cmp	r5, #8
 8008468:	f10b 0b01 	add.w	fp, fp, #1
 800846c:	dd06      	ble.n	800847c <__hexnan+0xfc>
 800846e:	4544      	cmp	r4, r8
 8008470:	d9c3      	bls.n	80083fa <__hexnan+0x7a>
 8008472:	2300      	movs	r3, #0
 8008474:	f844 3c04 	str.w	r3, [r4, #-4]
 8008478:	2501      	movs	r5, #1
 800847a:	3c04      	subs	r4, #4
 800847c:	6822      	ldr	r2, [r4, #0]
 800847e:	f000 000f 	and.w	r0, r0, #15
 8008482:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	e7b7      	b.n	80083fa <__hexnan+0x7a>
 800848a:	2508      	movs	r5, #8
 800848c:	e7b5      	b.n	80083fa <__hexnan+0x7a>
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0df      	beq.n	8008454 <__hexnan+0xd4>
 8008494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008498:	f1c3 0320 	rsb	r3, r3, #32
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
 80084a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084a4:	401a      	ands	r2, r3
 80084a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80084aa:	e7d3      	b.n	8008454 <__hexnan+0xd4>
 80084ac:	3f04      	subs	r7, #4
 80084ae:	e7d1      	b.n	8008454 <__hexnan+0xd4>
 80084b0:	2004      	movs	r0, #4
 80084b2:	b007      	add	sp, #28
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084b8 <_localeconv_r>:
 80084b8:	4800      	ldr	r0, [pc, #0]	; (80084bc <_localeconv_r+0x4>)
 80084ba:	4770      	bx	lr
 80084bc:	20000164 	.word	0x20000164

080084c0 <__retarget_lock_init_recursive>:
 80084c0:	4770      	bx	lr

080084c2 <__retarget_lock_acquire_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <__retarget_lock_release_recursive>:
 80084c4:	4770      	bx	lr
	...

080084c8 <_lseek_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d07      	ldr	r5, [pc, #28]	; (80084e8 <_lseek_r+0x20>)
 80084cc:	4604      	mov	r4, r0
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	2200      	movs	r2, #0
 80084d4:	602a      	str	r2, [r5, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f7f9 fc05 	bl	8001ce6 <_lseek>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_lseek_r+0x1e>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_lseek_r+0x1e>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	200002ec 	.word	0x200002ec

080084ec <malloc>:
 80084ec:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <malloc+0xc>)
 80084ee:	4601      	mov	r1, r0
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f000 bd55 	b.w	8008fa0 <_malloc_r>
 80084f6:	bf00      	nop
 80084f8:	2000000c 	.word	0x2000000c

080084fc <__ascii_mbtowc>:
 80084fc:	b082      	sub	sp, #8
 80084fe:	b901      	cbnz	r1, 8008502 <__ascii_mbtowc+0x6>
 8008500:	a901      	add	r1, sp, #4
 8008502:	b142      	cbz	r2, 8008516 <__ascii_mbtowc+0x1a>
 8008504:	b14b      	cbz	r3, 800851a <__ascii_mbtowc+0x1e>
 8008506:	7813      	ldrb	r3, [r2, #0]
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	1e10      	subs	r0, r2, #0
 800850e:	bf18      	it	ne
 8008510:	2001      	movne	r0, #1
 8008512:	b002      	add	sp, #8
 8008514:	4770      	bx	lr
 8008516:	4610      	mov	r0, r2
 8008518:	e7fb      	b.n	8008512 <__ascii_mbtowc+0x16>
 800851a:	f06f 0001 	mvn.w	r0, #1
 800851e:	e7f8      	b.n	8008512 <__ascii_mbtowc+0x16>

08008520 <memcpy>:
 8008520:	440a      	add	r2, r1
 8008522:	4291      	cmp	r1, r2
 8008524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008528:	d100      	bne.n	800852c <memcpy+0xc>
 800852a:	4770      	bx	lr
 800852c:	b510      	push	{r4, lr}
 800852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008536:	4291      	cmp	r1, r2
 8008538:	d1f9      	bne.n	800852e <memcpy+0xe>
 800853a:	bd10      	pop	{r4, pc}

0800853c <_Balloc>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	b976      	cbnz	r6, 8008564 <_Balloc+0x28>
 8008546:	2010      	movs	r0, #16
 8008548:	f7ff ffd0 	bl	80084ec <malloc>
 800854c:	4602      	mov	r2, r0
 800854e:	6260      	str	r0, [r4, #36]	; 0x24
 8008550:	b920      	cbnz	r0, 800855c <_Balloc+0x20>
 8008552:	4b18      	ldr	r3, [pc, #96]	; (80085b4 <_Balloc+0x78>)
 8008554:	4818      	ldr	r0, [pc, #96]	; (80085b8 <_Balloc+0x7c>)
 8008556:	2166      	movs	r1, #102	; 0x66
 8008558:	f001 fd5e 	bl	800a018 <__assert_func>
 800855c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008560:	6006      	str	r6, [r0, #0]
 8008562:	60c6      	str	r6, [r0, #12]
 8008564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008566:	68f3      	ldr	r3, [r6, #12]
 8008568:	b183      	cbz	r3, 800858c <_Balloc+0x50>
 800856a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008572:	b9b8      	cbnz	r0, 80085a4 <_Balloc+0x68>
 8008574:	2101      	movs	r1, #1
 8008576:	fa01 f605 	lsl.w	r6, r1, r5
 800857a:	1d72      	adds	r2, r6, #5
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4620      	mov	r0, r4
 8008580:	f000 fc90 	bl	8008ea4 <_calloc_r>
 8008584:	b160      	cbz	r0, 80085a0 <_Balloc+0x64>
 8008586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800858a:	e00e      	b.n	80085aa <_Balloc+0x6e>
 800858c:	2221      	movs	r2, #33	; 0x21
 800858e:	2104      	movs	r1, #4
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fc87 	bl	8008ea4 <_calloc_r>
 8008596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008598:	60f0      	str	r0, [r6, #12]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e4      	bne.n	800856a <_Balloc+0x2e>
 80085a0:	2000      	movs	r0, #0
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	6802      	ldr	r2, [r0, #0]
 80085a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085aa:	2300      	movs	r3, #0
 80085ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b0:	e7f7      	b.n	80085a2 <_Balloc+0x66>
 80085b2:	bf00      	nop
 80085b4:	0800a86e 	.word	0x0800a86e
 80085b8:	0800a9d0 	.word	0x0800a9d0

080085bc <_Bfree>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c0:	4605      	mov	r5, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b976      	cbnz	r6, 80085e4 <_Bfree+0x28>
 80085c6:	2010      	movs	r0, #16
 80085c8:	f7ff ff90 	bl	80084ec <malloc>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6268      	str	r0, [r5, #36]	; 0x24
 80085d0:	b920      	cbnz	r0, 80085dc <_Bfree+0x20>
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <_Bfree+0x3c>)
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <_Bfree+0x40>)
 80085d6:	218a      	movs	r1, #138	; 0x8a
 80085d8:	f001 fd1e 	bl	800a018 <__assert_func>
 80085dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e0:	6006      	str	r6, [r0, #0]
 80085e2:	60c6      	str	r6, [r0, #12]
 80085e4:	b13c      	cbz	r4, 80085f6 <_Bfree+0x3a>
 80085e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085e8:	6862      	ldr	r2, [r4, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f0:	6021      	str	r1, [r4, #0]
 80085f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	0800a86e 	.word	0x0800a86e
 80085fc:	0800a9d0 	.word	0x0800a9d0

08008600 <__multadd>:
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	690d      	ldr	r5, [r1, #16]
 8008606:	4607      	mov	r7, r0
 8008608:	460c      	mov	r4, r1
 800860a:	461e      	mov	r6, r3
 800860c:	f101 0c14 	add.w	ip, r1, #20
 8008610:	2000      	movs	r0, #0
 8008612:	f8dc 3000 	ldr.w	r3, [ip]
 8008616:	b299      	uxth	r1, r3
 8008618:	fb02 6101 	mla	r1, r2, r1, r6
 800861c:	0c1e      	lsrs	r6, r3, #16
 800861e:	0c0b      	lsrs	r3, r1, #16
 8008620:	fb02 3306 	mla	r3, r2, r6, r3
 8008624:	b289      	uxth	r1, r1
 8008626:	3001      	adds	r0, #1
 8008628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800862c:	4285      	cmp	r5, r0
 800862e:	f84c 1b04 	str.w	r1, [ip], #4
 8008632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008636:	dcec      	bgt.n	8008612 <__multadd+0x12>
 8008638:	b30e      	cbz	r6, 800867e <__multadd+0x7e>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	42ab      	cmp	r3, r5
 800863e:	dc19      	bgt.n	8008674 <__multadd+0x74>
 8008640:	6861      	ldr	r1, [r4, #4]
 8008642:	4638      	mov	r0, r7
 8008644:	3101      	adds	r1, #1
 8008646:	f7ff ff79 	bl	800853c <_Balloc>
 800864a:	4680      	mov	r8, r0
 800864c:	b928      	cbnz	r0, 800865a <__multadd+0x5a>
 800864e:	4602      	mov	r2, r0
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <__multadd+0x84>)
 8008652:	480d      	ldr	r0, [pc, #52]	; (8008688 <__multadd+0x88>)
 8008654:	21b5      	movs	r1, #181	; 0xb5
 8008656:	f001 fcdf 	bl	800a018 <__assert_func>
 800865a:	6922      	ldr	r2, [r4, #16]
 800865c:	3202      	adds	r2, #2
 800865e:	f104 010c 	add.w	r1, r4, #12
 8008662:	0092      	lsls	r2, r2, #2
 8008664:	300c      	adds	r0, #12
 8008666:	f7ff ff5b 	bl	8008520 <memcpy>
 800866a:	4621      	mov	r1, r4
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ffa5 	bl	80085bc <_Bfree>
 8008672:	4644      	mov	r4, r8
 8008674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008678:	3501      	adds	r5, #1
 800867a:	615e      	str	r6, [r3, #20]
 800867c:	6125      	str	r5, [r4, #16]
 800867e:	4620      	mov	r0, r4
 8008680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008684:	0800a8e0 	.word	0x0800a8e0
 8008688:	0800a9d0 	.word	0x0800a9d0

0800868c <__s2b>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	4615      	mov	r5, r2
 8008694:	461f      	mov	r7, r3
 8008696:	2209      	movs	r2, #9
 8008698:	3308      	adds	r3, #8
 800869a:	4606      	mov	r6, r0
 800869c:	fb93 f3f2 	sdiv	r3, r3, r2
 80086a0:	2100      	movs	r1, #0
 80086a2:	2201      	movs	r2, #1
 80086a4:	429a      	cmp	r2, r3
 80086a6:	db09      	blt.n	80086bc <__s2b+0x30>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ff47 	bl	800853c <_Balloc>
 80086ae:	b940      	cbnz	r0, 80086c2 <__s2b+0x36>
 80086b0:	4602      	mov	r2, r0
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <__s2b+0x8c>)
 80086b4:	4819      	ldr	r0, [pc, #100]	; (800871c <__s2b+0x90>)
 80086b6:	21ce      	movs	r1, #206	; 0xce
 80086b8:	f001 fcae 	bl	800a018 <__assert_func>
 80086bc:	0052      	lsls	r2, r2, #1
 80086be:	3101      	adds	r1, #1
 80086c0:	e7f0      	b.n	80086a4 <__s2b+0x18>
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	6143      	str	r3, [r0, #20]
 80086c6:	2d09      	cmp	r5, #9
 80086c8:	f04f 0301 	mov.w	r3, #1
 80086cc:	6103      	str	r3, [r0, #16]
 80086ce:	dd16      	ble.n	80086fe <__s2b+0x72>
 80086d0:	f104 0909 	add.w	r9, r4, #9
 80086d4:	46c8      	mov	r8, r9
 80086d6:	442c      	add	r4, r5
 80086d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086dc:	4601      	mov	r1, r0
 80086de:	3b30      	subs	r3, #48	; 0x30
 80086e0:	220a      	movs	r2, #10
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ff8c 	bl	8008600 <__multadd>
 80086e8:	45a0      	cmp	r8, r4
 80086ea:	d1f5      	bne.n	80086d8 <__s2b+0x4c>
 80086ec:	f1a5 0408 	sub.w	r4, r5, #8
 80086f0:	444c      	add	r4, r9
 80086f2:	1b2d      	subs	r5, r5, r4
 80086f4:	1963      	adds	r3, r4, r5
 80086f6:	42bb      	cmp	r3, r7
 80086f8:	db04      	blt.n	8008704 <__s2b+0x78>
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	340a      	adds	r4, #10
 8008700:	2509      	movs	r5, #9
 8008702:	e7f6      	b.n	80086f2 <__s2b+0x66>
 8008704:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008708:	4601      	mov	r1, r0
 800870a:	3b30      	subs	r3, #48	; 0x30
 800870c:	220a      	movs	r2, #10
 800870e:	4630      	mov	r0, r6
 8008710:	f7ff ff76 	bl	8008600 <__multadd>
 8008714:	e7ee      	b.n	80086f4 <__s2b+0x68>
 8008716:	bf00      	nop
 8008718:	0800a8e0 	.word	0x0800a8e0
 800871c:	0800a9d0 	.word	0x0800a9d0

08008720 <__hi0bits>:
 8008720:	0c02      	lsrs	r2, r0, #16
 8008722:	0412      	lsls	r2, r2, #16
 8008724:	4603      	mov	r3, r0
 8008726:	b9ca      	cbnz	r2, 800875c <__hi0bits+0x3c>
 8008728:	0403      	lsls	r3, r0, #16
 800872a:	2010      	movs	r0, #16
 800872c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008730:	bf04      	itt	eq
 8008732:	021b      	lsleq	r3, r3, #8
 8008734:	3008      	addeq	r0, #8
 8008736:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800873a:	bf04      	itt	eq
 800873c:	011b      	lsleq	r3, r3, #4
 800873e:	3004      	addeq	r0, #4
 8008740:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008744:	bf04      	itt	eq
 8008746:	009b      	lsleq	r3, r3, #2
 8008748:	3002      	addeq	r0, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	db05      	blt.n	800875a <__hi0bits+0x3a>
 800874e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008752:	f100 0001 	add.w	r0, r0, #1
 8008756:	bf08      	it	eq
 8008758:	2020      	moveq	r0, #32
 800875a:	4770      	bx	lr
 800875c:	2000      	movs	r0, #0
 800875e:	e7e5      	b.n	800872c <__hi0bits+0xc>

08008760 <__lo0bits>:
 8008760:	6803      	ldr	r3, [r0, #0]
 8008762:	4602      	mov	r2, r0
 8008764:	f013 0007 	ands.w	r0, r3, #7
 8008768:	d00b      	beq.n	8008782 <__lo0bits+0x22>
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d421      	bmi.n	80087b2 <__lo0bits+0x52>
 800876e:	0798      	lsls	r0, r3, #30
 8008770:	bf49      	itett	mi
 8008772:	085b      	lsrmi	r3, r3, #1
 8008774:	089b      	lsrpl	r3, r3, #2
 8008776:	2001      	movmi	r0, #1
 8008778:	6013      	strmi	r3, [r2, #0]
 800877a:	bf5c      	itt	pl
 800877c:	6013      	strpl	r3, [r2, #0]
 800877e:	2002      	movpl	r0, #2
 8008780:	4770      	bx	lr
 8008782:	b299      	uxth	r1, r3
 8008784:	b909      	cbnz	r1, 800878a <__lo0bits+0x2a>
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	2010      	movs	r0, #16
 800878a:	b2d9      	uxtb	r1, r3
 800878c:	b909      	cbnz	r1, 8008792 <__lo0bits+0x32>
 800878e:	3008      	adds	r0, #8
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	0719      	lsls	r1, r3, #28
 8008794:	bf04      	itt	eq
 8008796:	091b      	lsreq	r3, r3, #4
 8008798:	3004      	addeq	r0, #4
 800879a:	0799      	lsls	r1, r3, #30
 800879c:	bf04      	itt	eq
 800879e:	089b      	lsreq	r3, r3, #2
 80087a0:	3002      	addeq	r0, #2
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d403      	bmi.n	80087ae <__lo0bits+0x4e>
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	f100 0001 	add.w	r0, r0, #1
 80087ac:	d003      	beq.n	80087b6 <__lo0bits+0x56>
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	4770      	bx	lr
 80087b2:	2000      	movs	r0, #0
 80087b4:	4770      	bx	lr
 80087b6:	2020      	movs	r0, #32
 80087b8:	4770      	bx	lr
	...

080087bc <__i2b>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	460c      	mov	r4, r1
 80087c0:	2101      	movs	r1, #1
 80087c2:	f7ff febb 	bl	800853c <_Balloc>
 80087c6:	4602      	mov	r2, r0
 80087c8:	b928      	cbnz	r0, 80087d6 <__i2b+0x1a>
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <__i2b+0x24>)
 80087cc:	4805      	ldr	r0, [pc, #20]	; (80087e4 <__i2b+0x28>)
 80087ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087d2:	f001 fc21 	bl	800a018 <__assert_func>
 80087d6:	2301      	movs	r3, #1
 80087d8:	6144      	str	r4, [r0, #20]
 80087da:	6103      	str	r3, [r0, #16]
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	0800a8e0 	.word	0x0800a8e0
 80087e4:	0800a9d0 	.word	0x0800a9d0

080087e8 <__multiply>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4691      	mov	r9, r2
 80087ee:	690a      	ldr	r2, [r1, #16]
 80087f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bfb8      	it	lt
 80087f8:	460b      	movlt	r3, r1
 80087fa:	460c      	mov	r4, r1
 80087fc:	bfbc      	itt	lt
 80087fe:	464c      	movlt	r4, r9
 8008800:	4699      	movlt	r9, r3
 8008802:	6927      	ldr	r7, [r4, #16]
 8008804:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	6861      	ldr	r1, [r4, #4]
 800880c:	eb07 060a 	add.w	r6, r7, sl
 8008810:	42b3      	cmp	r3, r6
 8008812:	b085      	sub	sp, #20
 8008814:	bfb8      	it	lt
 8008816:	3101      	addlt	r1, #1
 8008818:	f7ff fe90 	bl	800853c <_Balloc>
 800881c:	b930      	cbnz	r0, 800882c <__multiply+0x44>
 800881e:	4602      	mov	r2, r0
 8008820:	4b43      	ldr	r3, [pc, #268]	; (8008930 <__multiply+0x148>)
 8008822:	4844      	ldr	r0, [pc, #272]	; (8008934 <__multiply+0x14c>)
 8008824:	f240 115d 	movw	r1, #349	; 0x15d
 8008828:	f001 fbf6 	bl	800a018 <__assert_func>
 800882c:	f100 0514 	add.w	r5, r0, #20
 8008830:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008834:	462b      	mov	r3, r5
 8008836:	2200      	movs	r2, #0
 8008838:	4543      	cmp	r3, r8
 800883a:	d321      	bcc.n	8008880 <__multiply+0x98>
 800883c:	f104 0314 	add.w	r3, r4, #20
 8008840:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008844:	f109 0314 	add.w	r3, r9, #20
 8008848:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800884c:	9202      	str	r2, [sp, #8]
 800884e:	1b3a      	subs	r2, r7, r4
 8008850:	3a15      	subs	r2, #21
 8008852:	f022 0203 	bic.w	r2, r2, #3
 8008856:	3204      	adds	r2, #4
 8008858:	f104 0115 	add.w	r1, r4, #21
 800885c:	428f      	cmp	r7, r1
 800885e:	bf38      	it	cc
 8008860:	2204      	movcc	r2, #4
 8008862:	9201      	str	r2, [sp, #4]
 8008864:	9a02      	ldr	r2, [sp, #8]
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	429a      	cmp	r2, r3
 800886a:	d80c      	bhi.n	8008886 <__multiply+0x9e>
 800886c:	2e00      	cmp	r6, #0
 800886e:	dd03      	ble.n	8008878 <__multiply+0x90>
 8008870:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008874:	2b00      	cmp	r3, #0
 8008876:	d059      	beq.n	800892c <__multiply+0x144>
 8008878:	6106      	str	r6, [r0, #16]
 800887a:	b005      	add	sp, #20
 800887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008880:	f843 2b04 	str.w	r2, [r3], #4
 8008884:	e7d8      	b.n	8008838 <__multiply+0x50>
 8008886:	f8b3 a000 	ldrh.w	sl, [r3]
 800888a:	f1ba 0f00 	cmp.w	sl, #0
 800888e:	d023      	beq.n	80088d8 <__multiply+0xf0>
 8008890:	f104 0e14 	add.w	lr, r4, #20
 8008894:	46a9      	mov	r9, r5
 8008896:	f04f 0c00 	mov.w	ip, #0
 800889a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800889e:	f8d9 1000 	ldr.w	r1, [r9]
 80088a2:	fa1f fb82 	uxth.w	fp, r2
 80088a6:	b289      	uxth	r1, r1
 80088a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80088ac:	4461      	add	r1, ip
 80088ae:	f8d9 c000 	ldr.w	ip, [r9]
 80088b2:	0c12      	lsrs	r2, r2, #16
 80088b4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088b8:	fb0a c202 	mla	r2, sl, r2, ip
 80088bc:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088c0:	b289      	uxth	r1, r1
 80088c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088c6:	4577      	cmp	r7, lr
 80088c8:	f849 1b04 	str.w	r1, [r9], #4
 80088cc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088d0:	d8e3      	bhi.n	800889a <__multiply+0xb2>
 80088d2:	9a01      	ldr	r2, [sp, #4]
 80088d4:	f845 c002 	str.w	ip, [r5, r2]
 80088d8:	9a03      	ldr	r2, [sp, #12]
 80088da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088de:	3304      	adds	r3, #4
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	d020      	beq.n	8008928 <__multiply+0x140>
 80088e6:	6829      	ldr	r1, [r5, #0]
 80088e8:	f104 0c14 	add.w	ip, r4, #20
 80088ec:	46ae      	mov	lr, r5
 80088ee:	f04f 0a00 	mov.w	sl, #0
 80088f2:	f8bc b000 	ldrh.w	fp, [ip]
 80088f6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088fa:	fb09 220b 	mla	r2, r9, fp, r2
 80088fe:	4492      	add	sl, r2
 8008900:	b289      	uxth	r1, r1
 8008902:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008906:	f84e 1b04 	str.w	r1, [lr], #4
 800890a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800890e:	f8be 1000 	ldrh.w	r1, [lr]
 8008912:	0c12      	lsrs	r2, r2, #16
 8008914:	fb09 1102 	mla	r1, r9, r2, r1
 8008918:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800891c:	4567      	cmp	r7, ip
 800891e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008922:	d8e6      	bhi.n	80088f2 <__multiply+0x10a>
 8008924:	9a01      	ldr	r2, [sp, #4]
 8008926:	50a9      	str	r1, [r5, r2]
 8008928:	3504      	adds	r5, #4
 800892a:	e79b      	b.n	8008864 <__multiply+0x7c>
 800892c:	3e01      	subs	r6, #1
 800892e:	e79d      	b.n	800886c <__multiply+0x84>
 8008930:	0800a8e0 	.word	0x0800a8e0
 8008934:	0800a9d0 	.word	0x0800a9d0

08008938 <__pow5mult>:
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893c:	4615      	mov	r5, r2
 800893e:	f012 0203 	ands.w	r2, r2, #3
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	d007      	beq.n	8008958 <__pow5mult+0x20>
 8008948:	4c25      	ldr	r4, [pc, #148]	; (80089e0 <__pow5mult+0xa8>)
 800894a:	3a01      	subs	r2, #1
 800894c:	2300      	movs	r3, #0
 800894e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008952:	f7ff fe55 	bl	8008600 <__multadd>
 8008956:	4607      	mov	r7, r0
 8008958:	10ad      	asrs	r5, r5, #2
 800895a:	d03d      	beq.n	80089d8 <__pow5mult+0xa0>
 800895c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800895e:	b97c      	cbnz	r4, 8008980 <__pow5mult+0x48>
 8008960:	2010      	movs	r0, #16
 8008962:	f7ff fdc3 	bl	80084ec <malloc>
 8008966:	4602      	mov	r2, r0
 8008968:	6270      	str	r0, [r6, #36]	; 0x24
 800896a:	b928      	cbnz	r0, 8008978 <__pow5mult+0x40>
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <__pow5mult+0xac>)
 800896e:	481e      	ldr	r0, [pc, #120]	; (80089e8 <__pow5mult+0xb0>)
 8008970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008974:	f001 fb50 	bl	800a018 <__assert_func>
 8008978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800897c:	6004      	str	r4, [r0, #0]
 800897e:	60c4      	str	r4, [r0, #12]
 8008980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008988:	b94c      	cbnz	r4, 800899e <__pow5mult+0x66>
 800898a:	f240 2171 	movw	r1, #625	; 0x271
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ff14 	bl	80087bc <__i2b>
 8008994:	2300      	movs	r3, #0
 8008996:	f8c8 0008 	str.w	r0, [r8, #8]
 800899a:	4604      	mov	r4, r0
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	f04f 0900 	mov.w	r9, #0
 80089a2:	07eb      	lsls	r3, r5, #31
 80089a4:	d50a      	bpl.n	80089bc <__pow5mult+0x84>
 80089a6:	4639      	mov	r1, r7
 80089a8:	4622      	mov	r2, r4
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ff1c 	bl	80087e8 <__multiply>
 80089b0:	4639      	mov	r1, r7
 80089b2:	4680      	mov	r8, r0
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff fe01 	bl	80085bc <_Bfree>
 80089ba:	4647      	mov	r7, r8
 80089bc:	106d      	asrs	r5, r5, #1
 80089be:	d00b      	beq.n	80089d8 <__pow5mult+0xa0>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	b938      	cbnz	r0, 80089d4 <__pow5mult+0x9c>
 80089c4:	4622      	mov	r2, r4
 80089c6:	4621      	mov	r1, r4
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff ff0d 	bl	80087e8 <__multiply>
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	f8c0 9000 	str.w	r9, [r0]
 80089d4:	4604      	mov	r4, r0
 80089d6:	e7e4      	b.n	80089a2 <__pow5mult+0x6a>
 80089d8:	4638      	mov	r0, r7
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	bf00      	nop
 80089e0:	0800ab20 	.word	0x0800ab20
 80089e4:	0800a86e 	.word	0x0800a86e
 80089e8:	0800a9d0 	.word	0x0800a9d0

080089ec <__lshift>:
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	6849      	ldr	r1, [r1, #4]
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089fa:	68a3      	ldr	r3, [r4, #8]
 80089fc:	4607      	mov	r7, r0
 80089fe:	4691      	mov	r9, r2
 8008a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a04:	f108 0601 	add.w	r6, r8, #1
 8008a08:	42b3      	cmp	r3, r6
 8008a0a:	db0b      	blt.n	8008a24 <__lshift+0x38>
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff fd95 	bl	800853c <_Balloc>
 8008a12:	4605      	mov	r5, r0
 8008a14:	b948      	cbnz	r0, 8008a2a <__lshift+0x3e>
 8008a16:	4602      	mov	r2, r0
 8008a18:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <__lshift+0xd8>)
 8008a1a:	482b      	ldr	r0, [pc, #172]	; (8008ac8 <__lshift+0xdc>)
 8008a1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a20:	f001 fafa 	bl	800a018 <__assert_func>
 8008a24:	3101      	adds	r1, #1
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	e7ee      	b.n	8008a08 <__lshift+0x1c>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f100 0114 	add.w	r1, r0, #20
 8008a30:	f100 0210 	add.w	r2, r0, #16
 8008a34:	4618      	mov	r0, r3
 8008a36:	4553      	cmp	r3, sl
 8008a38:	db37      	blt.n	8008aaa <__lshift+0xbe>
 8008a3a:	6920      	ldr	r0, [r4, #16]
 8008a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	f019 091f 	ands.w	r9, r9, #31
 8008a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a50:	d02f      	beq.n	8008ab2 <__lshift+0xc6>
 8008a52:	f1c9 0e20 	rsb	lr, r9, #32
 8008a56:	468a      	mov	sl, r1
 8008a58:	f04f 0c00 	mov.w	ip, #0
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	fa02 f209 	lsl.w	r2, r2, r9
 8008a62:	ea42 020c 	orr.w	r2, r2, ip
 8008a66:	f84a 2b04 	str.w	r2, [sl], #4
 8008a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a74:	d8f2      	bhi.n	8008a5c <__lshift+0x70>
 8008a76:	1b03      	subs	r3, r0, r4
 8008a78:	3b15      	subs	r3, #21
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	3304      	adds	r3, #4
 8008a80:	f104 0215 	add.w	r2, r4, #21
 8008a84:	4290      	cmp	r0, r2
 8008a86:	bf38      	it	cc
 8008a88:	2304      	movcc	r3, #4
 8008a8a:	f841 c003 	str.w	ip, [r1, r3]
 8008a8e:	f1bc 0f00 	cmp.w	ip, #0
 8008a92:	d001      	beq.n	8008a98 <__lshift+0xac>
 8008a94:	f108 0602 	add.w	r6, r8, #2
 8008a98:	3e01      	subs	r6, #1
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	612e      	str	r6, [r5, #16]
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	f7ff fd8c 	bl	80085bc <_Bfree>
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aae:	3301      	adds	r3, #1
 8008ab0:	e7c1      	b.n	8008a36 <__lshift+0x4a>
 8008ab2:	3904      	subs	r1, #4
 8008ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008abc:	4298      	cmp	r0, r3
 8008abe:	d8f9      	bhi.n	8008ab4 <__lshift+0xc8>
 8008ac0:	e7ea      	b.n	8008a98 <__lshift+0xac>
 8008ac2:	bf00      	nop
 8008ac4:	0800a8e0 	.word	0x0800a8e0
 8008ac8:	0800a9d0 	.word	0x0800a9d0

08008acc <__mcmp>:
 8008acc:	690a      	ldr	r2, [r1, #16]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6900      	ldr	r0, [r0, #16]
 8008ad2:	1a80      	subs	r0, r0, r2
 8008ad4:	b530      	push	{r4, r5, lr}
 8008ad6:	d10d      	bne.n	8008af4 <__mcmp+0x28>
 8008ad8:	3314      	adds	r3, #20
 8008ada:	3114      	adds	r1, #20
 8008adc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aec:	4295      	cmp	r5, r2
 8008aee:	d002      	beq.n	8008af6 <__mcmp+0x2a>
 8008af0:	d304      	bcc.n	8008afc <__mcmp+0x30>
 8008af2:	2001      	movs	r0, #1
 8008af4:	bd30      	pop	{r4, r5, pc}
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	d3f4      	bcc.n	8008ae4 <__mcmp+0x18>
 8008afa:	e7fb      	b.n	8008af4 <__mcmp+0x28>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b00:	e7f8      	b.n	8008af4 <__mcmp+0x28>
	...

08008b04 <__mdiff>:
 8008b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	460d      	mov	r5, r1
 8008b0a:	4607      	mov	r7, r0
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4628      	mov	r0, r5
 8008b10:	4614      	mov	r4, r2
 8008b12:	f7ff ffdb 	bl	8008acc <__mcmp>
 8008b16:	1e06      	subs	r6, r0, #0
 8008b18:	d111      	bne.n	8008b3e <__mdiff+0x3a>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff fd0d 	bl	800853c <_Balloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <__mdiff+0x2e>
 8008b26:	4b39      	ldr	r3, [pc, #228]	; (8008c0c <__mdiff+0x108>)
 8008b28:	f240 2132 	movw	r1, #562	; 0x232
 8008b2c:	4838      	ldr	r0, [pc, #224]	; (8008c10 <__mdiff+0x10c>)
 8008b2e:	f001 fa73 	bl	800a018 <__assert_func>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	bfa4      	itt	ge
 8008b40:	4623      	movge	r3, r4
 8008b42:	462c      	movge	r4, r5
 8008b44:	4638      	mov	r0, r7
 8008b46:	6861      	ldr	r1, [r4, #4]
 8008b48:	bfa6      	itte	ge
 8008b4a:	461d      	movge	r5, r3
 8008b4c:	2600      	movge	r6, #0
 8008b4e:	2601      	movlt	r6, #1
 8008b50:	f7ff fcf4 	bl	800853c <_Balloc>
 8008b54:	4602      	mov	r2, r0
 8008b56:	b918      	cbnz	r0, 8008b60 <__mdiff+0x5c>
 8008b58:	4b2c      	ldr	r3, [pc, #176]	; (8008c0c <__mdiff+0x108>)
 8008b5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b5e:	e7e5      	b.n	8008b2c <__mdiff+0x28>
 8008b60:	6927      	ldr	r7, [r4, #16]
 8008b62:	60c6      	str	r6, [r0, #12]
 8008b64:	692e      	ldr	r6, [r5, #16]
 8008b66:	f104 0014 	add.w	r0, r4, #20
 8008b6a:	f105 0914 	add.w	r9, r5, #20
 8008b6e:	f102 0e14 	add.w	lr, r2, #20
 8008b72:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8008b76:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b7a:	3410      	adds	r4, #16
 8008b7c:	46f2      	mov	sl, lr
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b84:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008b88:	fa1f f883 	uxth.w	r8, r3
 8008b8c:	fa11 f18b 	uxtah	r1, r1, fp
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	eba1 0808 	sub.w	r8, r1, r8
 8008b96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b9e:	fa1f f888 	uxth.w	r8, r8
 8008ba2:	1419      	asrs	r1, r3, #16
 8008ba4:	454e      	cmp	r6, r9
 8008ba6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008baa:	f84a 3b04 	str.w	r3, [sl], #4
 8008bae:	d8e7      	bhi.n	8008b80 <__mdiff+0x7c>
 8008bb0:	1b73      	subs	r3, r6, r5
 8008bb2:	3b15      	subs	r3, #21
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	3304      	adds	r3, #4
 8008bba:	3515      	adds	r5, #21
 8008bbc:	42ae      	cmp	r6, r5
 8008bbe:	bf38      	it	cc
 8008bc0:	2304      	movcc	r3, #4
 8008bc2:	4418      	add	r0, r3
 8008bc4:	4473      	add	r3, lr
 8008bc6:	469e      	mov	lr, r3
 8008bc8:	4606      	mov	r6, r0
 8008bca:	4566      	cmp	r6, ip
 8008bcc:	d30e      	bcc.n	8008bec <__mdiff+0xe8>
 8008bce:	f10c 0103 	add.w	r1, ip, #3
 8008bd2:	1a09      	subs	r1, r1, r0
 8008bd4:	f021 0103 	bic.w	r1, r1, #3
 8008bd8:	3803      	subs	r0, #3
 8008bda:	4584      	cmp	ip, r0
 8008bdc:	bf38      	it	cc
 8008bde:	2100      	movcc	r1, #0
 8008be0:	4419      	add	r1, r3
 8008be2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008be6:	b17b      	cbz	r3, 8008c08 <__mdiff+0x104>
 8008be8:	6117      	str	r7, [r2, #16]
 8008bea:	e7a5      	b.n	8008b38 <__mdiff+0x34>
 8008bec:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bf0:	fa11 f488 	uxtah	r4, r1, r8
 8008bf4:	1425      	asrs	r5, r4, #16
 8008bf6:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008bfa:	b2a4      	uxth	r4, r4
 8008bfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008c00:	f84e 4b04 	str.w	r4, [lr], #4
 8008c04:	1429      	asrs	r1, r5, #16
 8008c06:	e7e0      	b.n	8008bca <__mdiff+0xc6>
 8008c08:	3f01      	subs	r7, #1
 8008c0a:	e7ea      	b.n	8008be2 <__mdiff+0xde>
 8008c0c:	0800a8e0 	.word	0x0800a8e0
 8008c10:	0800a9d0 	.word	0x0800a9d0

08008c14 <__ulp>:
 8008c14:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <__ulp+0x48>)
 8008c16:	400b      	ands	r3, r1
 8008c18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd02      	ble.n	8008c26 <__ulp+0x12>
 8008c20:	2000      	movs	r0, #0
 8008c22:	4619      	mov	r1, r3
 8008c24:	4770      	bx	lr
 8008c26:	425b      	negs	r3, r3
 8008c28:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c30:	f04f 0000 	mov.w	r0, #0
 8008c34:	f04f 0100 	mov.w	r1, #0
 8008c38:	da04      	bge.n	8008c44 <__ulp+0x30>
 8008c3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c3e:	fa43 f102 	asr.w	r1, r3, r2
 8008c42:	4770      	bx	lr
 8008c44:	f1a2 0314 	sub.w	r3, r2, #20
 8008c48:	2b1e      	cmp	r3, #30
 8008c4a:	bfda      	itte	le
 8008c4c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008c50:	fa22 f303 	lsrle.w	r3, r2, r3
 8008c54:	2301      	movgt	r3, #1
 8008c56:	4618      	mov	r0, r3
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	7ff00000 	.word	0x7ff00000

08008c60 <__b2d>:
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	6907      	ldr	r7, [r0, #16]
 8008c66:	f100 0914 	add.w	r9, r0, #20
 8008c6a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008c6e:	f1a7 0804 	sub.w	r8, r7, #4
 8008c72:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff fd52 	bl	8008720 <__hi0bits>
 8008c7c:	f1c0 0320 	rsb	r3, r0, #32
 8008c80:	280a      	cmp	r0, #10
 8008c82:	600b      	str	r3, [r1, #0]
 8008c84:	491f      	ldr	r1, [pc, #124]	; (8008d04 <__b2d+0xa4>)
 8008c86:	dc17      	bgt.n	8008cb8 <__b2d+0x58>
 8008c88:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c8c:	45c1      	cmp	r9, r8
 8008c8e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008c92:	bf38      	it	cc
 8008c94:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008c98:	ea43 0501 	orr.w	r5, r3, r1
 8008c9c:	bf28      	it	cs
 8008c9e:	2200      	movcs	r2, #0
 8008ca0:	f100 0315 	add.w	r3, r0, #21
 8008ca4:	fa06 f303 	lsl.w	r3, r6, r3
 8008ca8:	fa22 f20c 	lsr.w	r2, r2, ip
 8008cac:	ea43 0402 	orr.w	r4, r3, r2
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb8:	45c1      	cmp	r9, r8
 8008cba:	bf3a      	itte	cc
 8008cbc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008cc0:	f1a7 0808 	subcc.w	r8, r7, #8
 8008cc4:	2200      	movcs	r2, #0
 8008cc6:	f1b0 030b 	subs.w	r3, r0, #11
 8008cca:	d016      	beq.n	8008cfa <__b2d+0x9a>
 8008ccc:	f1c3 0720 	rsb	r7, r3, #32
 8008cd0:	fa22 f107 	lsr.w	r1, r2, r7
 8008cd4:	45c8      	cmp	r8, r9
 8008cd6:	fa06 f603 	lsl.w	r6, r6, r3
 8008cda:	ea46 0601 	orr.w	r6, r6, r1
 8008cde:	bf8c      	ite	hi
 8008ce0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008ce4:	2100      	movls	r1, #0
 8008ce6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008cea:	fa02 f003 	lsl.w	r0, r2, r3
 8008cee:	40f9      	lsrs	r1, r7
 8008cf0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008cf4:	ea40 0401 	orr.w	r4, r0, r1
 8008cf8:	e7da      	b.n	8008cb0 <__b2d+0x50>
 8008cfa:	ea46 0501 	orr.w	r5, r6, r1
 8008cfe:	4614      	mov	r4, r2
 8008d00:	e7d6      	b.n	8008cb0 <__b2d+0x50>
 8008d02:	bf00      	nop
 8008d04:	3ff00000 	.word	0x3ff00000

08008d08 <__d2b>:
 8008d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008d12:	4690      	mov	r8, r2
 8008d14:	461d      	mov	r5, r3
 8008d16:	f7ff fc11 	bl	800853c <_Balloc>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	b930      	cbnz	r0, 8008d2c <__d2b+0x24>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b25      	ldr	r3, [pc, #148]	; (8008db8 <__d2b+0xb0>)
 8008d22:	4826      	ldr	r0, [pc, #152]	; (8008dbc <__d2b+0xb4>)
 8008d24:	f240 310a 	movw	r1, #778	; 0x30a
 8008d28:	f001 f976 	bl	800a018 <__assert_func>
 8008d2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008d30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008d34:	bb2d      	cbnz	r5, 8008d82 <__d2b+0x7a>
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	f1b8 0300 	subs.w	r3, r8, #0
 8008d3c:	d026      	beq.n	8008d8c <__d2b+0x84>
 8008d3e:	4668      	mov	r0, sp
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	f7ff fd0d 	bl	8008760 <__lo0bits>
 8008d46:	9900      	ldr	r1, [sp, #0]
 8008d48:	b1f0      	cbz	r0, 8008d88 <__d2b+0x80>
 8008d4a:	9a01      	ldr	r2, [sp, #4]
 8008d4c:	f1c0 0320 	rsb	r3, r0, #32
 8008d50:	fa02 f303 	lsl.w	r3, r2, r3
 8008d54:	430b      	orrs	r3, r1
 8008d56:	40c2      	lsrs	r2, r0
 8008d58:	6163      	str	r3, [r4, #20]
 8008d5a:	9201      	str	r2, [sp, #4]
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	61a3      	str	r3, [r4, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bf14      	ite	ne
 8008d64:	2102      	movne	r1, #2
 8008d66:	2101      	moveq	r1, #1
 8008d68:	6121      	str	r1, [r4, #16]
 8008d6a:	b1c5      	cbz	r5, 8008d9e <__d2b+0x96>
 8008d6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d70:	4405      	add	r5, r0
 8008d72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d76:	603d      	str	r5, [r7, #0]
 8008d78:	6030      	str	r0, [r6, #0]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	b002      	add	sp, #8
 8008d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d86:	e7d6      	b.n	8008d36 <__d2b+0x2e>
 8008d88:	6161      	str	r1, [r4, #20]
 8008d8a:	e7e7      	b.n	8008d5c <__d2b+0x54>
 8008d8c:	a801      	add	r0, sp, #4
 8008d8e:	f7ff fce7 	bl	8008760 <__lo0bits>
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	6163      	str	r3, [r4, #20]
 8008d96:	2101      	movs	r1, #1
 8008d98:	6121      	str	r1, [r4, #16]
 8008d9a:	3020      	adds	r0, #32
 8008d9c:	e7e5      	b.n	8008d6a <__d2b+0x62>
 8008d9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008da2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008da6:	6038      	str	r0, [r7, #0]
 8008da8:	6918      	ldr	r0, [r3, #16]
 8008daa:	f7ff fcb9 	bl	8008720 <__hi0bits>
 8008dae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008db2:	6031      	str	r1, [r6, #0]
 8008db4:	e7e1      	b.n	8008d7a <__d2b+0x72>
 8008db6:	bf00      	nop
 8008db8:	0800a8e0 	.word	0x0800a8e0
 8008dbc:	0800a9d0 	.word	0x0800a9d0

08008dc0 <__ratio>:
 8008dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4688      	mov	r8, r1
 8008dc6:	4669      	mov	r1, sp
 8008dc8:	4681      	mov	r9, r0
 8008dca:	f7ff ff49 	bl	8008c60 <__b2d>
 8008dce:	460f      	mov	r7, r1
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	a901      	add	r1, sp, #4
 8008dd8:	f7ff ff42 	bl	8008c60 <__b2d>
 8008ddc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008de0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008de4:	eba3 0c02 	sub.w	ip, r3, r2
 8008de8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfd5      	itete	le
 8008df6:	460a      	movle	r2, r1
 8008df8:	462a      	movgt	r2, r5
 8008dfa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008dfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e02:	468b      	mov	fp, r1
 8008e04:	bfd8      	it	le
 8008e06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7f7 fcf3 	bl	80007fc <__aeabi_ddiv>
 8008e16:	b003      	add	sp, #12
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e1c <__copybits>:
 8008e1c:	3901      	subs	r1, #1
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	1149      	asrs	r1, r1, #5
 8008e22:	6914      	ldr	r4, [r2, #16]
 8008e24:	3101      	adds	r1, #1
 8008e26:	f102 0314 	add.w	r3, r2, #20
 8008e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e32:	1f05      	subs	r5, r0, #4
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	d30c      	bcc.n	8008e52 <__copybits+0x36>
 8008e38:	1aa3      	subs	r3, r4, r2
 8008e3a:	3b11      	subs	r3, #17
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3211      	adds	r2, #17
 8008e42:	42a2      	cmp	r2, r4
 8008e44:	bf88      	it	hi
 8008e46:	2300      	movhi	r3, #0
 8008e48:	4418      	add	r0, r3
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4288      	cmp	r0, r1
 8008e4e:	d305      	bcc.n	8008e5c <__copybits+0x40>
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e56:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e5a:	e7eb      	b.n	8008e34 <__copybits+0x18>
 8008e5c:	f840 3b04 	str.w	r3, [r0], #4
 8008e60:	e7f4      	b.n	8008e4c <__copybits+0x30>

08008e62 <__any_on>:
 8008e62:	f100 0214 	add.w	r2, r0, #20
 8008e66:	6900      	ldr	r0, [r0, #16]
 8008e68:	114b      	asrs	r3, r1, #5
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	db11      	blt.n	8008e94 <__any_on+0x32>
 8008e70:	dd0a      	ble.n	8008e88 <__any_on+0x26>
 8008e72:	f011 011f 	ands.w	r1, r1, #31
 8008e76:	d007      	beq.n	8008e88 <__any_on+0x26>
 8008e78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e7c:	fa24 f001 	lsr.w	r0, r4, r1
 8008e80:	fa00 f101 	lsl.w	r1, r0, r1
 8008e84:	428c      	cmp	r4, r1
 8008e86:	d10b      	bne.n	8008ea0 <__any_on+0x3e>
 8008e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d803      	bhi.n	8008e98 <__any_on+0x36>
 8008e90:	2000      	movs	r0, #0
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	4603      	mov	r3, r0
 8008e96:	e7f7      	b.n	8008e88 <__any_on+0x26>
 8008e98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d0f5      	beq.n	8008e8c <__any_on+0x2a>
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	e7f6      	b.n	8008e92 <__any_on+0x30>

08008ea4 <_calloc_r>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	fba1 5402 	umull	r5, r4, r1, r2
 8008eaa:	b934      	cbnz	r4, 8008eba <_calloc_r+0x16>
 8008eac:	4629      	mov	r1, r5
 8008eae:	f000 f877 	bl	8008fa0 <_malloc_r>
 8008eb2:	4606      	mov	r6, r0
 8008eb4:	b928      	cbnz	r0, 8008ec2 <_calloc_r+0x1e>
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	220c      	movs	r2, #12
 8008ebc:	6002      	str	r2, [r0, #0]
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	e7f9      	b.n	8008eb6 <_calloc_r+0x12>
 8008ec2:	462a      	mov	r2, r5
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7fc fa3b 	bl	8005340 <memset>
 8008eca:	e7f4      	b.n	8008eb6 <_calloc_r+0x12>

08008ecc <_free_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4605      	mov	r5, r0
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	d041      	beq.n	8008f58 <_free_r+0x8c>
 8008ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed8:	1f0c      	subs	r4, r1, #4
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bfb8      	it	lt
 8008ede:	18e4      	addlt	r4, r4, r3
 8008ee0:	f001 fa08 	bl	800a2f4 <__malloc_lock>
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	; (8008f5c <_free_r+0x90>)
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	b933      	cbnz	r3, 8008ef8 <_free_r+0x2c>
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	4628      	mov	r0, r5
 8008ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef4:	f001 ba04 	b.w	800a300 <__malloc_unlock>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d908      	bls.n	8008f0e <_free_r+0x42>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	1821      	adds	r1, r4, r0
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf01      	itttt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	1809      	addeq	r1, r1, r0
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	e7ed      	b.n	8008eea <_free_r+0x1e>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b10b      	cbz	r3, 8008f18 <_free_r+0x4c>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d9fa      	bls.n	8008f0e <_free_r+0x42>
 8008f18:	6811      	ldr	r1, [r2, #0]
 8008f1a:	1850      	adds	r0, r2, r1
 8008f1c:	42a0      	cmp	r0, r4
 8008f1e:	d10b      	bne.n	8008f38 <_free_r+0x6c>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	4401      	add	r1, r0
 8008f24:	1850      	adds	r0, r2, r1
 8008f26:	4283      	cmp	r3, r0
 8008f28:	6011      	str	r1, [r2, #0]
 8008f2a:	d1e0      	bne.n	8008eee <_free_r+0x22>
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	4401      	add	r1, r0
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	e7da      	b.n	8008eee <_free_r+0x22>
 8008f38:	d902      	bls.n	8008f40 <_free_r+0x74>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	e7d6      	b.n	8008eee <_free_r+0x22>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf04      	itt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	bf04      	itt	eq
 8008f50:	1809      	addeq	r1, r1, r0
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	6054      	str	r4, [r2, #4]
 8008f56:	e7ca      	b.n	8008eee <_free_r+0x22>
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
 8008f5a:	bf00      	nop
 8008f5c:	200002e4 	.word	0x200002e4

08008f60 <sbrk_aligned>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4e0e      	ldr	r6, [pc, #56]	; (8008f9c <sbrk_aligned+0x3c>)
 8008f64:	460c      	mov	r4, r1
 8008f66:	6831      	ldr	r1, [r6, #0]
 8008f68:	4605      	mov	r5, r0
 8008f6a:	b911      	cbnz	r1, 8008f72 <sbrk_aligned+0x12>
 8008f6c:	f000 fe7c 	bl	8009c68 <_sbrk_r>
 8008f70:	6030      	str	r0, [r6, #0]
 8008f72:	4621      	mov	r1, r4
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 fe77 	bl	8009c68 <_sbrk_r>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	d00a      	beq.n	8008f94 <sbrk_aligned+0x34>
 8008f7e:	1cc4      	adds	r4, r0, #3
 8008f80:	f024 0403 	bic.w	r4, r4, #3
 8008f84:	42a0      	cmp	r0, r4
 8008f86:	d007      	beq.n	8008f98 <sbrk_aligned+0x38>
 8008f88:	1a21      	subs	r1, r4, r0
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 fe6c 	bl	8009c68 <_sbrk_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d101      	bne.n	8008f98 <sbrk_aligned+0x38>
 8008f94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f98:	4620      	mov	r0, r4
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	200002e8 	.word	0x200002e8

08008fa0 <_malloc_r>:
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	1ccd      	adds	r5, r1, #3
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	db01      	blt.n	8008fbc <_malloc_r+0x1c>
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d905      	bls.n	8008fc8 <_malloc_r+0x28>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	2600      	movs	r6, #0
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	4e2e      	ldr	r6, [pc, #184]	; (8009084 <_malloc_r+0xe4>)
 8008fca:	f001 f993 	bl	800a2f4 <__malloc_lock>
 8008fce:	6833      	ldr	r3, [r6, #0]
 8008fd0:	461c      	mov	r4, r3
 8008fd2:	bb34      	cbnz	r4, 8009022 <_malloc_r+0x82>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7ff ffc2 	bl	8008f60 <sbrk_aligned>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	4604      	mov	r4, r0
 8008fe0:	d14d      	bne.n	800907e <_malloc_r+0xde>
 8008fe2:	6834      	ldr	r4, [r6, #0]
 8008fe4:	4626      	mov	r6, r4
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	d140      	bne.n	800906c <_malloc_r+0xcc>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	4631      	mov	r1, r6
 8008fee:	4638      	mov	r0, r7
 8008ff0:	eb04 0803 	add.w	r8, r4, r3
 8008ff4:	f000 fe38 	bl	8009c68 <_sbrk_r>
 8008ff8:	4580      	cmp	r8, r0
 8008ffa:	d13a      	bne.n	8009072 <_malloc_r+0xd2>
 8008ffc:	6821      	ldr	r1, [r4, #0]
 8008ffe:	3503      	adds	r5, #3
 8009000:	1a6d      	subs	r5, r5, r1
 8009002:	f025 0503 	bic.w	r5, r5, #3
 8009006:	3508      	adds	r5, #8
 8009008:	2d0c      	cmp	r5, #12
 800900a:	bf38      	it	cc
 800900c:	250c      	movcc	r5, #12
 800900e:	4629      	mov	r1, r5
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff ffa5 	bl	8008f60 <sbrk_aligned>
 8009016:	3001      	adds	r0, #1
 8009018:	d02b      	beq.n	8009072 <_malloc_r+0xd2>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	442b      	add	r3, r5
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	e00e      	b.n	8009040 <_malloc_r+0xa0>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	1b52      	subs	r2, r2, r5
 8009026:	d41e      	bmi.n	8009066 <_malloc_r+0xc6>
 8009028:	2a0b      	cmp	r2, #11
 800902a:	d916      	bls.n	800905a <_malloc_r+0xba>
 800902c:	1961      	adds	r1, r4, r5
 800902e:	42a3      	cmp	r3, r4
 8009030:	6025      	str	r5, [r4, #0]
 8009032:	bf18      	it	ne
 8009034:	6059      	strne	r1, [r3, #4]
 8009036:	6863      	ldr	r3, [r4, #4]
 8009038:	bf08      	it	eq
 800903a:	6031      	streq	r1, [r6, #0]
 800903c:	5162      	str	r2, [r4, r5]
 800903e:	604b      	str	r3, [r1, #4]
 8009040:	4638      	mov	r0, r7
 8009042:	f104 060b 	add.w	r6, r4, #11
 8009046:	f001 f95b 	bl	800a300 <__malloc_unlock>
 800904a:	f026 0607 	bic.w	r6, r6, #7
 800904e:	1d23      	adds	r3, r4, #4
 8009050:	1af2      	subs	r2, r6, r3
 8009052:	d0b6      	beq.n	8008fc2 <_malloc_r+0x22>
 8009054:	1b9b      	subs	r3, r3, r6
 8009056:	50a3      	str	r3, [r4, r2]
 8009058:	e7b3      	b.n	8008fc2 <_malloc_r+0x22>
 800905a:	6862      	ldr	r2, [r4, #4]
 800905c:	42a3      	cmp	r3, r4
 800905e:	bf0c      	ite	eq
 8009060:	6032      	streq	r2, [r6, #0]
 8009062:	605a      	strne	r2, [r3, #4]
 8009064:	e7ec      	b.n	8009040 <_malloc_r+0xa0>
 8009066:	4623      	mov	r3, r4
 8009068:	6864      	ldr	r4, [r4, #4]
 800906a:	e7b2      	b.n	8008fd2 <_malloc_r+0x32>
 800906c:	4634      	mov	r4, r6
 800906e:	6876      	ldr	r6, [r6, #4]
 8009070:	e7b9      	b.n	8008fe6 <_malloc_r+0x46>
 8009072:	230c      	movs	r3, #12
 8009074:	603b      	str	r3, [r7, #0]
 8009076:	4638      	mov	r0, r7
 8009078:	f001 f942 	bl	800a300 <__malloc_unlock>
 800907c:	e7a1      	b.n	8008fc2 <_malloc_r+0x22>
 800907e:	6025      	str	r5, [r4, #0]
 8009080:	e7de      	b.n	8009040 <_malloc_r+0xa0>
 8009082:	bf00      	nop
 8009084:	200002e4 	.word	0x200002e4

08009088 <__ssputs_r>:
 8009088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800908c:	688e      	ldr	r6, [r1, #8]
 800908e:	429e      	cmp	r6, r3
 8009090:	4682      	mov	sl, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4690      	mov	r8, r2
 8009096:	461f      	mov	r7, r3
 8009098:	d838      	bhi.n	800910c <__ssputs_r+0x84>
 800909a:	898a      	ldrh	r2, [r1, #12]
 800909c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090a0:	d032      	beq.n	8009108 <__ssputs_r+0x80>
 80090a2:	6825      	ldr	r5, [r4, #0]
 80090a4:	6909      	ldr	r1, [r1, #16]
 80090a6:	eba5 0901 	sub.w	r9, r5, r1
 80090aa:	6965      	ldr	r5, [r4, #20]
 80090ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090b4:	3301      	adds	r3, #1
 80090b6:	444b      	add	r3, r9
 80090b8:	106d      	asrs	r5, r5, #1
 80090ba:	429d      	cmp	r5, r3
 80090bc:	bf38      	it	cc
 80090be:	461d      	movcc	r5, r3
 80090c0:	0553      	lsls	r3, r2, #21
 80090c2:	d531      	bpl.n	8009128 <__ssputs_r+0xa0>
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7ff ff6b 	bl	8008fa0 <_malloc_r>
 80090ca:	4606      	mov	r6, r0
 80090cc:	b950      	cbnz	r0, 80090e4 <__ssputs_r+0x5c>
 80090ce:	230c      	movs	r3, #12
 80090d0:	f8ca 3000 	str.w	r3, [sl]
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	6921      	ldr	r1, [r4, #16]
 80090e6:	464a      	mov	r2, r9
 80090e8:	f7ff fa1a 	bl	8008520 <memcpy>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	6126      	str	r6, [r4, #16]
 80090fa:	6165      	str	r5, [r4, #20]
 80090fc:	444e      	add	r6, r9
 80090fe:	eba5 0509 	sub.w	r5, r5, r9
 8009102:	6026      	str	r6, [r4, #0]
 8009104:	60a5      	str	r5, [r4, #8]
 8009106:	463e      	mov	r6, r7
 8009108:	42be      	cmp	r6, r7
 800910a:	d900      	bls.n	800910e <__ssputs_r+0x86>
 800910c:	463e      	mov	r6, r7
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	4632      	mov	r2, r6
 8009112:	4641      	mov	r1, r8
 8009114:	f001 f8d4 	bl	800a2c0 <memmove>
 8009118:	68a3      	ldr	r3, [r4, #8]
 800911a:	1b9b      	subs	r3, r3, r6
 800911c:	60a3      	str	r3, [r4, #8]
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	4433      	add	r3, r6
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	2000      	movs	r0, #0
 8009126:	e7db      	b.n	80090e0 <__ssputs_r+0x58>
 8009128:	462a      	mov	r2, r5
 800912a:	f001 f8ef 	bl	800a30c <_realloc_r>
 800912e:	4606      	mov	r6, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	d1e1      	bne.n	80090f8 <__ssputs_r+0x70>
 8009134:	6921      	ldr	r1, [r4, #16]
 8009136:	4650      	mov	r0, sl
 8009138:	f7ff fec8 	bl	8008ecc <_free_r>
 800913c:	e7c7      	b.n	80090ce <__ssputs_r+0x46>
	...

08009140 <_svfiprintf_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	4698      	mov	r8, r3
 8009146:	898b      	ldrh	r3, [r1, #12]
 8009148:	061b      	lsls	r3, r3, #24
 800914a:	b09d      	sub	sp, #116	; 0x74
 800914c:	4607      	mov	r7, r0
 800914e:	460d      	mov	r5, r1
 8009150:	4614      	mov	r4, r2
 8009152:	d50e      	bpl.n	8009172 <_svfiprintf_r+0x32>
 8009154:	690b      	ldr	r3, [r1, #16]
 8009156:	b963      	cbnz	r3, 8009172 <_svfiprintf_r+0x32>
 8009158:	2140      	movs	r1, #64	; 0x40
 800915a:	f7ff ff21 	bl	8008fa0 <_malloc_r>
 800915e:	6028      	str	r0, [r5, #0]
 8009160:	6128      	str	r0, [r5, #16]
 8009162:	b920      	cbnz	r0, 800916e <_svfiprintf_r+0x2e>
 8009164:	230c      	movs	r3, #12
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800916c:	e0d1      	b.n	8009312 <_svfiprintf_r+0x1d2>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	616b      	str	r3, [r5, #20]
 8009172:	2300      	movs	r3, #0
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	2320      	movs	r3, #32
 8009178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800917c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009180:	2330      	movs	r3, #48	; 0x30
 8009182:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800932c <_svfiprintf_r+0x1ec>
 8009186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800918a:	f04f 0901 	mov.w	r9, #1
 800918e:	4623      	mov	r3, r4
 8009190:	469a      	mov	sl, r3
 8009192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009196:	b10a      	cbz	r2, 800919c <_svfiprintf_r+0x5c>
 8009198:	2a25      	cmp	r2, #37	; 0x25
 800919a:	d1f9      	bne.n	8009190 <_svfiprintf_r+0x50>
 800919c:	ebba 0b04 	subs.w	fp, sl, r4
 80091a0:	d00b      	beq.n	80091ba <_svfiprintf_r+0x7a>
 80091a2:	465b      	mov	r3, fp
 80091a4:	4622      	mov	r2, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff ff6d 	bl	8009088 <__ssputs_r>
 80091ae:	3001      	adds	r0, #1
 80091b0:	f000 80aa 	beq.w	8009308 <_svfiprintf_r+0x1c8>
 80091b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091b6:	445a      	add	r2, fp
 80091b8:	9209      	str	r2, [sp, #36]	; 0x24
 80091ba:	f89a 3000 	ldrb.w	r3, [sl]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 80a2 	beq.w	8009308 <_svfiprintf_r+0x1c8>
 80091c4:	2300      	movs	r3, #0
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ce:	f10a 0a01 	add.w	sl, sl, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	9307      	str	r3, [sp, #28]
 80091d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091da:	931a      	str	r3, [sp, #104]	; 0x68
 80091dc:	4654      	mov	r4, sl
 80091de:	2205      	movs	r2, #5
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	4851      	ldr	r0, [pc, #324]	; (800932c <_svfiprintf_r+0x1ec>)
 80091e6:	f7f6 ffd3 	bl	8000190 <memchr>
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	b9d8      	cbnz	r0, 8009226 <_svfiprintf_r+0xe6>
 80091ee:	06d0      	lsls	r0, r2, #27
 80091f0:	bf44      	itt	mi
 80091f2:	2320      	movmi	r3, #32
 80091f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091f8:	0711      	lsls	r1, r2, #28
 80091fa:	bf44      	itt	mi
 80091fc:	232b      	movmi	r3, #43	; 0x2b
 80091fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b2a      	cmp	r3, #42	; 0x2a
 8009208:	d015      	beq.n	8009236 <_svfiprintf_r+0xf6>
 800920a:	9a07      	ldr	r2, [sp, #28]
 800920c:	4654      	mov	r4, sl
 800920e:	2000      	movs	r0, #0
 8009210:	f04f 0c0a 	mov.w	ip, #10
 8009214:	4621      	mov	r1, r4
 8009216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921a:	3b30      	subs	r3, #48	; 0x30
 800921c:	2b09      	cmp	r3, #9
 800921e:	d94e      	bls.n	80092be <_svfiprintf_r+0x17e>
 8009220:	b1b0      	cbz	r0, 8009250 <_svfiprintf_r+0x110>
 8009222:	9207      	str	r2, [sp, #28]
 8009224:	e014      	b.n	8009250 <_svfiprintf_r+0x110>
 8009226:	eba0 0308 	sub.w	r3, r0, r8
 800922a:	fa09 f303 	lsl.w	r3, r9, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	46a2      	mov	sl, r4
 8009234:	e7d2      	b.n	80091dc <_svfiprintf_r+0x9c>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	1d19      	adds	r1, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9103      	str	r1, [sp, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfbb      	ittet	lt
 8009242:	425b      	neglt	r3, r3
 8009244:	f042 0202 	orrlt.w	r2, r2, #2
 8009248:	9307      	strge	r3, [sp, #28]
 800924a:	9307      	strlt	r3, [sp, #28]
 800924c:	bfb8      	it	lt
 800924e:	9204      	strlt	r2, [sp, #16]
 8009250:	7823      	ldrb	r3, [r4, #0]
 8009252:	2b2e      	cmp	r3, #46	; 0x2e
 8009254:	d10c      	bne.n	8009270 <_svfiprintf_r+0x130>
 8009256:	7863      	ldrb	r3, [r4, #1]
 8009258:	2b2a      	cmp	r3, #42	; 0x2a
 800925a:	d135      	bne.n	80092c8 <_svfiprintf_r+0x188>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d1a      	adds	r2, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb8      	it	lt
 8009268:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800926c:	3402      	adds	r4, #2
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009330 <_svfiprintf_r+0x1f0>
 8009274:	7821      	ldrb	r1, [r4, #0]
 8009276:	2203      	movs	r2, #3
 8009278:	4650      	mov	r0, sl
 800927a:	f7f6 ff89 	bl	8000190 <memchr>
 800927e:	b140      	cbz	r0, 8009292 <_svfiprintf_r+0x152>
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	eba0 000a 	sub.w	r0, r0, sl
 8009286:	fa03 f000 	lsl.w	r0, r3, r0
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	4303      	orrs	r3, r0
 800928e:	3401      	adds	r4, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009296:	4827      	ldr	r0, [pc, #156]	; (8009334 <_svfiprintf_r+0x1f4>)
 8009298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800929c:	2206      	movs	r2, #6
 800929e:	f7f6 ff77 	bl	8000190 <memchr>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d038      	beq.n	8009318 <_svfiprintf_r+0x1d8>
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <_svfiprintf_r+0x1f8>)
 80092a8:	bb1b      	cbnz	r3, 80092f2 <_svfiprintf_r+0x1b2>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	3307      	adds	r3, #7
 80092ae:	f023 0307 	bic.w	r3, r3, #7
 80092b2:	3308      	adds	r3, #8
 80092b4:	9303      	str	r3, [sp, #12]
 80092b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b8:	4433      	add	r3, r6
 80092ba:	9309      	str	r3, [sp, #36]	; 0x24
 80092bc:	e767      	b.n	800918e <_svfiprintf_r+0x4e>
 80092be:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c2:	460c      	mov	r4, r1
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7a5      	b.n	8009214 <_svfiprintf_r+0xd4>
 80092c8:	2300      	movs	r3, #0
 80092ca:	3401      	adds	r4, #1
 80092cc:	9305      	str	r3, [sp, #20]
 80092ce:	4619      	mov	r1, r3
 80092d0:	f04f 0c0a 	mov.w	ip, #10
 80092d4:	4620      	mov	r0, r4
 80092d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092da:	3a30      	subs	r2, #48	; 0x30
 80092dc:	2a09      	cmp	r2, #9
 80092de:	d903      	bls.n	80092e8 <_svfiprintf_r+0x1a8>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0c5      	beq.n	8009270 <_svfiprintf_r+0x130>
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	e7c3      	b.n	8009270 <_svfiprintf_r+0x130>
 80092e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ec:	4604      	mov	r4, r0
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7f0      	b.n	80092d4 <_svfiprintf_r+0x194>
 80092f2:	ab03      	add	r3, sp, #12
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	462a      	mov	r2, r5
 80092f8:	4b10      	ldr	r3, [pc, #64]	; (800933c <_svfiprintf_r+0x1fc>)
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7fc f8c5 	bl	800548c <_printf_float>
 8009302:	1c42      	adds	r2, r0, #1
 8009304:	4606      	mov	r6, r0
 8009306:	d1d6      	bne.n	80092b6 <_svfiprintf_r+0x176>
 8009308:	89ab      	ldrh	r3, [r5, #12]
 800930a:	065b      	lsls	r3, r3, #25
 800930c:	f53f af2c 	bmi.w	8009168 <_svfiprintf_r+0x28>
 8009310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009312:	b01d      	add	sp, #116	; 0x74
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	ab03      	add	r3, sp, #12
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	462a      	mov	r2, r5
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <_svfiprintf_r+0x1fc>)
 8009320:	a904      	add	r1, sp, #16
 8009322:	4638      	mov	r0, r7
 8009324:	f7fc fb4a 	bl	80059bc <_printf_i>
 8009328:	e7eb      	b.n	8009302 <_svfiprintf_r+0x1c2>
 800932a:	bf00      	nop
 800932c:	0800ab2c 	.word	0x0800ab2c
 8009330:	0800ab32 	.word	0x0800ab32
 8009334:	0800ab36 	.word	0x0800ab36
 8009338:	0800548d 	.word	0x0800548d
 800933c:	08009089 	.word	0x08009089

08009340 <_sungetc_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	1c4b      	adds	r3, r1, #1
 8009344:	4614      	mov	r4, r2
 8009346:	d103      	bne.n	8009350 <_sungetc_r+0x10>
 8009348:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800934c:	4628      	mov	r0, r5
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	8993      	ldrh	r3, [r2, #12]
 8009352:	f023 0320 	bic.w	r3, r3, #32
 8009356:	8193      	strh	r3, [r2, #12]
 8009358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800935a:	6852      	ldr	r2, [r2, #4]
 800935c:	b2cd      	uxtb	r5, r1
 800935e:	b18b      	cbz	r3, 8009384 <_sungetc_r+0x44>
 8009360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009362:	4293      	cmp	r3, r2
 8009364:	dd08      	ble.n	8009378 <_sungetc_r+0x38>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	3301      	adds	r3, #1
 8009374:	6063      	str	r3, [r4, #4]
 8009376:	e7e9      	b.n	800934c <_sungetc_r+0xc>
 8009378:	4621      	mov	r1, r4
 800937a:	f000 fd45 	bl	8009e08 <__submore>
 800937e:	2800      	cmp	r0, #0
 8009380:	d0f1      	beq.n	8009366 <_sungetc_r+0x26>
 8009382:	e7e1      	b.n	8009348 <_sungetc_r+0x8>
 8009384:	6921      	ldr	r1, [r4, #16]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	b151      	cbz	r1, 80093a0 <_sungetc_r+0x60>
 800938a:	4299      	cmp	r1, r3
 800938c:	d208      	bcs.n	80093a0 <_sungetc_r+0x60>
 800938e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009392:	42a9      	cmp	r1, r5
 8009394:	d104      	bne.n	80093a0 <_sungetc_r+0x60>
 8009396:	3b01      	subs	r3, #1
 8009398:	3201      	adds	r2, #1
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	6062      	str	r2, [r4, #4]
 800939e:	e7d5      	b.n	800934c <_sungetc_r+0xc>
 80093a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80093a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a8:	6363      	str	r3, [r4, #52]	; 0x34
 80093aa:	2303      	movs	r3, #3
 80093ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80093ae:	4623      	mov	r3, r4
 80093b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7dc      	b.n	8009374 <_sungetc_r+0x34>

080093ba <__ssrefill_r>:
 80093ba:	b510      	push	{r4, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80093c0:	b169      	cbz	r1, 80093de <__ssrefill_r+0x24>
 80093c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d001      	beq.n	80093ce <__ssrefill_r+0x14>
 80093ca:	f7ff fd7f 	bl	8008ecc <_free_r>
 80093ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093d0:	6063      	str	r3, [r4, #4]
 80093d2:	2000      	movs	r0, #0
 80093d4:	6360      	str	r0, [r4, #52]	; 0x34
 80093d6:	b113      	cbz	r3, 80093de <__ssrefill_r+0x24>
 80093d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	bd10      	pop	{r4, pc}
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0320 	orr.w	r3, r3, #32
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f2:	e7f3      	b.n	80093dc <__ssrefill_r+0x22>

080093f4 <__ssvfiscanf_r>:
 80093f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f8:	460c      	mov	r4, r1
 80093fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80093fe:	2100      	movs	r1, #0
 8009400:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009404:	49a6      	ldr	r1, [pc, #664]	; (80096a0 <__ssvfiscanf_r+0x2ac>)
 8009406:	91a0      	str	r1, [sp, #640]	; 0x280
 8009408:	f10d 0804 	add.w	r8, sp, #4
 800940c:	49a5      	ldr	r1, [pc, #660]	; (80096a4 <__ssvfiscanf_r+0x2b0>)
 800940e:	4fa6      	ldr	r7, [pc, #664]	; (80096a8 <__ssvfiscanf_r+0x2b4>)
 8009410:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80096ac <__ssvfiscanf_r+0x2b8>
 8009414:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009418:	4606      	mov	r6, r0
 800941a:	91a1      	str	r1, [sp, #644]	; 0x284
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	7813      	ldrb	r3, [r2, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 815a 	beq.w	80096da <__ssvfiscanf_r+0x2e6>
 8009426:	5dd9      	ldrb	r1, [r3, r7]
 8009428:	f011 0108 	ands.w	r1, r1, #8
 800942c:	f102 0501 	add.w	r5, r2, #1
 8009430:	d019      	beq.n	8009466 <__ssvfiscanf_r+0x72>
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	dd0f      	ble.n	8009458 <__ssvfiscanf_r+0x64>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	5cba      	ldrb	r2, [r7, r2]
 800943e:	0712      	lsls	r2, r2, #28
 8009440:	d401      	bmi.n	8009446 <__ssvfiscanf_r+0x52>
 8009442:	462a      	mov	r2, r5
 8009444:	e7eb      	b.n	800941e <__ssvfiscanf_r+0x2a>
 8009446:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009448:	3201      	adds	r2, #1
 800944a:	9245      	str	r2, [sp, #276]	; 0x114
 800944c:	6862      	ldr	r2, [r4, #4]
 800944e:	3301      	adds	r3, #1
 8009450:	3a01      	subs	r2, #1
 8009452:	6062      	str	r2, [r4, #4]
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	e7ec      	b.n	8009432 <__ssvfiscanf_r+0x3e>
 8009458:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800945a:	4621      	mov	r1, r4
 800945c:	4630      	mov	r0, r6
 800945e:	4798      	blx	r3
 8009460:	2800      	cmp	r0, #0
 8009462:	d0e9      	beq.n	8009438 <__ssvfiscanf_r+0x44>
 8009464:	e7ed      	b.n	8009442 <__ssvfiscanf_r+0x4e>
 8009466:	2b25      	cmp	r3, #37	; 0x25
 8009468:	d012      	beq.n	8009490 <__ssvfiscanf_r+0x9c>
 800946a:	469a      	mov	sl, r3
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f340 8091 	ble.w	8009596 <__ssvfiscanf_r+0x1a2>
 8009474:	6822      	ldr	r2, [r4, #0]
 8009476:	7813      	ldrb	r3, [r2, #0]
 8009478:	4553      	cmp	r3, sl
 800947a:	f040 812e 	bne.w	80096da <__ssvfiscanf_r+0x2e6>
 800947e:	6863      	ldr	r3, [r4, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	6063      	str	r3, [r4, #4]
 8009484:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009486:	3201      	adds	r2, #1
 8009488:	3301      	adds	r3, #1
 800948a:	6022      	str	r2, [r4, #0]
 800948c:	9345      	str	r3, [sp, #276]	; 0x114
 800948e:	e7d8      	b.n	8009442 <__ssvfiscanf_r+0x4e>
 8009490:	9141      	str	r1, [sp, #260]	; 0x104
 8009492:	9143      	str	r1, [sp, #268]	; 0x10c
 8009494:	7853      	ldrb	r3, [r2, #1]
 8009496:	2b2a      	cmp	r3, #42	; 0x2a
 8009498:	bf02      	ittt	eq
 800949a:	2310      	moveq	r3, #16
 800949c:	1c95      	addeq	r5, r2, #2
 800949e:	9341      	streq	r3, [sp, #260]	; 0x104
 80094a0:	220a      	movs	r2, #10
 80094a2:	46aa      	mov	sl, r5
 80094a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80094a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80094ac:	2b09      	cmp	r3, #9
 80094ae:	d91d      	bls.n	80094ec <__ssvfiscanf_r+0xf8>
 80094b0:	487e      	ldr	r0, [pc, #504]	; (80096ac <__ssvfiscanf_r+0x2b8>)
 80094b2:	2203      	movs	r2, #3
 80094b4:	f7f6 fe6c 	bl	8000190 <memchr>
 80094b8:	b140      	cbz	r0, 80094cc <__ssvfiscanf_r+0xd8>
 80094ba:	2301      	movs	r3, #1
 80094bc:	eba0 0009 	sub.w	r0, r0, r9
 80094c0:	fa03 f000 	lsl.w	r0, r3, r0
 80094c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094c6:	4318      	orrs	r0, r3
 80094c8:	9041      	str	r0, [sp, #260]	; 0x104
 80094ca:	4655      	mov	r5, sl
 80094cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094d0:	2b78      	cmp	r3, #120	; 0x78
 80094d2:	d806      	bhi.n	80094e2 <__ssvfiscanf_r+0xee>
 80094d4:	2b57      	cmp	r3, #87	; 0x57
 80094d6:	d810      	bhi.n	80094fa <__ssvfiscanf_r+0x106>
 80094d8:	2b25      	cmp	r3, #37	; 0x25
 80094da:	d0c6      	beq.n	800946a <__ssvfiscanf_r+0x76>
 80094dc:	d856      	bhi.n	800958c <__ssvfiscanf_r+0x198>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d064      	beq.n	80095ac <__ssvfiscanf_r+0x1b8>
 80094e2:	2303      	movs	r3, #3
 80094e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80094e6:	230a      	movs	r3, #10
 80094e8:	9342      	str	r3, [sp, #264]	; 0x108
 80094ea:	e071      	b.n	80095d0 <__ssvfiscanf_r+0x1dc>
 80094ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80094ee:	fb02 1103 	mla	r1, r2, r3, r1
 80094f2:	3930      	subs	r1, #48	; 0x30
 80094f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80094f6:	4655      	mov	r5, sl
 80094f8:	e7d3      	b.n	80094a2 <__ssvfiscanf_r+0xae>
 80094fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80094fe:	2a20      	cmp	r2, #32
 8009500:	d8ef      	bhi.n	80094e2 <__ssvfiscanf_r+0xee>
 8009502:	a101      	add	r1, pc, #4	; (adr r1, 8009508 <__ssvfiscanf_r+0x114>)
 8009504:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009508:	080095bb 	.word	0x080095bb
 800950c:	080094e3 	.word	0x080094e3
 8009510:	080094e3 	.word	0x080094e3
 8009514:	08009619 	.word	0x08009619
 8009518:	080094e3 	.word	0x080094e3
 800951c:	080094e3 	.word	0x080094e3
 8009520:	080094e3 	.word	0x080094e3
 8009524:	080094e3 	.word	0x080094e3
 8009528:	080094e3 	.word	0x080094e3
 800952c:	080094e3 	.word	0x080094e3
 8009530:	080094e3 	.word	0x080094e3
 8009534:	0800962f 	.word	0x0800962f
 8009538:	08009605 	.word	0x08009605
 800953c:	08009593 	.word	0x08009593
 8009540:	08009593 	.word	0x08009593
 8009544:	08009593 	.word	0x08009593
 8009548:	080094e3 	.word	0x080094e3
 800954c:	08009609 	.word	0x08009609
 8009550:	080094e3 	.word	0x080094e3
 8009554:	080094e3 	.word	0x080094e3
 8009558:	080094e3 	.word	0x080094e3
 800955c:	080094e3 	.word	0x080094e3
 8009560:	0800963f 	.word	0x0800963f
 8009564:	08009611 	.word	0x08009611
 8009568:	080095b3 	.word	0x080095b3
 800956c:	080094e3 	.word	0x080094e3
 8009570:	080094e3 	.word	0x080094e3
 8009574:	0800963b 	.word	0x0800963b
 8009578:	080094e3 	.word	0x080094e3
 800957c:	08009605 	.word	0x08009605
 8009580:	080094e3 	.word	0x080094e3
 8009584:	080094e3 	.word	0x080094e3
 8009588:	080095bb 	.word	0x080095bb
 800958c:	3b45      	subs	r3, #69	; 0x45
 800958e:	2b02      	cmp	r3, #2
 8009590:	d8a7      	bhi.n	80094e2 <__ssvfiscanf_r+0xee>
 8009592:	2305      	movs	r3, #5
 8009594:	e01b      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 8009596:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009598:	4621      	mov	r1, r4
 800959a:	4630      	mov	r0, r6
 800959c:	4798      	blx	r3
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f af68 	beq.w	8009474 <__ssvfiscanf_r+0x80>
 80095a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f040 808d 	bne.w	80096c6 <__ssvfiscanf_r+0x2d2>
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095b0:	e08f      	b.n	80096d2 <__ssvfiscanf_r+0x2de>
 80095b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095b4:	f042 0220 	orr.w	r2, r2, #32
 80095b8:	9241      	str	r2, [sp, #260]	; 0x104
 80095ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c0:	9241      	str	r2, [sp, #260]	; 0x104
 80095c2:	2210      	movs	r2, #16
 80095c4:	2b6f      	cmp	r3, #111	; 0x6f
 80095c6:	9242      	str	r2, [sp, #264]	; 0x108
 80095c8:	bf34      	ite	cc
 80095ca:	2303      	movcc	r3, #3
 80095cc:	2304      	movcs	r3, #4
 80095ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80095d0:	6863      	ldr	r3, [r4, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dd42      	ble.n	800965c <__ssvfiscanf_r+0x268>
 80095d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095d8:	0659      	lsls	r1, r3, #25
 80095da:	d404      	bmi.n	80095e6 <__ssvfiscanf_r+0x1f2>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	5cba      	ldrb	r2, [r7, r2]
 80095e2:	0712      	lsls	r2, r2, #28
 80095e4:	d441      	bmi.n	800966a <__ssvfiscanf_r+0x276>
 80095e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	dc50      	bgt.n	800968e <__ssvfiscanf_r+0x29a>
 80095ec:	466b      	mov	r3, sp
 80095ee:	4622      	mov	r2, r4
 80095f0:	a941      	add	r1, sp, #260	; 0x104
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 f9ce 	bl	8009994 <_scanf_chars>
 80095f8:	2801      	cmp	r0, #1
 80095fa:	d06e      	beq.n	80096da <__ssvfiscanf_r+0x2e6>
 80095fc:	2802      	cmp	r0, #2
 80095fe:	f47f af20 	bne.w	8009442 <__ssvfiscanf_r+0x4e>
 8009602:	e7cf      	b.n	80095a4 <__ssvfiscanf_r+0x1b0>
 8009604:	220a      	movs	r2, #10
 8009606:	e7dd      	b.n	80095c4 <__ssvfiscanf_r+0x1d0>
 8009608:	2300      	movs	r3, #0
 800960a:	9342      	str	r3, [sp, #264]	; 0x108
 800960c:	2303      	movs	r3, #3
 800960e:	e7de      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 8009610:	2308      	movs	r3, #8
 8009612:	9342      	str	r3, [sp, #264]	; 0x108
 8009614:	2304      	movs	r3, #4
 8009616:	e7da      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 8009618:	4629      	mov	r1, r5
 800961a:	4640      	mov	r0, r8
 800961c:	f000 fb34 	bl	8009c88 <__sccl>
 8009620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009626:	9341      	str	r3, [sp, #260]	; 0x104
 8009628:	4605      	mov	r5, r0
 800962a:	2301      	movs	r3, #1
 800962c:	e7cf      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 800962e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009634:	9341      	str	r3, [sp, #260]	; 0x104
 8009636:	2300      	movs	r3, #0
 8009638:	e7c9      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 800963a:	2302      	movs	r3, #2
 800963c:	e7c7      	b.n	80095ce <__ssvfiscanf_r+0x1da>
 800963e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009640:	06c3      	lsls	r3, r0, #27
 8009642:	f53f aefe 	bmi.w	8009442 <__ssvfiscanf_r+0x4e>
 8009646:	9b00      	ldr	r3, [sp, #0]
 8009648:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800964a:	1d19      	adds	r1, r3, #4
 800964c:	9100      	str	r1, [sp, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f010 0f01 	tst.w	r0, #1
 8009654:	bf14      	ite	ne
 8009656:	801a      	strhne	r2, [r3, #0]
 8009658:	601a      	streq	r2, [r3, #0]
 800965a:	e6f2      	b.n	8009442 <__ssvfiscanf_r+0x4e>
 800965c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800965e:	4621      	mov	r1, r4
 8009660:	4630      	mov	r0, r6
 8009662:	4798      	blx	r3
 8009664:	2800      	cmp	r0, #0
 8009666:	d0b6      	beq.n	80095d6 <__ssvfiscanf_r+0x1e2>
 8009668:	e79c      	b.n	80095a4 <__ssvfiscanf_r+0x1b0>
 800966a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800966c:	3201      	adds	r2, #1
 800966e:	9245      	str	r2, [sp, #276]	; 0x114
 8009670:	6862      	ldr	r2, [r4, #4]
 8009672:	3a01      	subs	r2, #1
 8009674:	2a00      	cmp	r2, #0
 8009676:	6062      	str	r2, [r4, #4]
 8009678:	dd02      	ble.n	8009680 <__ssvfiscanf_r+0x28c>
 800967a:	3301      	adds	r3, #1
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	e7ad      	b.n	80095dc <__ssvfiscanf_r+0x1e8>
 8009680:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009682:	4621      	mov	r1, r4
 8009684:	4630      	mov	r0, r6
 8009686:	4798      	blx	r3
 8009688:	2800      	cmp	r0, #0
 800968a:	d0a7      	beq.n	80095dc <__ssvfiscanf_r+0x1e8>
 800968c:	e78a      	b.n	80095a4 <__ssvfiscanf_r+0x1b0>
 800968e:	2b04      	cmp	r3, #4
 8009690:	dc0e      	bgt.n	80096b0 <__ssvfiscanf_r+0x2bc>
 8009692:	466b      	mov	r3, sp
 8009694:	4622      	mov	r2, r4
 8009696:	a941      	add	r1, sp, #260	; 0x104
 8009698:	4630      	mov	r0, r6
 800969a:	f000 f9d5 	bl	8009a48 <_scanf_i>
 800969e:	e7ab      	b.n	80095f8 <__ssvfiscanf_r+0x204>
 80096a0:	08009341 	.word	0x08009341
 80096a4:	080093bb 	.word	0x080093bb
 80096a8:	0800a761 	.word	0x0800a761
 80096ac:	0800ab32 	.word	0x0800ab32
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <__ssvfiscanf_r+0x2ec>)
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f43f aec5 	beq.w	8009442 <__ssvfiscanf_r+0x4e>
 80096b8:	466b      	mov	r3, sp
 80096ba:	4622      	mov	r2, r4
 80096bc:	a941      	add	r1, sp, #260	; 0x104
 80096be:	4630      	mov	r0, r6
 80096c0:	f7fc faa2 	bl	8005c08 <_scanf_float>
 80096c4:	e798      	b.n	80095f8 <__ssvfiscanf_r+0x204>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80096cc:	bf18      	it	ne
 80096ce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80096d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80096d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096dc:	e7f9      	b.n	80096d2 <__ssvfiscanf_r+0x2de>
 80096de:	bf00      	nop
 80096e0:	08005c09 	.word	0x08005c09

080096e4 <__sfputc_r>:
 80096e4:	6893      	ldr	r3, [r2, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	b410      	push	{r4}
 80096ec:	6093      	str	r3, [r2, #8]
 80096ee:	da07      	bge.n	8009700 <__sfputc_r+0x1c>
 80096f0:	6994      	ldr	r4, [r2, #24]
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	db01      	blt.n	80096fa <__sfputc_r+0x16>
 80096f6:	290a      	cmp	r1, #10
 80096f8:	d102      	bne.n	8009700 <__sfputc_r+0x1c>
 80096fa:	bc10      	pop	{r4}
 80096fc:	f000 bbbe 	b.w	8009e7c <__swbuf_r>
 8009700:	6813      	ldr	r3, [r2, #0]
 8009702:	1c58      	adds	r0, r3, #1
 8009704:	6010      	str	r0, [r2, #0]
 8009706:	7019      	strb	r1, [r3, #0]
 8009708:	4608      	mov	r0, r1
 800970a:	bc10      	pop	{r4}
 800970c:	4770      	bx	lr

0800970e <__sfputs_r>:
 800970e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	4614      	mov	r4, r2
 8009716:	18d5      	adds	r5, r2, r3
 8009718:	42ac      	cmp	r4, r5
 800971a:	d101      	bne.n	8009720 <__sfputs_r+0x12>
 800971c:	2000      	movs	r0, #0
 800971e:	e007      	b.n	8009730 <__sfputs_r+0x22>
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	463a      	mov	r2, r7
 8009726:	4630      	mov	r0, r6
 8009728:	f7ff ffdc 	bl	80096e4 <__sfputc_r>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d1f3      	bne.n	8009718 <__sfputs_r+0xa>
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009734 <_vfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	460d      	mov	r5, r1
 800973a:	b09d      	sub	sp, #116	; 0x74
 800973c:	4614      	mov	r4, r2
 800973e:	4698      	mov	r8, r3
 8009740:	4606      	mov	r6, r0
 8009742:	b118      	cbz	r0, 800974c <_vfiprintf_r+0x18>
 8009744:	6983      	ldr	r3, [r0, #24]
 8009746:	b90b      	cbnz	r3, 800974c <_vfiprintf_r+0x18>
 8009748:	f7fe fab4 	bl	8007cb4 <__sinit>
 800974c:	4b89      	ldr	r3, [pc, #548]	; (8009974 <_vfiprintf_r+0x240>)
 800974e:	429d      	cmp	r5, r3
 8009750:	d11b      	bne.n	800978a <_vfiprintf_r+0x56>
 8009752:	6875      	ldr	r5, [r6, #4]
 8009754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009756:	07d9      	lsls	r1, r3, #31
 8009758:	d405      	bmi.n	8009766 <_vfiprintf_r+0x32>
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	059a      	lsls	r2, r3, #22
 800975e:	d402      	bmi.n	8009766 <_vfiprintf_r+0x32>
 8009760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009762:	f7fe feae 	bl	80084c2 <__retarget_lock_acquire_recursive>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	071b      	lsls	r3, r3, #28
 800976a:	d501      	bpl.n	8009770 <_vfiprintf_r+0x3c>
 800976c:	692b      	ldr	r3, [r5, #16]
 800976e:	b9eb      	cbnz	r3, 80097ac <_vfiprintf_r+0x78>
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f000 fbe2 	bl	8009f3c <__swsetup_r>
 8009778:	b1c0      	cbz	r0, 80097ac <_vfiprintf_r+0x78>
 800977a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800977c:	07dc      	lsls	r4, r3, #31
 800977e:	d50e      	bpl.n	800979e <_vfiprintf_r+0x6a>
 8009780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009784:	b01d      	add	sp, #116	; 0x74
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	4b7b      	ldr	r3, [pc, #492]	; (8009978 <_vfiprintf_r+0x244>)
 800978c:	429d      	cmp	r5, r3
 800978e:	d101      	bne.n	8009794 <_vfiprintf_r+0x60>
 8009790:	68b5      	ldr	r5, [r6, #8]
 8009792:	e7df      	b.n	8009754 <_vfiprintf_r+0x20>
 8009794:	4b79      	ldr	r3, [pc, #484]	; (800997c <_vfiprintf_r+0x248>)
 8009796:	429d      	cmp	r5, r3
 8009798:	bf08      	it	eq
 800979a:	68f5      	ldreq	r5, [r6, #12]
 800979c:	e7da      	b.n	8009754 <_vfiprintf_r+0x20>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	0598      	lsls	r0, r3, #22
 80097a2:	d4ed      	bmi.n	8009780 <_vfiprintf_r+0x4c>
 80097a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a6:	f7fe fe8d 	bl	80084c4 <__retarget_lock_release_recursive>
 80097aa:	e7e9      	b.n	8009780 <_vfiprintf_r+0x4c>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9309      	str	r3, [sp, #36]	; 0x24
 80097b0:	2320      	movs	r3, #32
 80097b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ba:	2330      	movs	r3, #48	; 0x30
 80097bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009980 <_vfiprintf_r+0x24c>
 80097c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c4:	f04f 0901 	mov.w	r9, #1
 80097c8:	4623      	mov	r3, r4
 80097ca:	469a      	mov	sl, r3
 80097cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d0:	b10a      	cbz	r2, 80097d6 <_vfiprintf_r+0xa2>
 80097d2:	2a25      	cmp	r2, #37	; 0x25
 80097d4:	d1f9      	bne.n	80097ca <_vfiprintf_r+0x96>
 80097d6:	ebba 0b04 	subs.w	fp, sl, r4
 80097da:	d00b      	beq.n	80097f4 <_vfiprintf_r+0xc0>
 80097dc:	465b      	mov	r3, fp
 80097de:	4622      	mov	r2, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff ff93 	bl	800970e <__sfputs_r>
 80097e8:	3001      	adds	r0, #1
 80097ea:	f000 80aa 	beq.w	8009942 <_vfiprintf_r+0x20e>
 80097ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f0:	445a      	add	r2, fp
 80097f2:	9209      	str	r2, [sp, #36]	; 0x24
 80097f4:	f89a 3000 	ldrb.w	r3, [sl]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80a2 	beq.w	8009942 <_vfiprintf_r+0x20e>
 80097fe:	2300      	movs	r3, #0
 8009800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009808:	f10a 0a01 	add.w	sl, sl, #1
 800980c:	9304      	str	r3, [sp, #16]
 800980e:	9307      	str	r3, [sp, #28]
 8009810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009814:	931a      	str	r3, [sp, #104]	; 0x68
 8009816:	4654      	mov	r4, sl
 8009818:	2205      	movs	r2, #5
 800981a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981e:	4858      	ldr	r0, [pc, #352]	; (8009980 <_vfiprintf_r+0x24c>)
 8009820:	f7f6 fcb6 	bl	8000190 <memchr>
 8009824:	9a04      	ldr	r2, [sp, #16]
 8009826:	b9d8      	cbnz	r0, 8009860 <_vfiprintf_r+0x12c>
 8009828:	06d1      	lsls	r1, r2, #27
 800982a:	bf44      	itt	mi
 800982c:	2320      	movmi	r3, #32
 800982e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009832:	0713      	lsls	r3, r2, #28
 8009834:	bf44      	itt	mi
 8009836:	232b      	movmi	r3, #43	; 0x2b
 8009838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983c:	f89a 3000 	ldrb.w	r3, [sl]
 8009840:	2b2a      	cmp	r3, #42	; 0x2a
 8009842:	d015      	beq.n	8009870 <_vfiprintf_r+0x13c>
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	4654      	mov	r4, sl
 8009848:	2000      	movs	r0, #0
 800984a:	f04f 0c0a 	mov.w	ip, #10
 800984e:	4621      	mov	r1, r4
 8009850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009854:	3b30      	subs	r3, #48	; 0x30
 8009856:	2b09      	cmp	r3, #9
 8009858:	d94e      	bls.n	80098f8 <_vfiprintf_r+0x1c4>
 800985a:	b1b0      	cbz	r0, 800988a <_vfiprintf_r+0x156>
 800985c:	9207      	str	r2, [sp, #28]
 800985e:	e014      	b.n	800988a <_vfiprintf_r+0x156>
 8009860:	eba0 0308 	sub.w	r3, r0, r8
 8009864:	fa09 f303 	lsl.w	r3, r9, r3
 8009868:	4313      	orrs	r3, r2
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	46a2      	mov	sl, r4
 800986e:	e7d2      	b.n	8009816 <_vfiprintf_r+0xe2>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	1d19      	adds	r1, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	9103      	str	r1, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfbb      	ittet	lt
 800987c:	425b      	neglt	r3, r3
 800987e:	f042 0202 	orrlt.w	r2, r2, #2
 8009882:	9307      	strge	r3, [sp, #28]
 8009884:	9307      	strlt	r3, [sp, #28]
 8009886:	bfb8      	it	lt
 8009888:	9204      	strlt	r2, [sp, #16]
 800988a:	7823      	ldrb	r3, [r4, #0]
 800988c:	2b2e      	cmp	r3, #46	; 0x2e
 800988e:	d10c      	bne.n	80098aa <_vfiprintf_r+0x176>
 8009890:	7863      	ldrb	r3, [r4, #1]
 8009892:	2b2a      	cmp	r3, #42	; 0x2a
 8009894:	d135      	bne.n	8009902 <_vfiprintf_r+0x1ce>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	1d1a      	adds	r2, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	9203      	str	r2, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfb8      	it	lt
 80098a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098a6:	3402      	adds	r4, #2
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009984 <_vfiprintf_r+0x250>
 80098ae:	7821      	ldrb	r1, [r4, #0]
 80098b0:	2203      	movs	r2, #3
 80098b2:	4650      	mov	r0, sl
 80098b4:	f7f6 fc6c 	bl	8000190 <memchr>
 80098b8:	b140      	cbz	r0, 80098cc <_vfiprintf_r+0x198>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	eba0 000a 	sub.w	r0, r0, sl
 80098c0:	fa03 f000 	lsl.w	r0, r3, r0
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	4303      	orrs	r3, r0
 80098c8:	3401      	adds	r4, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d0:	482d      	ldr	r0, [pc, #180]	; (8009988 <_vfiprintf_r+0x254>)
 80098d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d6:	2206      	movs	r2, #6
 80098d8:	f7f6 fc5a 	bl	8000190 <memchr>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d03f      	beq.n	8009960 <_vfiprintf_r+0x22c>
 80098e0:	4b2a      	ldr	r3, [pc, #168]	; (800998c <_vfiprintf_r+0x258>)
 80098e2:	bb1b      	cbnz	r3, 800992c <_vfiprintf_r+0x1f8>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	3307      	adds	r3, #7
 80098e8:	f023 0307 	bic.w	r3, r3, #7
 80098ec:	3308      	adds	r3, #8
 80098ee:	9303      	str	r3, [sp, #12]
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	443b      	add	r3, r7
 80098f4:	9309      	str	r3, [sp, #36]	; 0x24
 80098f6:	e767      	b.n	80097c8 <_vfiprintf_r+0x94>
 80098f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098fc:	460c      	mov	r4, r1
 80098fe:	2001      	movs	r0, #1
 8009900:	e7a5      	b.n	800984e <_vfiprintf_r+0x11a>
 8009902:	2300      	movs	r3, #0
 8009904:	3401      	adds	r4, #1
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	4619      	mov	r1, r3
 800990a:	f04f 0c0a 	mov.w	ip, #10
 800990e:	4620      	mov	r0, r4
 8009910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009914:	3a30      	subs	r2, #48	; 0x30
 8009916:	2a09      	cmp	r2, #9
 8009918:	d903      	bls.n	8009922 <_vfiprintf_r+0x1ee>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c5      	beq.n	80098aa <_vfiprintf_r+0x176>
 800991e:	9105      	str	r1, [sp, #20]
 8009920:	e7c3      	b.n	80098aa <_vfiprintf_r+0x176>
 8009922:	fb0c 2101 	mla	r1, ip, r1, r2
 8009926:	4604      	mov	r4, r0
 8009928:	2301      	movs	r3, #1
 800992a:	e7f0      	b.n	800990e <_vfiprintf_r+0x1da>
 800992c:	ab03      	add	r3, sp, #12
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	462a      	mov	r2, r5
 8009932:	4b17      	ldr	r3, [pc, #92]	; (8009990 <_vfiprintf_r+0x25c>)
 8009934:	a904      	add	r1, sp, #16
 8009936:	4630      	mov	r0, r6
 8009938:	f7fb fda8 	bl	800548c <_printf_float>
 800993c:	4607      	mov	r7, r0
 800993e:	1c78      	adds	r0, r7, #1
 8009940:	d1d6      	bne.n	80098f0 <_vfiprintf_r+0x1bc>
 8009942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009944:	07d9      	lsls	r1, r3, #31
 8009946:	d405      	bmi.n	8009954 <_vfiprintf_r+0x220>
 8009948:	89ab      	ldrh	r3, [r5, #12]
 800994a:	059a      	lsls	r2, r3, #22
 800994c:	d402      	bmi.n	8009954 <_vfiprintf_r+0x220>
 800994e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009950:	f7fe fdb8 	bl	80084c4 <__retarget_lock_release_recursive>
 8009954:	89ab      	ldrh	r3, [r5, #12]
 8009956:	065b      	lsls	r3, r3, #25
 8009958:	f53f af12 	bmi.w	8009780 <_vfiprintf_r+0x4c>
 800995c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995e:	e711      	b.n	8009784 <_vfiprintf_r+0x50>
 8009960:	ab03      	add	r3, sp, #12
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	462a      	mov	r2, r5
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <_vfiprintf_r+0x25c>)
 8009968:	a904      	add	r1, sp, #16
 800996a:	4630      	mov	r0, r6
 800996c:	f7fc f826 	bl	80059bc <_printf_i>
 8009970:	e7e4      	b.n	800993c <_vfiprintf_r+0x208>
 8009972:	bf00      	nop
 8009974:	0800a914 	.word	0x0800a914
 8009978:	0800a934 	.word	0x0800a934
 800997c:	0800a8f4 	.word	0x0800a8f4
 8009980:	0800ab2c 	.word	0x0800ab2c
 8009984:	0800ab32 	.word	0x0800ab32
 8009988:	0800ab36 	.word	0x0800ab36
 800998c:	0800548d 	.word	0x0800548d
 8009990:	0800970f 	.word	0x0800970f

08009994 <_scanf_chars>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4615      	mov	r5, r2
 800999a:	688a      	ldr	r2, [r1, #8]
 800999c:	4680      	mov	r8, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b932      	cbnz	r2, 80099b0 <_scanf_chars+0x1c>
 80099a2:	698a      	ldr	r2, [r1, #24]
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	bf0c      	ite	eq
 80099a8:	2201      	moveq	r2, #1
 80099aa:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80099ae:	608a      	str	r2, [r1, #8]
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009a44 <_scanf_chars+0xb0>
 80099b6:	06d1      	lsls	r1, r2, #27
 80099b8:	bf5f      	itttt	pl
 80099ba:	681a      	ldrpl	r2, [r3, #0]
 80099bc:	1d11      	addpl	r1, r2, #4
 80099be:	6019      	strpl	r1, [r3, #0]
 80099c0:	6816      	ldrpl	r6, [r2, #0]
 80099c2:	2700      	movs	r7, #0
 80099c4:	69a0      	ldr	r0, [r4, #24]
 80099c6:	b188      	cbz	r0, 80099ec <_scanf_chars+0x58>
 80099c8:	2801      	cmp	r0, #1
 80099ca:	d107      	bne.n	80099dc <_scanf_chars+0x48>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	6963      	ldr	r3, [r4, #20]
 80099d2:	5c9b      	ldrb	r3, [r3, r2]
 80099d4:	b953      	cbnz	r3, 80099ec <_scanf_chars+0x58>
 80099d6:	2f00      	cmp	r7, #0
 80099d8:	d031      	beq.n	8009a3e <_scanf_chars+0xaa>
 80099da:	e022      	b.n	8009a22 <_scanf_chars+0x8e>
 80099dc:	2802      	cmp	r0, #2
 80099de:	d120      	bne.n	8009a22 <_scanf_chars+0x8e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80099e8:	071b      	lsls	r3, r3, #28
 80099ea:	d41a      	bmi.n	8009a22 <_scanf_chars+0x8e>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	06da      	lsls	r2, r3, #27
 80099f0:	bf5e      	ittt	pl
 80099f2:	682b      	ldrpl	r3, [r5, #0]
 80099f4:	781b      	ldrbpl	r3, [r3, #0]
 80099f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80099fa:	682a      	ldr	r2, [r5, #0]
 80099fc:	686b      	ldr	r3, [r5, #4]
 80099fe:	3201      	adds	r2, #1
 8009a00:	602a      	str	r2, [r5, #0]
 8009a02:	68a2      	ldr	r2, [r4, #8]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	3a01      	subs	r2, #1
 8009a08:	606b      	str	r3, [r5, #4]
 8009a0a:	3701      	adds	r7, #1
 8009a0c:	60a2      	str	r2, [r4, #8]
 8009a0e:	b142      	cbz	r2, 8009a22 <_scanf_chars+0x8e>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dcd7      	bgt.n	80099c4 <_scanf_chars+0x30>
 8009a14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4798      	blx	r3
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0d0      	beq.n	80099c4 <_scanf_chars+0x30>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	f013 0310 	ands.w	r3, r3, #16
 8009a28:	d105      	bne.n	8009a36 <_scanf_chars+0xa2>
 8009a2a:	68e2      	ldr	r2, [r4, #12]
 8009a2c:	3201      	adds	r2, #1
 8009a2e:	60e2      	str	r2, [r4, #12]
 8009a30:	69a2      	ldr	r2, [r4, #24]
 8009a32:	b102      	cbz	r2, 8009a36 <_scanf_chars+0xa2>
 8009a34:	7033      	strb	r3, [r6, #0]
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	443b      	add	r3, r7
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	bf00      	nop
 8009a44:	0800a761 	.word	0x0800a761

08009a48 <_scanf_i>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4698      	mov	r8, r3
 8009a4e:	4b76      	ldr	r3, [pc, #472]	; (8009c28 <_scanf_i+0x1e0>)
 8009a50:	460c      	mov	r4, r1
 8009a52:	4682      	mov	sl, r0
 8009a54:	4616      	mov	r6, r2
 8009a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	ab03      	add	r3, sp, #12
 8009a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a62:	4b72      	ldr	r3, [pc, #456]	; (8009c2c <_scanf_i+0x1e4>)
 8009a64:	69a1      	ldr	r1, [r4, #24]
 8009a66:	4a72      	ldr	r2, [pc, #456]	; (8009c30 <_scanf_i+0x1e8>)
 8009a68:	2903      	cmp	r1, #3
 8009a6a:	bf18      	it	ne
 8009a6c:	461a      	movne	r2, r3
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a78:	bf88      	it	hi
 8009a7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a7e:	4627      	mov	r7, r4
 8009a80:	bf82      	ittt	hi
 8009a82:	eb03 0905 	addhi.w	r9, r3, r5
 8009a86:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a8a:	60a3      	strhi	r3, [r4, #8]
 8009a8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009a90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009a94:	bf98      	it	ls
 8009a96:	f04f 0900 	movls.w	r9, #0
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	463d      	mov	r5, r7
 8009a9e:	f04f 0b00 	mov.w	fp, #0
 8009aa2:	6831      	ldr	r1, [r6, #0]
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	7809      	ldrb	r1, [r1, #0]
 8009aa8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009aac:	2202      	movs	r2, #2
 8009aae:	f7f6 fb6f 	bl	8000190 <memchr>
 8009ab2:	b328      	cbz	r0, 8009b00 <_scanf_i+0xb8>
 8009ab4:	f1bb 0f01 	cmp.w	fp, #1
 8009ab8:	d159      	bne.n	8009b6e <_scanf_i+0x126>
 8009aba:	6862      	ldr	r2, [r4, #4]
 8009abc:	b92a      	cbnz	r2, 8009aca <_scanf_i+0x82>
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac6:	6063      	str	r3, [r4, #4]
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009ad0:	6022      	str	r2, [r4, #0]
 8009ad2:	68a2      	ldr	r2, [r4, #8]
 8009ad4:	1e51      	subs	r1, r2, #1
 8009ad6:	60a1      	str	r1, [r4, #8]
 8009ad8:	b192      	cbz	r2, 8009b00 <_scanf_i+0xb8>
 8009ada:	6832      	ldr	r2, [r6, #0]
 8009adc:	1c51      	adds	r1, r2, #1
 8009ade:	6031      	str	r1, [r6, #0]
 8009ae0:	7812      	ldrb	r2, [r2, #0]
 8009ae2:	f805 2b01 	strb.w	r2, [r5], #1
 8009ae6:	6872      	ldr	r2, [r6, #4]
 8009ae8:	3a01      	subs	r2, #1
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	6072      	str	r2, [r6, #4]
 8009aee:	dc07      	bgt.n	8009b00 <_scanf_i+0xb8>
 8009af0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009af4:	4631      	mov	r1, r6
 8009af6:	4650      	mov	r0, sl
 8009af8:	4790      	blx	r2
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f040 8085 	bne.w	8009c0a <_scanf_i+0x1c2>
 8009b00:	f10b 0b01 	add.w	fp, fp, #1
 8009b04:	f1bb 0f03 	cmp.w	fp, #3
 8009b08:	d1cb      	bne.n	8009aa2 <_scanf_i+0x5a>
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <_scanf_i+0xca>
 8009b0e:	230a      	movs	r3, #10
 8009b10:	6063      	str	r3, [r4, #4]
 8009b12:	6863      	ldr	r3, [r4, #4]
 8009b14:	4947      	ldr	r1, [pc, #284]	; (8009c34 <_scanf_i+0x1ec>)
 8009b16:	6960      	ldr	r0, [r4, #20]
 8009b18:	1ac9      	subs	r1, r1, r3
 8009b1a:	f000 f8b5 	bl	8009c88 <__sccl>
 8009b1e:	f04f 0b00 	mov.w	fp, #0
 8009b22:	68a3      	ldr	r3, [r4, #8]
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d03d      	beq.n	8009ba6 <_scanf_i+0x15e>
 8009b2a:	6831      	ldr	r1, [r6, #0]
 8009b2c:	6960      	ldr	r0, [r4, #20]
 8009b2e:	f891 c000 	ldrb.w	ip, [r1]
 8009b32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d035      	beq.n	8009ba6 <_scanf_i+0x15e>
 8009b3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009b3e:	d124      	bne.n	8009b8a <_scanf_i+0x142>
 8009b40:	0510      	lsls	r0, r2, #20
 8009b42:	d522      	bpl.n	8009b8a <_scanf_i+0x142>
 8009b44:	f10b 0b01 	add.w	fp, fp, #1
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	d003      	beq.n	8009b56 <_scanf_i+0x10e>
 8009b4e:	3301      	adds	r3, #1
 8009b50:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	6873      	ldr	r3, [r6, #4]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	6073      	str	r3, [r6, #4]
 8009b5e:	dd1b      	ble.n	8009b98 <_scanf_i+0x150>
 8009b60:	6833      	ldr	r3, [r6, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	6033      	str	r3, [r6, #0]
 8009b66:	68a3      	ldr	r3, [r4, #8]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	60a3      	str	r3, [r4, #8]
 8009b6c:	e7d9      	b.n	8009b22 <_scanf_i+0xda>
 8009b6e:	f1bb 0f02 	cmp.w	fp, #2
 8009b72:	d1ae      	bne.n	8009ad2 <_scanf_i+0x8a>
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009b7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b7e:	d1bf      	bne.n	8009b00 <_scanf_i+0xb8>
 8009b80:	2310      	movs	r3, #16
 8009b82:	6063      	str	r3, [r4, #4]
 8009b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b88:	e7a2      	b.n	8009ad0 <_scanf_i+0x88>
 8009b8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009b8e:	6022      	str	r2, [r4, #0]
 8009b90:	780b      	ldrb	r3, [r1, #0]
 8009b92:	f805 3b01 	strb.w	r3, [r5], #1
 8009b96:	e7de      	b.n	8009b56 <_scanf_i+0x10e>
 8009b98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	4798      	blx	r3
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d0df      	beq.n	8009b66 <_scanf_i+0x11e>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	05db      	lsls	r3, r3, #23
 8009baa:	d50d      	bpl.n	8009bc8 <_scanf_i+0x180>
 8009bac:	42bd      	cmp	r5, r7
 8009bae:	d909      	bls.n	8009bc4 <_scanf_i+0x17c>
 8009bb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4650      	mov	r0, sl
 8009bbc:	4798      	blx	r3
 8009bbe:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009bc2:	464d      	mov	r5, r9
 8009bc4:	42bd      	cmp	r5, r7
 8009bc6:	d02d      	beq.n	8009c24 <_scanf_i+0x1dc>
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	f012 0210 	ands.w	r2, r2, #16
 8009bce:	d113      	bne.n	8009bf8 <_scanf_i+0x1b0>
 8009bd0:	702a      	strb	r2, [r5, #0]
 8009bd2:	6863      	ldr	r3, [r4, #4]
 8009bd4:	9e01      	ldr	r6, [sp, #4]
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4650      	mov	r0, sl
 8009bda:	47b0      	blx	r6
 8009bdc:	6821      	ldr	r1, [r4, #0]
 8009bde:	f8d8 3000 	ldr.w	r3, [r8]
 8009be2:	f011 0f20 	tst.w	r1, #32
 8009be6:	d013      	beq.n	8009c10 <_scanf_i+0x1c8>
 8009be8:	1d1a      	adds	r2, r3, #4
 8009bea:	f8c8 2000 	str.w	r2, [r8]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60e3      	str	r3, [r4, #12]
 8009bf8:	1bed      	subs	r5, r5, r7
 8009bfa:	44ab      	add	fp, r5
 8009bfc:	6925      	ldr	r5, [r4, #16]
 8009bfe:	445d      	add	r5, fp
 8009c00:	6125      	str	r5, [r4, #16]
 8009c02:	2000      	movs	r0, #0
 8009c04:	b007      	add	sp, #28
 8009c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0a:	f04f 0b00 	mov.w	fp, #0
 8009c0e:	e7ca      	b.n	8009ba6 <_scanf_i+0x15e>
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	f8c8 2000 	str.w	r2, [r8]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f011 0f01 	tst.w	r1, #1
 8009c1c:	bf14      	ite	ne
 8009c1e:	8018      	strhne	r0, [r3, #0]
 8009c20:	6018      	streq	r0, [r3, #0]
 8009c22:	e7e6      	b.n	8009bf2 <_scanf_i+0x1aa>
 8009c24:	2001      	movs	r0, #1
 8009c26:	e7ed      	b.n	8009c04 <_scanf_i+0x1bc>
 8009c28:	0800a5fc 	.word	0x0800a5fc
 8009c2c:	08009e05 	.word	0x08009e05
 8009c30:	08006ecd 	.word	0x08006ecd
 8009c34:	0800ab56 	.word	0x0800ab56

08009c38 <_read_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d07      	ldr	r5, [pc, #28]	; (8009c58 <_read_r+0x20>)
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	4608      	mov	r0, r1
 8009c40:	4611      	mov	r1, r2
 8009c42:	2200      	movs	r2, #0
 8009c44:	602a      	str	r2, [r5, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f7f7 fff0 	bl	8001c2c <_read>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_read_r+0x1e>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_read_r+0x1e>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	200002ec 	.word	0x200002ec

08009c5c <nan>:
 8009c5c:	4901      	ldr	r1, [pc, #4]	; (8009c64 <nan+0x8>)
 8009c5e:	2000      	movs	r0, #0
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	7ff80000 	.word	0x7ff80000

08009c68 <_sbrk_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d06      	ldr	r5, [pc, #24]	; (8009c84 <_sbrk_r+0x1c>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7f8 f844 	bl	8001d00 <_sbrk>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_sbrk_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_sbrk_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	200002ec 	.word	0x200002ec

08009c88 <__sccl>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	780b      	ldrb	r3, [r1, #0]
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	2b5e      	cmp	r3, #94	; 0x5e
 8009c90:	bf0b      	itete	eq
 8009c92:	784b      	ldrbeq	r3, [r1, #1]
 8009c94:	1c48      	addne	r0, r1, #1
 8009c96:	1c88      	addeq	r0, r1, #2
 8009c98:	2200      	movne	r2, #0
 8009c9a:	bf08      	it	eq
 8009c9c:	2201      	moveq	r2, #1
 8009c9e:	1e61      	subs	r1, r4, #1
 8009ca0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009ca4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009ca8:	42a9      	cmp	r1, r5
 8009caa:	d1fb      	bne.n	8009ca4 <__sccl+0x1c>
 8009cac:	b90b      	cbnz	r3, 8009cb2 <__sccl+0x2a>
 8009cae:	3801      	subs	r0, #1
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	f082 0201 	eor.w	r2, r2, #1
 8009cb6:	54e2      	strb	r2, [r4, r3]
 8009cb8:	4605      	mov	r5, r0
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009cc0:	292d      	cmp	r1, #45	; 0x2d
 8009cc2:	d006      	beq.n	8009cd2 <__sccl+0x4a>
 8009cc4:	295d      	cmp	r1, #93	; 0x5d
 8009cc6:	d0f3      	beq.n	8009cb0 <__sccl+0x28>
 8009cc8:	b909      	cbnz	r1, 8009cce <__sccl+0x46>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	e7f0      	b.n	8009cb0 <__sccl+0x28>
 8009cce:	460b      	mov	r3, r1
 8009cd0:	e7f1      	b.n	8009cb6 <__sccl+0x2e>
 8009cd2:	786e      	ldrb	r6, [r5, #1]
 8009cd4:	2e5d      	cmp	r6, #93	; 0x5d
 8009cd6:	d0fa      	beq.n	8009cce <__sccl+0x46>
 8009cd8:	42b3      	cmp	r3, r6
 8009cda:	dcf8      	bgt.n	8009cce <__sccl+0x46>
 8009cdc:	3502      	adds	r5, #2
 8009cde:	4619      	mov	r1, r3
 8009ce0:	3101      	adds	r1, #1
 8009ce2:	428e      	cmp	r6, r1
 8009ce4:	5462      	strb	r2, [r4, r1]
 8009ce6:	dcfb      	bgt.n	8009ce0 <__sccl+0x58>
 8009ce8:	1af1      	subs	r1, r6, r3
 8009cea:	3901      	subs	r1, #1
 8009cec:	1c58      	adds	r0, r3, #1
 8009cee:	42b3      	cmp	r3, r6
 8009cf0:	bfa8      	it	ge
 8009cf2:	2100      	movge	r1, #0
 8009cf4:	1843      	adds	r3, r0, r1
 8009cf6:	e7e0      	b.n	8009cba <__sccl+0x32>

08009cf8 <strncmp>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	b172      	cbz	r2, 8009d1c <strncmp+0x24>
 8009cfe:	3901      	subs	r1, #1
 8009d00:	1884      	adds	r4, r0, r2
 8009d02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d0a:	4290      	cmp	r0, r2
 8009d0c:	d101      	bne.n	8009d12 <strncmp+0x1a>
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	d101      	bne.n	8009d16 <strncmp+0x1e>
 8009d12:	1a80      	subs	r0, r0, r2
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d1f3      	bne.n	8009d02 <strncmp+0xa>
 8009d1a:	e7fa      	b.n	8009d12 <strncmp+0x1a>
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	e7f9      	b.n	8009d14 <strncmp+0x1c>

08009d20 <_strtoul_l.constprop.0>:
 8009d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d24:	4f36      	ldr	r7, [pc, #216]	; (8009e00 <_strtoul_l.constprop.0+0xe0>)
 8009d26:	4686      	mov	lr, r0
 8009d28:	460d      	mov	r5, r1
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d30:	5de6      	ldrb	r6, [r4, r7]
 8009d32:	f016 0608 	ands.w	r6, r6, #8
 8009d36:	d1f8      	bne.n	8009d2a <_strtoul_l.constprop.0+0xa>
 8009d38:	2c2d      	cmp	r4, #45	; 0x2d
 8009d3a:	d12f      	bne.n	8009d9c <_strtoul_l.constprop.0+0x7c>
 8009d3c:	782c      	ldrb	r4, [r5, #0]
 8009d3e:	2601      	movs	r6, #1
 8009d40:	1c85      	adds	r5, r0, #2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d057      	beq.n	8009df6 <_strtoul_l.constprop.0+0xd6>
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d109      	bne.n	8009d5e <_strtoul_l.constprop.0+0x3e>
 8009d4a:	2c30      	cmp	r4, #48	; 0x30
 8009d4c:	d107      	bne.n	8009d5e <_strtoul_l.constprop.0+0x3e>
 8009d4e:	7828      	ldrb	r0, [r5, #0]
 8009d50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d54:	2858      	cmp	r0, #88	; 0x58
 8009d56:	d149      	bne.n	8009dec <_strtoul_l.constprop.0+0xcc>
 8009d58:	786c      	ldrb	r4, [r5, #1]
 8009d5a:	2310      	movs	r3, #16
 8009d5c:	3502      	adds	r5, #2
 8009d5e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009d62:	2700      	movs	r7, #0
 8009d64:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d68:	fb03 f908 	mul.w	r9, r3, r8
 8009d6c:	ea6f 0909 	mvn.w	r9, r9
 8009d70:	4638      	mov	r0, r7
 8009d72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d76:	f1bc 0f09 	cmp.w	ip, #9
 8009d7a:	d814      	bhi.n	8009da6 <_strtoul_l.constprop.0+0x86>
 8009d7c:	4664      	mov	r4, ip
 8009d7e:	42a3      	cmp	r3, r4
 8009d80:	dd22      	ble.n	8009dc8 <_strtoul_l.constprop.0+0xa8>
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	db1d      	blt.n	8009dc2 <_strtoul_l.constprop.0+0xa2>
 8009d86:	4580      	cmp	r8, r0
 8009d88:	d31b      	bcc.n	8009dc2 <_strtoul_l.constprop.0+0xa2>
 8009d8a:	d101      	bne.n	8009d90 <_strtoul_l.constprop.0+0x70>
 8009d8c:	45a1      	cmp	r9, r4
 8009d8e:	db18      	blt.n	8009dc2 <_strtoul_l.constprop.0+0xa2>
 8009d90:	fb00 4003 	mla	r0, r0, r3, r4
 8009d94:	2701      	movs	r7, #1
 8009d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d9a:	e7ea      	b.n	8009d72 <_strtoul_l.constprop.0+0x52>
 8009d9c:	2c2b      	cmp	r4, #43	; 0x2b
 8009d9e:	bf04      	itt	eq
 8009da0:	782c      	ldrbeq	r4, [r5, #0]
 8009da2:	1c85      	addeq	r5, r0, #2
 8009da4:	e7cd      	b.n	8009d42 <_strtoul_l.constprop.0+0x22>
 8009da6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009daa:	f1bc 0f19 	cmp.w	ip, #25
 8009dae:	d801      	bhi.n	8009db4 <_strtoul_l.constprop.0+0x94>
 8009db0:	3c37      	subs	r4, #55	; 0x37
 8009db2:	e7e4      	b.n	8009d7e <_strtoul_l.constprop.0+0x5e>
 8009db4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009db8:	f1bc 0f19 	cmp.w	ip, #25
 8009dbc:	d804      	bhi.n	8009dc8 <_strtoul_l.constprop.0+0xa8>
 8009dbe:	3c57      	subs	r4, #87	; 0x57
 8009dc0:	e7dd      	b.n	8009d7e <_strtoul_l.constprop.0+0x5e>
 8009dc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009dc6:	e7e6      	b.n	8009d96 <_strtoul_l.constprop.0+0x76>
 8009dc8:	2f00      	cmp	r7, #0
 8009dca:	da07      	bge.n	8009ddc <_strtoul_l.constprop.0+0xbc>
 8009dcc:	2322      	movs	r3, #34	; 0x22
 8009dce:	f8ce 3000 	str.w	r3, [lr]
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dd6:	b932      	cbnz	r2, 8009de6 <_strtoul_l.constprop.0+0xc6>
 8009dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ddc:	b106      	cbz	r6, 8009de0 <_strtoul_l.constprop.0+0xc0>
 8009dde:	4240      	negs	r0, r0
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d0f9      	beq.n	8009dd8 <_strtoul_l.constprop.0+0xb8>
 8009de4:	b107      	cbz	r7, 8009de8 <_strtoul_l.constprop.0+0xc8>
 8009de6:	1e69      	subs	r1, r5, #1
 8009de8:	6011      	str	r1, [r2, #0]
 8009dea:	e7f5      	b.n	8009dd8 <_strtoul_l.constprop.0+0xb8>
 8009dec:	2430      	movs	r4, #48	; 0x30
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1b5      	bne.n	8009d5e <_strtoul_l.constprop.0+0x3e>
 8009df2:	2308      	movs	r3, #8
 8009df4:	e7b3      	b.n	8009d5e <_strtoul_l.constprop.0+0x3e>
 8009df6:	2c30      	cmp	r4, #48	; 0x30
 8009df8:	d0a9      	beq.n	8009d4e <_strtoul_l.constprop.0+0x2e>
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	e7af      	b.n	8009d5e <_strtoul_l.constprop.0+0x3e>
 8009dfe:	bf00      	nop
 8009e00:	0800a761 	.word	0x0800a761

08009e04 <_strtoul_r>:
 8009e04:	f7ff bf8c 	b.w	8009d20 <_strtoul_l.constprop.0>

08009e08 <__submore>:
 8009e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e14:	4299      	cmp	r1, r3
 8009e16:	d11d      	bne.n	8009e54 <__submore+0x4c>
 8009e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e1c:	f7ff f8c0 	bl	8008fa0 <_malloc_r>
 8009e20:	b918      	cbnz	r0, 8009e2a <__submore+0x22>
 8009e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009e34:	6360      	str	r0, [r4, #52]	; 0x34
 8009e36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009e3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009e3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009e42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009e46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009e4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	2000      	movs	r0, #0
 8009e52:	e7e8      	b.n	8009e26 <__submore+0x1e>
 8009e54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009e56:	0077      	lsls	r7, r6, #1
 8009e58:	463a      	mov	r2, r7
 8009e5a:	f000 fa57 	bl	800a30c <_realloc_r>
 8009e5e:	4605      	mov	r5, r0
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0de      	beq.n	8009e22 <__submore+0x1a>
 8009e64:	eb00 0806 	add.w	r8, r0, r6
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	f7fe fb57 	bl	8008520 <memcpy>
 8009e72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e76:	f8c4 8000 	str.w	r8, [r4]
 8009e7a:	e7e9      	b.n	8009e50 <__submore+0x48>

08009e7c <__swbuf_r>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	460e      	mov	r6, r1
 8009e80:	4614      	mov	r4, r2
 8009e82:	4605      	mov	r5, r0
 8009e84:	b118      	cbz	r0, 8009e8e <__swbuf_r+0x12>
 8009e86:	6983      	ldr	r3, [r0, #24]
 8009e88:	b90b      	cbnz	r3, 8009e8e <__swbuf_r+0x12>
 8009e8a:	f7fd ff13 	bl	8007cb4 <__sinit>
 8009e8e:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <__swbuf_r+0x98>)
 8009e90:	429c      	cmp	r4, r3
 8009e92:	d12b      	bne.n	8009eec <__swbuf_r+0x70>
 8009e94:	686c      	ldr	r4, [r5, #4]
 8009e96:	69a3      	ldr	r3, [r4, #24]
 8009e98:	60a3      	str	r3, [r4, #8]
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	071a      	lsls	r2, r3, #28
 8009e9e:	d52f      	bpl.n	8009f00 <__swbuf_r+0x84>
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	b36b      	cbz	r3, 8009f00 <__swbuf_r+0x84>
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	6820      	ldr	r0, [r4, #0]
 8009ea8:	1ac0      	subs	r0, r0, r3
 8009eaa:	6963      	ldr	r3, [r4, #20]
 8009eac:	b2f6      	uxtb	r6, r6
 8009eae:	4283      	cmp	r3, r0
 8009eb0:	4637      	mov	r7, r6
 8009eb2:	dc04      	bgt.n	8009ebe <__swbuf_r+0x42>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 f94e 	bl	800a158 <_fflush_r>
 8009ebc:	bb30      	cbnz	r0, 8009f0c <__swbuf_r+0x90>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	701e      	strb	r6, [r3, #0]
 8009ecc:	6963      	ldr	r3, [r4, #20]
 8009ece:	3001      	adds	r0, #1
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	d004      	beq.n	8009ede <__swbuf_r+0x62>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d506      	bpl.n	8009ee8 <__swbuf_r+0x6c>
 8009eda:	2e0a      	cmp	r6, #10
 8009edc:	d104      	bne.n	8009ee8 <__swbuf_r+0x6c>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f939 	bl	800a158 <_fflush_r>
 8009ee6:	b988      	cbnz	r0, 8009f0c <__swbuf_r+0x90>
 8009ee8:	4638      	mov	r0, r7
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <__swbuf_r+0x9c>)
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d101      	bne.n	8009ef6 <__swbuf_r+0x7a>
 8009ef2:	68ac      	ldr	r4, [r5, #8]
 8009ef4:	e7cf      	b.n	8009e96 <__swbuf_r+0x1a>
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <__swbuf_r+0xa0>)
 8009ef8:	429c      	cmp	r4, r3
 8009efa:	bf08      	it	eq
 8009efc:	68ec      	ldreq	r4, [r5, #12]
 8009efe:	e7ca      	b.n	8009e96 <__swbuf_r+0x1a>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4628      	mov	r0, r5
 8009f04:	f000 f81a 	bl	8009f3c <__swsetup_r>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0cb      	beq.n	8009ea4 <__swbuf_r+0x28>
 8009f0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f10:	e7ea      	b.n	8009ee8 <__swbuf_r+0x6c>
 8009f12:	bf00      	nop
 8009f14:	0800a914 	.word	0x0800a914
 8009f18:	0800a934 	.word	0x0800a934
 8009f1c:	0800a8f4 	.word	0x0800a8f4

08009f20 <__ascii_wctomb>:
 8009f20:	4603      	mov	r3, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	b141      	cbz	r1, 8009f38 <__ascii_wctomb+0x18>
 8009f26:	2aff      	cmp	r2, #255	; 0xff
 8009f28:	d904      	bls.n	8009f34 <__ascii_wctomb+0x14>
 8009f2a:	228a      	movs	r2, #138	; 0x8a
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f32:	4770      	bx	lr
 8009f34:	700a      	strb	r2, [r1, #0]
 8009f36:	2001      	movs	r0, #1
 8009f38:	4770      	bx	lr
	...

08009f3c <__swsetup_r>:
 8009f3c:	4b32      	ldr	r3, [pc, #200]	; (800a008 <__swsetup_r+0xcc>)
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	681d      	ldr	r5, [r3, #0]
 8009f42:	4606      	mov	r6, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	b125      	cbz	r5, 8009f52 <__swsetup_r+0x16>
 8009f48:	69ab      	ldr	r3, [r5, #24]
 8009f4a:	b913      	cbnz	r3, 8009f52 <__swsetup_r+0x16>
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7fd feb1 	bl	8007cb4 <__sinit>
 8009f52:	4b2e      	ldr	r3, [pc, #184]	; (800a00c <__swsetup_r+0xd0>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d10f      	bne.n	8009f78 <__swsetup_r+0x3c>
 8009f58:	686c      	ldr	r4, [r5, #4]
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f60:	0719      	lsls	r1, r3, #28
 8009f62:	d42c      	bmi.n	8009fbe <__swsetup_r+0x82>
 8009f64:	06dd      	lsls	r5, r3, #27
 8009f66:	d411      	bmi.n	8009f8c <__swsetup_r+0x50>
 8009f68:	2309      	movs	r3, #9
 8009f6a:	6033      	str	r3, [r6, #0]
 8009f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f76:	e03e      	b.n	8009ff6 <__swsetup_r+0xba>
 8009f78:	4b25      	ldr	r3, [pc, #148]	; (800a010 <__swsetup_r+0xd4>)
 8009f7a:	429c      	cmp	r4, r3
 8009f7c:	d101      	bne.n	8009f82 <__swsetup_r+0x46>
 8009f7e:	68ac      	ldr	r4, [r5, #8]
 8009f80:	e7eb      	b.n	8009f5a <__swsetup_r+0x1e>
 8009f82:	4b24      	ldr	r3, [pc, #144]	; (800a014 <__swsetup_r+0xd8>)
 8009f84:	429c      	cmp	r4, r3
 8009f86:	bf08      	it	eq
 8009f88:	68ec      	ldreq	r4, [r5, #12]
 8009f8a:	e7e6      	b.n	8009f5a <__swsetup_r+0x1e>
 8009f8c:	0758      	lsls	r0, r3, #29
 8009f8e:	d512      	bpl.n	8009fb6 <__swsetup_r+0x7a>
 8009f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f92:	b141      	cbz	r1, 8009fa6 <__swsetup_r+0x6a>
 8009f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f98:	4299      	cmp	r1, r3
 8009f9a:	d002      	beq.n	8009fa2 <__swsetup_r+0x66>
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fe ff95 	bl	8008ecc <_free_r>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	6063      	str	r3, [r4, #4]
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f043 0308 	orr.w	r3, r3, #8
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	b94b      	cbnz	r3, 8009fd6 <__swsetup_r+0x9a>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fcc:	d003      	beq.n	8009fd6 <__swsetup_r+0x9a>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f935 	bl	800a240 <__smakebuf_r>
 8009fd6:	89a0      	ldrh	r0, [r4, #12]
 8009fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fdc:	f010 0301 	ands.w	r3, r0, #1
 8009fe0:	d00a      	beq.n	8009ff8 <__swsetup_r+0xbc>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60a3      	str	r3, [r4, #8]
 8009fe6:	6963      	ldr	r3, [r4, #20]
 8009fe8:	425b      	negs	r3, r3
 8009fea:	61a3      	str	r3, [r4, #24]
 8009fec:	6923      	ldr	r3, [r4, #16]
 8009fee:	b943      	cbnz	r3, 800a002 <__swsetup_r+0xc6>
 8009ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ff4:	d1ba      	bne.n	8009f6c <__swsetup_r+0x30>
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}
 8009ff8:	0781      	lsls	r1, r0, #30
 8009ffa:	bf58      	it	pl
 8009ffc:	6963      	ldrpl	r3, [r4, #20]
 8009ffe:	60a3      	str	r3, [r4, #8]
 800a000:	e7f4      	b.n	8009fec <__swsetup_r+0xb0>
 800a002:	2000      	movs	r0, #0
 800a004:	e7f7      	b.n	8009ff6 <__swsetup_r+0xba>
 800a006:	bf00      	nop
 800a008:	2000000c 	.word	0x2000000c
 800a00c:	0800a914 	.word	0x0800a914
 800a010:	0800a934 	.word	0x0800a934
 800a014:	0800a8f4 	.word	0x0800a8f4

0800a018 <__assert_func>:
 800a018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a01a:	4614      	mov	r4, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b09      	ldr	r3, [pc, #36]	; (800a044 <__assert_func+0x2c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4605      	mov	r5, r0
 800a024:	68d8      	ldr	r0, [r3, #12]
 800a026:	b14c      	cbz	r4, 800a03c <__assert_func+0x24>
 800a028:	4b07      	ldr	r3, [pc, #28]	; (800a048 <__assert_func+0x30>)
 800a02a:	9100      	str	r1, [sp, #0]
 800a02c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a030:	4906      	ldr	r1, [pc, #24]	; (800a04c <__assert_func+0x34>)
 800a032:	462b      	mov	r3, r5
 800a034:	f000 f8cc 	bl	800a1d0 <fiprintf>
 800a038:	f000 f997 	bl	800a36a <abort>
 800a03c:	4b04      	ldr	r3, [pc, #16]	; (800a050 <__assert_func+0x38>)
 800a03e:	461c      	mov	r4, r3
 800a040:	e7f3      	b.n	800a02a <__assert_func+0x12>
 800a042:	bf00      	nop
 800a044:	2000000c 	.word	0x2000000c
 800a048:	0800ab58 	.word	0x0800ab58
 800a04c:	0800ab65 	.word	0x0800ab65
 800a050:	0800ab93 	.word	0x0800ab93

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a058:	4605      	mov	r5, r0
 800a05a:	0710      	lsls	r0, r2, #28
 800a05c:	460c      	mov	r4, r1
 800a05e:	d457      	bmi.n	800a110 <__sflush_r+0xbc>
 800a060:	684b      	ldr	r3, [r1, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dc04      	bgt.n	800a070 <__sflush_r+0x1c>
 800a066:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc01      	bgt.n	800a070 <__sflush_r+0x1c>
 800a06c:	2000      	movs	r0, #0
 800a06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a072:	2e00      	cmp	r6, #0
 800a074:	d0fa      	beq.n	800a06c <__sflush_r+0x18>
 800a076:	2300      	movs	r3, #0
 800a078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a07c:	682f      	ldr	r7, [r5, #0]
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	d032      	beq.n	800a0e8 <__sflush_r+0x94>
 800a082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	075a      	lsls	r2, r3, #29
 800a088:	d505      	bpl.n	800a096 <__sflush_r+0x42>
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	1ac0      	subs	r0, r0, r3
 800a08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a090:	b10b      	cbz	r3, 800a096 <__sflush_r+0x42>
 800a092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a094:	1ac0      	subs	r0, r0, r3
 800a096:	2300      	movs	r3, #0
 800a098:	4602      	mov	r2, r0
 800a09a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a09c:	6a21      	ldr	r1, [r4, #32]
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b0      	blx	r6
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	d106      	bne.n	800a0b6 <__sflush_r+0x62>
 800a0a8:	6829      	ldr	r1, [r5, #0]
 800a0aa:	291d      	cmp	r1, #29
 800a0ac:	d82c      	bhi.n	800a108 <__sflush_r+0xb4>
 800a0ae:	4a29      	ldr	r2, [pc, #164]	; (800a154 <__sflush_r+0x100>)
 800a0b0:	40ca      	lsrs	r2, r1
 800a0b2:	07d6      	lsls	r6, r2, #31
 800a0b4:	d528      	bpl.n	800a108 <__sflush_r+0xb4>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	6062      	str	r2, [r4, #4]
 800a0ba:	04d9      	lsls	r1, r3, #19
 800a0bc:	6922      	ldr	r2, [r4, #16]
 800a0be:	6022      	str	r2, [r4, #0]
 800a0c0:	d504      	bpl.n	800a0cc <__sflush_r+0x78>
 800a0c2:	1c42      	adds	r2, r0, #1
 800a0c4:	d101      	bne.n	800a0ca <__sflush_r+0x76>
 800a0c6:	682b      	ldr	r3, [r5, #0]
 800a0c8:	b903      	cbnz	r3, 800a0cc <__sflush_r+0x78>
 800a0ca:	6560      	str	r0, [r4, #84]	; 0x54
 800a0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ce:	602f      	str	r7, [r5, #0]
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d0cb      	beq.n	800a06c <__sflush_r+0x18>
 800a0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d8:	4299      	cmp	r1, r3
 800a0da:	d002      	beq.n	800a0e2 <__sflush_r+0x8e>
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f7fe fef5 	bl	8008ecc <_free_r>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	6360      	str	r0, [r4, #52]	; 0x34
 800a0e6:	e7c2      	b.n	800a06e <__sflush_r+0x1a>
 800a0e8:	6a21      	ldr	r1, [r4, #32]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b0      	blx	r6
 800a0f0:	1c41      	adds	r1, r0, #1
 800a0f2:	d1c7      	bne.n	800a084 <__sflush_r+0x30>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0c4      	beq.n	800a084 <__sflush_r+0x30>
 800a0fa:	2b1d      	cmp	r3, #29
 800a0fc:	d001      	beq.n	800a102 <__sflush_r+0xae>
 800a0fe:	2b16      	cmp	r3, #22
 800a100:	d101      	bne.n	800a106 <__sflush_r+0xb2>
 800a102:	602f      	str	r7, [r5, #0]
 800a104:	e7b2      	b.n	800a06c <__sflush_r+0x18>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	e7ae      	b.n	800a06e <__sflush_r+0x1a>
 800a110:	690f      	ldr	r7, [r1, #16]
 800a112:	2f00      	cmp	r7, #0
 800a114:	d0aa      	beq.n	800a06c <__sflush_r+0x18>
 800a116:	0793      	lsls	r3, r2, #30
 800a118:	680e      	ldr	r6, [r1, #0]
 800a11a:	bf08      	it	eq
 800a11c:	694b      	ldreq	r3, [r1, #20]
 800a11e:	600f      	str	r7, [r1, #0]
 800a120:	bf18      	it	ne
 800a122:	2300      	movne	r3, #0
 800a124:	1bf6      	subs	r6, r6, r7
 800a126:	608b      	str	r3, [r1, #8]
 800a128:	2e00      	cmp	r6, #0
 800a12a:	dd9f      	ble.n	800a06c <__sflush_r+0x18>
 800a12c:	6a21      	ldr	r1, [r4, #32]
 800a12e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a132:	4633      	mov	r3, r6
 800a134:	463a      	mov	r2, r7
 800a136:	4628      	mov	r0, r5
 800a138:	47e0      	blx	ip
 800a13a:	2800      	cmp	r0, #0
 800a13c:	dc06      	bgt.n	800a14c <__sflush_r+0xf8>
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a14a:	e790      	b.n	800a06e <__sflush_r+0x1a>
 800a14c:	4407      	add	r7, r0
 800a14e:	1a36      	subs	r6, r6, r0
 800a150:	e7ea      	b.n	800a128 <__sflush_r+0xd4>
 800a152:	bf00      	nop
 800a154:	20400001 	.word	0x20400001

0800a158 <_fflush_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	690b      	ldr	r3, [r1, #16]
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b913      	cbnz	r3, 800a168 <_fflush_r+0x10>
 800a162:	2500      	movs	r5, #0
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	b118      	cbz	r0, 800a172 <_fflush_r+0x1a>
 800a16a:	6983      	ldr	r3, [r0, #24]
 800a16c:	b90b      	cbnz	r3, 800a172 <_fflush_r+0x1a>
 800a16e:	f7fd fda1 	bl	8007cb4 <__sinit>
 800a172:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <_fflush_r+0x6c>)
 800a174:	429c      	cmp	r4, r3
 800a176:	d11b      	bne.n	800a1b0 <_fflush_r+0x58>
 800a178:	686c      	ldr	r4, [r5, #4]
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0ef      	beq.n	800a162 <_fflush_r+0xa>
 800a182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a184:	07d0      	lsls	r0, r2, #31
 800a186:	d404      	bmi.n	800a192 <_fflush_r+0x3a>
 800a188:	0599      	lsls	r1, r3, #22
 800a18a:	d402      	bmi.n	800a192 <_fflush_r+0x3a>
 800a18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18e:	f7fe f998 	bl	80084c2 <__retarget_lock_acquire_recursive>
 800a192:	4628      	mov	r0, r5
 800a194:	4621      	mov	r1, r4
 800a196:	f7ff ff5d 	bl	800a054 <__sflush_r>
 800a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a19c:	07da      	lsls	r2, r3, #31
 800a19e:	4605      	mov	r5, r0
 800a1a0:	d4e0      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	059b      	lsls	r3, r3, #22
 800a1a6:	d4dd      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f7fe f98b 	bl	80084c4 <__retarget_lock_release_recursive>
 800a1ae:	e7d9      	b.n	800a164 <_fflush_r+0xc>
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <_fflush_r+0x70>)
 800a1b2:	429c      	cmp	r4, r3
 800a1b4:	d101      	bne.n	800a1ba <_fflush_r+0x62>
 800a1b6:	68ac      	ldr	r4, [r5, #8]
 800a1b8:	e7df      	b.n	800a17a <_fflush_r+0x22>
 800a1ba:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <_fflush_r+0x74>)
 800a1bc:	429c      	cmp	r4, r3
 800a1be:	bf08      	it	eq
 800a1c0:	68ec      	ldreq	r4, [r5, #12]
 800a1c2:	e7da      	b.n	800a17a <_fflush_r+0x22>
 800a1c4:	0800a914 	.word	0x0800a914
 800a1c8:	0800a934 	.word	0x0800a934
 800a1cc:	0800a8f4 	.word	0x0800a8f4

0800a1d0 <fiprintf>:
 800a1d0:	b40e      	push	{r1, r2, r3}
 800a1d2:	b503      	push	{r0, r1, lr}
 800a1d4:	4601      	mov	r1, r0
 800a1d6:	ab03      	add	r3, sp, #12
 800a1d8:	4805      	ldr	r0, [pc, #20]	; (800a1f0 <fiprintf+0x20>)
 800a1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1de:	6800      	ldr	r0, [r0, #0]
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	f7ff faa7 	bl	8009734 <_vfiprintf_r>
 800a1e6:	b002      	add	sp, #8
 800a1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	4770      	bx	lr
 800a1f0:	2000000c 	.word	0x2000000c

0800a1f4 <__swhatbuf_r>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	460e      	mov	r6, r1
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	b096      	sub	sp, #88	; 0x58
 800a200:	4614      	mov	r4, r2
 800a202:	461d      	mov	r5, r3
 800a204:	da08      	bge.n	800a218 <__swhatbuf_r+0x24>
 800a206:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	602a      	str	r2, [r5, #0]
 800a20e:	061a      	lsls	r2, r3, #24
 800a210:	d410      	bmi.n	800a234 <__swhatbuf_r+0x40>
 800a212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a216:	e00e      	b.n	800a236 <__swhatbuf_r+0x42>
 800a218:	466a      	mov	r2, sp
 800a21a:	f000 f8ad 	bl	800a378 <_fstat_r>
 800a21e:	2800      	cmp	r0, #0
 800a220:	dbf1      	blt.n	800a206 <__swhatbuf_r+0x12>
 800a222:	9a01      	ldr	r2, [sp, #4]
 800a224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a22c:	425a      	negs	r2, r3
 800a22e:	415a      	adcs	r2, r3
 800a230:	602a      	str	r2, [r5, #0]
 800a232:	e7ee      	b.n	800a212 <__swhatbuf_r+0x1e>
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	2000      	movs	r0, #0
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	b016      	add	sp, #88	; 0x58
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a240 <__smakebuf_r>:
 800a240:	898b      	ldrh	r3, [r1, #12]
 800a242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a244:	079d      	lsls	r5, r3, #30
 800a246:	4606      	mov	r6, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	d507      	bpl.n	800a25c <__smakebuf_r+0x1c>
 800a24c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	2301      	movs	r3, #1
 800a256:	6163      	str	r3, [r4, #20]
 800a258:	b002      	add	sp, #8
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	ab01      	add	r3, sp, #4
 800a25e:	466a      	mov	r2, sp
 800a260:	f7ff ffc8 	bl	800a1f4 <__swhatbuf_r>
 800a264:	9900      	ldr	r1, [sp, #0]
 800a266:	4605      	mov	r5, r0
 800a268:	4630      	mov	r0, r6
 800a26a:	f7fe fe99 	bl	8008fa0 <_malloc_r>
 800a26e:	b948      	cbnz	r0, 800a284 <__smakebuf_r+0x44>
 800a270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a274:	059a      	lsls	r2, r3, #22
 800a276:	d4ef      	bmi.n	800a258 <__smakebuf_r+0x18>
 800a278:	f023 0303 	bic.w	r3, r3, #3
 800a27c:	f043 0302 	orr.w	r3, r3, #2
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	e7e3      	b.n	800a24c <__smakebuf_r+0xc>
 800a284:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <__smakebuf_r+0x7c>)
 800a286:	62b3      	str	r3, [r6, #40]	; 0x28
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	6020      	str	r0, [r4, #0]
 800a28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	9b00      	ldr	r3, [sp, #0]
 800a294:	6163      	str	r3, [r4, #20]
 800a296:	9b01      	ldr	r3, [sp, #4]
 800a298:	6120      	str	r0, [r4, #16]
 800a29a:	b15b      	cbz	r3, 800a2b4 <__smakebuf_r+0x74>
 800a29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f000 f87b 	bl	800a39c <_isatty_r>
 800a2a6:	b128      	cbz	r0, 800a2b4 <__smakebuf_r+0x74>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	f043 0301 	orr.w	r3, r3, #1
 800a2b2:	81a3      	strh	r3, [r4, #12]
 800a2b4:	89a0      	ldrh	r0, [r4, #12]
 800a2b6:	4305      	orrs	r5, r0
 800a2b8:	81a5      	strh	r5, [r4, #12]
 800a2ba:	e7cd      	b.n	800a258 <__smakebuf_r+0x18>
 800a2bc:	08007c4d 	.word	0x08007c4d

0800a2c0 <memmove>:
 800a2c0:	4288      	cmp	r0, r1
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	eb01 0402 	add.w	r4, r1, r2
 800a2c8:	d902      	bls.n	800a2d0 <memmove+0x10>
 800a2ca:	4284      	cmp	r4, r0
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	d807      	bhi.n	800a2e0 <memmove+0x20>
 800a2d0:	1e43      	subs	r3, r0, #1
 800a2d2:	42a1      	cmp	r1, r4
 800a2d4:	d008      	beq.n	800a2e8 <memmove+0x28>
 800a2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2de:	e7f8      	b.n	800a2d2 <memmove+0x12>
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	428a      	cmp	r2, r1
 800a2e6:	d100      	bne.n	800a2ea <memmove+0x2a>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f2:	e7f7      	b.n	800a2e4 <memmove+0x24>

0800a2f4 <__malloc_lock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_lock+0x8>)
 800a2f6:	f7fe b8e4 	b.w	80084c2 <__retarget_lock_acquire_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	200002e0 	.word	0x200002e0

0800a300 <__malloc_unlock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_unlock+0x8>)
 800a302:	f7fe b8df 	b.w	80084c4 <__retarget_lock_release_recursive>
 800a306:	bf00      	nop
 800a308:	200002e0 	.word	0x200002e0

0800a30c <_realloc_r>:
 800a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	4680      	mov	r8, r0
 800a312:	4614      	mov	r4, r2
 800a314:	460e      	mov	r6, r1
 800a316:	b921      	cbnz	r1, 800a322 <_realloc_r+0x16>
 800a318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31c:	4611      	mov	r1, r2
 800a31e:	f7fe be3f 	b.w	8008fa0 <_malloc_r>
 800a322:	b92a      	cbnz	r2, 800a330 <_realloc_r+0x24>
 800a324:	f7fe fdd2 	bl	8008ecc <_free_r>
 800a328:	4625      	mov	r5, r4
 800a32a:	4628      	mov	r0, r5
 800a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a330:	f000 f844 	bl	800a3bc <_malloc_usable_size_r>
 800a334:	4284      	cmp	r4, r0
 800a336:	4607      	mov	r7, r0
 800a338:	d802      	bhi.n	800a340 <_realloc_r+0x34>
 800a33a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a33e:	d812      	bhi.n	800a366 <_realloc_r+0x5a>
 800a340:	4621      	mov	r1, r4
 800a342:	4640      	mov	r0, r8
 800a344:	f7fe fe2c 	bl	8008fa0 <_malloc_r>
 800a348:	4605      	mov	r5, r0
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d0ed      	beq.n	800a32a <_realloc_r+0x1e>
 800a34e:	42bc      	cmp	r4, r7
 800a350:	4622      	mov	r2, r4
 800a352:	4631      	mov	r1, r6
 800a354:	bf28      	it	cs
 800a356:	463a      	movcs	r2, r7
 800a358:	f7fe f8e2 	bl	8008520 <memcpy>
 800a35c:	4631      	mov	r1, r6
 800a35e:	4640      	mov	r0, r8
 800a360:	f7fe fdb4 	bl	8008ecc <_free_r>
 800a364:	e7e1      	b.n	800a32a <_realloc_r+0x1e>
 800a366:	4635      	mov	r5, r6
 800a368:	e7df      	b.n	800a32a <_realloc_r+0x1e>

0800a36a <abort>:
 800a36a:	b508      	push	{r3, lr}
 800a36c:	2006      	movs	r0, #6
 800a36e:	f000 f855 	bl	800a41c <raise>
 800a372:	2001      	movs	r0, #1
 800a374:	f7f7 fc50 	bl	8001c18 <_exit>

0800a378 <_fstat_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	; (800a398 <_fstat_r+0x20>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	f7f7 fc95 	bl	8001cb4 <_fstat>
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d102      	bne.n	800a394 <_fstat_r+0x1c>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b103      	cbz	r3, 800a394 <_fstat_r+0x1c>
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	200002ec 	.word	0x200002ec

0800a39c <_isatty_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d06      	ldr	r5, [pc, #24]	; (800a3b8 <_isatty_r+0x1c>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f7 fc93 	bl	8001cd2 <_isatty>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_isatty_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_isatty_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	200002ec 	.word	0x200002ec

0800a3bc <_malloc_usable_size_r>:
 800a3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c0:	1f18      	subs	r0, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	bfbc      	itt	lt
 800a3c6:	580b      	ldrlt	r3, [r1, r0]
 800a3c8:	18c0      	addlt	r0, r0, r3
 800a3ca:	4770      	bx	lr

0800a3cc <_raise_r>:
 800a3cc:	291f      	cmp	r1, #31
 800a3ce:	b538      	push	{r3, r4, r5, lr}
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	d904      	bls.n	800a3e0 <_raise_r+0x14>
 800a3d6:	2316      	movs	r3, #22
 800a3d8:	6003      	str	r3, [r0, #0]
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3e2:	b112      	cbz	r2, 800a3ea <_raise_r+0x1e>
 800a3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3e8:	b94b      	cbnz	r3, 800a3fe <_raise_r+0x32>
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f830 	bl	800a450 <_getpid_r>
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3fa:	f000 b817 	b.w	800a42c <_kill_r>
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d00a      	beq.n	800a418 <_raise_r+0x4c>
 800a402:	1c59      	adds	r1, r3, #1
 800a404:	d103      	bne.n	800a40e <_raise_r+0x42>
 800a406:	2316      	movs	r3, #22
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	2001      	movs	r0, #1
 800a40c:	e7e7      	b.n	800a3de <_raise_r+0x12>
 800a40e:	2400      	movs	r4, #0
 800a410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a414:	4628      	mov	r0, r5
 800a416:	4798      	blx	r3
 800a418:	2000      	movs	r0, #0
 800a41a:	e7e0      	b.n	800a3de <_raise_r+0x12>

0800a41c <raise>:
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <raise+0xc>)
 800a41e:	4601      	mov	r1, r0
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	f7ff bfd3 	b.w	800a3cc <_raise_r>
 800a426:	bf00      	nop
 800a428:	2000000c 	.word	0x2000000c

0800a42c <_kill_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d07      	ldr	r5, [pc, #28]	; (800a44c <_kill_r+0x20>)
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	4611      	mov	r1, r2
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	f7f7 fbdd 	bl	8001bf8 <_kill>
 800a43e:	1c43      	adds	r3, r0, #1
 800a440:	d102      	bne.n	800a448 <_kill_r+0x1c>
 800a442:	682b      	ldr	r3, [r5, #0]
 800a444:	b103      	cbz	r3, 800a448 <_kill_r+0x1c>
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	bd38      	pop	{r3, r4, r5, pc}
 800a44a:	bf00      	nop
 800a44c:	200002ec 	.word	0x200002ec

0800a450 <_getpid_r>:
 800a450:	f7f7 bbcb 	b.w	8001bea <_getpid>
 800a454:	0000      	movs	r0, r0
	...

0800a458 <floor>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a460:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a464:	2e13      	cmp	r6, #19
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4607      	mov	r7, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	4605      	mov	r5, r0
 800a470:	dc33      	bgt.n	800a4da <floor+0x82>
 800a472:	2e00      	cmp	r6, #0
 800a474:	da14      	bge.n	800a4a0 <floor+0x48>
 800a476:	a334      	add	r3, pc, #208	; (adr r3, 800a548 <floor+0xf0>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f7f5 fede 	bl	800023c <__adddf3>
 800a480:	2200      	movs	r2, #0
 800a482:	2300      	movs	r3, #0
 800a484:	f7f6 fb20 	bl	8000ac8 <__aeabi_dcmpgt>
 800a488:	b138      	cbz	r0, 800a49a <floor+0x42>
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	da58      	bge.n	800a540 <floor+0xe8>
 800a48e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a492:	431d      	orrs	r5, r3
 800a494:	d001      	beq.n	800a49a <floor+0x42>
 800a496:	4c2e      	ldr	r4, [pc, #184]	; (800a550 <floor+0xf8>)
 800a498:	2500      	movs	r5, #0
 800a49a:	4623      	mov	r3, r4
 800a49c:	462f      	mov	r7, r5
 800a49e:	e025      	b.n	800a4ec <floor+0x94>
 800a4a0:	4a2c      	ldr	r2, [pc, #176]	; (800a554 <floor+0xfc>)
 800a4a2:	fa42 f806 	asr.w	r8, r2, r6
 800a4a6:	ea01 0208 	and.w	r2, r1, r8
 800a4aa:	4302      	orrs	r2, r0
 800a4ac:	d01e      	beq.n	800a4ec <floor+0x94>
 800a4ae:	a326      	add	r3, pc, #152	; (adr r3, 800a548 <floor+0xf0>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f5 fec2 	bl	800023c <__adddf3>
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f7f6 fb04 	bl	8000ac8 <__aeabi_dcmpgt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0ea      	beq.n	800a49a <floor+0x42>
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	bfbe      	ittt	lt
 800a4c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4cc:	fa43 f606 	asrlt.w	r6, r3, r6
 800a4d0:	19a4      	addlt	r4, r4, r6
 800a4d2:	ea24 0408 	bic.w	r4, r4, r8
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	e7df      	b.n	800a49a <floor+0x42>
 800a4da:	2e33      	cmp	r6, #51	; 0x33
 800a4dc:	dd0a      	ble.n	800a4f4 <floor+0x9c>
 800a4de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a4e2:	d103      	bne.n	800a4ec <floor+0x94>
 800a4e4:	f7f5 feaa 	bl	800023c <__adddf3>
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4fc:	fa22 f808 	lsr.w	r8, r2, r8
 800a500:	ea18 0f00 	tst.w	r8, r0
 800a504:	d0f2      	beq.n	800a4ec <floor+0x94>
 800a506:	a310      	add	r3, pc, #64	; (adr r3, 800a548 <floor+0xf0>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f5 fe96 	bl	800023c <__adddf3>
 800a510:	2200      	movs	r2, #0
 800a512:	2300      	movs	r3, #0
 800a514:	f7f6 fad8 	bl	8000ac8 <__aeabi_dcmpgt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0be      	beq.n	800a49a <floor+0x42>
 800a51c:	2c00      	cmp	r4, #0
 800a51e:	da02      	bge.n	800a526 <floor+0xce>
 800a520:	2e14      	cmp	r6, #20
 800a522:	d103      	bne.n	800a52c <floor+0xd4>
 800a524:	3401      	adds	r4, #1
 800a526:	ea25 0508 	bic.w	r5, r5, r8
 800a52a:	e7b6      	b.n	800a49a <floor+0x42>
 800a52c:	2301      	movs	r3, #1
 800a52e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a532:	fa03 f606 	lsl.w	r6, r3, r6
 800a536:	4435      	add	r5, r6
 800a538:	42bd      	cmp	r5, r7
 800a53a:	bf38      	it	cc
 800a53c:	18e4      	addcc	r4, r4, r3
 800a53e:	e7f2      	b.n	800a526 <floor+0xce>
 800a540:	2500      	movs	r5, #0
 800a542:	462c      	mov	r4, r5
 800a544:	e7a9      	b.n	800a49a <floor+0x42>
 800a546:	bf00      	nop
 800a548:	8800759c 	.word	0x8800759c
 800a54c:	7e37e43c 	.word	0x7e37e43c
 800a550:	bff00000 	.word	0xbff00000
 800a554:	000fffff 	.word	0x000fffff

0800a558 <_init>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	bf00      	nop
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr

0800a564 <_fini>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	bf00      	nop
 800a568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56a:	bc08      	pop	{r3}
 800a56c:	469e      	mov	lr, r3
 800a56e:	4770      	bx	lr
