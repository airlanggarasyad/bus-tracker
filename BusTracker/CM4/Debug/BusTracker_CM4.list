
BusTracker_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08004af8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004af8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d9d  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248a  00000000  00000000  00031e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  000354f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9a6  00000000  00000000  00036650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001242f  00000000  00000000  00052ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2d92  00000000  00000000  00065425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001181b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000501c  00000000  00000000  00118208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08004908 	.word	0x08004908

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08004908 	.word	0x08004908

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b0      	sub	sp, #192	; 0xc0
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb4f 	bl	8000c44 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t receivedData[75];
  uint8_t buff[100];

  const char* desiredNMEA = "$GPGGA";
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <main+0xbc>)
 80005a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  HAL_StatusTypeDef ret;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f860 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f98e 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f940 	bl	8000838 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b8:	f000 f8b4 	bl	8000724 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f8f0 	bl	80007a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 fb9b 	bl	8001cfc <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 80005c6:	2374      	movs	r3, #116	; 0x74
 80005c8:	b299      	uxth	r1, r3
 80005ca:	230a      	movs	r3, #10
 80005cc:	2202      	movs	r2, #2
 80005ce:	4823      	ldr	r0, [pc, #140]	; (800065c <main+0xc0>)
 80005d0:	f000 ff9a 	bl	8001508 <HAL_I2C_IsDeviceReady>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

	  if (ret != HAL_OK) {
 80005da:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <main+0x52>
		  sprintf((char*)buff, "Device is not ready \r\n");
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	491e      	ldr	r1, [pc, #120]	; (8000660 <main+0xc4>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fd22 	bl	8004030 <siprintf>
 80005ec:	e01e      	b.n	800062c <main+0x90>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, TESEO_LIV3FL_ADDRESS, receivedData, sizeof(receivedData), HAL_MAX_DELAY);
 80005ee:	2374      	movs	r3, #116	; 0x74
 80005f0:	b299      	uxth	r1, r3
 80005f2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	234b      	movs	r3, #75	; 0x4b
 80005fe:	4817      	ldr	r0, [pc, #92]	; (800065c <main+0xc0>)
 8000600:	f000 fe8c 	bl	800131c <HAL_I2C_Master_Receive>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

		  if (ret != HAL_OK) {
 800060a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <main+0x82>
			  sprintf((char*)buff, "Error Rx \r\n");
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4913      	ldr	r1, [pc, #76]	; (8000664 <main+0xc8>)
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fd0a 	bl	8004030 <siprintf>
 800061c:	e006      	b.n	800062c <main+0x90>
		  } else {
			  sprintf((char*)buff, "START \n%s \nEND\n\n", (char*)receivedData);
 800061e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4910      	ldr	r1, [pc, #64]	; (8000668 <main+0xcc>)
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fd02 	bl	8004030 <siprintf>
		  }
	  }

//	  if (strstr(buff, desiredNMEA) != NULL) {
		  while (HAL_UART_Transmit(&huart2, buff, strlen((char*)buff), HAL_MAX_DELAY) != HAL_OK);
 800062c:	bf00      	nop
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fda5 	bl	8000180 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	1d39      	adds	r1, r7, #4
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <main+0xd0>)
 8000642:	f002 ff04 	bl	800344e <HAL_UART_Transmit>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f0      	bne.n	800062e <main+0x92>
		  HAL_Delay(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000650:	f000 fb6e 	bl	8000d30 <HAL_Delay>
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, TESEO_LIV3FL_ADDRESS, 2, 10);
 8000654:	e7b7      	b.n	80005c6 <main+0x2a>
 8000656:	bf00      	nop
 8000658:	08004920 	.word	0x08004920
 800065c:	2000008c 	.word	0x2000008c
 8000660:	08004928 	.word	0x08004928
 8000664:	08004940 	.word	0x08004940
 8000668:	0800494c 	.word	0x0800494c
 800066c:	20000168 	.word	0x20000168

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2248      	movs	r2, #72	; 0x48
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fcce 	bl	8004020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000696:	f001 fb09 	bl	8001cac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ff50 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xb0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006a8:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <SystemClock_Config+0xb0>)
 80006aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <SystemClock_Config+0xb0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006bc:	2324      	movs	r3, #36	; 0x24
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c0:	2381      	movs	r3, #129	; 0x81
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fdd1 	bl	8002280 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006e4:	f000 f901 	bl	80008ea <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80006e8:	236f      	movs	r3, #111	; 0x6f
 80006ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 f955 	bl	80029b8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000714:	f000 f8e9 	bl	80008ea <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3768      	adds	r7, #104	; 0x68
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58000400 	.word	0x58000400

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C1_Init+0x74>)
 8000730:	f640 6214 	movw	r2, #3604	; 0xe14
 8000734:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_I2C1_Init+0x74>)
 800073e:	2201      	movs	r2, #1
 8000740:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_I2C1_Init+0x74>)
 8000762:	f000 fd4b 	bl	80011fc <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f8bd 	bl	80008ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_I2C1_Init+0x74>)
 8000774:	f001 fa04 	bl	8001b80 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 f8b4 	bl	80008ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x74>)
 8000786:	f001 fa45 	bl	8001c14 <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f8ab 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40005400 	.word	0x40005400

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <MX_USART1_UART_Init+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007ea:	f002 fde0 	bl	80033ae <HAL_UART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f879 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_USART1_UART_Init+0x90>)
 80007fc:	f003 fb1e 	bl	8003e3c <HAL_UARTEx_SetTxFifoThreshold>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 f870 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x90>)
 800080e:	f003 fb53 	bl	8003eb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f867 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_USART1_UART_Init+0x90>)
 800081e:	f003 fad5 	bl	8003dcc <HAL_UARTEx_DisableFifoMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f85f 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000d8 	.word	0x200000d8
 8000834:	40013800 	.word	0x40013800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_USART2_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000882:	f002 fd94 	bl	80033ae <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 f82d 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 8000894:	f003 fad2 	bl	8003e3c <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 f824 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 80008a6:	f003 fb07 	bl	8003eb8 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 f81b 	bl	80008ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_USART2_UART_Init+0x90>)
 80008b6:	f003 fa89 	bl	8003dcc <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f813 	bl	80008ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000168 	.word	0x20000168
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fe48 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2004      	movs	r0, #4
 80008dc:	f7ff fe45 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fe42 	bl	800056a <LL_AHB2_GRP1_EnableClock>

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ee:	b672      	cpsid	i
}
 80008f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <Error_Handler+0x8>

080008f4 <LL_AHB2_GRP1_EnableClock>:
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4313      	orrs	r3, r2
 800090a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000918:	68fb      	ldr	r3, [r7, #12]
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800092c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4313      	orrs	r3, r2
 800093a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800093c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800095c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000960:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000978:	68fb      	ldr	r3, [r7, #12]
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2238      	movs	r2, #56	; 0x38
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fb35 	bl	8004020 <memset>
  if(hi2c->Instance==I2C1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80009c8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fbb2 	bl	8003138 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009da:	f7ff ff86 	bl	80008ea <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff ff88 	bl	80008f4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009fe:	4619      	mov	r1, r3
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <HAL_I2C_MspInit+0x8c>)
 8000a02:	f000 fa9b 	bl	8000f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a0a:	f7ff ff8b 	bl	8000924 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	48000400 	.word	0x48000400

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 faed 	bl	8004020 <memset>
  if(huart->Instance==USART1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a37      	ldr	r2, [pc, #220]	; (8000b28 <HAL_UART_MspInit+0x108>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d13b      	bne.n	8000ac8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a54:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a58:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fb6a 	bl	8003138 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a6a:	f7ff ff3e 	bl	80008ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a72:	f7ff ff6f 	bl	8000954 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff ff3c 	bl	80008f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff ff39 	bl	80008f4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a94:	2307      	movs	r3, #7
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fa4b 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <HAL_UART_MspInit+0x10c>)
 8000ac2:	f000 fa3b 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	e02b      	b.n	8000b20 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0x110>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d126      	bne.n	8000b20 <HAL_UART_MspInit+0x100>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000ada:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fb29 	bl	8003138 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000aec:	f7ff fefd 	bl	80008ea <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000af4:	f7ff ff16 	bl	8000924 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fefb 	bl	80008f4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000afe:	230c      	movs	r3, #12
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fa0e 	bl	8000f3c <HAL_GPIO_Init>
}
 8000b20:	bf00      	nop
 8000b22:	3758      	adds	r7, #88	; 0x58
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	40004400 	.word	0x40004400

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7a:	f000 f8bd 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f003 fa0a 	bl	8003fcc <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20008000 	.word	0x20008000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200001f8 	.word	0x200001f8
 8000bec:	20000210 	.word	0x20000210

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f7ff fc9e 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f003 f9db 	bl	8003fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff fcbb 	bl	800059c <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c34:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c3c:	20000210 	.word	0x20000210

08000c40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f000 f942 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c54:	f002 f892 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_Init+0x3c>)
 8000c5c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f810 	bl	8000c84 <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e001      	b.n	8000c74 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c70:	f7ff fe88 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d024      	beq.n	8000ce2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c98:	f002 f870 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f936 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10f      	bne.n	8000cdc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d809      	bhi.n	8000cd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cca:	f000 f910 	bl	8000eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_InitTick+0x70>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e004      	b.n	8000ce6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000008 	.word	0x20000008
 8000d18:	200001fc 	.word	0x200001fc

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	200001fc 	.word	0x200001fc

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff0 	bl	8000d1c <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffe0 	bl	8000d1c <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb8:	f7ff ff90 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff49 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff60 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff92 	bl	8000e30 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb2 	bl	8000e94 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e140      	b.n	80011ce <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8132 	beq.w	80011c8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0203 	and.w	r2, r3, #3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 808c 	beq.w	80011c8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	2207      	movs	r2, #7
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1bc>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a44      	ldr	r2, [pc, #272]	; (80011f0 <HAL_GPIO_Init+0x2b4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1b8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a43      	ldr	r2, [pc, #268]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1b4>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_Init+0x1be>
 80010f0:	2307      	movs	r3, #7
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x1be>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_Init+0x1be>
 80010f8:	2300      	movs	r3, #0
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4093      	lsls	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110a:	4938      	ldr	r1, [pc, #224]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113c:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800116e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001172:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800119c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011a0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f47f aeb7 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	58000800 	.word	0x58000800

080011fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e081      	b.n	8001312 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fbb4 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2224      	movs	r2, #36	; 0x24
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e006      	b.n	8001284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d104      	bne.n	8001296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69d9      	ldr	r1, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
 800132c:	4613      	mov	r3, r2
 800132e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b20      	cmp	r3, #32
 800133a:	f040 80db 	bne.w	80014f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_I2C_Master_Receive+0x30>
 8001348:	2302      	movs	r3, #2
 800134a:	e0d4      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001354:	f7ff fce2 	bl	8000d1c <HAL_GetTick>
 8001358:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2319      	movs	r3, #25
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f9f8 	bl	800175c <I2C_WaitOnFlagUntilTimeout>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0bf      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2222      	movs	r2, #34	; 0x22
 800137a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2210      	movs	r2, #16
 8001382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	893a      	ldrh	r2, [r7, #8]
 8001396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2bff      	cmp	r3, #255	; 0xff
 80013a6:	d90e      	bls.n	80013c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	22ff      	movs	r2, #255	; 0xff
 80013ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	8979      	ldrh	r1, [r7, #10]
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_I2C_Master_Receive+0x1e4>)
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fbae 	bl	8001b20 <I2C_TransferConfig>
 80013c4:	e06d      	b.n	80014a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	8979      	ldrh	r1, [r7, #10]
 80013d8:	4b49      	ldr	r3, [pc, #292]	; (8001500 <HAL_I2C_Master_Receive+0x1e4>)
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fb9d 	bl	8001b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80013e6:	e05c      	b.n	80014a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	6a39      	ldr	r1, [r7, #32]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fa31 	bl	8001854 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e07c      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001418:	3b01      	subs	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29b      	uxth	r3, r3
 8001426:	3b01      	subs	r3, #1
 8001428:	b29a      	uxth	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001432:	b29b      	uxth	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d034      	beq.n	80014a2 <HAL_I2C_Master_Receive+0x186>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d130      	bne.n	80014a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2200      	movs	r2, #0
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f986 	bl	800175c <I2C_WaitOnFlagUntilTimeout>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e04d      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	2bff      	cmp	r3, #255	; 0xff
 8001462:	d90e      	bls.n	8001482 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	b2da      	uxtb	r2, r3
 8001470:	8979      	ldrh	r1, [r7, #10]
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 fb50 	bl	8001b20 <I2C_TransferConfig>
 8001480:	e00f      	b.n	80014a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	b2da      	uxtb	r2, r3
 8001492:	8979      	ldrh	r1, [r7, #10]
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fb3f 	bl	8001b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d19d      	bne.n	80013e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	6a39      	ldr	r1, [r7, #32]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f993 	bl	80017dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e01a      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2220      	movs	r2, #32
 80014c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_I2C_Master_Receive+0x1e8>)
 80014d4:	400b      	ands	r3, r1
 80014d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2220      	movs	r2, #32
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e000      	b.n	80014f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80014f4:	2302      	movs	r3, #2
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	80002400 	.word	0x80002400
 8001504:	fe00e800 	.word	0xfe00e800

08001508 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b20      	cmp	r3, #32
 8001526:	f040 80f1 	bne.w	800170c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001538:	d101      	bne.n	800153e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
 800153c:	e0e7      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2C_IsDeviceReady+0x44>
 8001548:	2302      	movs	r3, #2
 800154a:	e0e0      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_I2C_IsDeviceReady+0x72>
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001578:	e004      	b.n	8001584 <HAL_I2C_IsDeviceReady+0x7c>
 800157a:	897b      	ldrh	r3, [r7, #10]
 800157c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001580:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fbc7 	bl	8000d1c <HAL_GetTick>
 800158e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b20      	cmp	r3, #32
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015bc:	e034      	b.n	8001628 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c4:	d01a      	beq.n	80015fc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015c6:	f7ff fba9 	bl	8000d1c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d302      	bcc.n	80015dc <HAL_I2C_IsDeviceReady+0xd4>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10f      	bne.n	80015fc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2220      	movs	r2, #32
 80015e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f043 0220 	orr.w	r2, r3, #32
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e088      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	2b20      	cmp	r3, #32
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b10      	cmp	r3, #16
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_I2C_IsDeviceReady+0x12c>
 800162e:	7fbb      	ldrb	r3, [r7, #30]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0c4      	beq.n	80015be <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b10      	cmp	r3, #16
 8001640:	d01a      	beq.n	8001678 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f885 	bl	800175c <I2C_WaitOnFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e058      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e04a      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	2120      	movs	r1, #32
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f86a 	bl	800175c <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e03d      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2210      	movs	r2, #16
 8001698:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2220      	movs	r2, #32
 80016a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d118      	bne.n	80016dc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	2120      	movs	r1, #32
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f849 	bl	800175c <I2C_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e01c      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2220      	movs	r2, #32
 80016da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	f63f af3b 	bhi.w	8001562 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f043 0220 	orr.w	r2, r3, #32
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800170c:	2302      	movs	r3, #2
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d103      	bne.n	8001734 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d007      	beq.n	8001752 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	619a      	str	r2, [r3, #24]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800176c:	e022      	b.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001774:	d01e      	beq.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001776:	f7ff fad1 	bl	8000d1c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d302      	bcc.n	800178c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d113      	bne.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	f043 0220 	orr.w	r2, r3, #32
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e00f      	b.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4013      	ands	r3, r2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d0cd      	beq.n	800176e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e8:	e028      	b.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f8aa 	bl	8001948 <I2C_IsErrorOccurred>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e026      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fe:	f7ff fa8d 	bl	8000d1c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d113      	bne.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b20      	cmp	r3, #32
 8001848:	d1cf      	bne.n	80017ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001860:	e064      	b.n	800192c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f86e 	bl	8001948 <I2C_IsErrorOccurred>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e062      	b.n	800193c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b20      	cmp	r3, #32
 8001882:	d138      	bne.n	80018f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b04      	cmp	r3, #4
 8001890:	d105      	bne.n	800189e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e04e      	b.n	800193c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d107      	bne.n	80018bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2210      	movs	r2, #16
 80018b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2204      	movs	r2, #4
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
 80018ba:	e002      	b.n	80018c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2220      	movs	r2, #32
 80018c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80018d6:	400b      	ands	r3, r1
 80018d8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e022      	b.n	800193c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f6:	f7ff fa11 	bl	8000d1c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	429a      	cmp	r2, r3
 8001904:	d302      	bcc.n	800190c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10f      	bne.n	800192c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f043 0220 	orr.w	r2, r3, #32
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e007      	b.n	800193c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b04      	cmp	r3, #4
 8001938:	d193      	bne.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	fe00e800 	.word	0xfe00e800

08001948 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b00      	cmp	r3, #0
 8001972:	d075      	beq.n	8001a60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800197c:	e056      	b.n	8001a2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001984:	d052      	beq.n	8001a2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001986:	f7ff f9c9 	bl	8000d1c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	d302      	bcc.n	800199c <I2C_IsErrorOccurred+0x54>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d147      	bne.n	8001a2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019be:	d12e      	bne.n	8001a1e <I2C_IsErrorOccurred+0xd6>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019c6:	d02a      	beq.n	8001a1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d027      	beq.n	8001a1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019de:	f7ff f99d 	bl	8000d1c <HAL_GetTick>
 80019e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e4:	e01b      	b.n	8001a1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019e6:	f7ff f999 	bl	8000d1c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b19      	cmp	r3, #25
 80019f2:	d914      	bls.n	8001a1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d1dc      	bne.n	80019e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d003      	beq.n	8001a42 <I2C_IsErrorOccurred+0xfa>
 8001a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d09d      	beq.n	800197e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01c      	beq.n	8001b10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fe1d 	bl	8001716 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <I2C_IsErrorOccurred+0x1d4>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	fe00e800 	.word	0xfe00e800

08001b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	817b      	strh	r3, [r7, #10]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b40:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b4e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	0d5b      	lsrs	r3, r3, #21
 8001b5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <I2C_TransferConfig+0x5c>)
 8001b60:	430b      	orrs	r3, r1
 8001b62:	43db      	mvns	r3, r3
 8001b64:	ea02 0103 	and.w	r1, r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	03ff63ff 	.word	0x03ff63ff

08001b80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d138      	bne.n	8001c08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e032      	b.n	8001c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d139      	bne.n	8001c9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e033      	b.n	8001ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	58000400 	.word	0x58000400

08001cc8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <LL_PWR_EnableBootC2+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a03      	ldr	r2, [pc, #12]	; (8001ce0 <LL_PWR_EnableBootC2+0x18>)
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	58000400 	.word	0x58000400

08001ce4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_PWREx_GetVoltageRange+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	58000400 	.word	0x58000400

08001cfc <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001d04:	f7ff ffe0 	bl	8001cc8 <LL_PWR_EnableBootC2>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d20:	d101      	bne.n	8001d26 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	58000400 	.word	0x58000400

08001d34 <LL_RCC_HSE_EnableTcxo>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_HSE_DisableTcxo>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d7e:	d101      	bne.n	8001d84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <LL_RCC_HSE_Enable>:
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_HSE_Disable>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_HSE_IsReady>:
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dd8:	d101      	bne.n	8001dde <LL_RCC_HSE_IsReady+0x18>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_RCC_HSE_IsReady+0x1a>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_HSI_Enable>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_HSI_Disable>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_HSI_IsReady>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d101      	bne.n	8001e38 <LL_RCC_HSI_IsReady+0x18>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_RCC_HSI_IsReady+0x1a>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	061b      	lsls	r3, r3, #24
 8001e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d101      	bne.n	8001e82 <LL_RCC_LSE_IsReady+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_RCC_LSE_IsReady+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d101      	bne.n	8001ee4 <LL_RCC_LSI_IsReady+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_RCC_LSI_IsReady+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6013      	str	r3, [r2, #0]
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d101      	bne.n	8001f3c <LL_RCC_MSI_IsReady+0x16>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <LL_RCC_MSI_IsReady+0x18>
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d101      	bne.n	8001f5c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800202e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002058:	f023 020f 	bic.w	r2, r3, #15
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002166:	d101      	bne.n	800216c <LL_RCC_PLL_IsReady+0x18>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <LL_RCC_PLL_IsReady+0x1a>
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0303 	and.w	r3, r3, #3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e2:	d101      	bne.n	80021e8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002206:	d101      	bne.n	800220c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d101      	bne.n	8002230 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800224c:	d101      	bne.n	8002252 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226e:	d101      	bne.n	8002274 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e38b      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002292:	f7ff fea6 	bl	8001fe2 <LL_RCC_GetSysClkSource>
 8002296:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002298:	f7ff ff8f 	bl	80021ba <LL_RCC_PLL_GetMainSource>
 800229c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80c9 	beq.w	800243e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x3e>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d17b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d178      	bne.n	80023b0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	f7ff fe32 	bl	8001f26 <LL_RCC_MSI_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_OscConfig+0x54>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e36a      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x72>
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f0:	e006      	b.n	8002300 <HAL_RCC_OscConfig+0x80>
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002300:	4293      	cmp	r3, r2
 8002302:	d222      	bcs.n	800234a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd6f 	bl	8002dec <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e348      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fe26 	bl	8001f94 <LL_RCC_MSI_SetCalibTrimming>
 8002348:	e021      	b.n	800238e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe0d 	bl	8001f94 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fd34 	bl	8002dec <RCC_SetFlashLatencyFromMSIRange>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e30d      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800238e:	f000 fcf5 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	4aa1      	ldr	r2, [pc, #644]	; (800261c <HAL_RCC_OscConfig+0x39c>)
 8002396:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002398:	4ba1      	ldr	r3, [pc, #644]	; (8002620 <HAL_RCC_OscConfig+0x3a0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fc71 	bl	8000c84 <HAL_InitTick>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d047      	beq.n	800243c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	e2fc      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02c      	beq.n	8002412 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b8:	f7ff fd99 	bl	8001eee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fcae 	bl	8000d1c <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c4:	f7fe fcaa 	bl	8000d1c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e2e9      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023d6:	f7ff fda6 	bl	8001f26 <LL_RCC_MSI_IsReady>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f1      	beq.n	80023c4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fdc2 	bl	8001f94 <LL_RCC_MSI_SetCalibTrimming>
 8002410:	e015      	b.n	800243e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002412:	f7ff fd7a 	bl	8001f0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002416:	f7fe fc81 	bl	8000d1c <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241e:	f7fe fc7d 	bl	8000d1c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e2bc      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002430:	f7ff fd79 	bl	8001f26 <LL_RCC_MSI_IsReady>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f1      	bne.n	800241e <HAL_RCC_OscConfig+0x19e>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d05f      	beq.n	800250a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x1dc>
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d10d      	bne.n	8002472 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d10a      	bne.n	8002472 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	f7ff fcb3 	bl	8001dc6 <LL_RCC_HSE_IsReady>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d050      	beq.n	8002508 <HAL_RCC_OscConfig+0x288>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d14c      	bne.n	8002508 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e29b      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d102      	bne.n	8002498 <HAL_RCC_OscConfig+0x218>
 8002492:	f7ff fc7c 	bl	8001d8e <LL_RCC_HSE_Enable>
 8002496:	e00d      	b.n	80024b4 <HAL_RCC_OscConfig+0x234>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80024a0:	d104      	bne.n	80024ac <HAL_RCC_OscConfig+0x22c>
 80024a2:	f7ff fc47 	bl	8001d34 <LL_RCC_HSE_EnableTcxo>
 80024a6:	f7ff fc72 	bl	8001d8e <LL_RCC_HSE_Enable>
 80024aa:	e003      	b.n	80024b4 <HAL_RCC_OscConfig+0x234>
 80024ac:	f7ff fc7d 	bl	8001daa <LL_RCC_HSE_Disable>
 80024b0:	f7ff fc4e 	bl	8001d50 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fc2e 	bl	8000d1c <HAL_GetTick>
 80024c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fc2a 	bl	8000d1c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e269      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024d6:	f7ff fc76 	bl	8001dc6 <LL_RCC_HSE_IsReady>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f1      	beq.n	80024c4 <HAL_RCC_OscConfig+0x244>
 80024e0:	e013      	b.n	800250a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fc1b 	bl	8000d1c <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fc17 	bl	8000d1c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e256      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024fc:	f7ff fc63 	bl	8001dc6 <LL_RCC_HSE_IsReady>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f1      	bne.n	80024ea <HAL_RCC_OscConfig+0x26a>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d04b      	beq.n	80025ae <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2b04      	cmp	r3, #4
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x2a8>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d113      	bne.n	800254a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d110      	bne.n	800254a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	f7ff fc7a 	bl	8001e20 <LL_RCC_HSI_IsReady>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x2be>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e235      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fc7d 	bl	8001e42 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e031      	b.n	80025ae <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	f7ff fc49 	bl	8001de8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fbe1 	bl	8000d1c <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fbdd 	bl	8000d1c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e21c      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002570:	f7ff fc56 	bl	8001e20 <LL_RCC_HSI_IsReady>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f1      	beq.n	800255e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fc5f 	bl	8001e42 <LL_RCC_HSI_SetCalibTrimming>
 8002584:	e013      	b.n	80025ae <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	f7ff fc3d 	bl	8001e04 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fbc7 	bl	8000d1c <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fbc3 	bl	8000d1c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e202      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025a4:	f7ff fc3c 	bl	8001e20 <LL_RCC_HSI_IsReady>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f1      	bne.n	8002592 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d06f      	beq.n	800269a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d057      	beq.n	8002672 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1db      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d018      	beq.n	800262e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80025fc:	f7ff fc56 	bl	8001eac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002600:	f7fe fb8c 	bl	8000d1c <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002606:	e00d      	b.n	8002624 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe fb88 	bl	8000d1c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b11      	cmp	r3, #17
 8002614:	d906      	bls.n	8002624 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8002624:	f7ff fc52 	bl	8001ecc <LL_RCC_LSI_IsReady>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ec      	bne.n	8002608 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	f7ff fc20 	bl	8001e8c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fb66 	bl	8000d1c <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fb62 	bl	8000d1c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b11      	cmp	r3, #17
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1a1      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002666:	f7ff fc31 	bl	8001ecc <LL_RCC_LSI_IsReady>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f1      	beq.n	8002654 <HAL_RCC_OscConfig+0x3d4>
 8002670:	e013      	b.n	800269a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002672:	f7ff fc1b 	bl	8001eac <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fb51 	bl	8000d1c <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe fb4d 	bl	8000d1c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b11      	cmp	r3, #17
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e18c      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002690:	f7ff fc1c 	bl	8001ecc <LL_RCC_LSI_IsReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f1      	bne.n	800267e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80d8 	beq.w	8002858 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026a8:	f7ff fb32 	bl	8001d10 <LL_PWR_IsEnabledBkUpAccess>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d113      	bne.n	80026da <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026b2:	f7ff fafb 	bl	8001cac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fb31 	bl	8000d1c <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7fe fb2d 	bl	8000d1c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e16c      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026d0:	f7ff fb1e 	bl	8001d10 <LL_PWR_IsEnabledBkUpAccess>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f1      	beq.n	80026be <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d07b      	beq.n	80027da <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b85      	cmp	r3, #133	; 0x85
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fb09 	bl	8000d1c <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fafb 	bl	8000d1c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e138      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002738:	f7ff fb97 	bl	8001e6a <LL_RCC_LSE_IsReady>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ef      	beq.n	8002722 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b81      	cmp	r3, #129	; 0x81
 8002748:	d003      	beq.n	8002752 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b85      	cmp	r3, #133	; 0x85
 8002750:	d121      	bne.n	8002796 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fae3 	bl	8000d1c <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fad5 	bl	8000d1c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e112      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ec      	beq.n	800276e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002794:	e060      	b.n	8002858 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fac1 	bl	8000d1c <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fab3 	bl	8000d1c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0f0      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ec      	bne.n	80027b2 <HAL_RCC_OscConfig+0x532>
 80027d8:	e03e      	b.n	8002858 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe fa9f 	bl	8000d1c <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fa91 	bl	8000d1c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0ce      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ec      	bne.n	80027f6 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fa7e 	bl	8000d1c <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fa70 	bl	8000d1c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0ad      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800284e:	f7ff fb0c 	bl	8001e6a <LL_RCC_LSE_IsReady>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ef      	bne.n	8002838 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a3 	beq.w	80029a8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d076      	beq.n	8002956 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b02      	cmp	r3, #2
 800286e:	d14b      	bne.n	8002908 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	f7ff fc62 	bl	8002138 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fa52 	bl	8000d1c <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fa4e 	bl	8000d1c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b0a      	cmp	r3, #10
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e08d      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800288e:	f7ff fc61 	bl	8002154 <LL_RCC_PLL_IsReady>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f1      	bne.n	800287c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <HAL_RCC_OscConfig+0x734>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b0:	0212      	lsls	r2, r2, #8
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028c4:	430a      	orrs	r2, r1
 80028c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ce:	f7ff fc25 	bl	800211c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fa1b 	bl	8000d1c <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fa17 	bl	8000d1c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e056      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80028fc:	f7ff fc2a 	bl	8002154 <LL_RCC_PLL_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f1      	beq.n	80028ea <HAL_RCC_OscConfig+0x66a>
 8002906:	e04f      	b.n	80029a8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	f7ff fc16 	bl	8002138 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002926:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe f9f4 	bl	8000d1c <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe f9f0 	bl	8000d1c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b0a      	cmp	r3, #10
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e02f      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800294a:	f7ff fc03 	bl	8002154 <LL_RCC_PLL_IsReady>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f1      	bne.n	8002938 <HAL_RCC_OscConfig+0x6b8>
 8002954:	e028      	b.n	80029a8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e023      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	429a      	cmp	r2, r3
 8002976:	d115      	bne.n	80029a4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	429a      	cmp	r2, r3
 8002984:	d10e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	429a      	cmp	r2, r3
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	11c1808c 	.word	0x11c1808c

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e12c      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b98      	ldr	r3, [pc, #608]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d91b      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b95      	ldr	r3, [pc, #596]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4993      	ldr	r1, [pc, #588]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ea:	f7fe f997 	bl	8000d1c <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029f2:	f7fe f993 	bl	8000d1c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e110      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	4b8a      	ldr	r3, [pc, #552]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d1ef      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fae8 	bl	8001ff8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a28:	f7fe f978 	bl	8000d1c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a30:	f7fe f974 	bl	8000d1c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0f1      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a42:	f7ff fbc5 	bl	80021d0 <LL_RCC_IsActiveFlag_HPRE>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f1      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fade 	bl	800201e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a62:	f7fe f95b 	bl	8000d1c <HAL_GetTick>
 8002a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a6a:	f7fe f957 	bl	8000d1c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0d4      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a7c:	f7ff fbb9 	bl	80021f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f1      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fad6 	bl	8002048 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f93e 	bl	8000d1c <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa4:	f7fe f93a 	bl	8000d1c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b7      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ab6:	f7ff fbae 	bl	8002216 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f1      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d016      	beq.n	8002afa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff facf 	bl	8002074 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe f921 	bl	8000d1c <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ade:	f7fe f91d 	bl	8000d1c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e09a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002af0:	f7ff fba3 	bl	800223a <LL_RCC_IsActiveFlag_PPRE1>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f1      	beq.n	8002ade <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fac4 	bl	800209a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b12:	f7fe f903 	bl	8000d1c <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b1a:	f7fe f8ff 	bl	8000d1c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e07c      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b2c:	f7ff fb96 	bl	800225c <LL_RCC_IsActiveFlag_PPRE2>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f1      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d043      	beq.n	8002bca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b4a:	f7ff f93c 	bl	8001dc6 <LL_RCC_HSE_IsReady>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11e      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e066      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b60:	f7ff faf8 	bl	8002154 <LL_RCC_PLL_IsReady>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d113      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e05b      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b76:	f7ff f9d6 	bl	8001f26 <LL_RCC_MSI_IsReady>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d108      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e050      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b84:	f7ff f94c 	bl	8001e20 <LL_RCC_HSI_IsReady>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e049      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fa10 	bl	8001fbc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe f8be 	bl	8000d1c <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe f8ba 	bl	8000d1c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e035      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	f7ff fa12 	bl	8001fe2 <LL_RCC_GetSysClkSource>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d1ec      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d21b      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 0207 	bic.w	r2, r3, #7
 8002be0:	4913      	ldr	r1, [pc, #76]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f898 	bl	8000d1c <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bf0:	f7fe f894 	bl	8000d1c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e011      	b.n	8002c26 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_ClockConfig+0x278>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1ef      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c10:	f000 f8b4 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_RCC_ClockConfig+0x27c>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_RCC_ClockConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f830 	bl	8000c84 <HAL_InitTick>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	58004000 	.word	0x58004000
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4a:	f7ff f9ca 	bl	8001fe2 <LL_RCC_GetSysClkSource>
 8002c4e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c50:	f7ff fab3 	bl	80021ba <LL_RCC_PLL_GetMainSource>
 8002c54:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d139      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d136      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002c68:	f7ff f96d 	bl	8001f46 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x62>
 8002c72:	f7ff f968 	bl	8001f46 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_GetSysClockFreq+0x4e>
 8002c7c:	f7ff f973 	bl	8001f66 <LL_RCC_MSI_GetRange>
 8002c80:	4603      	mov	r3, r0
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	e005      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x5a>
 8002c8a:	f7ff f977 	bl	8001f7c <LL_RCC_MSI_GetRangeAfterStandby>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a36      	ldr	r2, [pc, #216]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x8c>
 8002c9e:	f7ff f952 	bl	8001f46 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002ca8:	f7ff f95d 	bl	8001f66 <LL_RCC_MSI_GetRange>
 8002cac:	4603      	mov	r3, r0
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x86>
 8002cb6:	f7ff f961 	bl	8001f7c <LL_RCC_MSI_GetRangeAfterStandby>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x134>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d115      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cd4:	e012      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e00c      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ce8:	f7ff f840 	bl	8001d6c <LL_RCC_HSE_IsEnabledDiv2>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e001      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cfa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	f7ff f971 	bl	8001fe2 <LL_RCC_GetSysClkSource>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d12f      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d06:	f7ff fa58 	bl	80021ba <LL_RCC_PLL_GetMainSource>
 8002d0a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0xde>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d003      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0xe4>
 8002d18:	e00d      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d1c:	60fb      	str	r3, [r7, #12]
        break;
 8002d1e:	e00d      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d20:	f7ff f824 	bl	8001d6c <LL_RCC_HSE_IsEnabledDiv2>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d2c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d32:	60fb      	str	r3, [r7, #12]
        break;
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	60fb      	str	r3, [r7, #12]
        break;
 8002d3a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d3c:	f7ff fa1b 	bl	8002176 <LL_RCC_PLL_GetN>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	fb03 f402 	mul.w	r4, r3, r2
 8002d48:	f7ff fa2c 	bl	80021a4 <LL_RCC_PLL_GetDivider>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	3301      	adds	r3, #1
 8002d52:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d56:	f7ff fa1a 	bl	800218e <LL_RCC_PLL_GetR>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	0f5b      	lsrs	r3, r3, #29
 8002d5e:	3301      	adds	r3, #1
 8002d60:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d64:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d66:	697b      	ldr	r3, [r7, #20]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	080049dc 	.word	0x080049dc
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	01e84800 	.word	0x01e84800

08002d7c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b598      	push	{r3, r4, r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d80:	f7ff ff5c 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002d84:	4604      	mov	r4, r0
 8002d86:	f7ff f99b 	bl	80020c0 <LL_RCC_GetAHBPrescaler>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd98      	pop	{r3, r4, r7, pc}
 8002da0:	0800497c 	.word	0x0800497c

08002da4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b598      	push	{r3, r4, r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002da8:	f7ff ffe8 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dac:	4604      	mov	r4, r0
 8002dae:	f7ff f99f 	bl	80020f0 <LL_RCC_GetAPB1Prescaler>
 8002db2:	4603      	mov	r3, r0
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd98      	pop	{r3, r4, r7, pc}
 8002dc4:	080049bc 	.word	0x080049bc

08002dc8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b598      	push	{r3, r4, r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002dcc:	f7ff ffd6 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	f7ff f998 	bl	8002106 <LL_RCC_GetAPB2Prescaler>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	0adb      	lsrs	r3, r3, #11
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd98      	pop	{r3, r4, r7, pc}
 8002de8:	080049bc 	.word	0x080049bc

08002dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002e04:	f7ff f967 	bl	80020d6 <LL_RCC_GetAHB3Prescaler>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9c      	lsrs	r4, r3, #18
 8002e28:	f7fe ff5c 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4620      	mov	r0, r4
 8002e32:	f000 f80b 	bl	8002e4c <RCC_SetFlashLatency>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	080049dc 	.word	0x080049dc
 8002e44:	0800497c 	.word	0x0800497c
 8002e48:	431bde83 	.word	0x431bde83

08002e4c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08e      	sub	sp, #56	; 0x38
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e56:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <RCC_SetFlashLatency+0xf4>)
 8002e58:	f107 0320 	add.w	r3, r7, #32
 8002e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	3304      	adds	r3, #4
 8002e64:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <RCC_SetFlashLatency+0xf8>)
 8002e68:	f107 0318 	add.w	r3, r7, #24
 8002e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e70:	6018      	str	r0, [r3, #0]
 8002e72:	3304      	adds	r3, #4
 8002e74:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002e76:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <RCC_SetFlashLatency+0xfc>)
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e82:	2300      	movs	r3, #0
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	d11b      	bne.n	8002ec6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	e014      	b.n	8002ebe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3338      	adds	r3, #56	; 0x38
 8002e9a:	443b      	add	r3, r7
 8002e9c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3338      	adds	r3, #56	; 0x38
 8002eae:	443b      	add	r3, r7
 8002eb0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eb6:	e021      	b.n	8002efc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	3301      	adds	r3, #1
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d9e7      	bls.n	8002e94 <RCC_SetFlashLatency+0x48>
 8002ec4:	e01a      	b.n	8002efc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eca:	e014      	b.n	8002ef6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	3338      	adds	r3, #56	; 0x38
 8002ed2:	443b      	add	r3, r7
 8002ed4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3338      	adds	r3, #56	; 0x38
 8002ee6:	443b      	add	r3, r7
 8002ee8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eee:	e005      	b.n	8002efc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d9e7      	bls.n	8002ecc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <RCC_SetFlashLatency+0x100>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4911      	ldr	r1, [pc, #68]	; (8002f4c <RCC_SetFlashLatency+0x100>)
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f0c:	f7fd ff06 	bl	8000d1c <HAL_GetTick>
 8002f10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f12:	e008      	b.n	8002f26 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f14:	f7fd ff02 	bl	8000d1c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e007      	b.n	8002f36 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <RCC_SetFlashLatency+0x100>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1ef      	bne.n	8002f14 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3738      	adds	r7, #56	; 0x38
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08004960 	.word	0x08004960
 8002f44:	08004968 	.word	0x08004968
 8002f48:	08004970 	.word	0x08004970
 8002f4c:	58004000 	.word	0x58004000

08002f50 <LL_RCC_LSE_IsReady>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d101      	bne.n	8002f68 <LL_RCC_LSE_IsReady+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_RCC_LSE_IsReady+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_SetUSARTClockSource>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	43db      	mvns	r3, r3
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_SetI2SClockSource>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <LL_RCC_SetLPUARTClockSource>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <LL_RCC_SetI2CClockSource>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800300e:	43db      	mvns	r3, r3
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800301a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <LL_RCC_SetLPTIMClockSource>:
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <LL_RCC_SetRNGClockSource>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <LL_RCC_SetADCClockSource>:
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_SetRTCClockSource>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <LL_RCC_GetRTCClockSource>:
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <LL_RCC_ForceBackupDomainReset>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003144:	2300      	movs	r3, #0
 8003146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003148:	2300      	movs	r3, #0
 800314a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d058      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003158:	f7fe fda8 	bl	8001cac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800315c:	f7fd fdde 	bl	8000d1c <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fd fdda 	bl	8000d1c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	74fb      	strb	r3, [r7, #19]
        break;
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003178:	4b7b      	ldr	r3, [pc, #492]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d1ee      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d13c      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800318c:	f7ff ffa7 	bl	80030de <LL_RCC_GetRTCClockSource>
 8003190:	4602      	mov	r2, r0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	429a      	cmp	r2, r3
 8003198:	d00f      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031a8:	f7ff ffa5 	bl	80030f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	f7ff ffb3 	bl	8003116 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d014      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd fdaa 	bl	8000d1c <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80031ca:	e00b      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fd fda6 	bl	8000d1c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d902      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	74fb      	strb	r3, [r7, #19]
            break;
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80031e4:	f7ff feb4 	bl	8002f50 <LL_RCC_LSE_IsReady>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d1ee      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5b 	bl	80030b4 <LL_RCC_SetRTCClockSource>
 80031fe:	e004      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003200:	7cfb      	ldrb	r3, [r7, #19]
 8003202:	74bb      	strb	r3, [r7, #18]
 8003204:	e001      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fea9 	bl	8002f72 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fe9e 	bl	8002f72 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fec0 	bl	8002fcc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fee6 	bl	800302e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fedb 	bl	800302e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fed0 	bl	800302e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fea9 	bl	8002ff6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fe9e 	bl	8002ff6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fe93 	bl	8002ff6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fe5e 	bl	8002fa2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d107      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fea5 	bl	8003060 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fea3 	bl	800308a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334c:	d107      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800335e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58000400 	.word	0x58000400

0800336c <LL_RCC_GetUSARTClockSource>:
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	4313      	orrs	r3, r2
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <LL_RCC_GetLPUARTClockSource>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4013      	ands	r3, r2
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e042      	b.n	8003446 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd fb24 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f8c3 	bl	800357c <UART_SetConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e022      	b.n	8003446 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb2b 	bl	8003a64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fbb1 	bl	8003ba6 <UART_CheckIdleState>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	; 0x28
 8003452:	af02      	add	r7, sp, #8
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003464:	2b20      	cmp	r3, #32
 8003466:	f040 8083 	bne.w	8003570 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_UART_Transmit+0x28>
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07b      	b.n	8003572 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_UART_Transmit+0x3a>
 8003484:	2302      	movs	r3, #2
 8003486:	e074      	b.n	8003572 <HAL_UART_Transmit+0x124>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2221      	movs	r2, #33	; 0x21
 800349c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034a0:	f7fd fc3c 	bl	8000d1c <HAL_GetTick>
 80034a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034be:	d108      	bne.n	80034d2 <HAL_UART_Transmit+0x84>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e003      	b.n	80034da <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80034e2:	e02c      	b.n	800353e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fba4 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e039      	b.n	8003572 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	3302      	adds	r3, #2
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e007      	b.n	800352c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1cc      	bne.n	80034e4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	; 0x40
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fb71 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e006      	b.n	8003572 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003580:	b08c      	sub	sp, #48	; 0x30
 8003582:	af00      	add	r7, sp, #0
 8003584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	431a      	orrs	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b94      	ldr	r3, [pc, #592]	; (80037fc <UART_SetConfig+0x280>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a89      	ldr	r2, [pc, #548]	; (8003800 <UART_SetConfig+0x284>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e4:	4313      	orrs	r3, r2
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f023 010f 	bic.w	r1, r3, #15
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <UART_SetConfig+0x288>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d127      	bne.n	8003670 <UART_SetConfig+0xf4>
 8003620:	2003      	movs	r0, #3
 8003622:	f7ff fea3 	bl	800336c <LL_RCC_GetUSARTClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800362c:	2b03      	cmp	r3, #3
 800362e:	d81b      	bhi.n	8003668 <UART_SetConfig+0xec>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0xbc>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	08003659 	.word	0x08003659
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	2301      	movs	r3, #1
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e080      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003650:	2302      	movs	r3, #2
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e07c      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003658:	2304      	movs	r3, #4
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365e:	e078      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003660:	2308      	movs	r3, #8
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003666:	e074      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003668:	2310      	movs	r3, #16
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366e:	e070      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a64      	ldr	r2, [pc, #400]	; (8003808 <UART_SetConfig+0x28c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d138      	bne.n	80036ec <UART_SetConfig+0x170>
 800367a:	200c      	movs	r0, #12
 800367c:	f7ff fe76 	bl	800336c <LL_RCC_GetUSARTClockSource>
 8003680:	4603      	mov	r3, r0
 8003682:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d82c      	bhi.n	80036e4 <UART_SetConfig+0x168>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x114>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036e5 	.word	0x080036e5
 800369c:	080036e5 	.word	0x080036e5
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	080036e5 	.word	0x080036e5
 80036a8:	080036e5 	.word	0x080036e5
 80036ac:	080036e5 	.word	0x080036e5
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036e5 	.word	0x080036e5
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e042      	b.n	8003752 <UART_SetConfig+0x1d6>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e03e      	b.n	8003752 <UART_SetConfig+0x1d6>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e03a      	b.n	8003752 <UART_SetConfig+0x1d6>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e036      	b.n	8003752 <UART_SetConfig+0x1d6>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ea:	e032      	b.n	8003752 <UART_SetConfig+0x1d6>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a43      	ldr	r2, [pc, #268]	; (8003800 <UART_SetConfig+0x284>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12a      	bne.n	800374c <UART_SetConfig+0x1d0>
 80036f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80036fa:	f7ff fe49 	bl	8003390 <LL_RCC_GetLPUARTClockSource>
 80036fe:	4603      	mov	r3, r0
 8003700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003704:	d01a      	beq.n	800373c <UART_SetConfig+0x1c0>
 8003706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800370a:	d81b      	bhi.n	8003744 <UART_SetConfig+0x1c8>
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003710:	d00c      	beq.n	800372c <UART_SetConfig+0x1b0>
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d815      	bhi.n	8003744 <UART_SetConfig+0x1c8>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x1a8>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d008      	beq.n	8003734 <UART_SetConfig+0x1b8>
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x1c8>
 8003724:	2300      	movs	r3, #0
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e012      	b.n	8003752 <UART_SetConfig+0x1d6>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e00e      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e00a      	b.n	8003752 <UART_SetConfig+0x1d6>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e006      	b.n	8003752 <UART_SetConfig+0x1d6>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e002      	b.n	8003752 <UART_SetConfig+0x1d6>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <UART_SetConfig+0x284>)
 8003758:	4293      	cmp	r3, r2
 800375a:	f040 80a4 	bne.w	80038a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800375e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003762:	2b08      	cmp	r3, #8
 8003764:	d823      	bhi.n	80037ae <UART_SetConfig+0x232>
 8003766:	a201      	add	r2, pc, #4	; (adr r2, 800376c <UART_SetConfig+0x1f0>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	08003791 	.word	0x08003791
 8003770:	080037af 	.word	0x080037af
 8003774:	08003799 	.word	0x08003799
 8003778:	080037af 	.word	0x080037af
 800377c:	0800379f 	.word	0x0800379f
 8003780:	080037af 	.word	0x080037af
 8003784:	080037af 	.word	0x080037af
 8003788:	080037af 	.word	0x080037af
 800378c:	080037a7 	.word	0x080037a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7ff fb08 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003796:	e010      	b.n	80037ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003798:	4b1c      	ldr	r3, [pc, #112]	; (800380c <UART_SetConfig+0x290>)
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800379c:	e00d      	b.n	80037ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379e:	f7ff fa4d 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037ac:	e005      	b.n	80037ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8137 	beq.w	8003a30 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <UART_SetConfig+0x294>)
 80037c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d305      	bcc.n	80037f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d910      	bls.n	8003814 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037f8:	e11a      	b.n	8003a30 <UART_SetConfig+0x4b4>
 80037fa:	bf00      	nop
 80037fc:	cfff69f3 	.word	0xcfff69f3
 8003800:	40008000 	.word	0x40008000
 8003804:	40013800 	.word	0x40013800
 8003808:	40004400 	.word	0x40004400
 800380c:	00f42400 	.word	0x00f42400
 8003810:	08004a1c 	.word	0x08004a1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2200      	movs	r2, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	60fa      	str	r2, [r7, #12]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	4a8e      	ldr	r2, [pc, #568]	; (8003a5c <UART_SetConfig+0x4e0>)
 8003822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003826:	b29b      	uxth	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003836:	f7fc fcfb 	bl	8000230 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4610      	mov	r0, r2
 8003840:	4619      	mov	r1, r3
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	020b      	lsls	r3, r1, #8
 800384c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003850:	0202      	lsls	r2, r0, #8
 8003852:	6979      	ldr	r1, [r7, #20]
 8003854:	6849      	ldr	r1, [r1, #4]
 8003856:	0849      	lsrs	r1, r1, #1
 8003858:	2000      	movs	r0, #0
 800385a:	460c      	mov	r4, r1
 800385c:	4605      	mov	r5, r0
 800385e:	eb12 0804 	adds.w	r8, r2, r4
 8003862:	eb43 0905 	adc.w	r9, r3, r5
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	469a      	mov	sl, r3
 800386e:	4693      	mov	fp, r2
 8003870:	4652      	mov	r2, sl
 8003872:	465b      	mov	r3, fp
 8003874:	4640      	mov	r0, r8
 8003876:	4649      	mov	r1, r9
 8003878:	f7fc fcda 	bl	8000230 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4613      	mov	r3, r2
 8003882:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388a:	d308      	bcc.n	800389e <UART_SetConfig+0x322>
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d204      	bcs.n	800389e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a3a      	ldr	r2, [r7, #32]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e0c8      	b.n	8003a30 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038a4:	e0c4      	b.n	8003a30 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d168      	bne.n	8003982 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80038b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d828      	bhi.n	800390a <UART_SetConfig+0x38e>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0x344>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038fb 	.word	0x080038fb
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	0800390b 	.word	0x0800390b
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7ff fa5e 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80038e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ea:	e014      	b.n	8003916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff fa6c 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038f2:	e010      	b.n	8003916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b5a      	ldr	r3, [pc, #360]	; (8003a60 <UART_SetConfig+0x4e4>)
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038f8:	e00d      	b.n	8003916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff f99f 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80038fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003900:	e009      	b.n	8003916 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003908:	e005      	b.n	8003916 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8089 	beq.w	8003a30 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	4a4e      	ldr	r2, [pc, #312]	; (8003a5c <UART_SetConfig+0x4e0>)
 8003924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003928:	461a      	mov	r2, r3
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003930:	005a      	lsls	r2, r3, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	441a      	add	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	b29b      	uxth	r3, r3
 8003944:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d916      	bls.n	800397a <UART_SetConfig+0x3fe>
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d212      	bcs.n	800397a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	b29a      	uxth	r2, r3
 800396a:	8bfb      	ldrh	r3, [r7, #30]
 800396c:	4313      	orrs	r3, r2
 800396e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	8bfa      	ldrh	r2, [r7, #30]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	e05a      	b.n	8003a30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003980:	e056      	b.n	8003a30 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003986:	2b08      	cmp	r3, #8
 8003988:	d827      	bhi.n	80039da <UART_SetConfig+0x45e>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x414>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039db 	.word	0x080039db
 80039a0:	080039cb 	.word	0x080039cb
 80039a4:	080039db 	.word	0x080039db
 80039a8:	080039db 	.word	0x080039db
 80039ac:	080039db 	.word	0x080039db
 80039b0:	080039d3 	.word	0x080039d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff f9f6 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039ba:	e014      	b.n	80039e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7ff fa04 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 80039c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039c2:	e010      	b.n	80039e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <UART_SetConfig+0x4e4>)
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039c8:	e00d      	b.n	80039e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff f937 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80039ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039d0:	e009      	b.n	80039e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039d8:	e005      	b.n	80039e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039e4:	bf00      	nop
    }

    if (pclk != 0U)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d021      	beq.n	8003a30 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <UART_SetConfig+0x4e0>)
 80039f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	441a      	add	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	d908      	bls.n	8003a2a <UART_SetConfig+0x4ae>
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d204      	bcs.n	8003a2a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	e002      	b.n	8003a30 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	; 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08004a1c 	.word	0x08004a1c
 8003a60:	00f42400 	.word	0x00f42400

08003a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01a      	beq.n	8003b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b62:	d10a      	bne.n	8003b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bb6:	f7fd f8b1 	bl	8000d1c <HAL_GetTick>
 8003bba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d10e      	bne.n	8003be8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f82f 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e025      	b.n	8003c34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d10e      	bne.n	8003c14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f819 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e00f      	b.n	8003c34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b09c      	sub	sp, #112	; 0x70
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	e0a9      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c54:	f000 80a5 	beq.w	8003da2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fd f860 	bl	8000d1c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x32>
 8003c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d140      	bne.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c82:	667b      	str	r3, [r7, #100]	; 0x64
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e6      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e069      	b.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d051      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0c:	d149      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
 8003d38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e6      	bne.n	8003d18 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d6a:	623a      	str	r2, [r7, #32]
 8003d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	69f9      	ldr	r1, [r7, #28]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e010      	b.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	f43f af46 	beq.w	8003c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3770      	adds	r7, #112	; 0x70
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e027      	b.n	8003e32 <HAL_UARTEx_DisableFifoMode+0x66>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e02d      	b.n	8003eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f84f 	bl	8003f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e02d      	b.n	8003f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f811 	bl	8003f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f54:	e031      	b.n	8003fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f56:	2308      	movs	r3, #8
 8003f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	0e5b      	lsrs	r3, r3, #25
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	0f5b      	lsrs	r3, r3, #29
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	7b3a      	ldrb	r2, [r7, #12]
 8003f82:	4910      	ldr	r1, [pc, #64]	; (8003fc4 <UARTEx_SetNbDataToProcess+0x90>)
 8003f84:	5c8a      	ldrb	r2, [r1, r2]
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f8a:	7b3a      	ldrb	r2, [r7, #12]
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	7b7a      	ldrb	r2, [r7, #13]
 8003fa0:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <UARTEx_SetNbDataToProcess+0x90>)
 8003fa2:	5c8a      	ldrb	r2, [r1, r2]
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fa8:	7b7a      	ldrb	r2, [r7, #13]
 8003faa:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8003fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	08004a34 	.word	0x08004a34
 8003fc8:	08004a3c 	.word	0x08004a3c

08003fcc <__errno>:
 8003fcc:	4b01      	ldr	r3, [pc, #4]	; (8003fd4 <__errno+0x8>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c

08003fd8 <__libc_init_array>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4d0d      	ldr	r5, [pc, #52]	; (8004010 <__libc_init_array+0x38>)
 8003fdc:	4c0d      	ldr	r4, [pc, #52]	; (8004014 <__libc_init_array+0x3c>)
 8003fde:	1b64      	subs	r4, r4, r5
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	2600      	movs	r6, #0
 8003fe4:	42a6      	cmp	r6, r4
 8003fe6:	d109      	bne.n	8003ffc <__libc_init_array+0x24>
 8003fe8:	4d0b      	ldr	r5, [pc, #44]	; (8004018 <__libc_init_array+0x40>)
 8003fea:	4c0c      	ldr	r4, [pc, #48]	; (800401c <__libc_init_array+0x44>)
 8003fec:	f000 fc8c 	bl	8004908 <_init>
 8003ff0:	1b64      	subs	r4, r4, r5
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	2600      	movs	r6, #0
 8003ff6:	42a6      	cmp	r6, r4
 8003ff8:	d105      	bne.n	8004006 <__libc_init_array+0x2e>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004000:	4798      	blx	r3
 8004002:	3601      	adds	r6, #1
 8004004:	e7ee      	b.n	8003fe4 <__libc_init_array+0xc>
 8004006:	f855 3b04 	ldr.w	r3, [r5], #4
 800400a:	4798      	blx	r3
 800400c:	3601      	adds	r6, #1
 800400e:	e7f2      	b.n	8003ff6 <__libc_init_array+0x1e>
 8004010:	08004a80 	.word	0x08004a80
 8004014:	08004a80 	.word	0x08004a80
 8004018:	08004a80 	.word	0x08004a80
 800401c:	08004a84 	.word	0x08004a84

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <siprintf>:
 8004030:	b40e      	push	{r1, r2, r3}
 8004032:	b500      	push	{lr}
 8004034:	b09c      	sub	sp, #112	; 0x70
 8004036:	ab1d      	add	r3, sp, #116	; 0x74
 8004038:	9002      	str	r0, [sp, #8]
 800403a:	9006      	str	r0, [sp, #24]
 800403c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004040:	4809      	ldr	r0, [pc, #36]	; (8004068 <siprintf+0x38>)
 8004042:	9107      	str	r1, [sp, #28]
 8004044:	9104      	str	r1, [sp, #16]
 8004046:	4909      	ldr	r1, [pc, #36]	; (800406c <siprintf+0x3c>)
 8004048:	f853 2b04 	ldr.w	r2, [r3], #4
 800404c:	9105      	str	r1, [sp, #20]
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	a902      	add	r1, sp, #8
 8004054:	f000 f868 	bl	8004128 <_svfiprintf_r>
 8004058:	9b02      	ldr	r3, [sp, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	b01c      	add	sp, #112	; 0x70
 8004060:	f85d eb04 	ldr.w	lr, [sp], #4
 8004064:	b003      	add	sp, #12
 8004066:	4770      	bx	lr
 8004068:	2000000c 	.word	0x2000000c
 800406c:	ffff0208 	.word	0xffff0208

08004070 <__ssputs_r>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	688e      	ldr	r6, [r1, #8]
 8004076:	429e      	cmp	r6, r3
 8004078:	4682      	mov	sl, r0
 800407a:	460c      	mov	r4, r1
 800407c:	4690      	mov	r8, r2
 800407e:	461f      	mov	r7, r3
 8004080:	d838      	bhi.n	80040f4 <__ssputs_r+0x84>
 8004082:	898a      	ldrh	r2, [r1, #12]
 8004084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004088:	d032      	beq.n	80040f0 <__ssputs_r+0x80>
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	6909      	ldr	r1, [r1, #16]
 800408e:	eba5 0901 	sub.w	r9, r5, r1
 8004092:	6965      	ldr	r5, [r4, #20]
 8004094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409c:	3301      	adds	r3, #1
 800409e:	444b      	add	r3, r9
 80040a0:	106d      	asrs	r5, r5, #1
 80040a2:	429d      	cmp	r5, r3
 80040a4:	bf38      	it	cc
 80040a6:	461d      	movcc	r5, r3
 80040a8:	0553      	lsls	r3, r2, #21
 80040aa:	d531      	bpl.n	8004110 <__ssputs_r+0xa0>
 80040ac:	4629      	mov	r1, r5
 80040ae:	f000 fb61 	bl	8004774 <_malloc_r>
 80040b2:	4606      	mov	r6, r0
 80040b4:	b950      	cbnz	r0, 80040cc <__ssputs_r+0x5c>
 80040b6:	230c      	movs	r3, #12
 80040b8:	f8ca 3000 	str.w	r3, [sl]
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040cc:	6921      	ldr	r1, [r4, #16]
 80040ce:	464a      	mov	r2, r9
 80040d0:	f000 fabe 	bl	8004650 <memcpy>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	6126      	str	r6, [r4, #16]
 80040e2:	6165      	str	r5, [r4, #20]
 80040e4:	444e      	add	r6, r9
 80040e6:	eba5 0509 	sub.w	r5, r5, r9
 80040ea:	6026      	str	r6, [r4, #0]
 80040ec:	60a5      	str	r5, [r4, #8]
 80040ee:	463e      	mov	r6, r7
 80040f0:	42be      	cmp	r6, r7
 80040f2:	d900      	bls.n	80040f6 <__ssputs_r+0x86>
 80040f4:	463e      	mov	r6, r7
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	4632      	mov	r2, r6
 80040fa:	4641      	mov	r1, r8
 80040fc:	f000 fab6 	bl	800466c <memmove>
 8004100:	68a3      	ldr	r3, [r4, #8]
 8004102:	1b9b      	subs	r3, r3, r6
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	4433      	add	r3, r6
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	2000      	movs	r0, #0
 800410e:	e7db      	b.n	80040c8 <__ssputs_r+0x58>
 8004110:	462a      	mov	r2, r5
 8004112:	f000 fba3 	bl	800485c <_realloc_r>
 8004116:	4606      	mov	r6, r0
 8004118:	2800      	cmp	r0, #0
 800411a:	d1e1      	bne.n	80040e0 <__ssputs_r+0x70>
 800411c:	6921      	ldr	r1, [r4, #16]
 800411e:	4650      	mov	r0, sl
 8004120:	f000 fabe 	bl	80046a0 <_free_r>
 8004124:	e7c7      	b.n	80040b6 <__ssputs_r+0x46>
	...

08004128 <_svfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4698      	mov	r8, r3
 800412e:	898b      	ldrh	r3, [r1, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	b09d      	sub	sp, #116	; 0x74
 8004134:	4607      	mov	r7, r0
 8004136:	460d      	mov	r5, r1
 8004138:	4614      	mov	r4, r2
 800413a:	d50e      	bpl.n	800415a <_svfiprintf_r+0x32>
 800413c:	690b      	ldr	r3, [r1, #16]
 800413e:	b963      	cbnz	r3, 800415a <_svfiprintf_r+0x32>
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	f000 fb17 	bl	8004774 <_malloc_r>
 8004146:	6028      	str	r0, [r5, #0]
 8004148:	6128      	str	r0, [r5, #16]
 800414a:	b920      	cbnz	r0, 8004156 <_svfiprintf_r+0x2e>
 800414c:	230c      	movs	r3, #12
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004154:	e0d1      	b.n	80042fa <_svfiprintf_r+0x1d2>
 8004156:	2340      	movs	r3, #64	; 0x40
 8004158:	616b      	str	r3, [r5, #20]
 800415a:	2300      	movs	r3, #0
 800415c:	9309      	str	r3, [sp, #36]	; 0x24
 800415e:	2320      	movs	r3, #32
 8004160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004164:	f8cd 800c 	str.w	r8, [sp, #12]
 8004168:	2330      	movs	r3, #48	; 0x30
 800416a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004314 <_svfiprintf_r+0x1ec>
 800416e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004172:	f04f 0901 	mov.w	r9, #1
 8004176:	4623      	mov	r3, r4
 8004178:	469a      	mov	sl, r3
 800417a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800417e:	b10a      	cbz	r2, 8004184 <_svfiprintf_r+0x5c>
 8004180:	2a25      	cmp	r2, #37	; 0x25
 8004182:	d1f9      	bne.n	8004178 <_svfiprintf_r+0x50>
 8004184:	ebba 0b04 	subs.w	fp, sl, r4
 8004188:	d00b      	beq.n	80041a2 <_svfiprintf_r+0x7a>
 800418a:	465b      	mov	r3, fp
 800418c:	4622      	mov	r2, r4
 800418e:	4629      	mov	r1, r5
 8004190:	4638      	mov	r0, r7
 8004192:	f7ff ff6d 	bl	8004070 <__ssputs_r>
 8004196:	3001      	adds	r0, #1
 8004198:	f000 80aa 	beq.w	80042f0 <_svfiprintf_r+0x1c8>
 800419c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800419e:	445a      	add	r2, fp
 80041a0:	9209      	str	r2, [sp, #36]	; 0x24
 80041a2:	f89a 3000 	ldrb.w	r3, [sl]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80a2 	beq.w	80042f0 <_svfiprintf_r+0x1c8>
 80041ac:	2300      	movs	r3, #0
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b6:	f10a 0a01 	add.w	sl, sl, #1
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	9307      	str	r3, [sp, #28]
 80041be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041c2:	931a      	str	r3, [sp, #104]	; 0x68
 80041c4:	4654      	mov	r4, sl
 80041c6:	2205      	movs	r2, #5
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	4851      	ldr	r0, [pc, #324]	; (8004314 <_svfiprintf_r+0x1ec>)
 80041ce:	f7fb ffdf 	bl	8000190 <memchr>
 80041d2:	9a04      	ldr	r2, [sp, #16]
 80041d4:	b9d8      	cbnz	r0, 800420e <_svfiprintf_r+0xe6>
 80041d6:	06d0      	lsls	r0, r2, #27
 80041d8:	bf44      	itt	mi
 80041da:	2320      	movmi	r3, #32
 80041dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e0:	0711      	lsls	r1, r2, #28
 80041e2:	bf44      	itt	mi
 80041e4:	232b      	movmi	r3, #43	; 0x2b
 80041e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ea:	f89a 3000 	ldrb.w	r3, [sl]
 80041ee:	2b2a      	cmp	r3, #42	; 0x2a
 80041f0:	d015      	beq.n	800421e <_svfiprintf_r+0xf6>
 80041f2:	9a07      	ldr	r2, [sp, #28]
 80041f4:	4654      	mov	r4, sl
 80041f6:	2000      	movs	r0, #0
 80041f8:	f04f 0c0a 	mov.w	ip, #10
 80041fc:	4621      	mov	r1, r4
 80041fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004202:	3b30      	subs	r3, #48	; 0x30
 8004204:	2b09      	cmp	r3, #9
 8004206:	d94e      	bls.n	80042a6 <_svfiprintf_r+0x17e>
 8004208:	b1b0      	cbz	r0, 8004238 <_svfiprintf_r+0x110>
 800420a:	9207      	str	r2, [sp, #28]
 800420c:	e014      	b.n	8004238 <_svfiprintf_r+0x110>
 800420e:	eba0 0308 	sub.w	r3, r0, r8
 8004212:	fa09 f303 	lsl.w	r3, r9, r3
 8004216:	4313      	orrs	r3, r2
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	46a2      	mov	sl, r4
 800421c:	e7d2      	b.n	80041c4 <_svfiprintf_r+0x9c>
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	9103      	str	r1, [sp, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfbb      	ittet	lt
 800422a:	425b      	neglt	r3, r3
 800422c:	f042 0202 	orrlt.w	r2, r2, #2
 8004230:	9307      	strge	r3, [sp, #28]
 8004232:	9307      	strlt	r3, [sp, #28]
 8004234:	bfb8      	it	lt
 8004236:	9204      	strlt	r2, [sp, #16]
 8004238:	7823      	ldrb	r3, [r4, #0]
 800423a:	2b2e      	cmp	r3, #46	; 0x2e
 800423c:	d10c      	bne.n	8004258 <_svfiprintf_r+0x130>
 800423e:	7863      	ldrb	r3, [r4, #1]
 8004240:	2b2a      	cmp	r3, #42	; 0x2a
 8004242:	d135      	bne.n	80042b0 <_svfiprintf_r+0x188>
 8004244:	9b03      	ldr	r3, [sp, #12]
 8004246:	1d1a      	adds	r2, r3, #4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	9203      	str	r2, [sp, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	bfb8      	it	lt
 8004250:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004254:	3402      	adds	r4, #2
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004318 <_svfiprintf_r+0x1f0>
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	2203      	movs	r2, #3
 8004260:	4650      	mov	r0, sl
 8004262:	f7fb ff95 	bl	8000190 <memchr>
 8004266:	b140      	cbz	r0, 800427a <_svfiprintf_r+0x152>
 8004268:	2340      	movs	r3, #64	; 0x40
 800426a:	eba0 000a 	sub.w	r0, r0, sl
 800426e:	fa03 f000 	lsl.w	r0, r3, r0
 8004272:	9b04      	ldr	r3, [sp, #16]
 8004274:	4303      	orrs	r3, r0
 8004276:	3401      	adds	r4, #1
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427e:	4827      	ldr	r0, [pc, #156]	; (800431c <_svfiprintf_r+0x1f4>)
 8004280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004284:	2206      	movs	r2, #6
 8004286:	f7fb ff83 	bl	8000190 <memchr>
 800428a:	2800      	cmp	r0, #0
 800428c:	d038      	beq.n	8004300 <_svfiprintf_r+0x1d8>
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <_svfiprintf_r+0x1f8>)
 8004290:	bb1b      	cbnz	r3, 80042da <_svfiprintf_r+0x1b2>
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	3307      	adds	r3, #7
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	3308      	adds	r3, #8
 800429c:	9303      	str	r3, [sp, #12]
 800429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a0:	4433      	add	r3, r6
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	e767      	b.n	8004176 <_svfiprintf_r+0x4e>
 80042a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042aa:	460c      	mov	r4, r1
 80042ac:	2001      	movs	r0, #1
 80042ae:	e7a5      	b.n	80041fc <_svfiprintf_r+0xd4>
 80042b0:	2300      	movs	r3, #0
 80042b2:	3401      	adds	r4, #1
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 0c0a 	mov.w	ip, #10
 80042bc:	4620      	mov	r0, r4
 80042be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c2:	3a30      	subs	r2, #48	; 0x30
 80042c4:	2a09      	cmp	r2, #9
 80042c6:	d903      	bls.n	80042d0 <_svfiprintf_r+0x1a8>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0c5      	beq.n	8004258 <_svfiprintf_r+0x130>
 80042cc:	9105      	str	r1, [sp, #20]
 80042ce:	e7c3      	b.n	8004258 <_svfiprintf_r+0x130>
 80042d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d4:	4604      	mov	r4, r0
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f0      	b.n	80042bc <_svfiprintf_r+0x194>
 80042da:	ab03      	add	r3, sp, #12
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	462a      	mov	r2, r5
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <_svfiprintf_r+0x1fc>)
 80042e2:	a904      	add	r1, sp, #16
 80042e4:	4638      	mov	r0, r7
 80042e6:	f3af 8000 	nop.w
 80042ea:	1c42      	adds	r2, r0, #1
 80042ec:	4606      	mov	r6, r0
 80042ee:	d1d6      	bne.n	800429e <_svfiprintf_r+0x176>
 80042f0:	89ab      	ldrh	r3, [r5, #12]
 80042f2:	065b      	lsls	r3, r3, #25
 80042f4:	f53f af2c 	bmi.w	8004150 <_svfiprintf_r+0x28>
 80042f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fa:	b01d      	add	sp, #116	; 0x74
 80042fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004300:	ab03      	add	r3, sp, #12
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	462a      	mov	r2, r5
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <_svfiprintf_r+0x1fc>)
 8004308:	a904      	add	r1, sp, #16
 800430a:	4638      	mov	r0, r7
 800430c:	f000 f87a 	bl	8004404 <_printf_i>
 8004310:	e7eb      	b.n	80042ea <_svfiprintf_r+0x1c2>
 8004312:	bf00      	nop
 8004314:	08004a44 	.word	0x08004a44
 8004318:	08004a4a 	.word	0x08004a4a
 800431c:	08004a4e 	.word	0x08004a4e
 8004320:	00000000 	.word	0x00000000
 8004324:	08004071 	.word	0x08004071

08004328 <_printf_common>:
 8004328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	4616      	mov	r6, r2
 800432e:	4699      	mov	r9, r3
 8004330:	688a      	ldr	r2, [r1, #8]
 8004332:	690b      	ldr	r3, [r1, #16]
 8004334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004338:	4293      	cmp	r3, r2
 800433a:	bfb8      	it	lt
 800433c:	4613      	movlt	r3, r2
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004344:	4607      	mov	r7, r0
 8004346:	460c      	mov	r4, r1
 8004348:	b10a      	cbz	r2, 800434e <_printf_common+0x26>
 800434a:	3301      	adds	r3, #1
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	0699      	lsls	r1, r3, #26
 8004352:	bf42      	ittt	mi
 8004354:	6833      	ldrmi	r3, [r6, #0]
 8004356:	3302      	addmi	r3, #2
 8004358:	6033      	strmi	r3, [r6, #0]
 800435a:	6825      	ldr	r5, [r4, #0]
 800435c:	f015 0506 	ands.w	r5, r5, #6
 8004360:	d106      	bne.n	8004370 <_printf_common+0x48>
 8004362:	f104 0a19 	add.w	sl, r4, #25
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	6832      	ldr	r2, [r6, #0]
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	42ab      	cmp	r3, r5
 800436e:	dc26      	bgt.n	80043be <_printf_common+0x96>
 8004370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004374:	1e13      	subs	r3, r2, #0
 8004376:	6822      	ldr	r2, [r4, #0]
 8004378:	bf18      	it	ne
 800437a:	2301      	movne	r3, #1
 800437c:	0692      	lsls	r2, r2, #26
 800437e:	d42b      	bmi.n	80043d8 <_printf_common+0xb0>
 8004380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004384:	4649      	mov	r1, r9
 8004386:	4638      	mov	r0, r7
 8004388:	47c0      	blx	r8
 800438a:	3001      	adds	r0, #1
 800438c:	d01e      	beq.n	80043cc <_printf_common+0xa4>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	68e5      	ldr	r5, [r4, #12]
 8004392:	6832      	ldr	r2, [r6, #0]
 8004394:	f003 0306 	and.w	r3, r3, #6
 8004398:	2b04      	cmp	r3, #4
 800439a:	bf08      	it	eq
 800439c:	1aad      	subeq	r5, r5, r2
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	6922      	ldr	r2, [r4, #16]
 80043a2:	bf0c      	ite	eq
 80043a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a8:	2500      	movne	r5, #0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfc4      	itt	gt
 80043ae:	1a9b      	subgt	r3, r3, r2
 80043b0:	18ed      	addgt	r5, r5, r3
 80043b2:	2600      	movs	r6, #0
 80043b4:	341a      	adds	r4, #26
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	d11a      	bne.n	80043f0 <_printf_common+0xc8>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e008      	b.n	80043d0 <_printf_common+0xa8>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4649      	mov	r1, r9
 80043c4:	4638      	mov	r0, r7
 80043c6:	47c0      	blx	r8
 80043c8:	3001      	adds	r0, #1
 80043ca:	d103      	bne.n	80043d4 <_printf_common+0xac>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7c6      	b.n	8004366 <_printf_common+0x3e>
 80043d8:	18e1      	adds	r1, r4, r3
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	2030      	movs	r0, #48	; 0x30
 80043de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e2:	4422      	add	r2, r4
 80043e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ec:	3302      	adds	r3, #2
 80043ee:	e7c7      	b.n	8004380 <_printf_common+0x58>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4622      	mov	r2, r4
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c0      	blx	r8
 80043fa:	3001      	adds	r0, #1
 80043fc:	d0e6      	beq.n	80043cc <_printf_common+0xa4>
 80043fe:	3601      	adds	r6, #1
 8004400:	e7d9      	b.n	80043b6 <_printf_common+0x8e>
	...

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800440c:	2f78      	cmp	r7, #120	; 0x78
 800440e:	4691      	mov	r9, r2
 8004410:	4680      	mov	r8, r0
 8004412:	460c      	mov	r4, r1
 8004414:	469a      	mov	sl, r3
 8004416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	; 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d8 	beq.w	80045d6 <_printf_i+0x1d2>
 8004426:	2f58      	cmp	r7, #88	; 0x58
 8004428:	f000 80a3 	beq.w	8004572 <_printf_i+0x16e>
 800442c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	; (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045bd 	.word	0x080045bd
 8004474:	080044e1 	.word	0x080044e1
 8004478:	0800459f 	.word	0x0800459f
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045df 	.word	0x080045df
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044e1 	.word	0x080044e1
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	080045a7 	.word	0x080045a7
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	602a      	str	r2, [r5, #0]
 80044a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0a3      	b.n	80045f8 <_printf_i+0x1f4>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	6829      	ldr	r1, [r5, #0]
 80044b4:	0606      	lsls	r6, r0, #24
 80044b6:	f101 0304 	add.w	r3, r1, #4
 80044ba:	d50a      	bpl.n	80044d2 <_printf_i+0xce>
 80044bc:	680e      	ldr	r6, [r1, #0]
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	da03      	bge.n	80044cc <_printf_i+0xc8>
 80044c4:	232d      	movs	r3, #45	; 0x2d
 80044c6:	4276      	negs	r6, r6
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044cc:	485e      	ldr	r0, [pc, #376]	; (8004648 <_printf_i+0x244>)
 80044ce:	230a      	movs	r3, #10
 80044d0:	e019      	b.n	8004506 <_printf_i+0x102>
 80044d2:	680e      	ldr	r6, [r1, #0]
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044da:	bf18      	it	ne
 80044dc:	b236      	sxthne	r6, r6
 80044de:	e7ef      	b.n	80044c0 <_printf_i+0xbc>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0601      	lsls	r1, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xec>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xf2>
 80044f0:	0646      	lsls	r6, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe8>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	4854      	ldr	r0, [pc, #336]	; (8004648 <_printf_i+0x244>)
 80044f8:	2f6f      	cmp	r7, #111	; 0x6f
 80044fa:	bf0c      	ite	eq
 80044fc:	2308      	moveq	r3, #8
 80044fe:	230a      	movne	r3, #10
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	60a5      	str	r5, [r4, #8]
 800450a:	2d00      	cmp	r5, #0
 800450c:	bfa2      	ittt	ge
 800450e:	6821      	ldrge	r1, [r4, #0]
 8004510:	f021 0104 	bicge.w	r1, r1, #4
 8004514:	6021      	strge	r1, [r4, #0]
 8004516:	b90e      	cbnz	r6, 800451c <_printf_i+0x118>
 8004518:	2d00      	cmp	r5, #0
 800451a:	d04d      	beq.n	80045b8 <_printf_i+0x1b4>
 800451c:	4615      	mov	r5, r2
 800451e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004522:	fb03 6711 	mls	r7, r3, r1, r6
 8004526:	5dc7      	ldrb	r7, [r0, r7]
 8004528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452c:	4637      	mov	r7, r6
 800452e:	42bb      	cmp	r3, r7
 8004530:	460e      	mov	r6, r1
 8004532:	d9f4      	bls.n	800451e <_printf_i+0x11a>
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <_printf_i+0x14c>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07de      	lsls	r6, r3, #31
 800453c:	d508      	bpl.n	8004550 <_printf_i+0x14c>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6861      	ldr	r1, [r4, #4]
 8004542:	4299      	cmp	r1, r3
 8004544:	bfde      	ittt	le
 8004546:	2330      	movle	r3, #48	; 0x30
 8004548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	6122      	str	r2, [r4, #16]
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	464b      	mov	r3, r9
 800455a:	aa03      	add	r2, sp, #12
 800455c:	4621      	mov	r1, r4
 800455e:	4640      	mov	r0, r8
 8004560:	f7ff fee2 	bl	8004328 <_printf_common>
 8004564:	3001      	adds	r0, #1
 8004566:	d14c      	bne.n	8004602 <_printf_i+0x1fe>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	b004      	add	sp, #16
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	4835      	ldr	r0, [pc, #212]	; (8004648 <_printf_i+0x244>)
 8004574:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004578:	6829      	ldr	r1, [r5, #0]
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004580:	6029      	str	r1, [r5, #0]
 8004582:	061d      	lsls	r5, r3, #24
 8004584:	d514      	bpl.n	80045b0 <_printf_i+0x1ac>
 8004586:	07df      	lsls	r7, r3, #31
 8004588:	bf44      	itt	mi
 800458a:	f043 0320 	orrmi.w	r3, r3, #32
 800458e:	6023      	strmi	r3, [r4, #0]
 8004590:	b91e      	cbnz	r6, 800459a <_printf_i+0x196>
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	f023 0320 	bic.w	r3, r3, #32
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	2310      	movs	r3, #16
 800459c:	e7b0      	b.n	8004500 <_printf_i+0xfc>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f043 0320 	orr.w	r3, r3, #32
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	2378      	movs	r3, #120	; 0x78
 80045a8:	4828      	ldr	r0, [pc, #160]	; (800464c <_printf_i+0x248>)
 80045aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ae:	e7e3      	b.n	8004578 <_printf_i+0x174>
 80045b0:	0659      	lsls	r1, r3, #25
 80045b2:	bf48      	it	mi
 80045b4:	b2b6      	uxthmi	r6, r6
 80045b6:	e7e6      	b.n	8004586 <_printf_i+0x182>
 80045b8:	4615      	mov	r5, r2
 80045ba:	e7bb      	b.n	8004534 <_printf_i+0x130>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	6826      	ldr	r6, [r4, #0]
 80045c0:	6961      	ldr	r1, [r4, #20]
 80045c2:	1d18      	adds	r0, r3, #4
 80045c4:	6028      	str	r0, [r5, #0]
 80045c6:	0635      	lsls	r5, r6, #24
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	d501      	bpl.n	80045d0 <_printf_i+0x1cc>
 80045cc:	6019      	str	r1, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <_printf_i+0x1d2>
 80045d0:	0670      	lsls	r0, r6, #25
 80045d2:	d5fb      	bpl.n	80045cc <_printf_i+0x1c8>
 80045d4:	8019      	strh	r1, [r3, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	4615      	mov	r5, r2
 80045dc:	e7ba      	b.n	8004554 <_printf_i+0x150>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	602a      	str	r2, [r5, #0]
 80045e4:	681d      	ldr	r5, [r3, #0]
 80045e6:	6862      	ldr	r2, [r4, #4]
 80045e8:	2100      	movs	r1, #0
 80045ea:	4628      	mov	r0, r5
 80045ec:	f7fb fdd0 	bl	8000190 <memchr>
 80045f0:	b108      	cbz	r0, 80045f6 <_printf_i+0x1f2>
 80045f2:	1b40      	subs	r0, r0, r5
 80045f4:	6060      	str	r0, [r4, #4]
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	2300      	movs	r3, #0
 80045fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004600:	e7a8      	b.n	8004554 <_printf_i+0x150>
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	462a      	mov	r2, r5
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	47d0      	blx	sl
 800460c:	3001      	adds	r0, #1
 800460e:	d0ab      	beq.n	8004568 <_printf_i+0x164>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	079b      	lsls	r3, r3, #30
 8004614:	d413      	bmi.n	800463e <_printf_i+0x23a>
 8004616:	68e0      	ldr	r0, [r4, #12]
 8004618:	9b03      	ldr	r3, [sp, #12]
 800461a:	4298      	cmp	r0, r3
 800461c:	bfb8      	it	lt
 800461e:	4618      	movlt	r0, r3
 8004620:	e7a4      	b.n	800456c <_printf_i+0x168>
 8004622:	2301      	movs	r3, #1
 8004624:	4632      	mov	r2, r6
 8004626:	4649      	mov	r1, r9
 8004628:	4640      	mov	r0, r8
 800462a:	47d0      	blx	sl
 800462c:	3001      	adds	r0, #1
 800462e:	d09b      	beq.n	8004568 <_printf_i+0x164>
 8004630:	3501      	adds	r5, #1
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	9903      	ldr	r1, [sp, #12]
 8004636:	1a5b      	subs	r3, r3, r1
 8004638:	42ab      	cmp	r3, r5
 800463a:	dcf2      	bgt.n	8004622 <_printf_i+0x21e>
 800463c:	e7eb      	b.n	8004616 <_printf_i+0x212>
 800463e:	2500      	movs	r5, #0
 8004640:	f104 0619 	add.w	r6, r4, #25
 8004644:	e7f5      	b.n	8004632 <_printf_i+0x22e>
 8004646:	bf00      	nop
 8004648:	08004a55 	.word	0x08004a55
 800464c:	08004a66 	.word	0x08004a66

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004666:	4291      	cmp	r1, r2
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <memmove>:
 800466c:	4288      	cmp	r0, r1
 800466e:	b510      	push	{r4, lr}
 8004670:	eb01 0402 	add.w	r4, r1, r2
 8004674:	d902      	bls.n	800467c <memmove+0x10>
 8004676:	4284      	cmp	r4, r0
 8004678:	4623      	mov	r3, r4
 800467a:	d807      	bhi.n	800468c <memmove+0x20>
 800467c:	1e43      	subs	r3, r0, #1
 800467e:	42a1      	cmp	r1, r4
 8004680:	d008      	beq.n	8004694 <memmove+0x28>
 8004682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468a:	e7f8      	b.n	800467e <memmove+0x12>
 800468c:	4402      	add	r2, r0
 800468e:	4601      	mov	r1, r0
 8004690:	428a      	cmp	r2, r1
 8004692:	d100      	bne.n	8004696 <memmove+0x2a>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800469e:	e7f7      	b.n	8004690 <memmove+0x24>

080046a0 <_free_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4605      	mov	r5, r0
 80046a4:	2900      	cmp	r1, #0
 80046a6:	d041      	beq.n	800472c <_free_r+0x8c>
 80046a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ac:	1f0c      	subs	r4, r1, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfb8      	it	lt
 80046b2:	18e4      	addlt	r4, r4, r3
 80046b4:	f000 f912 	bl	80048dc <__malloc_lock>
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <_free_r+0x90>)
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	b933      	cbnz	r3, 80046cc <_free_r+0x2c>
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6014      	str	r4, [r2, #0]
 80046c2:	4628      	mov	r0, r5
 80046c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c8:	f000 b90e 	b.w	80048e8 <__malloc_unlock>
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d908      	bls.n	80046e2 <_free_r+0x42>
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	1821      	adds	r1, r4, r0
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf01      	itttt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	1809      	addeq	r1, r1, r0
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	e7ed      	b.n	80046be <_free_r+0x1e>
 80046e2:	461a      	mov	r2, r3
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b10b      	cbz	r3, 80046ec <_free_r+0x4c>
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x42>
 80046ec:	6811      	ldr	r1, [r2, #0]
 80046ee:	1850      	adds	r0, r2, r1
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x6c>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	4401      	add	r1, r0
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	4283      	cmp	r3, r0
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	d1e0      	bne.n	80046c2 <_free_r+0x22>
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	6053      	str	r3, [r2, #4]
 8004706:	4401      	add	r1, r0
 8004708:	6011      	str	r1, [r2, #0]
 800470a:	e7da      	b.n	80046c2 <_free_r+0x22>
 800470c:	d902      	bls.n	8004714 <_free_r+0x74>
 800470e:	230c      	movs	r3, #12
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	e7d6      	b.n	80046c2 <_free_r+0x22>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428b      	cmp	r3, r1
 800471a:	bf04      	itt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	bf04      	itt	eq
 8004724:	1809      	addeq	r1, r1, r0
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	6054      	str	r4, [r2, #4]
 800472a:	e7ca      	b.n	80046c2 <_free_r+0x22>
 800472c:	bd38      	pop	{r3, r4, r5, pc}
 800472e:	bf00      	nop
 8004730:	20000200 	.word	0x20000200

08004734 <sbrk_aligned>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4e0e      	ldr	r6, [pc, #56]	; (8004770 <sbrk_aligned+0x3c>)
 8004738:	460c      	mov	r4, r1
 800473a:	6831      	ldr	r1, [r6, #0]
 800473c:	4605      	mov	r5, r0
 800473e:	b911      	cbnz	r1, 8004746 <sbrk_aligned+0x12>
 8004740:	f000 f8bc 	bl	80048bc <_sbrk_r>
 8004744:	6030      	str	r0, [r6, #0]
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f8b7 	bl	80048bc <_sbrk_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d00a      	beq.n	8004768 <sbrk_aligned+0x34>
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	42a0      	cmp	r0, r4
 800475a:	d007      	beq.n	800476c <sbrk_aligned+0x38>
 800475c:	1a21      	subs	r1, r4, r0
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f8ac 	bl	80048bc <_sbrk_r>
 8004764:	3001      	adds	r0, #1
 8004766:	d101      	bne.n	800476c <sbrk_aligned+0x38>
 8004768:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800476c:	4620      	mov	r0, r4
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	20000204 	.word	0x20000204

08004774 <_malloc_r>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	1ccd      	adds	r5, r1, #3
 800477a:	f025 0503 	bic.w	r5, r5, #3
 800477e:	3508      	adds	r5, #8
 8004780:	2d0c      	cmp	r5, #12
 8004782:	bf38      	it	cc
 8004784:	250c      	movcc	r5, #12
 8004786:	2d00      	cmp	r5, #0
 8004788:	4607      	mov	r7, r0
 800478a:	db01      	blt.n	8004790 <_malloc_r+0x1c>
 800478c:	42a9      	cmp	r1, r5
 800478e:	d905      	bls.n	800479c <_malloc_r+0x28>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	2600      	movs	r6, #0
 8004796:	4630      	mov	r0, r6
 8004798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800479c:	4e2e      	ldr	r6, [pc, #184]	; (8004858 <_malloc_r+0xe4>)
 800479e:	f000 f89d 	bl	80048dc <__malloc_lock>
 80047a2:	6833      	ldr	r3, [r6, #0]
 80047a4:	461c      	mov	r4, r3
 80047a6:	bb34      	cbnz	r4, 80047f6 <_malloc_r+0x82>
 80047a8:	4629      	mov	r1, r5
 80047aa:	4638      	mov	r0, r7
 80047ac:	f7ff ffc2 	bl	8004734 <sbrk_aligned>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	4604      	mov	r4, r0
 80047b4:	d14d      	bne.n	8004852 <_malloc_r+0xde>
 80047b6:	6834      	ldr	r4, [r6, #0]
 80047b8:	4626      	mov	r6, r4
 80047ba:	2e00      	cmp	r6, #0
 80047bc:	d140      	bne.n	8004840 <_malloc_r+0xcc>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	4631      	mov	r1, r6
 80047c2:	4638      	mov	r0, r7
 80047c4:	eb04 0803 	add.w	r8, r4, r3
 80047c8:	f000 f878 	bl	80048bc <_sbrk_r>
 80047cc:	4580      	cmp	r8, r0
 80047ce:	d13a      	bne.n	8004846 <_malloc_r+0xd2>
 80047d0:	6821      	ldr	r1, [r4, #0]
 80047d2:	3503      	adds	r5, #3
 80047d4:	1a6d      	subs	r5, r5, r1
 80047d6:	f025 0503 	bic.w	r5, r5, #3
 80047da:	3508      	adds	r5, #8
 80047dc:	2d0c      	cmp	r5, #12
 80047de:	bf38      	it	cc
 80047e0:	250c      	movcc	r5, #12
 80047e2:	4629      	mov	r1, r5
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ffa5 	bl	8004734 <sbrk_aligned>
 80047ea:	3001      	adds	r0, #1
 80047ec:	d02b      	beq.n	8004846 <_malloc_r+0xd2>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	442b      	add	r3, r5
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	e00e      	b.n	8004814 <_malloc_r+0xa0>
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	1b52      	subs	r2, r2, r5
 80047fa:	d41e      	bmi.n	800483a <_malloc_r+0xc6>
 80047fc:	2a0b      	cmp	r2, #11
 80047fe:	d916      	bls.n	800482e <_malloc_r+0xba>
 8004800:	1961      	adds	r1, r4, r5
 8004802:	42a3      	cmp	r3, r4
 8004804:	6025      	str	r5, [r4, #0]
 8004806:	bf18      	it	ne
 8004808:	6059      	strne	r1, [r3, #4]
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	bf08      	it	eq
 800480e:	6031      	streq	r1, [r6, #0]
 8004810:	5162      	str	r2, [r4, r5]
 8004812:	604b      	str	r3, [r1, #4]
 8004814:	4638      	mov	r0, r7
 8004816:	f104 060b 	add.w	r6, r4, #11
 800481a:	f000 f865 	bl	80048e8 <__malloc_unlock>
 800481e:	f026 0607 	bic.w	r6, r6, #7
 8004822:	1d23      	adds	r3, r4, #4
 8004824:	1af2      	subs	r2, r6, r3
 8004826:	d0b6      	beq.n	8004796 <_malloc_r+0x22>
 8004828:	1b9b      	subs	r3, r3, r6
 800482a:	50a3      	str	r3, [r4, r2]
 800482c:	e7b3      	b.n	8004796 <_malloc_r+0x22>
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	42a3      	cmp	r3, r4
 8004832:	bf0c      	ite	eq
 8004834:	6032      	streq	r2, [r6, #0]
 8004836:	605a      	strne	r2, [r3, #4]
 8004838:	e7ec      	b.n	8004814 <_malloc_r+0xa0>
 800483a:	4623      	mov	r3, r4
 800483c:	6864      	ldr	r4, [r4, #4]
 800483e:	e7b2      	b.n	80047a6 <_malloc_r+0x32>
 8004840:	4634      	mov	r4, r6
 8004842:	6876      	ldr	r6, [r6, #4]
 8004844:	e7b9      	b.n	80047ba <_malloc_r+0x46>
 8004846:	230c      	movs	r3, #12
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	4638      	mov	r0, r7
 800484c:	f000 f84c 	bl	80048e8 <__malloc_unlock>
 8004850:	e7a1      	b.n	8004796 <_malloc_r+0x22>
 8004852:	6025      	str	r5, [r4, #0]
 8004854:	e7de      	b.n	8004814 <_malloc_r+0xa0>
 8004856:	bf00      	nop
 8004858:	20000200 	.word	0x20000200

0800485c <_realloc_r>:
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	4680      	mov	r8, r0
 8004862:	4614      	mov	r4, r2
 8004864:	460e      	mov	r6, r1
 8004866:	b921      	cbnz	r1, 8004872 <_realloc_r+0x16>
 8004868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	4611      	mov	r1, r2
 800486e:	f7ff bf81 	b.w	8004774 <_malloc_r>
 8004872:	b92a      	cbnz	r2, 8004880 <_realloc_r+0x24>
 8004874:	f7ff ff14 	bl	80046a0 <_free_r>
 8004878:	4625      	mov	r5, r4
 800487a:	4628      	mov	r0, r5
 800487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004880:	f000 f838 	bl	80048f4 <_malloc_usable_size_r>
 8004884:	4284      	cmp	r4, r0
 8004886:	4607      	mov	r7, r0
 8004888:	d802      	bhi.n	8004890 <_realloc_r+0x34>
 800488a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800488e:	d812      	bhi.n	80048b6 <_realloc_r+0x5a>
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff ff6e 	bl	8004774 <_malloc_r>
 8004898:	4605      	mov	r5, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	d0ed      	beq.n	800487a <_realloc_r+0x1e>
 800489e:	42bc      	cmp	r4, r7
 80048a0:	4622      	mov	r2, r4
 80048a2:	4631      	mov	r1, r6
 80048a4:	bf28      	it	cs
 80048a6:	463a      	movcs	r2, r7
 80048a8:	f7ff fed2 	bl	8004650 <memcpy>
 80048ac:	4631      	mov	r1, r6
 80048ae:	4640      	mov	r0, r8
 80048b0:	f7ff fef6 	bl	80046a0 <_free_r>
 80048b4:	e7e1      	b.n	800487a <_realloc_r+0x1e>
 80048b6:	4635      	mov	r5, r6
 80048b8:	e7df      	b.n	800487a <_realloc_r+0x1e>
	...

080048bc <_sbrk_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4d06      	ldr	r5, [pc, #24]	; (80048d8 <_sbrk_r+0x1c>)
 80048c0:	2300      	movs	r3, #0
 80048c2:	4604      	mov	r4, r0
 80048c4:	4608      	mov	r0, r1
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	f7fc f95c 	bl	8000b84 <_sbrk>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d102      	bne.n	80048d6 <_sbrk_r+0x1a>
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	b103      	cbz	r3, 80048d6 <_sbrk_r+0x1a>
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	20000208 	.word	0x20000208

080048dc <__malloc_lock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_lock+0x8>)
 80048de:	f000 b811 	b.w	8004904 <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	2000020c 	.word	0x2000020c

080048e8 <__malloc_unlock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <__malloc_unlock+0x8>)
 80048ea:	f000 b80c 	b.w	8004906 <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	2000020c 	.word	0x2000020c

080048f4 <_malloc_usable_size_r>:
 80048f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f8:	1f18      	subs	r0, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bfbc      	itt	lt
 80048fe:	580b      	ldrlt	r3, [r1, r0]
 8004900:	18c0      	addlt	r0, r0, r3
 8004902:	4770      	bx	lr

08004904 <__retarget_lock_acquire_recursive>:
 8004904:	4770      	bx	lr

08004906 <__retarget_lock_release_recursive>:
 8004906:	4770      	bx	lr

08004908 <_init>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr

08004914 <_fini>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr
