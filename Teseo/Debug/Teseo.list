
Teseo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e98c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800ead0  0800ead0  0001ead0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f298  0800f298  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f298  0800f298  0001f298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2a0  0800f2a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2a0  0800f2a0  0001f2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2a4  0800f2a4  0001f2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fdc  200001e8  0800f48c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011c4  0800f48c  000211c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172d4  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b52  00000000  00000000  000374e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f37d  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fa2  00000000  00000000  0005cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5020  00000000  00000000  00072aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127b1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e0c  00000000  00000000  00127b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eab4 	.word	0x0800eab4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800eab4 	.word	0x0800eab4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_fmul>:
 8000250:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000254:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000258:	bf1e      	ittt	ne
 800025a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800025e:	ea92 0f0c 	teqne	r2, ip
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d06f      	beq.n	8000348 <__aeabi_fmul+0xf8>
 8000268:	441a      	add	r2, r3
 800026a:	ea80 0c01 	eor.w	ip, r0, r1
 800026e:	0240      	lsls	r0, r0, #9
 8000270:	bf18      	it	ne
 8000272:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000276:	d01e      	beq.n	80002b6 <__aeabi_fmul+0x66>
 8000278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800027c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000280:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000284:	fba0 3101 	umull	r3, r1, r0, r1
 8000288:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800028c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000290:	bf3e      	ittt	cc
 8000292:	0049      	lslcc	r1, r1, #1
 8000294:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000298:	005b      	lslcc	r3, r3, #1
 800029a:	ea40 0001 	orr.w	r0, r0, r1
 800029e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002a2:	2afd      	cmp	r2, #253	; 0xfd
 80002a4:	d81d      	bhi.n	80002e2 <__aeabi_fmul+0x92>
 80002a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ae:	bf08      	it	eq
 80002b0:	f020 0001 	biceq.w	r0, r0, #1
 80002b4:	4770      	bx	lr
 80002b6:	f090 0f00 	teq	r0, #0
 80002ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002be:	bf08      	it	eq
 80002c0:	0249      	lsleq	r1, r1, #9
 80002c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ca:	3a7f      	subs	r2, #127	; 0x7f
 80002cc:	bfc2      	ittt	gt
 80002ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002d6:	4770      	bxgt	lr
 80002d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	3a01      	subs	r2, #1
 80002e2:	dc5d      	bgt.n	80003a0 <__aeabi_fmul+0x150>
 80002e4:	f112 0f19 	cmn.w	r2, #25
 80002e8:	bfdc      	itt	le
 80002ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ee:	4770      	bxle	lr
 80002f0:	f1c2 0200 	rsb	r2, r2, #0
 80002f4:	0041      	lsls	r1, r0, #1
 80002f6:	fa21 f102 	lsr.w	r1, r1, r2
 80002fa:	f1c2 0220 	rsb	r2, r2, #32
 80002fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000302:	ea5f 0031 	movs.w	r0, r1, rrx
 8000306:	f140 0000 	adc.w	r0, r0, #0
 800030a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800030e:	bf08      	it	eq
 8000310:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000314:	4770      	bx	lr
 8000316:	f092 0f00 	teq	r2, #0
 800031a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0040      	lsleq	r0, r0, #1
 8000322:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000326:	3a01      	subeq	r2, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xce>
 800032a:	ea40 000c 	orr.w	r0, r0, ip
 800032e:	f093 0f00 	teq	r3, #0
 8000332:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000336:	bf02      	ittt	eq
 8000338:	0049      	lsleq	r1, r1, #1
 800033a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800033e:	3b01      	subeq	r3, #1
 8000340:	d0f9      	beq.n	8000336 <__aeabi_fmul+0xe6>
 8000342:	ea41 010c 	orr.w	r1, r1, ip
 8000346:	e78f      	b.n	8000268 <__aeabi_fmul+0x18>
 8000348:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800034c:	ea92 0f0c 	teq	r2, ip
 8000350:	bf18      	it	ne
 8000352:	ea93 0f0c 	teqne	r3, ip
 8000356:	d00a      	beq.n	800036e <__aeabi_fmul+0x11e>
 8000358:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800035c:	bf18      	it	ne
 800035e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000362:	d1d8      	bne.n	8000316 <__aeabi_fmul+0xc6>
 8000364:	ea80 0001 	eor.w	r0, r0, r1
 8000368:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800036c:	4770      	bx	lr
 800036e:	f090 0f00 	teq	r0, #0
 8000372:	bf17      	itett	ne
 8000374:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000378:	4608      	moveq	r0, r1
 800037a:	f091 0f00 	teqne	r1, #0
 800037e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000382:	d014      	beq.n	80003ae <__aeabi_fmul+0x15e>
 8000384:	ea92 0f0c 	teq	r2, ip
 8000388:	d101      	bne.n	800038e <__aeabi_fmul+0x13e>
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	d10f      	bne.n	80003ae <__aeabi_fmul+0x15e>
 800038e:	ea93 0f0c 	teq	r3, ip
 8000392:	d103      	bne.n	800039c <__aeabi_fmul+0x14c>
 8000394:	024b      	lsls	r3, r1, #9
 8000396:	bf18      	it	ne
 8000398:	4608      	movne	r0, r1
 800039a:	d108      	bne.n	80003ae <__aeabi_fmul+0x15e>
 800039c:	ea80 0001 	eor.w	r0, r0, r1
 80003a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ac:	4770      	bx	lr
 80003ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003b6:	4770      	bx	lr

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	; 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	3c01      	subs	r4, #1
 80004f4:	bf28      	it	cs
 80004f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fa:	d2e9      	bcs.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a2:	bf08      	it	eq
 80006a4:	4770      	bxeq	lr
 80006a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006aa:	bf04      	itt	eq
 80006ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	e71c      	b.n	80004fc <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aed8 	beq.w	80004aa <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6bd      	b.n	80004aa <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__aeabi_dmul>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8de 	bleq	800090c <__aeabi_dmul+0x1dc>
 8000750:	442c      	add	r4, r5
 8000752:	ea81 0603 	eor.w	r6, r1, r3
 8000756:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800075a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800075e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000762:	bf18      	it	ne
 8000764:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800076c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000770:	d038      	beq.n	80007e4 <__aeabi_dmul+0xb4>
 8000772:	fba0 ce02 	umull	ip, lr, r0, r2
 8000776:	f04f 0500 	mov.w	r5, #0
 800077a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800077e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000782:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000786:	f04f 0600 	mov.w	r6, #0
 800078a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800078e:	f09c 0f00 	teq	ip, #0
 8000792:	bf18      	it	ne
 8000794:	f04e 0e01 	orrne.w	lr, lr, #1
 8000798:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800079c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007a4:	d204      	bcs.n	80007b0 <__aeabi_dmul+0x80>
 80007a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007aa:	416d      	adcs	r5, r5
 80007ac:	eb46 0606 	adc.w	r6, r6, r6
 80007b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007c8:	bf88      	it	hi
 80007ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ce:	d81e      	bhi.n	800080e <__aeabi_dmul+0xde>
 80007d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007da:	f150 0000 	adcs.w	r0, r0, #0
 80007de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007e8:	ea46 0101 	orr.w	r1, r6, r1
 80007ec:	ea40 0002 	orr.w	r0, r0, r2
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007f8:	bfc2      	ittt	gt
 80007fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000802:	bd70      	popgt	{r4, r5, r6, pc}
 8000804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000808:	f04f 0e00 	mov.w	lr, #0
 800080c:	3c01      	subs	r4, #1
 800080e:	f300 80ab 	bgt.w	8000968 <__aeabi_dmul+0x238>
 8000812:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000816:	bfde      	ittt	le
 8000818:	2000      	movle	r0, #0
 800081a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800081e:	bd70      	pople	{r4, r5, r6, pc}
 8000820:	f1c4 0400 	rsb	r4, r4, #0
 8000824:	3c20      	subs	r4, #32
 8000826:	da35      	bge.n	8000894 <__aeabi_dmul+0x164>
 8000828:	340c      	adds	r4, #12
 800082a:	dc1b      	bgt.n	8000864 <__aeabi_dmul+0x134>
 800082c:	f104 0414 	add.w	r4, r4, #20
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f305 	lsl.w	r3, r0, r5
 8000838:	fa20 f004 	lsr.w	r0, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000850:	fa21 f604 	lsr.w	r6, r1, r4
 8000854:	eb42 0106 	adc.w	r1, r2, r6
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f1c4 040c 	rsb	r4, r4, #12
 8000868:	f1c4 0520 	rsb	r5, r4, #32
 800086c:	fa00 f304 	lsl.w	r3, r0, r4
 8000870:	fa20 f005 	lsr.w	r0, r0, r5
 8000874:	fa01 f204 	lsl.w	r2, r1, r4
 8000878:	ea40 0002 	orr.w	r0, r0, r2
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000880:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000884:	f141 0100 	adc.w	r1, r1, #0
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f1c4 0520 	rsb	r5, r4, #32
 8000898:	fa00 f205 	lsl.w	r2, r0, r5
 800089c:	ea4e 0e02 	orr.w	lr, lr, r2
 80008a0:	fa20 f304 	lsr.w	r3, r0, r4
 80008a4:	fa01 f205 	lsl.w	r2, r1, r5
 80008a8:	ea43 0302 	orr.w	r3, r3, r2
 80008ac:	fa21 f004 	lsr.w	r0, r1, r4
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	fa21 f204 	lsr.w	r2, r1, r4
 80008b8:	ea20 0002 	bic.w	r0, r0, r2
 80008bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c4:	bf08      	it	eq
 80008c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f094 0f00 	teq	r4, #0
 80008d0:	d10f      	bne.n	80008f2 <__aeabi_dmul+0x1c2>
 80008d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008d6:	0040      	lsls	r0, r0, #1
 80008d8:	eb41 0101 	adc.w	r1, r1, r1
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3c01      	subeq	r4, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1a6>
 80008e6:	ea41 0106 	orr.w	r1, r1, r6
 80008ea:	f095 0f00 	teq	r5, #0
 80008ee:	bf18      	it	ne
 80008f0:	4770      	bxne	lr
 80008f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008f6:	0052      	lsls	r2, r2, #1
 80008f8:	eb43 0303 	adc.w	r3, r3, r3
 80008fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000900:	bf08      	it	eq
 8000902:	3d01      	subeq	r5, #1
 8000904:	d0f7      	beq.n	80008f6 <__aeabi_dmul+0x1c6>
 8000906:	ea43 0306 	orr.w	r3, r3, r6
 800090a:	4770      	bx	lr
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000914:	bf18      	it	ne
 8000916:	ea95 0f0c 	teqne	r5, ip
 800091a:	d00c      	beq.n	8000936 <__aeabi_dmul+0x206>
 800091c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000926:	d1d1      	bne.n	80008cc <__aeabi_dmul+0x19c>
 8000928:	ea81 0103 	eor.w	r1, r1, r3
 800092c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093a:	bf06      	itte	eq
 800093c:	4610      	moveq	r0, r2
 800093e:	4619      	moveq	r1, r3
 8000940:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000944:	d019      	beq.n	800097a <__aeabi_dmul+0x24a>
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	d102      	bne.n	8000952 <__aeabi_dmul+0x222>
 800094c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000950:	d113      	bne.n	800097a <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	d105      	bne.n	8000964 <__aeabi_dmul+0x234>
 8000958:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800095c:	bf1c      	itt	ne
 800095e:	4610      	movne	r0, r2
 8000960:	4619      	movne	r1, r3
 8000962:	d10a      	bne.n	800097a <__aeabi_dmul+0x24a>
 8000964:	ea81 0103 	eor.w	r1, r1, r3
 8000968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800096c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	bd70      	pop	{r4, r5, r6, pc}
 800097a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800097e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000982:	bd70      	pop	{r4, r5, r6, pc}

08000984 <__aeabi_ddiv>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800098a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800098e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000992:	bf1d      	ittte	ne
 8000994:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000998:	ea94 0f0c 	teqne	r4, ip
 800099c:	ea95 0f0c 	teqne	r5, ip
 80009a0:	f000 f8a7 	bleq	8000af2 <__aeabi_ddiv+0x16e>
 80009a4:	eba4 0405 	sub.w	r4, r4, r5
 80009a8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b4:	f000 8088 	beq.w	8000ac8 <__aeabi_ddiv+0x144>
 80009b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009dc:	429d      	cmp	r5, r3
 80009de:	bf08      	it	eq
 80009e0:	4296      	cmpeq	r6, r2
 80009e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ea:	d202      	bcs.n	80009f2 <__aeabi_ddiv+0x6e>
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f2:	1ab6      	subs	r6, r6, r2
 80009f4:	eb65 0503 	sbc.w	r5, r5, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a56:	bf22      	ittt	cs
 8000a58:	1ab6      	subcs	r6, r6, r2
 8000a5a:	4675      	movcs	r5, lr
 8000a5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a60:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a64:	d018      	beq.n	8000a98 <__aeabi_ddiv+0x114>
 8000a66:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a82:	d1c0      	bne.n	8000a06 <__aeabi_ddiv+0x82>
 8000a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a88:	d10b      	bne.n	8000aa2 <__aeabi_ddiv+0x11e>
 8000a8a:	ea41 0100 	orr.w	r1, r1, r0
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a96:	e7b6      	b.n	8000a06 <__aeabi_ddiv+0x82>
 8000a98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a9c:	bf04      	itt	eq
 8000a9e:	4301      	orreq	r1, r0
 8000aa0:	2000      	moveq	r0, #0
 8000aa2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa6:	bf88      	it	hi
 8000aa8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aac:	f63f aeaf 	bhi.w	800080e <__aeabi_dmul+0xde>
 8000ab0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab4:	bf04      	itt	eq
 8000ab6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000abe:	f150 0000 	adcs.w	r0, r0, #0
 8000ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000acc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ad0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad4:	bfc2      	ittt	gt
 8000ad6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ada:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ade:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae4:	f04f 0e00 	mov.w	lr, #0
 8000ae8:	3c01      	subs	r4, #1
 8000aea:	e690      	b.n	800080e <__aeabi_dmul+0xde>
 8000aec:	ea45 0e06 	orr.w	lr, r5, r6
 8000af0:	e68d      	b.n	800080e <__aeabi_dmul+0xde>
 8000af2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000af6:	ea94 0f0c 	teq	r4, ip
 8000afa:	bf08      	it	eq
 8000afc:	ea95 0f0c 	teqeq	r5, ip
 8000b00:	f43f af3b 	beq.w	800097a <__aeabi_dmul+0x24a>
 8000b04:	ea94 0f0c 	teq	r4, ip
 8000b08:	d10a      	bne.n	8000b20 <__aeabi_ddiv+0x19c>
 8000b0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b0e:	f47f af34 	bne.w	800097a <__aeabi_dmul+0x24a>
 8000b12:	ea95 0f0c 	teq	r5, ip
 8000b16:	f47f af25 	bne.w	8000964 <__aeabi_dmul+0x234>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	e72c      	b.n	800097a <__aeabi_dmul+0x24a>
 8000b20:	ea95 0f0c 	teq	r5, ip
 8000b24:	d106      	bne.n	8000b34 <__aeabi_ddiv+0x1b0>
 8000b26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b2a:	f43f aefd 	beq.w	8000928 <__aeabi_dmul+0x1f8>
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4619      	mov	r1, r3
 8000b32:	e722      	b.n	800097a <__aeabi_dmul+0x24a>
 8000b34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b3e:	f47f aec5 	bne.w	80008cc <__aeabi_dmul+0x19c>
 8000b42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b46:	f47f af0d 	bne.w	8000964 <__aeabi_dmul+0x234>
 8000b4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b4e:	f47f aeeb 	bne.w	8000928 <__aeabi_dmul+0x1f8>
 8000b52:	e712      	b.n	800097a <__aeabi_dmul+0x24a>

08000b54 <__gedf2>:
 8000b54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b58:	e006      	b.n	8000b68 <__cmpdf2+0x4>
 8000b5a:	bf00      	nop

08000b5c <__ledf2>:
 8000b5c:	f04f 0c01 	mov.w	ip, #1
 8000b60:	e002      	b.n	8000b68 <__cmpdf2+0x4>
 8000b62:	bf00      	nop

08000b64 <__cmpdf2>:
 8000b64:	f04f 0c01 	mov.w	ip, #1
 8000b68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b7e:	d01b      	beq.n	8000bb8 <__cmpdf2+0x54>
 8000b80:	b001      	add	sp, #4
 8000b82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b86:	bf0c      	ite	eq
 8000b88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b8c:	ea91 0f03 	teqne	r1, r3
 8000b90:	bf02      	ittt	eq
 8000b92:	ea90 0f02 	teqeq	r0, r2
 8000b96:	2000      	moveq	r0, #0
 8000b98:	4770      	bxeq	lr
 8000b9a:	f110 0f00 	cmn.w	r0, #0
 8000b9e:	ea91 0f03 	teq	r1, r3
 8000ba2:	bf58      	it	pl
 8000ba4:	4299      	cmppl	r1, r3
 8000ba6:	bf08      	it	eq
 8000ba8:	4290      	cmpeq	r0, r2
 8000baa:	bf2c      	ite	cs
 8000bac:	17d8      	asrcs	r0, r3, #31
 8000bae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bb2:	f040 0001 	orr.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc0:	d102      	bne.n	8000bc8 <__cmpdf2+0x64>
 8000bc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bc6:	d107      	bne.n	8000bd8 <__cmpdf2+0x74>
 8000bc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd0:	d1d6      	bne.n	8000b80 <__cmpdf2+0x1c>
 8000bd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bd6:	d0d3      	beq.n	8000b80 <__cmpdf2+0x1c>
 8000bd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_cdrcmple>:
 8000be0:	4684      	mov	ip, r0
 8000be2:	4610      	mov	r0, r2
 8000be4:	4662      	mov	r2, ip
 8000be6:	468c      	mov	ip, r1
 8000be8:	4619      	mov	r1, r3
 8000bea:	4663      	mov	r3, ip
 8000bec:	e000      	b.n	8000bf0 <__aeabi_cdcmpeq>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_cdcmpeq>:
 8000bf0:	b501      	push	{r0, lr}
 8000bf2:	f7ff ffb7 	bl	8000b64 <__cmpdf2>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	bf48      	it	mi
 8000bfa:	f110 0f00 	cmnmi.w	r0, #0
 8000bfe:	bd01      	pop	{r0, pc}

08000c00 <__aeabi_dcmpeq>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff fff4 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c08:	bf0c      	ite	eq
 8000c0a:	2001      	moveq	r0, #1
 8000c0c:	2000      	movne	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmplt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffea 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmple>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffe0 	bl	8000bf0 <__aeabi_cdcmpeq>
 8000c30:	bf94      	ite	ls
 8000c32:	2001      	movls	r0, #1
 8000c34:	2000      	movhi	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpge>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff ffce 	bl	8000be0 <__aeabi_cdrcmple>
 8000c44:	bf94      	ite	ls
 8000c46:	2001      	movls	r0, #1
 8000c48:	2000      	movhi	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_dcmpgt>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffc4 	bl	8000be0 <__aeabi_cdrcmple>
 8000c58:	bf34      	ite	cc
 8000c5a:	2001      	movcc	r0, #1
 8000c5c:	2000      	movcs	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_dcmpun>:
 8000c64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c6c:	d102      	bne.n	8000c74 <__aeabi_dcmpun+0x10>
 8000c6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c72:	d10a      	bne.n	8000c8a <__aeabi_dcmpun+0x26>
 8000c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c7c:	d102      	bne.n	8000c84 <__aeabi_dcmpun+0x20>
 8000c7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c82:	d102      	bne.n	8000c8a <__aeabi_dcmpun+0x26>
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4770      	bx	lr
 8000c8a:	f04f 0001 	mov.w	r0, #1
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_d2iz>:
 8000c90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c98:	d215      	bcs.n	8000cc6 <__aeabi_d2iz+0x36>
 8000c9a:	d511      	bpl.n	8000cc0 <__aeabi_d2iz+0x30>
 8000c9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ca4:	d912      	bls.n	8000ccc <__aeabi_d2iz+0x3c>
 8000ca6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cba:	bf18      	it	ne
 8000cbc:	4240      	negne	r0, r0
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d105      	bne.n	8000cd8 <__aeabi_d2iz+0x48>
 8000ccc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	bf08      	it	eq
 8000cd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bx	lr
 8000cd8:	f04f 0000 	mov.w	r0, #0
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_d2uiz>:
 8000ce0:	004a      	lsls	r2, r1, #1
 8000ce2:	d211      	bcs.n	8000d08 <__aeabi_d2uiz+0x28>
 8000ce4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ce8:	d211      	bcs.n	8000d0e <__aeabi_d2uiz+0x2e>
 8000cea:	d50d      	bpl.n	8000d08 <__aeabi_d2uiz+0x28>
 8000cec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cf4:	d40e      	bmi.n	8000d14 <__aeabi_d2uiz+0x34>
 8000cf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d02:	fa23 f002 	lsr.w	r0, r3, r2
 8000d06:	4770      	bx	lr
 8000d08:	f04f 0000 	mov.w	r0, #0
 8000d0c:	4770      	bx	lr
 8000d0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d12:	d102      	bne.n	8000d1a <__aeabi_d2uiz+0x3a>
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	4770      	bx	lr
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_d2f>:
 8000d20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d28:	bf24      	itt	cs
 8000d2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d32:	d90d      	bls.n	8000d50 <__aeabi_d2f+0x30>
 8000d34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d48:	bf08      	it	eq
 8000d4a:	f020 0001 	biceq.w	r0, r0, #1
 8000d4e:	4770      	bx	lr
 8000d50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d54:	d121      	bne.n	8000d9a <__aeabi_d2f+0x7a>
 8000d56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d5a:	bfbc      	itt	lt
 8000d5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d60:	4770      	bxlt	lr
 8000d62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d6a:	f1c2 0218 	rsb	r2, r2, #24
 8000d6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d76:	fa20 f002 	lsr.w	r0, r0, r2
 8000d7a:	bf18      	it	ne
 8000d7c:	f040 0001 	orrne.w	r0, r0, #1
 8000d80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d8c:	ea40 000c 	orr.w	r0, r0, ip
 8000d90:	fa23 f302 	lsr.w	r3, r3, r2
 8000d94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d98:	e7cc      	b.n	8000d34 <__aeabi_d2f+0x14>
 8000d9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9e:	d107      	bne.n	8000db0 <__aeabi_d2f+0x90>
 8000da0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da4:	bf1e      	ittt	ne
 8000da6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000daa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000dae:	4770      	bxne	lr
 8000db0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_frsub>:
 8000dc0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	e002      	b.n	8000dcc <__addsf3>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_fsub>:
 8000dc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dcc <__addsf3>:
 8000dcc:	0042      	lsls	r2, r0, #1
 8000dce:	bf1f      	itttt	ne
 8000dd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd4:	ea92 0f03 	teqne	r2, r3
 8000dd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ddc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de0:	d06a      	beq.n	8000eb8 <__addsf3+0xec>
 8000de2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dea:	bfc1      	itttt	gt
 8000dec:	18d2      	addgt	r2, r2, r3
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	4048      	eorgt	r0, r1
 8000df2:	4041      	eorgt	r1, r0
 8000df4:	bfb8      	it	lt
 8000df6:	425b      	neglt	r3, r3
 8000df8:	2b19      	cmp	r3, #25
 8000dfa:	bf88      	it	hi
 8000dfc:	4770      	bxhi	lr
 8000dfe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e0a:	bf18      	it	ne
 8000e0c:	4240      	negne	r0, r0
 8000e0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e1a:	bf18      	it	ne
 8000e1c:	4249      	negne	r1, r1
 8000e1e:	ea92 0f03 	teq	r2, r3
 8000e22:	d03f      	beq.n	8000ea4 <__addsf3+0xd8>
 8000e24:	f1a2 0201 	sub.w	r2, r2, #1
 8000e28:	fa41 fc03 	asr.w	ip, r1, r3
 8000e2c:	eb10 000c 	adds.w	r0, r0, ip
 8000e30:	f1c3 0320 	rsb	r3, r3, #32
 8000e34:	fa01 f103 	lsl.w	r1, r1, r3
 8000e38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__addsf3+0x78>
 8000e3e:	4249      	negs	r1, r1
 8000e40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e48:	d313      	bcc.n	8000e72 <__addsf3+0xa6>
 8000e4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4e:	d306      	bcc.n	8000e5e <__addsf3+0x92>
 8000e50:	0840      	lsrs	r0, r0, #1
 8000e52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e56:	f102 0201 	add.w	r2, r2, #1
 8000e5a:	2afe      	cmp	r2, #254	; 0xfe
 8000e5c:	d251      	bcs.n	8000f02 <__addsf3+0x136>
 8000e5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e66:	bf08      	it	eq
 8000e68:	f020 0001 	biceq.w	r0, r0, #1
 8000e6c:	ea40 0003 	orr.w	r0, r0, r3
 8000e70:	4770      	bx	lr
 8000e72:	0049      	lsls	r1, r1, #1
 8000e74:	eb40 0000 	adc.w	r0, r0, r0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	bf28      	it	cs
 8000e7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e80:	d2ed      	bcs.n	8000e5e <__addsf3+0x92>
 8000e82:	fab0 fc80 	clz	ip, r0
 8000e86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e92:	bfaa      	itet	ge
 8000e94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e98:	4252      	neglt	r2, r2
 8000e9a:	4318      	orrge	r0, r3
 8000e9c:	bfbc      	itt	lt
 8000e9e:	40d0      	lsrlt	r0, r2
 8000ea0:	4318      	orrlt	r0, r3
 8000ea2:	4770      	bx	lr
 8000ea4:	f092 0f00 	teq	r2, #0
 8000ea8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eac:	bf06      	itte	eq
 8000eae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eb2:	3201      	addeq	r2, #1
 8000eb4:	3b01      	subne	r3, #1
 8000eb6:	e7b5      	b.n	8000e24 <__addsf3+0x58>
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	bf18      	it	ne
 8000ec2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec6:	d021      	beq.n	8000f0c <__addsf3+0x140>
 8000ec8:	ea92 0f03 	teq	r2, r3
 8000ecc:	d004      	beq.n	8000ed8 <__addsf3+0x10c>
 8000ece:	f092 0f00 	teq	r2, #0
 8000ed2:	bf08      	it	eq
 8000ed4:	4608      	moveq	r0, r1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea90 0f01 	teq	r0, r1
 8000edc:	bf1c      	itt	ne
 8000ede:	2000      	movne	r0, #0
 8000ee0:	4770      	bxne	lr
 8000ee2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee6:	d104      	bne.n	8000ef2 <__addsf3+0x126>
 8000ee8:	0040      	lsls	r0, r0, #1
 8000eea:	bf28      	it	cs
 8000eec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ef0:	4770      	bx	lr
 8000ef2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef6:	bf3c      	itt	cc
 8000ef8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000efc:	4770      	bxcc	lr
 8000efe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0a:	4770      	bx	lr
 8000f0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f10:	bf16      	itet	ne
 8000f12:	4608      	movne	r0, r1
 8000f14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f18:	4601      	movne	r1, r0
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	bf06      	itte	eq
 8000f1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f22:	ea90 0f01 	teqeq	r0, r1
 8000f26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_ui2f>:
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e004      	b.n	8000f3c <__aeabi_i2f+0x8>
 8000f32:	bf00      	nop

08000f34 <__aeabi_i2f>:
 8000f34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f38:	bf48      	it	mi
 8000f3a:	4240      	negmi	r0, r0
 8000f3c:	ea5f 0c00 	movs.w	ip, r0
 8000f40:	bf08      	it	eq
 8000f42:	4770      	bxeq	lr
 8000f44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f48:	4601      	mov	r1, r0
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	e01c      	b.n	8000f8a <__aeabi_l2f+0x2a>

08000f50 <__aeabi_ul2f>:
 8000f50:	ea50 0201 	orrs.w	r2, r0, r1
 8000f54:	bf08      	it	eq
 8000f56:	4770      	bxeq	lr
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e00a      	b.n	8000f74 <__aeabi_l2f+0x14>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_l2f>:
 8000f60:	ea50 0201 	orrs.w	r2, r0, r1
 8000f64:	bf08      	it	eq
 8000f66:	4770      	bxeq	lr
 8000f68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	d502      	bpl.n	8000f74 <__aeabi_l2f+0x14>
 8000f6e:	4240      	negs	r0, r0
 8000f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f74:	ea5f 0c01 	movs.w	ip, r1
 8000f78:	bf02      	ittt	eq
 8000f7a:	4684      	moveq	ip, r0
 8000f7c:	4601      	moveq	r1, r0
 8000f7e:	2000      	moveq	r0, #0
 8000f80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f84:	bf08      	it	eq
 8000f86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8e:	fabc f28c 	clz	r2, ip
 8000f92:	3a08      	subs	r2, #8
 8000f94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f98:	db10      	blt.n	8000fbc <__aeabi_l2f+0x5c>
 8000f9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa4:	f1c2 0220 	rsb	r2, r2, #32
 8000fa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	eb43 0002 	adc.w	r0, r3, r2
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f102 0220 	add.w	r2, r2, #32
 8000fc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc4:	f1c2 0220 	rsb	r2, r2, #32
 8000fc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fcc:	fa21 f202 	lsr.w	r2, r1, r2
 8000fd0:	eb43 0002 	adc.w	r0, r3, r2
 8000fd4:	bf08      	it	eq
 8000fd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fda:	4770      	bx	lr

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpun>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__aeabi_fcmpun+0x14>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d108      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d102      	bne.n	80010e8 <__aeabi_fcmpun+0x20>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d102      	bne.n	80010ee <__aeabi_fcmpun+0x26>
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0001 	mov.w	r0, #1
 80010f2:	4770      	bx	lr

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001104:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001108:	f000 b9ac 	b.w	8001464 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83e 	bl	8001194 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4628      	mov	r0, r5
 800112c:	4621      	mov	r1, r4
 800112e:	2200      	movs	r2, #0
 8001130:	2300      	movs	r3, #0
 8001132:	f7ff fd6f 	bl	8000c14 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__aeabi_d2ulz+0x34>)
 800115c:	2200      	movs	r2, #0
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff fae5 	bl	8000730 <__aeabi_dmul>
 8001166:	f7ff fdbb 	bl	8000ce0 <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff fa66 	bl	800063c <__aeabi_ui2d>
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001172:	2200      	movs	r2, #0
 8001174:	f7ff fadc 	bl	8000730 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7ff f91e 	bl	80003c0 <__aeabi_dsub>
 8001184:	f7ff fdac 	bl	8000ce0 <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <__udivmoddi4>:
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001198:	9e08      	ldr	r6, [sp, #32]
 800119a:	460d      	mov	r5, r1
 800119c:	4604      	mov	r4, r0
 800119e:	4688      	mov	r8, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14d      	bne.n	8001240 <__udivmoddi4+0xac>
 80011a4:	428a      	cmp	r2, r1
 80011a6:	4694      	mov	ip, r2
 80011a8:	d968      	bls.n	800127c <__udivmoddi4+0xe8>
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b152      	cbz	r2, 80011c6 <__udivmoddi4+0x32>
 80011b0:	fa01 f302 	lsl.w	r3, r1, r2
 80011b4:	f1c2 0120 	rsb	r1, r2, #32
 80011b8:	fa20 f101 	lsr.w	r1, r0, r1
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	ea41 0803 	orr.w	r8, r1, r3
 80011c4:	4094      	lsls	r4, r2
 80011c6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ca:	0c21      	lsrs	r1, r4, #16
 80011cc:	fbb8 fef5 	udiv	lr, r8, r5
 80011d0:	fa1f f78c 	uxth.w	r7, ip
 80011d4:	fb05 831e 	mls	r3, r5, lr, r8
 80011d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011dc:	fb0e f107 	mul.w	r1, lr, r7
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x68>
 80011e4:	eb1c 0303 	adds.w	r3, ip, r3
 80011e8:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80011ec:	f080 811e 	bcs.w	800142c <__udivmoddi4+0x298>
 80011f0:	4299      	cmp	r1, r3
 80011f2:	f240 811b 	bls.w	800142c <__udivmoddi4+0x298>
 80011f6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fa:	4463      	add	r3, ip
 80011fc:	1a5b      	subs	r3, r3, r1
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	fbb3 f0f5 	udiv	r0, r3, r5
 8001204:	fb05 3310 	mls	r3, r5, r0, r3
 8001208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120c:	fb00 f707 	mul.w	r7, r0, r7
 8001210:	42a7      	cmp	r7, r4
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x96>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800121c:	f080 8108 	bcs.w	8001430 <__udivmoddi4+0x29c>
 8001220:	42a7      	cmp	r7, r4
 8001222:	f240 8105 	bls.w	8001430 <__udivmoddi4+0x29c>
 8001226:	4464      	add	r4, ip
 8001228:	3802      	subs	r0, #2
 800122a:	1be4      	subs	r4, r4, r7
 800122c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001230:	2100      	movs	r1, #0
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa8>
 8001234:	40d4      	lsrs	r4, r2
 8001236:	2300      	movs	r3, #0
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	428b      	cmp	r3, r1
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0xc2>
 8001244:	2e00      	cmp	r6, #0
 8001246:	f000 80ee 	beq.w	8001426 <__udivmoddi4+0x292>
 800124a:	2100      	movs	r1, #0
 800124c:	e9c6 0500 	strd	r0, r5, [r6]
 8001250:	4608      	mov	r0, r1
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	fab3 f183 	clz	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	d14a      	bne.n	80012f4 <__udivmoddi4+0x160>
 800125e:	42ab      	cmp	r3, r5
 8001260:	d302      	bcc.n	8001268 <__udivmoddi4+0xd4>
 8001262:	4282      	cmp	r2, r0
 8001264:	f200 80f9 	bhi.w	800145a <__udivmoddi4+0x2c6>
 8001268:	1a84      	subs	r4, r0, r2
 800126a:	eb65 0303 	sbc.w	r3, r5, r3
 800126e:	2001      	movs	r0, #1
 8001270:	4698      	mov	r8, r3
 8001272:	2e00      	cmp	r6, #0
 8001274:	d0e2      	beq.n	800123c <__udivmoddi4+0xa8>
 8001276:	e9c6 4800 	strd	r4, r8, [r6]
 800127a:	e7df      	b.n	800123c <__udivmoddi4+0xa8>
 800127c:	b902      	cbnz	r2, 8001280 <__udivmoddi4+0xec>
 800127e:	deff      	udf	#255	; 0xff
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8091 	bne.w	80013ac <__udivmoddi4+0x218>
 800128a:	eba1 050c 	sub.w	r5, r1, ip
 800128e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001292:	fa1f fe8c 	uxth.w	lr, ip
 8001296:	2101      	movs	r1, #1
 8001298:	fbb5 f3f7 	udiv	r3, r5, r7
 800129c:	fb07 5013 	mls	r0, r7, r3, r5
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012a6:	fb0e f003 	mul.w	r0, lr, r3
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x12c>
 80012ae:	eb1c 0505 	adds.w	r5, ip, r5
 80012b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x12a>
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	f200 80cb 	bhi.w	8001454 <__udivmoddi4+0x2c0>
 80012be:	4643      	mov	r3, r8
 80012c0:	1a2d      	subs	r5, r5, r0
 80012c2:	b2a4      	uxth	r4, r4
 80012c4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012c8:	fb07 5510 	mls	r5, r7, r0, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb0e fe00 	mul.w	lr, lr, r0
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0x156>
 80012d8:	eb1c 0404 	adds.w	r4, ip, r4
 80012dc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x154>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f200 80bb 	bhi.w	800145e <__udivmoddi4+0x2ca>
 80012e8:	4628      	mov	r0, r5
 80012ea:	eba4 040e 	sub.w	r4, r4, lr
 80012ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x9e>
 80012f4:	f1c1 0720 	rsb	r7, r1, #32
 80012f8:	408b      	lsls	r3, r1
 80012fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa20 f407 	lsr.w	r4, r0, r7
 8001306:	fa05 f301 	lsl.w	r3, r5, r1
 800130a:	431c      	orrs	r4, r3
 800130c:	40fd      	lsrs	r5, r7
 800130e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001312:	fa00 f301 	lsl.w	r3, r0, r1
 8001316:	fbb5 f8f9 	udiv	r8, r5, r9
 800131a:	0c20      	lsrs	r0, r4, #16
 800131c:	fa1f fe8c 	uxth.w	lr, ip
 8001320:	fb09 5518 	mls	r5, r9, r8, r5
 8001324:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001328:	fb08 f00e 	mul.w	r0, r8, lr
 800132c:	42a8      	cmp	r0, r5
 800132e:	fa02 f201 	lsl.w	r2, r2, r1
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b8>
 8001334:	eb1c 0505 	adds.w	r5, ip, r5
 8001338:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2bc>
 8001340:	42a8      	cmp	r0, r5
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2bc>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	4465      	add	r5, ip
 800134c:	1a2d      	subs	r5, r5, r0
 800134e:	b2a4      	uxth	r4, r4
 8001350:	fbb5 f0f9 	udiv	r0, r5, r9
 8001354:	fb09 5510 	mls	r5, r9, r0, r5
 8001358:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800135c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001360:	45ae      	cmp	lr, r5
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x1e2>
 8001364:	eb1c 0505 	adds.w	r5, ip, r5
 8001368:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800136c:	d26c      	bcs.n	8001448 <__udivmoddi4+0x2b4>
 800136e:	45ae      	cmp	lr, r5
 8001370:	d96a      	bls.n	8001448 <__udivmoddi4+0x2b4>
 8001372:	3802      	subs	r0, #2
 8001374:	4465      	add	r5, ip
 8001376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800137a:	fba0 9402 	umull	r9, r4, r0, r2
 800137e:	eba5 050e 	sub.w	r5, r5, lr
 8001382:	42a5      	cmp	r5, r4
 8001384:	46c8      	mov	r8, r9
 8001386:	46a6      	mov	lr, r4
 8001388:	d356      	bcc.n	8001438 <__udivmoddi4+0x2a4>
 800138a:	d053      	beq.n	8001434 <__udivmoddi4+0x2a0>
 800138c:	b15e      	cbz	r6, 80013a6 <__udivmoddi4+0x212>
 800138e:	ebb3 0208 	subs.w	r2, r3, r8
 8001392:	eb65 050e 	sbc.w	r5, r5, lr
 8001396:	fa05 f707 	lsl.w	r7, r5, r7
 800139a:	fa22 f301 	lsr.w	r3, r2, r1
 800139e:	40cd      	lsrs	r5, r1
 80013a0:	431f      	orrs	r7, r3
 80013a2:	e9c6 7500 	strd	r7, r5, [r6]
 80013a6:	2100      	movs	r1, #0
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	f1c2 0320 	rsb	r3, r2, #32
 80013b0:	fa20 f103 	lsr.w	r1, r0, r3
 80013b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b8:	fa25 f303 	lsr.w	r3, r5, r3
 80013bc:	4095      	lsls	r5, r2
 80013be:	430d      	orrs	r5, r1
 80013c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013c4:	fa1f fe8c 	uxth.w	lr, ip
 80013c8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013cc:	fb07 3011 	mls	r0, r7, r1, r3
 80013d0:	0c2b      	lsrs	r3, r5, #16
 80013d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013d6:	fb01 f00e 	mul.w	r0, r1, lr
 80013da:	4298      	cmp	r0, r3
 80013dc:	fa04 f402 	lsl.w	r4, r4, r2
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x260>
 80013e2:	eb1c 0303 	adds.w	r3, ip, r3
 80013e6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80013ea:	d22f      	bcs.n	800144c <__udivmoddi4+0x2b8>
 80013ec:	4298      	cmp	r0, r3
 80013ee:	d92d      	bls.n	800144c <__udivmoddi4+0x2b8>
 80013f0:	3902      	subs	r1, #2
 80013f2:	4463      	add	r3, ip
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	b2ad      	uxth	r5, r5
 80013f8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013fc:	fb07 3310 	mls	r3, r7, r0, r3
 8001400:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001404:	fb00 f30e 	mul.w	r3, r0, lr
 8001408:	42ab      	cmp	r3, r5
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x28a>
 800140c:	eb1c 0505 	adds.w	r5, ip, r5
 8001410:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001414:	d216      	bcs.n	8001444 <__udivmoddi4+0x2b0>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d914      	bls.n	8001444 <__udivmoddi4+0x2b0>
 800141a:	3802      	subs	r0, #2
 800141c:	4465      	add	r5, ip
 800141e:	1aed      	subs	r5, r5, r3
 8001420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001424:	e738      	b.n	8001298 <__udivmoddi4+0x104>
 8001426:	4631      	mov	r1, r6
 8001428:	4630      	mov	r0, r6
 800142a:	e707      	b.n	800123c <__udivmoddi4+0xa8>
 800142c:	4686      	mov	lr, r0
 800142e:	e6e5      	b.n	80011fc <__udivmoddi4+0x68>
 8001430:	4618      	mov	r0, r3
 8001432:	e6fa      	b.n	800122a <__udivmoddi4+0x96>
 8001434:	454b      	cmp	r3, r9
 8001436:	d2a9      	bcs.n	800138c <__udivmoddi4+0x1f8>
 8001438:	ebb9 0802 	subs.w	r8, r9, r2
 800143c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001440:	3801      	subs	r0, #1
 8001442:	e7a3      	b.n	800138c <__udivmoddi4+0x1f8>
 8001444:	4640      	mov	r0, r8
 8001446:	e7ea      	b.n	800141e <__udivmoddi4+0x28a>
 8001448:	4620      	mov	r0, r4
 800144a:	e794      	b.n	8001376 <__udivmoddi4+0x1e2>
 800144c:	4641      	mov	r1, r8
 800144e:	e7d1      	b.n	80013f4 <__udivmoddi4+0x260>
 8001450:	46d0      	mov	r8, sl
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b8>
 8001454:	3b02      	subs	r3, #2
 8001456:	4465      	add	r5, ip
 8001458:	e732      	b.n	80012c0 <__udivmoddi4+0x12c>
 800145a:	4608      	mov	r0, r1
 800145c:	e709      	b.n	8001272 <__udivmoddi4+0xde>
 800145e:	4464      	add	r4, ip
 8001460:	3802      	subs	r0, #2
 8001462:	e742      	b.n	80012ea <__udivmoddi4+0x156>

08001464 <__aeabi_idiv0>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	f023 0218 	bic.w	r2, r3, #24
 800147c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800149a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4013      	ands	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f001 f983 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f807 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 f85d 	bl	800158c <MX_GPIO_Init>
  MX_GNSS_Init();
 80014d2:	f005 fe51 	bl	8007178 <MX_GNSS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_GNSS_Process();
 80014d6:	f005 fe5b 	bl	8007190 <MX_GNSS_Process>
 80014da:	e7fc      	b.n	80014d6 <main+0x14>

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	; 0x68
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2248      	movs	r2, #72	; 0x48
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 ff17 	bl	800831e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001502:	f001 fe3f 	bl	8003184 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff ffae 	bl	8001468 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <SystemClock_Config+0xac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <SystemClock_Config+0xac>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <SystemClock_Config+0xac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001528:	2324      	movs	r3, #36	; 0x24
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800152c:	2381      	movs	r3, #129	; 0x81
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001534:	2300      	movs	r3, #0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4618      	mov	r0, r3
 8001546:	f002 f8ef 	bl	8003728 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001550:	f000 f876 	bl	8001640 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001554:	234f      	movs	r3, #79	; 0x4f
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f002 fc5b 	bl	8003e2c <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800157c:	f000 f860 	bl	8001640 <Error_Handler>
  }
}
 8001580:	bf00      	nop
 8001582:	3768      	adds	r7, #104	; 0x68
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58000400 	.word	0x58000400

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ff76 	bl	8001492 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff ff73 	bl	8001492 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff ff70 	bl	8001492 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <MX_GPIO_Init+0xac>)
 80015ba:	f001 fdcb 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2138      	movs	r1, #56	; 0x38
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <MX_GPIO_Init+0xb0>)
 80015c4:	f001 fdc6 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80015c8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80015cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2302      	movs	r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4816      	ldr	r0, [pc, #88]	; (8001638 <MX_GPIO_Init+0xac>)
 80015e0:	f001 fb8a 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80015e4:	2338      	movs	r3, #56	; 0x38
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <MX_GPIO_Init+0xb0>)
 80015fa:	f001 fb7d 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f001 fb70 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800161c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_GPIO_Init+0xb0>)
 800162c:	f001 fb64 	bl	8002cf8 <HAL_GPIO_Init>

}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>

0800164a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165a:	e7fe      	b.n	800165a <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <HardFault_Handler+0x4>

08001662 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <BusFault_Handler+0x4>

0800166e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f001 f8f2 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <USART1_IRQHandler+0x10>)
 80016aa:	f003 fb97 	bl	8004ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000204 	.word	0x20000204

080016b8 <LL_AHB2_GRP1_EnableClock>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	43db      	mvns	r3, r3
 800172a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800172e:	4013      	ands	r3, r2
 8001730:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <BSP_USART1_Init>:
  * @brief  Initializes USART HAL.
  * @param  Init : UART initialization parameters
  * @retval BSP status
  */
int32_t BSP_USART1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]

  huart1.Instance  = USART1;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <BSP_USART1_Init+0x64>)
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <BSP_USART1_Init+0x68>)
 800174a:	601a      	str	r2, [r3, #0]

  if(USART1InitCounter++ == 0)
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <BSP_USART1_Init+0x6c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4915      	ldr	r1, [pc, #84]	; (80017a8 <BSP_USART1_Init+0x6c>)
 8001754:	600a      	str	r2, [r1, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11d      	bne.n	8001796 <BSP_USART1_Init+0x5a>
  {
    if (HAL_UART_GetState(&huart1) == HAL_UART_STATE_RESET)
 800175a:	4811      	ldr	r0, [pc, #68]	; (80017a0 <BSP_USART1_Init+0x64>)
 800175c:	f003 fec5 	bl	80054ea <HAL_UART_GetState>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d117      	bne.n	8001796 <BSP_USART1_Init+0x5a>
    {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
      /* Init the UART Msp */
      USART1_MspInit(&huart1);
#else
      if(IsUSART1MspCbValid == 0U)
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <BSP_USART1_Init+0x70>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d107      	bne.n	800177e <BSP_USART1_Init+0x42>
      {
        if(BSP_USART1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 800176e:	f000 f843 	bl	80017f8 <BSP_USART1_RegisterDefaultMspCallbacks>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <BSP_USART1_Init+0x42>
        {
          return BSP_ERROR_MSP_FAILURE;
 8001778:	f06f 0309 	mvn.w	r3, #9
 800177c:	e00c      	b.n	8001798 <BSP_USART1_Init+0x5c>
        }
      }
#endif
      if(ret == BSP_ERROR_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <BSP_USART1_Init+0x5a>
      {
        /* Init the UART */
        if (MX_USART1_UART_Init(&huart1) != HAL_OK)
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <BSP_USART1_Init+0x64>)
 8001786:	f000 f875 	bl	8001874 <MX_USART1_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <BSP_USART1_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001790:	f06f 0307 	mvn.w	r3, #7
 8001794:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000204 	.word	0x20000204
 80017a4:	40013800 	.word	0x40013800
 80017a8:	200002d4 	.word	0x200002d4
 80017ac:	200002d0 	.word	0x200002d0

080017b0 <BSP_USART1_DeInit>:
  * @brief  DeInitializes UART HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_USART1_DeInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80017b6:	f06f 0307 	mvn.w	r3, #7
 80017ba:	607b      	str	r3, [r7, #4]

  if (USART1InitCounter > 0)
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <BSP_USART1_DeInit+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <BSP_USART1_DeInit+0x36>
  {
    if (--USART1InitCounter == 0)
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <BSP_USART1_DeInit+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <BSP_USART1_DeInit+0x40>)
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <BSP_USART1_DeInit+0x40>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <BSP_USART1_DeInit+0x36>
    {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
      USART1_MspDeInit(&huart1);
#endif
      /* DeInit the UART*/
      if (HAL_UART_DeInit(&huart1) == HAL_OK)
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <BSP_USART1_DeInit+0x44>)
 80017d8:	f003 f884 	bl	80048e4 <HAL_UART_DeInit>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <BSP_USART1_DeInit+0x36>
      {
        ret = BSP_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002d4 	.word	0x200002d4
 80017f4:	20000204 	.word	0x20000204

080017f8 <BSP_USART1_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP USART1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_USART1_RegisterDefaultMspCallbacks (void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  __HAL_UART_RESET_HANDLE_STATE(&huart1);
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001806:	2200      	movs	r2, #0
 8001808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 800180e:	2200      	movs	r2, #0
 8001810:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Register MspInit Callback */
  if (HAL_UART_RegisterCallback(&huart1, HAL_UART_MSPINIT_CB_ID, USART1_MspInit)  != HAL_OK)
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <BSP_USART1_RegisterDefaultMspCallbacks+0x60>)
 800181e:	210b      	movs	r1, #11
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001822:	f003 f8bd 	bl	80049a0 <HAL_UART_RegisterCallback>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <BSP_USART1_RegisterDefaultMspCallbacks+0x3a>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800182c:	f06f 0303 	mvn.w	r3, #3
 8001830:	e00e      	b.n	8001850 <BSP_USART1_RegisterDefaultMspCallbacks+0x58>
  }

  /* Register MspDeInit Callback */
  if (HAL_UART_RegisterCallback(&huart1, HAL_UART_MSPDEINIT_CB_ID, USART1_MspDeInit) != HAL_OK)
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <BSP_USART1_RegisterDefaultMspCallbacks+0x64>)
 8001834:	210c      	movs	r1, #12
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <BSP_USART1_RegisterDefaultMspCallbacks+0x5c>)
 8001838:	f003 f8b2 	bl	80049a0 <HAL_UART_RegisterCallback>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <BSP_USART1_RegisterDefaultMspCallbacks+0x50>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8001842:	f06f 0303 	mvn.w	r3, #3
 8001846:	e003      	b.n	8001850 <BSP_USART1_RegisterDefaultMspCallbacks+0x58>
  }
  IsUSART1MspCbValid = 1;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <BSP_USART1_RegisterDefaultMspCallbacks+0x68>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000204 	.word	0x20000204
 8001858:	08001919 	.word	0x08001919
 800185c:	080019ad 	.word	0x080019ad
 8001860:	200002d0 	.word	0x200002d0

08001864 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001868:	f001 f81e 	bl	80028a8 <HAL_GetTick>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <MX_USART1_UART_Init>:

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a24      	ldr	r2, [pc, #144]	; (8001914 <MX_USART1_UART_Init+0xa0>)
 8001884:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 9600;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800188c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f002 ffad 	bl	8004824 <HAL_UART_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f005 fb85 	bl	8006fe6 <HAL_UARTEx_SetTxFifoThreshold>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f005 fbba 	bl	8007062 <HAL_UARTEx_SetRxFifoThreshold>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f005 fb3c 	bl	8006f76 <HAL_UARTEx_DisableFifoMode>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013800 	.word	0x40013800

08001918 <USART1_MspInit>:

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b096      	sub	sp, #88	; 0x58
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2238      	movs	r2, #56	; 0x38
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f006 fcf8 	bl	800831e <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800192e:	2301      	movs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001932:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001936:	613b      	str	r3, [r7, #16]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fe35 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001942:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001946:	f7ff fecf 	bl	80016e8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2002      	movs	r0, #2
 800194c:	f7ff feb4 	bl	80016b8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8001960:	2307      	movs	r3, #7
 8001962:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001968:	4619      	mov	r1, r3
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <USART1_MspInit+0x90>)
 800196c:	f001 f9c4 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8001980:	2307      	movs	r3, #7
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001984:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001988:	4619      	mov	r1, r3
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <USART1_MspInit+0x90>)
 800198c:	f001 f9b4 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2024      	movs	r0, #36	; 0x24
 8001996:	f001 f8b0 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800199a:	2024      	movs	r0, #36	; 0x24
 800199c:	f001 f8c7 	bl	8002b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80019a0:	bf00      	nop
 80019a2:	3758      	adds	r7, #88	; 0x58
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	48000400 	.word	0x48000400

080019ac <USART1_MspDeInit>:

static void USART1_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80019b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019b8:	f7ff feae 	bl	8001718 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(BUS_USART1_RX_GPIO_PORT, BUS_USART1_RX_GPIO_PIN);
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <USART1_MspDeInit+0x30>)
 80019c0:	f001 fafa 	bl	8002fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_USART1_TX_GPIO_PORT, BUS_USART1_TX_GPIO_PIN);
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <USART1_MspDeInit+0x30>)
 80019c8:	f001 faf6 	bl	8002fb8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80019cc:	2024      	movs	r0, #36	; 0x24
 80019ce:	f001 f8bc 	bl	8002b4a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	48000400 	.word	0x48000400

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_kill>:

int _kill(int pid, int sig)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f8:	f006 fa9e 	bl	8007f38 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2216      	movs	r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
  return -1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_exit>:

void _exit (int status)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffe7 	bl	80019ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a20:	e7fe      	b.n	8001a20 <_exit+0x12>

08001a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a34:	f3af 8000 	nop.w
 8001a38:	4601      	mov	r1, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	60ba      	str	r2, [r7, #8]
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf0      	blt.n	8001a34 <_read+0x12>
  }

  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fe36 	bl	80026e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x12>
  }
  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_close>:

int _close(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_isatty>:

int _isatty(int file)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f006 fa08 	bl	8007f38 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20010000 	.word	0x20010000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	200002d8 	.word	0x200002d8
 8001b5c:	200011c8 	.word	0x200011c8

08001b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b70:	f7ff fff6 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	; (8001bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <LoopForever+0xe>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <LoopForever+0x16>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b9a:	f006 fb99 	bl	80082d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7ff fc90 	bl	80014c2 <main>

08001ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   r0, =_estack
 8001ba4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001bb0:	0800f2a8 	.word	0x0800f2a8
  ldr r2, =_sbss
 8001bb4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001bb8:	200011c4 	.word	0x200011c4

08001bbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>

08001bbe <teseo_i2c_enable>:
 * @}
 */

/* Private functions ---------------------------------------------------------*/
static inline void teseo_i2c_enable(TESEO_LIV3F_ctx_t *pCtx)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  teseo_i2c_onoff(pCtx, 1U, -1);
 8001bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f923 	bl	8001e18 <teseo_i2c_onoff>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <TESEO_LIV3F_RegisterBusIO>:
/** @defgroup TESEO_LIV3F_Exported_Functions TESEO_LIV3F Exported Functions
 * @{
 */

int32_t TESEO_LIV3F_RegisterBusIO(TESEO_LIV3F_Object_t *pObj, TESEO_LIV3F_IO_t *pIO)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  int32_t ret = TESEO_LIV3F_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <TESEO_LIV3F_RegisterBusIO+0x1c>
  {
    ret = TESEO_LIV3F_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e03b      	b.n	8001c70 <TESEO_LIV3F_RegisterBusIO+0x94>
  }
  else
  {
    pObj->IO.Init        = pIO->Init;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType     = pIO->BusType;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address     = pIO->Address;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	899a      	ldrh	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	819a      	strh	r2, [r3, #12]
    pObj->IO.Transmit_IT = pIO->Transmit_IT;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
    pObj->IO.Receive_IT  = pIO->Receive_IT;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	615a      	str	r2, [r3, #20]
    pObj->IO.Reset       = pIO->Reset;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick     = pIO->GetTick;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	61da      	str	r2, [r3, #28]
    pObj->IO.ClearOREF   = pIO->ClearOREF;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	621a      	str	r2, [r3, #32]

    /* init the message queue */
    pObj->pTeseoQueue = teseo_queue_init();
 8001c40:	f000 fa0e 	bl	8002060 <teseo_queue_init>
 8001c44:	4602      	mov	r2, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

    pObj->Ctx.Receive    = ReceiveWrap;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <TESEO_LIV3F_RegisterBusIO+0xa0>)
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.Transmit   = TransmitWrap;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <TESEO_LIV3F_RegisterBusIO+0xa4>)
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.GetTick    = GetTickWrap;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <TESEO_LIV3F_RegisterBusIO+0xa8>)
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.ClearOREF  = ClearOREFWrap;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <TESEO_LIV3F_RegisterBusIO+0xac>)
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    pObj->Ctx.pQueue     = pObj->pTeseoQueue;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
    pObj->Ctx.Handle     = pObj;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08001d87 	.word	0x08001d87
 8001c80:	08001db5 	.word	0x08001db5
 8001c84:	08001de3 	.word	0x08001de3
 8001c88:	08001dff 	.word	0x08001dff

08001c8c <TESEO_LIV3F_Init>:

int32_t TESEO_LIV3F_Init(TESEO_LIV3F_Object_t *pObj)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Reset the device */
  pObj->IO.Reset();
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4798      	blx	r3

  /* Init the Bus */
  if (pObj->IO.Init == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <TESEO_LIV3F_Init+0x22>
  {
    ret = TESEO_LIV3F_ERROR;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e017      	b.n	8001cde <TESEO_LIV3F_Init+0x52>
  }
  else if (pObj->IO.Init() != TESEO_LIV3F_OK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4798      	blx	r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <TESEO_LIV3F_Init+0x36>
  {
    ret = TESEO_LIV3F_ERROR;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e00d      	b.n	8001cde <TESEO_LIV3F_Init+0x52>
  }
  else
  {
    /* Enable the component SM */
    if(TESEO_LIV3F_Enable(pObj) != TESEO_LIV3F_OK)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f83c 	bl	8001d40 <TESEO_LIV3F_Enable>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <TESEO_LIV3F_Init+0x4a>
    {
      ret = TESEO_LIV3F_ERROR;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e003      	b.n	8001cde <TESEO_LIV3F_Init+0x52>
    }
    else
    {
      pObj->is_initialized = 1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
  }
  return ret;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <TESEO_LIV3F_GetMessage>:

  return ret;
}

const TESEO_LIV3F_Msg_t* TESEO_LIV3F_GetMessage(const TESEO_LIV3F_Object_t *pObj)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return teseo_queue_claim_rd_buffer(pObj->pTeseoQueue);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fa40 	bl	800217a <teseo_queue_claim_rd_buffer>
 8001cfa:	4603      	mov	r3, r0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <TESEO_LIV3F_ReleaseMessage>:

int32_t TESEO_LIV3F_ReleaseMessage(const TESEO_LIV3F_Object_t *pObj, const TESEO_LIV3F_Msg_t *Message)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  teseo_queue_release_rd_buffer(pObj->pTeseoQueue, Message);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fa61 	bl	80021dc <teseo_queue_release_rd_buffer>

  return TESEO_LIV3F_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <TESEO_LIV3F_UART_RxCb>:
  teseo_i2c_rx_callback_abort();
}

/* UART callbacks */
void TESEO_LIV3F_UART_RxCb(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  teseo_uart_rx_callback_ok();
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 fb53 	bl	80023d4 <teseo_uart_rx_callback>
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <TESEO_LIV3F_UART_ErrorCb>:

void TESEO_LIV3F_UART_ErrorCb(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  teseo_uart_rx_callback_error();
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 fb4c 	bl	80023d4 <teseo_uart_rx_callback>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <TESEO_LIV3F_Enable>:
 * @brief  Enable the TESEO component
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t TESEO_LIV3F_Enable(TESEO_LIV3F_Object_t *pObj)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]

  if(pObj->IO.BusType == TESEO_LIV3F_I2C_BUS)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <TESEO_LIV3F_Enable+0x20>
  {
    teseo_i2c_enable(&pObj->Ctx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3324      	adds	r3, #36	; 0x24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff30 	bl	8001bbe <teseo_i2c_enable>
 8001d5e:	e00d      	b.n	8001d7c <TESEO_LIV3F_Enable+0x3c>
  }
  else if(pObj->IO.BusType == TESEO_LIV3F_UART_BUS)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <TESEO_LIV3F_Enable+0x36>
  {
    teseo_uart_rx_enable(&pObj->Ctx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3324      	adds	r3, #36	; 0x24
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fb46 	bl	8002400 <teseo_uart_rx_onoff>
 8001d74:	e002      	b.n	8001d7c <TESEO_LIV3F_Enable+0x3c>
  }
  else
  {
    ret = TESEO_LIV3F_ERROR;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <ReceiveWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReceiveWrap(void *Handle, uint8_t *pData, uint16_t Length)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	4613      	mov	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	617b      	str	r3, [r7, #20]

  return pObj->IO.Receive_IT((uint16_t)(pObj->IO.Address << 1), pData, Length);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	8992      	ldrh	r2, [r2, #12]
 8001da0:	0052      	lsls	r2, r2, #1
 8001da2:	b290      	uxth	r0, r2
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4798      	blx	r3
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <TransmitWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t TransmitWrap(void *Handle, uint8_t *pData, uint16_t Length)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	617b      	str	r3, [r7, #20]

  return pObj->IO.Transmit_IT((uint16_t)(pObj->IO.Address << 1), pData, Length);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	8992      	ldrh	r2, [r2, #12]
 8001dce:	0052      	lsls	r2, r2, #1
 8001dd0:	b290      	uxth	r0, r2
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	4798      	blx	r3
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <GetTickWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval tick
 */
static uint32_t GetTickWrap(void *Handle)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  return pObj->IO.GetTick();
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <ClearOREFWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval tick
 */
static void ClearOREFWrap(void *Handle)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  pObj->IO.ClearOREF();
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4798      	blx	r3
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <teseo_i2c_onoff>:
  Teseo_I2C_Data.state = RUNNING;
  pCtx->Receive(pCtx->Handle, (uint8_t *)Teseo_I2C_Data.buf, I2C_LOCAL_BUF);
}

void teseo_i2c_onoff(TESEO_LIV3F_ctx_t *pCtx, uint8_t enable, int8_t nr_msg)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
 8001e24:	4613      	mov	r3, r2
 8001e26:	70bb      	strb	r3, [r7, #2]
  Teseo_I2C_Data.pCtx = pCtx;
 8001e28:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6253      	str	r3, [r2, #36]	; 0x24

  if ((Teseo_I2C_Data.state == RUNNING) && (enable == 1U))
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <teseo_i2c_onoff+0x26>
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d034      	beq.n	8001ea8 <teseo_i2c_onoff+0x90>
  {
    return;
  }
  if ((Teseo_I2C_Data.state == IDLE) && (enable == 0U))
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <teseo_i2c_onoff+0x36>
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d02e      	beq.n	8001eac <teseo_i2c_onoff+0x94>
  {
    return;
  }
  
  if (enable == 1U)
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d11f      	bne.n	8001e94 <teseo_i2c_onoff+0x7c>
  {
    PRINT_DBG("I2C running\n\r");
    Teseo_I2C_Data.fsm_next_state = i2c_fsm_discard;
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	725a      	strb	r2, [r3, #9]
    Teseo_I2C_Data.fsm_restart = 1;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	745a      	strb	r2, [r3, #17]
    Teseo_I2C_Data.nr_msg = nr_msg;
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e62:	78bb      	ldrb	r3, [r7, #2]
 8001e64:	7413      	strb	r3, [r2, #16]
    Teseo_I2C_Data.timeout = pCtx->GetTick(pCtx->Handle);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6952      	ldr	r2, [r2, #20]
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4798      	blx	r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e76:	60d3      	str	r3, [r2, #12]
    Teseo_I2C_Data.wr_msg = NULL;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
    Teseo_I2C_Data.cmd = RUNNING;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
    pCtx->Receive(pCtx->Handle, (uint8_t *)Teseo_I2C_Data.buf, I2C_LOCAL_BUF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6950      	ldr	r0, [r2, #20]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	490a      	ldr	r1, [pc, #40]	; (8001eb8 <teseo_i2c_onoff+0xa0>)
 8001e90:	4798      	blx	r3
    
    return;
 8001e92:	e00c      	b.n	8001eae <teseo_i2c_onoff+0x96>
  }

  Teseo_I2C_Data.cmd = IDLE;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
  while (Teseo_I2C_Data.state == RUNNING) {};
 8001e9a:	bf00      	nop
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <teseo_i2c_onoff+0x9c>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d0fa      	beq.n	8001e9c <teseo_i2c_onoff+0x84>
 8001ea6:	e002      	b.n	8001eae <teseo_i2c_onoff+0x96>
    return;
 8001ea8:	bf00      	nop
 8001eaa:	e000      	b.n	8001eae <teseo_i2c_onoff+0x96>
    return;
 8001eac:	bf00      	nop
  /*
   * This function returns when the I2C-FiniteStateMachine is no more running...
   */
}
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002dc 	.word	0x200002dc
 8001eb8:	200002ee 	.word	0x200002ee

08001ebc <teseo_ffs>:
 * differs in spirit from the above ffz (man ffs).
 * Source: 
 * git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/asm-generic/bitops/ffs.h?h=v4.1.46
 */
static inline int32_t teseo_ffs(uint32_t _w)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  int32_t r = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t w = _w;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60bb      	str	r3, [r7, #8]
  
  if (w == 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <teseo_ffs+0x1a>
  {
    return 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e032      	b.n	8001f3c <teseo_ffs+0x80>
  }
  if ((w & 0xffffU) == 0U)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <teseo_ffs+0x2e>
  {
    w >>= 16;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	60bb      	str	r3, [r7, #8]
    r += 16;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3310      	adds	r3, #16
 8001ee8:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 0xffU) == 0U)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <teseo_ffs+0x42>
  {
    w >>= 8;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	60bb      	str	r3, [r7, #8]
    r += 8;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3308      	adds	r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 0xfU) == 0U)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <teseo_ffs+0x58>
  {
    w >>= 4;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	60bb      	str	r3, [r7, #8]
    r += 4;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3304      	adds	r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 3U) == 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <teseo_ffs+0x6e>
  {
    w >>= 2;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	60bb      	str	r3, [r7, #8]
    r += 2;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3302      	adds	r3, #2
 8001f28:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 1U) == 0U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <teseo_ffs+0x7e>
  {
    r += 1;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
  }
  return r;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
	...

08001f48 <Teseo_Queue_static_alloc>:

/*
 * Returns the static instance of a Queue object.
 */
static TESEO_LIV3F_Queue_t *Teseo_Queue_static_alloc(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  static TESEO_LIV3F_Queue_t Teseo_Queue_Instance;
  return &Teseo_Queue_Instance;
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <Teseo_Queue_static_alloc+0x10>)
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000304 	.word	0x20000304

08001f5c <__find_msg_idx>:

/*
 * Returns the index of a message in the queue.
 */
static int32_t __find_msg_idx(const TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  int32_t i;
  
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e00c      	b.n	8001f86 <__find_msg_idx+0x2a>
  {
    if (&pTeseoQueue->nmea_queue[i] == pTeseoMsg)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d101      	bne.n	8001f80 <__find_msg_idx+0x24>
    {
      return i;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	e007      	b.n	8001f90 <__find_msg_idx+0x34>
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	ddef      	ble.n	8001f6c <__find_msg_idx+0x10>
    }
  }
  
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <__check_unreleased_buffer>:

/*
 * Checks for buffers not yet released.
 */
static void __check_unreleased_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  
  PRINT_DBG("R\n\r");
  pTeseoQueue->bitmap_buffer_readable |= pTeseoQueue->bitmap_unreleased_buffer_irq;
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
#endif /* ANY_RTOS */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <check_longer_msg>:

/*
 * Checks for messages longer than MAX_MSG_BUF.
 */
static void check_longer_msg(TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg, uint32_t idx, int8_t wr_or_rd)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	70fb      	strb	r3, [r7, #3]
  if (pTeseoMsg->len <= (uint32_t)MAX_MSG_BUF)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	2b50      	cmp	r3, #80	; 0x50
 8001fc0:	d947      	bls.n	8002052 <check_longer_msg+0xa6>
  {
    return;
  }
  
  uint32_t j;
  uint32_t extra_bufs = (pTeseoMsg->len / (uint32_t)MAX_MSG_BUF) + (((pTeseoMsg->len % (uint32_t)MAX_MSG_BUF) != 0U) ? 1U : 0U);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	889b      	ldrh	r3, [r3, #4]
 8001fc6:	4a25      	ldr	r2, [pc, #148]	; (800205c <check_longer_msg+0xb0>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	889a      	ldrh	r2, [r3, #4]
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <check_longer_msg+0xb0>)
 8001fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fdc:	0999      	lsrs	r1, r3, #6
 8001fde:	460b      	mov	r3, r1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <check_longer_msg+0x46>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <check_longer_msg+0x48>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4403      	add	r3, r0
 8001ff6:	61bb      	str	r3, [r7, #24]
  
  for (j = 0; j < extra_bufs; j++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e024      	b.n	8002048 <check_longer_msg+0x9c>
  {
    uint32_t rhs = (idx + j);
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

    if (wr_or_rd == 1)
 8002006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10d      	bne.n	800202a <check_longer_msg+0x7e>
    {
      if(rhs < 32U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b1f      	cmp	r3, #31
 8002012:	d816      	bhi.n	8002042 <check_longer_msg+0x96>
      {
        pTeseoQueue->bitmap_buffer_writable &= ~(1UL << rhs);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e00b      	b.n	8002042 <check_longer_msg+0x96>
      }
    }
    else
    {
      if(rhs < 32U)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b1f      	cmp	r3, #31
 800202e:	d808      	bhi.n	8002042 <check_longer_msg+0x96>
      {
        pTeseoQueue->bitmap_buffer_writable |= (1UL << rhs);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	431a      	orrs	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]
  for (j = 0; j < extra_bufs; j++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3d6      	bcc.n	8001ffe <check_longer_msg+0x52>
 8002050:	e000      	b.n	8002054 <check_longer_msg+0xa8>
    return;
 8002052:	bf00      	nop
      }
    }
  }
}
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	cccccccd 	.word	0xcccccccd

08002060 <teseo_queue_init>:

/* Exported functions --------------------------------------------------------*/
TESEO_LIV3F_Queue_t *teseo_queue_init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
  TESEO_LIV3F_Queue_t *pTeseoQueue = Teseo_Queue_static_alloc();
 8002066:	f7ff ff6f 	bl	8001f48 <Teseo_Queue_static_alloc>
 800206a:	60b8      	str	r0, [r7, #8]
  int8_t i;
  TESEO_LIV3F_Msg_t *pTeseoMsg;
  
  PRINT_DBG("teseo_queue_init...\n\r" );
  pTeseoQueue->bitmap_buffer_writable = 0;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e021      	b.n	80020bc <teseo_queue_init+0x5c>
  {
    pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 8002078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	607b      	str	r3, [r7, #4]

    pTeseoMsg->buf = &pTeseoQueue->single_message_buffer[i * MAX_MSG_BUF];
 8002086:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	3348      	adds	r3, #72	; 0x48
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	441a      	add	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
    pTeseoMsg->len = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	809a      	strh	r2, [r3, #4]
    pTeseoQueue->bitmap_buffer_writable |=  (1UL << (uint8_t)i);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4619      	mov	r1, r3
 80020aa:	2301      	movs	r3, #1
 80020ac:	408b      	lsls	r3, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	ddd9      	ble.n	8002078 <teseo_queue_init+0x18>
  }
  pTeseoQueue->bitmap_buffer_readable = 0;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
  pTeseoQueue->semaphore = semaphore_create();  
#endif /* ANY_RTOS */
  PRINT_DBG("teseo_queue_init: Done\n\r");
  
  return pTeseoQueue;
 80020ca:	68bb      	ldr	r3, [r7, #8]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <teseo_queue_claim_wr_buffer>:
  semaphore_delete(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}

TESEO_LIV3F_Msg_t *teseo_queue_claim_wr_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    return NULL;
  }
#endif /* ANY_RTOS */

  /* first available buffer writable */
  i = teseo_ffs(pTeseoQueue->bitmap_buffer_writable);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff feeb 	bl	8001ebc <teseo_ffs>
 80020e6:	60f8      	str	r0, [r7, #12]
  
  if (i == 0) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <teseo_queue_claim_wr_buffer+0x1e>
#if (ANY_RTOS)
    /* release the semaphore */
    semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
    PRINT_DBG("-\n\r");
    return NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e019      	b.n	8002126 <teseo_queue_claim_wr_buffer+0x52>
  }
  
  i--; /* first available buffer writable */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* buffer no more writable */
  pTeseoQueue->bitmap_buffer_writable &= ~(1U << (uint32_t)i);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	401a      	ands	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
  
  __check_unreleased_buffer(pTeseoQueue);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff44 	bl	8001f9a <__check_unreleased_buffer>

#if (ANY_RTOS)
  semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */

  pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	60bb      	str	r3, [r7, #8]
  pTeseoMsg->len = 0;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	809a      	strh	r2, [r3, #4]
  
  return pTeseoMsg;
 8002124:	68bb      	ldr	r3, [r7, #8]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <teseo_queue_release_wr_buffer>:

void teseo_queue_release_wr_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue, TESEO_LIV3F_Msg_t *pTeseoMsg)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]

#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  if (pTeseoMsg == NULL) {
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <teseo_queue_release_wr_buffer+0x40>
    return;
  }
  
  i = __find_msg_idx(pTeseoQueue, pTeseoMsg);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff0b 	bl	8001f5c <__find_msg_idx>
 8002146:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db11      	blt.n	8002172 <teseo_queue_release_wr_buffer+0x44>
    return;
  }
#endif /* ANY_RTOS */
  
  /* mark the buffer as readable */
  pTeseoQueue->bitmap_buffer_readable |= (1UL << (uint32_t)i);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pTeseoMsg, (uint32_t)i, 1);
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	2301      	movs	r3, #1
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff20 	bl	8001fac <check_longer_msg>
 800216c:	e002      	b.n	8002174 <teseo_queue_release_wr_buffer+0x46>
    return;
 800216e:	bf00      	nop
 8002170:	e000      	b.n	8002174 <teseo_queue_release_wr_buffer+0x46>
    return;
 8002172:	bf00      	nop

#if (ANY_RTOS)
  __check_unreleased_buffer(pTeseoQueue);
  semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <teseo_queue_claim_rd_buffer>:

const TESEO_LIV3F_Msg_t *teseo_queue_claim_rd_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Msg_t *pTeseoMsg = NULL;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  int32_t i;
  uint8_t rd_buffer_re_try = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	74fb      	strb	r3, [r7, #19]
  
#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  while(rd_buffer_re_try == 1U) {
 800218a:	e01d      	b.n	80021c8 <teseo_queue_claim_rd_buffer+0x4e>
      return NULL;
    }
#endif /* ANY_RTOS */
    
    /* first available readable buffer */
    i = teseo_ffs(pTeseoQueue->bitmap_buffer_readable);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe93 	bl	8001ebc <teseo_ffs>
 8002196:	60f8      	str	r0, [r7, #12]
    
    if (i == 0) {
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d018      	beq.n	80021d0 <teseo_queue_claim_rd_buffer+0x56>
      break;
#endif /* ANY_RTOS */
    }

    /* first available readable buffer */
    i -= 1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
    /* buffer no more readable */
    pTeseoQueue->bitmap_buffer_readable &= ~(1UL << (uint32_t)i);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]
    pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

#if (ANY_RTOS)
    semaphore_free(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */

    rd_buffer_re_try = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	74fb      	strb	r3, [r7, #19]
  while(rd_buffer_re_try == 1U) {
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d0de      	beq.n	800218c <teseo_queue_claim_rd_buffer+0x12>
 80021ce:	e000      	b.n	80021d2 <teseo_queue_claim_rd_buffer+0x58>
      break;
 80021d0:	bf00      	nop
  } /* while */
  return pTeseoMsg;
 80021d2:	697b      	ldr	r3, [r7, #20]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <teseo_queue_release_rd_buffer>:

void teseo_queue_release_rd_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg)
{ 
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  
#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  i = __find_msg_idx(pTeseoQueue, pTeseoMsg);
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff feb7 	bl	8001f5c <__find_msg_idx>
 80021ee:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0f      	blt.n	8002216 <teseo_queue_release_rd_buffer+0x3a>
    return;
  }  
#endif /* ANY_RTOS */

  /* mark the buffer as writeable */
  pTeseoQueue->bitmap_buffer_writable |= (1UL << (uint32_t)i);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	601a      	str	r2, [r3, #0]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pTeseoMsg, (uint32_t)i, 0);
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	2300      	movs	r3, #0
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fecc 	bl	8001fac <check_longer_msg>
 8002214:	e000      	b.n	8002218 <teseo_queue_release_rd_buffer+0x3c>
    return;
 8002216:	bf00      	nop

#if (ANY_RTOS)
  semaphore_free(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <teseo_rx_callback_ok>:

/*
 * Private callback handler for UART rx complete
 */
static void teseo_rx_callback_ok(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  TESEO_LIV3F_ctx_t *pCtx = Teseo_UART_Data.pCtx;
 8002226:	4b58      	ldr	r3, [pc, #352]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	607b      	str	r3, [r7, #4]
  
  Teseo_UART_Data.fsm_restart = 1;
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800222e:	2201      	movs	r2, #1
 8002230:	721a      	strb	r2, [r3, #8]

  while(Teseo_UART_Data.fsm_restart == 1)
 8002232:	e09d      	b.n	8002370 <teseo_rx_callback_ok+0x150>
  {
  
    Teseo_UART_Data.fsm_state = Teseo_UART_Data.fsm_next_state;
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002236:	785b      	ldrb	r3, [r3, #1]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800223c:	701a      	strb	r2, [r3, #0]
    
    switch (Teseo_UART_Data.fsm_state)
 800223e:	4b52      	ldr	r3, [pc, #328]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <teseo_rx_callback_ok+0x2e>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d04b      	beq.n	80022e4 <teseo_rx_callback_ok+0xc4>
 800224c:	e08c      	b.n	8002368 <teseo_rx_callback_ok+0x148>
    {
      
    case fsm_discard:
      Teseo_UART_Data.fsm_restart = 0;
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002250:	2200      	movs	r2, #0
 8002252:	721a      	strb	r2, [r3, #8]
      Teseo_UART_Data.fsm_next_state = fsm_discard;
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
      
      if (Teseo_UART_Data.dummy_char != (uint8_t)'$')
 800225a:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800225c:	789b      	ldrb	r3, [r3, #2]
 800225e:	2b24      	cmp	r3, #36	; 0x24
 8002260:	d007      	beq.n	8002272 <teseo_rx_callback_ok+0x52>
      {
        //PRINT_DBG(".");
        pCtx->Receive(pCtx->Handle, &Teseo_UART_Data.dummy_char, 1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6950      	ldr	r0, [r2, #20]
 800226a:	2201      	movs	r2, #1
 800226c:	4947      	ldr	r1, [pc, #284]	; (800238c <teseo_rx_callback_ok+0x16c>)
 800226e:	4798      	blx	r3
        break;
 8002270:	e07e      	b.n	8002370 <teseo_rx_callback_ok+0x150>
      }
      
      if (Teseo_UART_Data.wr_msg == NULL)
 8002272:	4b45      	ldr	r3, [pc, #276]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d107      	bne.n	800228a <teseo_rx_callback_ok+0x6a>
      {
        Teseo_UART_Data.wr_msg = teseo_queue_claim_wr_buffer(pCtx->pQueue);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff28 	bl	80020d4 <teseo_queue_claim_wr_buffer>
 8002284:	4603      	mov	r3, r0
 8002286:	4a40      	ldr	r2, [pc, #256]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002288:	6053      	str	r3, [r2, #4]
      }
      
      if (Teseo_UART_Data.wr_msg == NULL)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <teseo_rx_callback_ok+0x82>
      {
        //PRINT_DBG(".");
        pCtx->Receive(pCtx->Handle, &Teseo_UART_Data.dummy_char, 1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6950      	ldr	r0, [r2, #20]
 800229a:	2201      	movs	r2, #1
 800229c:	493b      	ldr	r1, [pc, #236]	; (800238c <teseo_rx_callback_ok+0x16c>)
 800229e:	4798      	blx	r3
        break;
 80022a0:	e066      	b.n	8002370 <teseo_rx_callback_ok+0x150>
      }
      //PRINT_DBG("S");

      /* save '$' */
      Teseo_UART_Data.wr_msg->buf[Teseo_UART_Data.wr_msg->len] = Teseo_UART_Data.dummy_char;
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a37      	ldr	r2, [pc, #220]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022aa:	6852      	ldr	r2, [r2, #4]
 80022ac:	8892      	ldrh	r2, [r2, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022b2:	7892      	ldrb	r2, [r2, #2]
 80022b4:	701a      	strb	r2, [r3, #0]
      Teseo_UART_Data.wr_msg->len++;
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	889a      	ldrh	r2, [r3, #4]
 80022bc:	3201      	adds	r2, #1
 80022be:	b292      	uxth	r2, r2
 80022c0:	809a      	strh	r2, [r3, #4]
      Teseo_UART_Data.fsm_next_state = fsm_synch ;
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	705a      	strb	r2, [r3, #1]
      pCtx->Receive(pCtx->Handle, (uint8_t *)&Teseo_UART_Data.wr_msg->buf[Teseo_UART_Data.wr_msg->len], 1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6950      	ldr	r0, [r2, #20]
 80022d0:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022d2:	6852      	ldr	r2, [r2, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	492c      	ldr	r1, [pc, #176]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022d8:	6849      	ldr	r1, [r1, #4]
 80022da:	8889      	ldrh	r1, [r1, #4]
 80022dc:	4411      	add	r1, r2
 80022de:	2201      	movs	r2, #1
 80022e0:	4798      	blx	r3
       break;
 80022e2:	e045      	b.n	8002370 <teseo_rx_callback_ok+0x150>
       
    case fsm_synch:
      Teseo_UART_Data.fsm_restart = 0;
 80022e4:	4b28      	ldr	r3, [pc, #160]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	721a      	strb	r2, [r3, #8]
      
      if (Teseo_UART_Data.wr_msg->buf[Teseo_UART_Data.wr_msg->len] == (uint8_t)'$')
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a25      	ldr	r2, [pc, #148]	; (8002388 <teseo_rx_callback_ok+0x168>)
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	8892      	ldrh	r2, [r2, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b24      	cmp	r3, #36	; 0x24
 80022fc:	d11d      	bne.n	800233a <teseo_rx_callback_ok+0x11a>
      {
        Teseo_UART_Data.dummy_char = (uint8_t)'$';
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002300:	2224      	movs	r2, #36	; 0x24
 8002302:	709a      	strb	r2, [r3, #2]
        Teseo_UART_Data.wr_msg->buf[Teseo_UART_Data.wr_msg->len] = (uint8_t)'\0';
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800230c:	6852      	ldr	r2, [r2, #4]
 800230e:	8892      	ldrh	r2, [r2, #4]
 8002310:	4413      	add	r3, r2
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        teseo_queue_release_wr_buffer(pCtx->pQueue, Teseo_UART_Data.wr_msg);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800231c:	6852      	ldr	r2, [r2, #4]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff04 	bl	800212e <teseo_queue_release_wr_buffer>
        Teseo_UART_Data.wr_msg = NULL;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
        Teseo_UART_Data.fsm_next_state = fsm_discard ;
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800232e:	2200      	movs	r2, #0
 8002330:	705a      	strb	r2, [r3, #1]
        /* check if we can resynch the new sentence */
        Teseo_UART_Data.fsm_restart = 1;
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002334:	2201      	movs	r2, #1
 8002336:	721a      	strb	r2, [r3, #8]
        break;
 8002338:	e01a      	b.n	8002370 <teseo_rx_callback_ok+0x150>
      }
      
      //PRINT_DBG("+");
      Teseo_UART_Data.wr_msg->len++;
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	889a      	ldrh	r2, [r3, #4]
 8002340:	3201      	adds	r2, #1
 8002342:	b292      	uxth	r2, r2
 8002344:	809a      	strh	r2, [r3, #4]
        Teseo_UART_Data.wr_msg->len = 0;
        Teseo_UART_Data.fsm_restart = 1;
        break;
      }
#endif
      Teseo_UART_Data.fsm_next_state = fsm_synch;
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002348:	2201      	movs	r2, #1
 800234a:	705a      	strb	r2, [r3, #1]
      pCtx->Receive(pCtx->Handle, (uint8_t *)&Teseo_UART_Data.wr_msg->buf[Teseo_UART_Data.wr_msg->len], 1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6950      	ldr	r0, [r2, #20]
 8002354:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002356:	6852      	ldr	r2, [r2, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	490b      	ldr	r1, [pc, #44]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800235c:	6849      	ldr	r1, [r1, #4]
 800235e:	8889      	ldrh	r1, [r1, #4]
 8002360:	4411      	add	r1, r2
 8002362:	2201      	movs	r2, #1
 8002364:	4798      	blx	r3
      break;
 8002366:	e003      	b.n	8002370 <teseo_rx_callback_ok+0x150>
      
    case fsm_stop:
    default:
      Teseo_UART_Data.fsm_restart = 0;
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <teseo_rx_callback_ok+0x168>)
 800236a:	2200      	movs	r2, #0
 800236c:	721a      	strb	r2, [r3, #8]
      break;
 800236e:	bf00      	nop
  while(Teseo_UART_Data.fsm_restart == 1)
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <teseo_rx_callback_ok+0x168>)
 8002372:	7a1b      	ldrb	r3, [r3, #8]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	f43f af5c 	beq.w	8002234 <teseo_rx_callback_ok+0x14>
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200005cc 	.word	0x200005cc
 800238c:	200005ce 	.word	0x200005ce

08002390 <teseo_rx_callback_error>:

/*
 * Private callback handler for UART rx error
 */
static void teseo_rx_callback_error(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  const TESEO_LIV3F_ctx_t *pCtx = Teseo_UART_Data.pCtx;
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <teseo_rx_callback_error+0x3c>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	607b      	str	r3, [r7, #4]

  PRINT_DBG("E");
  
  Teseo_UART_Data.fsm_next_state = fsm_discard;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <teseo_rx_callback_error+0x3c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
  Teseo_UART_Data.wr_msg->len = 0;
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <teseo_rx_callback_error+0x3c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	809a      	strh	r2, [r3, #4]
  pCtx->ClearOREF(pCtx->Handle);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6952      	ldr	r2, [r2, #20]
 80023b2:	4610      	mov	r0, r2
 80023b4:	4798      	blx	r3
  //__HAL_UART_CLEAR_FLAG(teseo_io_data->huart, UART_FLAG_ORE);
  pCtx->Receive(pCtx->Handle, &Teseo_UART_Data.dummy_char, 1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6950      	ldr	r0, [r2, #20]
 80023be:	2201      	movs	r2, #1
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <teseo_rx_callback_error+0x40>)
 80023c2:	4798      	blx	r3
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200005cc 	.word	0x200005cc
 80023d0:	200005ce 	.word	0x200005ce

080023d4 <teseo_uart_rx_callback>:

/* Exported functions --------------------------------------------------------*/
void teseo_uart_rx_callback(Teseo_UART_CB_CallerTypedef c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  switch (c)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <teseo_uart_rx_callback+0x16>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <teseo_uart_rx_callback+0x1c>
    break;
  case _error:
    teseo_rx_callback_error();
    break;
  default:
    break;
 80023e8:	e005      	b.n	80023f6 <teseo_uart_rx_callback+0x22>
    teseo_rx_callback_ok();
 80023ea:	f7ff ff19 	bl	8002220 <teseo_rx_callback_ok>
    break;
 80023ee:	e002      	b.n	80023f6 <teseo_uart_rx_callback+0x22>
    teseo_rx_callback_error();
 80023f0:	f7ff ffce 	bl	8002390 <teseo_rx_callback_error>
    break;
 80023f4:	bf00      	nop
  }
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <teseo_uart_rx_onoff>:

void teseo_uart_rx_onoff(TESEO_LIV3F_ctx_t *pCtx, uint8_t enable)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  Teseo_UART_Data.pCtx = pCtx;
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60d3      	str	r3, [r2, #12]

  if ((Teseo_UART_Data.fsm_state == fsm_discard) && (enable == 0U))
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <teseo_uart_rx_onoff+0x22>
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01d      	beq.n	800245e <teseo_uart_rx_onoff+0x5e>
  {
    return;
  }

  if (enable == 0U)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <teseo_uart_rx_onoff+0x3c>
  {
    Teseo_UART_Data.fsm_next_state = fsm_stop;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 800242a:	2202      	movs	r2, #2
 800242c:	705a      	strb	r2, [r3, #1]
    
    while (Teseo_UART_Data.fsm_state != fsm_stop) {};
 800242e:	bf00      	nop
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d1fa      	bne.n	8002430 <teseo_uart_rx_onoff+0x30>
    return;
 800243a:	e011      	b.n	8002460 <teseo_uart_rx_onoff+0x60>
  }

  Teseo_UART_Data.wr_msg = NULL;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
  Teseo_UART_Data.fsm_state = fsm_discard;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
  Teseo_UART_Data.fsm_next_state = fsm_discard;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <teseo_uart_rx_onoff+0x68>)
 800244a:	2200      	movs	r2, #0
 800244c:	705a      	strb	r2, [r3, #1]
  
  pCtx->Receive(pCtx->Handle, &Teseo_UART_Data.dummy_char, 1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6950      	ldr	r0, [r2, #20]
 8002456:	2201      	movs	r2, #1
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <teseo_uart_rx_onoff+0x6c>)
 800245a:	4798      	blx	r3
 800245c:	e000      	b.n	8002460 <teseo_uart_rx_onoff+0x60>
    return;
 800245e:	bf00      	nop
}
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200005cc 	.word	0x200005cc
 800246c:	200005ce 	.word	0x200005ce

08002470 <LL_AHB2_GRP1_EnableClock>:
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4313      	orrs	r3, r2
 8002486:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <LL_APB1_GRP1_EnableClock>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_APB1_GRP1_DisableClock>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e6:	4013      	ands	r3, r2
 80024e8:	658b      	str	r3, [r1, #88]	; 0x58
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d903      	bls.n	8002510 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002508:	f06f 0301 	mvn.w	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e027      	b.n	8002560 <BSP_COM_Init+0x6c>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002510:	79fa      	ldrb	r2, [r7, #7]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4915      	ldr	r1, [pc, #84]	; (800256c <BSP_COM_Init+0x78>)
 8002516:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800251a:	4915      	ldr	r1, [pc, #84]	; (8002570 <BSP_COM_Init+0x7c>)
 800251c:	20cc      	movs	r0, #204	; 0xcc
 800251e:	fb00 f303 	mul.w	r3, r0, r3
 8002522:	440b      	add	r3, r1
 8002524:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
#else
    if(IsUsart2MspCbValid == 0U)
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <BSP_COM_Init+0x80>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <BSP_COM_Init+0x4e>
    {
      if(BSP_COM_RegisterDefaultMspCallbacks(COM) != BSP_ERROR_NONE)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f873 	bl	800261c <BSP_COM_RegisterDefaultMspCallbacks>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <BSP_COM_Init+0x4e>
      {
        return BSP_ERROR_MSP_FAILURE;
 800253c:	f06f 0309 	mvn.w	r3, #9
 8002540:	e00f      	b.n	8002562 <BSP_COM_Init+0x6e>
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	22cc      	movs	r2, #204	; 0xcc
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <BSP_COM_Init+0x7c>)
 800254c:	4413      	add	r3, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f812 	bl	8002578 <MX_USART2_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <BSP_COM_Init+0x6c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800255a:	f06f 0303 	mvn.w	r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002560:	68fb      	ldr	r3, [r7, #12]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000004 	.word	0x20000004
 8002570:	200005dc 	.word	0x200005dc
 8002574:	200006ac 	.word	0x200006ac

08002578 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <MX_USART2_UART_Init+0xa0>)
 8002588:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f002 f92b 	bl	8004824 <HAL_UART_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d8:	2100      	movs	r1, #0
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f004 fd03 	bl	8006fe6 <HAL_UARTEx_SetTxFifoThreshold>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART2_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f004 fd38 	bl	8007062 <HAL_UARTEx_SetRxFifoThreshold>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_USART2_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f004 fcba 	bl	8006f76 <HAL_UARTEx_DisableFifoMode>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_USART2_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40004400 	.word	0x40004400

0800261c <BSP_COM_RegisterDefaultMspCallbacks>:
/**
 * @brief Register Default USART2 Bus Msp Callbacks
 * @retval BSP status
 */
int32_t BSP_COM_RegisterDefaultMspCallbacks(COM_TypeDef COM)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <BSP_COM_RegisterDefaultMspCallbacks+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002630:	f06f 0301 	mvn.w	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e04a      	b.n	80026ce <BSP_COM_RegisterDefaultMspCallbacks+0xb2>
  }
  else
  {

    __HAL_UART_RESET_HANDLE_STATE(&hcom_uart[COM]);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 800263c:	21cc      	movs	r1, #204	; 0xcc
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3388      	adds	r3, #136	; 0x88
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 800264e:	21cc      	movs	r1, #204	; 0xcc
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	338c      	adds	r3, #140	; 0x8c
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 8002660:	21cc      	movs	r1, #204	; 0xcc
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	33c4      	adds	r3, #196	; 0xc4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 8002672:	21cc      	movs	r1, #204	; 0xcc
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	33c8      	adds	r3, #200	; 0xc8
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

    /* Register default MspInit/MspDeInit Callback */
    if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, USART2_MspInit) != HAL_OK)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	22cc      	movs	r2, #204	; 0xcc
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 800268a:	4413      	add	r3, r2
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <BSP_COM_RegisterDefaultMspCallbacks+0xc0>)
 800268e:	210b      	movs	r1, #11
 8002690:	4618      	mov	r0, r3
 8002692:	f002 f985 	bl	80049a0 <HAL_UART_RegisterCallback>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <BSP_COM_RegisterDefaultMspCallbacks+0x88>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800269c:	f06f 0303 	mvn.w	r3, #3
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e014      	b.n	80026ce <BSP_COM_RegisterDefaultMspCallbacks+0xb2>
    }
    else if(HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, USART2_MspDeInit) != HAL_OK)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	22cc      	movs	r2, #204	; 0xcc
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <BSP_COM_RegisterDefaultMspCallbacks+0xbc>)
 80026ae:	4413      	add	r3, r2
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <BSP_COM_RegisterDefaultMspCallbacks+0xc4>)
 80026b2:	210c      	movs	r1, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 f973 	bl	80049a0 <HAL_UART_RegisterCallback>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <BSP_COM_RegisterDefaultMspCallbacks+0xac>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026c0:	f06f 0303 	mvn.w	r3, #3
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e002      	b.n	80026ce <BSP_COM_RegisterDefaultMspCallbacks+0xb2>
    }
    else
    {
      IsUsart2MspCbValid = 1U;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <BSP_COM_RegisterDefaultMspCallbacks+0xc8>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* BSP status */
  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200005dc 	.word	0x200005dc
 80026dc:	08002721 	.word	0x08002721
 80026e0:	080027a5 	.word	0x080027a5
 80026e4:	200006ac 	.word	0x200006ac

080026e8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <__io_putchar+0x30>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	23cc      	movs	r3, #204	; 0xcc
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <__io_putchar+0x34>)
 80026fe:	1898      	adds	r0, r3, r2
 8002700:	1d39      	adds	r1, r7, #4
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	2201      	movs	r2, #1
 8002708:	f002 fa02 	bl	8004b10 <HAL_UART_Transmit>
  return ch;
 800270c:	687b      	ldr	r3, [r7, #4]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200006a8 	.word	0x200006a8
 800271c:	200005dc 	.word	0x200005dc

08002720 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b096      	sub	sp, #88	; 0x58
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2238      	movs	r2, #56	; 0x38
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f005 fdf4 	bl	800831e <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002736:	2302      	movs	r3, #2
 8002738:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800273e:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4618      	mov	r0, r3
 8002746:	f001 ff31 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800274a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800274e:	f7ff fea7 	bl	80024a0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2001      	movs	r0, #1
 8002754:	f7ff fe8c 	bl	8002470 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002758:	2308      	movs	r3, #8
 800275a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002768:	2307      	movs	r3, #7
 800276a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800276c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f000 fabf 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800277a:	2304      	movs	r3, #4
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800278a:	2307      	movs	r3, #7
 800278c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800278e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002792:	4619      	mov	r1, r3
 8002794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002798:	f000 faae 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800279c:	bf00      	nop
 800279e:	3758      	adds	r7, #88	; 0x58
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <USART2_MspDeInit>:

static void USART2_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80027ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027b0:	f7ff fe8e 	bl	80024d0 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(BUS_USART2_RX_GPIO_PORT, BUS_USART2_RX_GPIO_PIN);
 80027b4:	2108      	movs	r1, #8
 80027b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ba:	f000 fbfd 	bl	8002fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_USART2_TX_GPIO_PORT, BUS_USART2_TX_GPIO_PIN);
 80027be:	2104      	movs	r1, #4
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f000 fbf8 	bl	8002fb8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027da:	2003      	movs	r0, #3
 80027dc:	f000 f982 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027e0:	f001 fd06 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_Init+0x3c>)
 80027e8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f000 f810 	bl	8002810 <HAL_InitTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	e001      	b.n	8002800 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027fc:	f7fe ff25 	bl	800164a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002800:	79fb      	ldrb	r3, [r7, #7]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000000 	.word	0x20000000

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_InitTick+0x6c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d024      	beq.n	800286e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002824:	f001 fce4 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_InitTick+0x6c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	fbb3 f3f1 	udiv	r3, r3, r1
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f992 	bl	8002b66 <HAL_SYSTICK_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	d809      	bhi.n	8002862 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284e:	2200      	movs	r2, #0
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002856:	f000 f950 	bl	8002afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_InitTick+0x70>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e007      	b.n	8002872 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e004      	b.n	8002872 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_IncTick+0x1c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_IncTick+0x20>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a03      	ldr	r2, [pc, #12]	; (80028a4 <HAL_IncTick+0x20>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	200006b0 	.word	0x200006b0

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_GetTick+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	200006b0 	.word	0x200006b0

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fff0 	bl	80028a8 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffe0 	bl	80028a8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000000c 	.word	0x2000000c

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4906      	ldr	r1, [pc, #24]	; (800299c <__NVIC_EnableIRQ+0x34>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db12      	blt.n	80029d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	490a      	ldr	r1, [pc, #40]	; (80029e4 <__NVIC_DisableIRQ+0x44>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	3320      	adds	r3, #32
 80029c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
}
 80029d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029d2:	f3bf 8f6f 	isb	sy
}
 80029d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac4:	f7ff ff90 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff09 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff20 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ff92 	bl	8002a3c <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff61 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff13 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff21 	bl	80029a0 <__NVIC_DisableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff96 	bl	8002aa0 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04f      	b.n	8002c30 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e040      	b.n	8002c30 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 020e 	bic.w	r2, r2, #14
 8002bbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f003 021c 	and.w	r2, r3, #28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bfa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00c      	beq.n	8002c1e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e047      	b.n	8002cee <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 020e 	bic.w	r2, r2, #14
 8002c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f003 021c 	and.w	r2, r3, #28
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002caa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00c      	beq.n	8002cce <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ccc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
    }
  }
  return status;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d06:	e140      	b.n	8002f8a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8132 	beq.w	8002f84 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d005      	beq.n	8002d38 <HAL_GPIO_Init+0x40>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d017      	beq.n	8002dd6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d123      	bne.n	8002e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	6939      	ldr	r1, [r7, #16]
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 808c 	beq.w	8002f84 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e6c:	4a4e      	ldr	r2, [pc, #312]	; (8002fa8 <HAL_GPIO_Init+0x2b0>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	2207      	movs	r2, #7
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e96:	d00d      	beq.n	8002eb4 <HAL_GPIO_Init+0x1bc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a44      	ldr	r2, [pc, #272]	; (8002fac <HAL_GPIO_Init+0x2b4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d007      	beq.n	8002eb0 <HAL_GPIO_Init+0x1b8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_GPIO_Init+0x2b8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_GPIO_Init+0x1b4>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e004      	b.n	8002eb6 <HAL_GPIO_Init+0x1be>
 8002eac:	2307      	movs	r3, #7
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x1be>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_GPIO_Init+0x1be>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	f002 0203 	and.w	r2, r2, #3
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec6:	4938      	ldr	r1, [pc, #224]	; (8002fa8 <HAL_GPIO_Init+0x2b0>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <HAL_GPIO_Init+0x2bc>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3301      	adds	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f aeb7 	bne.w	8002d08 <HAL_GPIO_Init+0x10>
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	48000400 	.word	0x48000400
 8002fb0:	48000800 	.word	0x48000800
 8002fb4:	58000800 	.word	0x58000800

08002fb8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002fc6:	e0af      	b.n	8003128 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002fc8:	2201      	movs	r2, #1
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a2 	beq.w	8003122 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_GPIO_DeInit+0x18c>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003006:	d00d      	beq.n	8003024 <HAL_GPIO_DeInit+0x6c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_GPIO_DeInit+0x190>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <HAL_GPIO_DeInit+0x68>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a4e      	ldr	r2, [pc, #312]	; (800314c <HAL_GPIO_DeInit+0x194>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_GPIO_DeInit+0x64>
 8003018:	2302      	movs	r3, #2
 800301a:	e004      	b.n	8003026 <HAL_GPIO_DeInit+0x6e>
 800301c:	2307      	movs	r3, #7
 800301e:	e002      	b.n	8003026 <HAL_GPIO_DeInit+0x6e>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_DeInit+0x6e>
 8003024:	2300      	movs	r3, #0
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	429a      	cmp	r2, r3
 8003034:	d136      	bne.n	80030a4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 8003038:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	4943      	ldr	r1, [pc, #268]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 8003042:	4013      	ands	r3, r2
 8003044:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003048:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 800304a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	493f      	ldr	r1, [pc, #252]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 8003054:	4013      	ands	r3, r2
 8003056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	493b      	ldr	r1, [pc, #236]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 8003064:	4013      	ands	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_GPIO_DeInit+0x198>)
 8003072:	4013      	ands	r3, r2
 8003074:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	2207      	movs	r2, #7
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003086:	4a2f      	ldr	r2, [pc, #188]	; (8003144 <HAL_GPIO_DeInit+0x18c>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43da      	mvns	r2, r3
 8003096:	482b      	ldr	r0, [pc, #172]	; (8003144 <HAL_GPIO_DeInit+0x18c>)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	400a      	ands	r2, r1
 800309e:	3302      	adds	r3, #2
 80030a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2103      	movs	r1, #3
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	08da      	lsrs	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3208      	adds	r2, #8
 80030c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	08d2      	lsrs	r2, r2, #3
 80030d8:	4019      	ands	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3208      	adds	r2, #8
 80030de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2103      	movs	r1, #3
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2103      	movs	r1, #3
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	401a      	ands	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f af49 	bne.w	8002fc8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	48000400 	.word	0x48000400
 800314c:	48000800 	.word	0x48000800
 8003150:	58000800 	.word	0x58000800

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003170:	e002      	b.n	8003178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
	...

08003184 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_PWR_EnableBkUpAccess+0x18>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a03      	ldr	r2, [pc, #12]	; (800319c <HAL_PWR_EnableBkUpAccess+0x18>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	58000400 	.word	0x58000400

080031a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	58000400 	.word	0x58000400

080031b8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c8:	d101      	bne.n	80031ce <LL_PWR_IsEnabledBkUpAccess+0x16>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	58000400 	.word	0x58000400

080031dc <LL_RCC_HSE_EnableTcxo>:
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <LL_RCC_HSE_DisableTcxo>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003226:	d101      	bne.n	800322c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <LL_RCC_HSE_Enable>:
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <LL_RCC_HSE_Disable>:
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <LL_RCC_HSE_IsReady>:
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003280:	d101      	bne.n	8003286 <LL_RCC_HSE_IsReady+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_RCC_HSE_IsReady+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <LL_RCC_HSI_Enable>:
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <LL_RCC_HSI_Disable>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <LL_RCC_HSI_IsReady>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d101      	bne.n	80032e0 <LL_RCC_HSI_IsReady+0x18>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_RCC_HSI_IsReady+0x1a>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <LL_RCC_HSI_SetCalibTrimming>:
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d101      	bne.n	800332a <LL_RCC_LSE_IsReady+0x18>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_RCC_LSE_IsReady+0x1a>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d101      	bne.n	800338c <LL_RCC_LSI_IsReady+0x18>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <LL_RCC_LSI_IsReady+0x1a>
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d101      	bne.n	80033e4 <LL_RCC_MSI_IsReady+0x16>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_RCC_MSI_IsReady+0x18>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d101      	bne.n	8003404 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800346c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003500:	f023 020f 	bic.w	r2, r3, #15
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800352e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003586:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80035b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800360e:	d101      	bne.n	8003614 <LL_RCC_PLL_IsReady+0x18>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <LL_RCC_PLL_IsReady+0x1a>
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003662:	b480      	push	{r7}
 8003664:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d101      	bne.n	8003690 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ae:	d101      	bne.n	80036b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80036ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d101      	bne.n	80036d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f4:	d101      	bne.n	80036fa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003716:	d101      	bne.n	800371c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
	...

08003728 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e36f      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	f7ff fea6 	bl	800348a <LL_RCC_GetSysClkSource>
 800373e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003740:	f7ff ff8f 	bl	8003662 <LL_RCC_PLL_GetMainSource>
 8003744:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80c4 	beq.w	80038dc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x3e>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d176      	bne.n	800384e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d173      	bne.n	800384e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e353      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_OscConfig+0x68>
 8003784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378e:	e006      	b.n	800379e <HAL_RCC_OscConfig+0x76>
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379e:	4293      	cmp	r3, r2
 80037a0:	d222      	bcs.n	80037e8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fd5a 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e331      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe2b 	bl	800343c <LL_RCC_MSI_SetCalibTrimming>
 80037e6:	e021      	b.n	800382c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fe12 	bl	800343c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd1f 	bl	8004260 <RCC_SetFlashLatencyFromMSIRange>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e2f6      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800382c:	f000 fce0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8003830:	4603      	mov	r3, r0
 8003832:	4aa7      	ldr	r2, [pc, #668]	; (8003ad0 <HAL_RCC_OscConfig+0x3a8>)
 8003834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003836:	4ba7      	ldr	r3, [pc, #668]	; (8003ad4 <HAL_RCC_OscConfig+0x3ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe ffe8 	bl	8002810 <HAL_InitTick>
 8003840:	4603      	mov	r3, r0
 8003842:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d047      	beq.n	80038da <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	e2e5      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02c      	beq.n	80038b0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003856:	f7ff fd9e 	bl	8003396 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800385a:	f7ff f825 	bl	80028a8 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003862:	f7ff f821 	bl	80028a8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e2d2      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003874:	f7ff fdab 	bl	80033ce <LL_RCC_MSI_IsReady>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f1      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003888:	f043 0308 	orr.w	r3, r3, #8
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fdc7 	bl	800343c <LL_RCC_MSI_SetCalibTrimming>
 80038ae:	e015      	b.n	80038dc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b0:	f7ff fd7f 	bl	80033b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fff8 	bl	80028a8 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038bc:	f7fe fff4 	bl	80028a8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e2a5      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80038ce:	f7ff fd7e 	bl	80033ce <LL_RCC_MSI_IsReady>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f1      	bne.n	80038bc <HAL_RCC_OscConfig+0x194>
 80038d8:	e000      	b.n	80038dc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80038da:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d058      	beq.n	800399a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x1d2>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d108      	bne.n	8003906 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14b      	bne.n	800399a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e289      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d102      	bne.n	800392c <HAL_RCC_OscConfig+0x204>
 8003926:	f7ff fc86 	bl	8003236 <LL_RCC_HSE_Enable>
 800392a:	e00d      	b.n	8003948 <HAL_RCC_OscConfig+0x220>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003934:	d104      	bne.n	8003940 <HAL_RCC_OscConfig+0x218>
 8003936:	f7ff fc51 	bl	80031dc <LL_RCC_HSE_EnableTcxo>
 800393a:	f7ff fc7c 	bl	8003236 <LL_RCC_HSE_Enable>
 800393e:	e003      	b.n	8003948 <HAL_RCC_OscConfig+0x220>
 8003940:	f7ff fc87 	bl	8003252 <LL_RCC_HSE_Disable>
 8003944:	f7ff fc58 	bl	80031f8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe ffaa 	bl	80028a8 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe ffa6 	bl	80028a8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e257      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800396a:	f7ff fc80 	bl	800326e <LL_RCC_HSE_IsReady>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f1      	beq.n	8003958 <HAL_RCC_OscConfig+0x230>
 8003974:	e011      	b.n	800399a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fe ff97 	bl	80028a8 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397e:	f7fe ff93 	bl	80028a8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e244      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003990:	f7ff fc6d 	bl	800326e <LL_RCC_HSE_IsReady>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f1      	bne.n	800397e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d046      	beq.n	8003a34 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_OscConfig+0x290>
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d10e      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e22a      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fc8e 	bl	80032ea <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039ce:	e031      	b.n	8003a34 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d019      	beq.n	8003a0c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	f7ff fc5a 	bl	8003290 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe ff64 	bl	80028a8 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fe ff60 	bl	80028a8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e211      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80039f6:	f7ff fc67 	bl	80032c8 <LL_RCC_HSI_IsReady>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f1      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fc70 	bl	80032ea <LL_RCC_HSI_SetCalibTrimming>
 8003a0a:	e013      	b.n	8003a34 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0c:	f7ff fc4e 	bl	80032ac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe ff4a 	bl	80028a8 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fe ff46 	bl	80028a8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e1f7      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a2a:	f7ff fc4d 	bl	80032c8 <LL_RCC_HSI_IsReady>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f1      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d06e      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d056      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a50:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d031      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e1d0      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a82:	f7ff fc67 	bl	8003354 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a86:	f7fe ff0f 	bl	80028a8 <HAL_GetTick>
 8003a8a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7fe ff0b 	bl	80028a8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b11      	cmp	r3, #17
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1bc      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003aa0:	f7ff fc68 	bl	8003374 <LL_RCC_LSI_IsReady>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f1      	bne.n	8003a8e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac4:	f7ff fc36 	bl	8003334 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac8:	f7fe feee 	bl	80028a8 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003ace:	e00c      	b.n	8003aea <HAL_RCC_OscConfig+0x3c2>
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe fee6 	bl	80028a8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b11      	cmp	r3, #17
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e197      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003aea:	f7ff fc43 	bl	8003374 <LL_RCC_LSI_IsReady>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f1      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x3b0>
 8003af4:	e013      	b.n	8003b1e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af6:	f7ff fc2d 	bl	8003354 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7fe fed5 	bl	80028a8 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b02:	f7fe fed1 	bl	80028a8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b11      	cmp	r3, #17
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e182      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003b14:	f7ff fc2e 	bl	8003374 <LL_RCC_LSI_IsReady>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f1      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80d8 	beq.w	8003cdc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003b2c:	f7ff fb44 	bl	80031b8 <LL_PWR_IsEnabledBkUpAccess>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b36:	f7ff fb25 	bl	8003184 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe feb5 	bl	80028a8 <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fe feb1 	bl	80028a8 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e162      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003b54:	f7ff fb30 	bl	80031b8 <LL_PWR_IsEnabledBkUpAccess>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f1      	beq.n	8003b42 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b85      	cmp	r3, #133	; 0x85
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fe8d 	bl	80028a8 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fe7f 	bl	80028a8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e12e      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003bbc:	f7ff fba9 	bl	8003312 <LL_RCC_LSE_IsReady>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b81      	cmp	r3, #129	; 0x81
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b85      	cmp	r3, #133	; 0x85
 8003bd4:	d121      	bne.n	8003c1a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fe67 	bl	80028a8 <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fe fe59 	bl	80028a8 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e108      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ec      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003c18:	e060      	b.n	8003cdc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fe45 	bl	80028a8 <HAL_GetTick>
 8003c1e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fe37 	bl	80028a8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0e6      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ec      	bne.n	8003c36 <HAL_RCC_OscConfig+0x50e>
 8003c5c:	e03e      	b.n	8003cdc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe fe23 	bl	80028a8 <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe fe15 	bl	80028a8 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0c4      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ec      	bne.n	8003c7a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fe02 	bl	80028a8 <HAL_GetTick>
 8003ca4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fdf4 	bl	80028a8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e0a3      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003cd2:	f7ff fb1e 	bl	8003312 <LL_RCC_LSE_IsReady>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ef      	bne.n	8003cbc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8099 	beq.w	8003e18 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	d06c      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d14b      	bne.n	8003d8c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf4:	f7ff fc74 	bl	80035e0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fdd6 	bl	80028a8 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe fdd2 	bl	80028a8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e083      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003d12:	f7ff fc73 	bl	80035fc <LL_RCC_PLL_IsReady>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f1      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_RCC_OscConfig+0x6fc>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d34:	0212      	lsls	r2, r2, #8
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d52:	f7ff fc37 	bl	80035c4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fd9f 	bl	80028a8 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe fd9b 	bl	80028a8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b0a      	cmp	r3, #10
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e04c      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003d80:	f7ff fc3c 	bl	80035fc <LL_RCC_PLL_IsReady>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f1      	beq.n	8003d6e <HAL_RCC_OscConfig+0x646>
 8003d8a:	e045      	b.n	8003e18 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	f7ff fc28 	bl	80035e0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd8a 	bl	80028a8 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fd86 	bl	80028a8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b0a      	cmp	r3, #10
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e037      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003daa:	f7ff fc27 	bl	80035fc <LL_RCC_PLL_IsReady>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f1      	bne.n	8003d98 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCC_OscConfig+0x700>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60cb      	str	r3, [r1, #12]
 8003dc4:	e028      	b.n	8003e18 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e023      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d115      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10e      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	11c1808c 	.word	0x11c1808c
 8003e28:	eefefffc 	.word	0xeefefffc

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e12c      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b98      	ldr	r3, [pc, #608]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d91b      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b95      	ldr	r3, [pc, #596]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4993      	ldr	r1, [pc, #588]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fe fd23 	bl	80028a8 <HAL_GetTick>
 8003e62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e66:	f7fe fd1f 	bl	80028a8 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e110      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	4b8a      	ldr	r3, [pc, #552]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d1ef      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fb02 	bl	80034a0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e9c:	f7fe fd04 	bl	80028a8 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ea4:	f7fe fd00 	bl	80028a8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0f1      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003eb6:	f7ff fbdf 	bl	8003678 <LL_RCC_IsActiveFlag_HPRE>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f1      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff faf8 	bl	80034c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ed6:	f7fe fce7 	bl	80028a8 <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ede:	f7fe fce3 	bl	80028a8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0d4      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ef0:	f7ff fbd3 	bl	800369a <LL_RCC_IsActiveFlag_C2HPRE>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f1      	beq.n	8003ede <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d016      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff faf0 	bl	80034f0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fcca 	bl	80028a8 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f18:	f7fe fcc6 	bl	80028a8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0b7      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f2a:	f7ff fbc8 	bl	80036be <LL_RCC_IsActiveFlag_SHDHPRE>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f1      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fae9 	bl	800351c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f4a:	f7fe fcad 	bl	80028a8 <HAL_GetTick>
 8003f4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f52:	f7fe fca9 	bl	80028a8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e09a      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f64:	f7ff fbbd 	bl	80036e2 <LL_RCC_IsActiveFlag_PPRE1>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f1      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d017      	beq.n	8003faa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fade 	bl	8003542 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f86:	f7fe fc8f 	bl	80028a8 <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f8e:	f7fe fc8b 	bl	80028a8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e07c      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003fa0:	f7ff fbb0 	bl	8003704 <LL_RCC_IsActiveFlag_PPRE2>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f1      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d043      	beq.n	800403e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003fbe:	f7ff f956 	bl	800326e <LL_RCC_HSE_IsReady>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11e      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e066      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d106      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003fd4:	f7ff fb12 	bl	80035fc <LL_RCC_PLL_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d113      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e05b      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003fea:	f7ff f9f0 	bl	80033ce <LL_RCC_MSI_IsReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e050      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003ff8:	f7ff f966 	bl	80032c8 <LL_RCC_HSI_IsReady>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e049      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fa2a 	bl	8003464 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004010:	f7fe fc4a 	bl	80028a8 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	e00a      	b.n	800402e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7fe fc46 	bl	80028a8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e035      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	f7ff fa2c 	bl	800348a <LL_RCC_GetSysClkSource>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	429a      	cmp	r2, r3
 800403c:	d1ec      	bne.n	8004018 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d21b      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 0207 	bic.w	r2, r3, #7
 8004054:	4913      	ldr	r1, [pc, #76]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800405c:	f7fe fc24 	bl	80028a8 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	e008      	b.n	8004076 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004064:	f7fe fc20 	bl	80028a8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e011      	b.n	800409a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_ClockConfig+0x278>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d1ef      	bne.n	8004064 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004084:	f000 f8b4 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004088:	4603      	mov	r3, r0
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_RCC_ClockConfig+0x27c>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_RCC_ClockConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fbbc 	bl	8002810 <HAL_InitTick>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	58004000 	.word	0x58004000
 80040a8:	20000000 	.word	0x20000000
 80040ac:	20000008 	.word	0x20000008

080040b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	f7ff f9e4 	bl	800348a <LL_RCC_GetSysClkSource>
 80040c2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	f7ff facd 	bl	8003662 <LL_RCC_PLL_GetMainSource>
 80040c8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x2c>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d139      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d136      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80040dc:	f7ff f987 	bl	80033ee <LL_RCC_MSI_IsEnabledRangeSelect>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d115      	bne.n	8004112 <HAL_RCC_GetSysClockFreq+0x62>
 80040e6:	f7ff f982 	bl	80033ee <LL_RCC_MSI_IsEnabledRangeSelect>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x4e>
 80040f0:	f7ff f98d 	bl	800340e <LL_RCC_MSI_GetRange>
 80040f4:	4603      	mov	r3, r0
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	e005      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x5a>
 80040fe:	f7ff f991 	bl	8003424 <LL_RCC_MSI_GetRangeAfterStandby>
 8004102:	4603      	mov	r3, r0
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	4a36      	ldr	r2, [pc, #216]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	e014      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x8c>
 8004112:	f7ff f96c 	bl	80033ee <LL_RCC_MSI_IsEnabledRangeSelect>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x7a>
 800411c:	f7ff f977 	bl	800340e <LL_RCC_MSI_GetRange>
 8004120:	4603      	mov	r3, r0
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	e005      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x86>
 800412a:	f7ff f97b 	bl	8003424 <LL_RCC_MSI_GetRangeAfterStandby>
 800412e:	4603      	mov	r3, r0
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x134>)
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d115      	bne.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004148:	e012      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d102      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e00c      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d109      	bne.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800415c:	f7ff f85a 	bl	8003214 <LL_RCC_HSE_IsEnabledDiv2>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e001      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_RCC_GetSysClockFreq+0x13c>)
 800416e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004170:	f7ff f98b 	bl	800348a <LL_RCC_GetSysClkSource>
 8004174:	4603      	mov	r3, r0
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d12f      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800417a:	f7ff fa72 	bl	8003662 <LL_RCC_PLL_GetMainSource>
 800417e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0xde>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d003      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0xe4>
 800418c:	e00d      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x138>)
 8004190:	60fb      	str	r3, [r7, #12]
        break;
 8004192:	e00d      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004194:	f7ff f83e 	bl	8003214 <LL_RCC_HSE_IsEnabledDiv2>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80041a0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80041a2:	e005      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80041a6:	60fb      	str	r3, [r7, #12]
        break;
 80041a8:	e002      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	60fb      	str	r3, [r7, #12]
        break;
 80041ae:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80041b0:	f7ff fa35 	bl	800361e <LL_RCC_PLL_GetN>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	fb03 f402 	mul.w	r4, r3, r2
 80041bc:	f7ff fa46 	bl	800364c <LL_RCC_PLL_GetDivider>
 80041c0:	4603      	mov	r3, r0
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	3301      	adds	r3, #1
 80041c6:	fbb4 f4f3 	udiv	r4, r4, r3
 80041ca:	f7ff fa34 	bl	8003636 <LL_RCC_PLL_GetR>
 80041ce:	4603      	mov	r3, r0
 80041d0:	0f5b      	lsrs	r3, r3, #29
 80041d2:	3301      	adds	r3, #1
 80041d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041d8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80041da:	697b      	ldr	r3, [r7, #20]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}
 80041e4:	0800eb80 	.word	0x0800eb80
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	01e84800 	.word	0x01e84800

080041f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b598      	push	{r3, r4, r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80041f4:	f7ff ff5c 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 80041f8:	4604      	mov	r4, r0
 80041fa:	f7ff f9b5 	bl	8003568 <LL_RCC_GetAHBPrescaler>
 80041fe:	4603      	mov	r3, r0
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	4a03      	ldr	r2, [pc, #12]	; (8004214 <HAL_RCC_GetHCLKFreq+0x24>)
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd98      	pop	{r3, r4, r7, pc}
 8004214:	0800eb20 	.word	0x0800eb20

08004218 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b598      	push	{r3, r4, r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800421c:	f7ff ffe8 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004220:	4604      	mov	r4, r0
 8004222:	f7ff f9b9 	bl	8003598 <LL_RCC_GetAPB1Prescaler>
 8004226:	4603      	mov	r3, r0
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 800422c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004230:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd98      	pop	{r3, r4, r7, pc}
 8004238:	0800eb60 	.word	0x0800eb60

0800423c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b598      	push	{r3, r4, r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004240:	f7ff ffd6 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004244:	4604      	mov	r4, r0
 8004246:	f7ff f9b2 	bl	80035ae <LL_RCC_GetAPB2Prescaler>
 800424a:	4603      	mov	r3, r0
 800424c:	0adb      	lsrs	r3, r3, #11
 800424e:	4a03      	ldr	r2, [pc, #12]	; (800425c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd98      	pop	{r3, r4, r7, pc}
 800425c:	0800eb60 	.word	0x0800eb60

08004260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004278:	f7ff f981 	bl	800357e <LL_RCC_GetAHB3Prescaler>
 800427c:	4603      	mov	r3, r0
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9c      	lsrs	r4, r3, #18
 800429c:	f7fe ff80 	bl	80031a0 <HAL_PWREx_GetVoltageRange>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4619      	mov	r1, r3
 80042a4:	4620      	mov	r0, r4
 80042a6:	f000 f80b 	bl	80042c0 <RCC_SetFlashLatency>
 80042aa:	4603      	mov	r3, r0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd90      	pop	{r4, r7, pc}
 80042b4:	0800eb80 	.word	0x0800eb80
 80042b8:	0800eb20 	.word	0x0800eb20
 80042bc:	431bde83 	.word	0x431bde83

080042c0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80042ca:	4a3a      	ldr	r2, [pc, #232]	; (80043b4 <RCC_SetFlashLatency+0xf4>)
 80042cc:	f107 0320 	add.w	r3, r7, #32
 80042d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042d4:	6018      	str	r0, [r3, #0]
 80042d6:	3304      	adds	r3, #4
 80042d8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80042da:	4a37      	ldr	r2, [pc, #220]	; (80043b8 <RCC_SetFlashLatency+0xf8>)
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042e4:	6018      	str	r0, [r3, #0]
 80042e6:	3304      	adds	r3, #4
 80042e8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80042ea:	4a34      	ldr	r2, [pc, #208]	; (80043bc <RCC_SetFlashLatency+0xfc>)
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80042f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80042f6:	2300      	movs	r3, #0
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d11b      	bne.n	800433a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004302:	2300      	movs	r3, #0
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	e014      	b.n	8004332 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	3338      	adds	r3, #56	; 0x38
 800430e:	443b      	add	r3, r7
 8004310:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4293      	cmp	r3, r2
 800431a:	d807      	bhi.n	800432c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3338      	adds	r3, #56	; 0x38
 8004322:	443b      	add	r3, r7
 8004324:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800432a:	e021      	b.n	8004370 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	3301      	adds	r3, #1
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b02      	cmp	r3, #2
 8004336:	d9e7      	bls.n	8004308 <RCC_SetFlashLatency+0x48>
 8004338:	e01a      	b.n	8004370 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	e014      	b.n	800436a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	443b      	add	r3, r7
 8004348:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4293      	cmp	r3, r2
 8004352:	d807      	bhi.n	8004364 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	443b      	add	r3, r7
 800435c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004362:	e005      	b.n	8004370 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	3301      	adds	r3, #1
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2b02      	cmp	r3, #2
 800436e:	d9e7      	bls.n	8004340 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <RCC_SetFlashLatency+0x100>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 0207 	bic.w	r2, r3, #7
 8004378:	4911      	ldr	r1, [pc, #68]	; (80043c0 <RCC_SetFlashLatency+0x100>)
 800437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004380:	f7fe fa92 	bl	80028a8 <HAL_GetTick>
 8004384:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004386:	e008      	b.n	800439a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004388:	f7fe fa8e 	bl	80028a8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e007      	b.n	80043aa <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <RCC_SetFlashLatency+0x100>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1ef      	bne.n	8004388 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3738      	adds	r7, #56	; 0x38
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	0800ead0 	.word	0x0800ead0
 80043b8:	0800ead8 	.word	0x0800ead8
 80043bc:	0800eae0 	.word	0x0800eae0
 80043c0:	58004000 	.word	0x58004000

080043c4 <LL_RCC_LSE_IsReady>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d101      	bne.n	80043dc <LL_RCC_LSE_IsReady+0x18>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <LL_RCC_LSE_IsReady+0x1a>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_SetUSARTClockSource>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	43db      	mvns	r3, r3
 80043fc:	401a      	ands	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_RCC_SetI2SClockSource>:
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <LL_RCC_SetLPUARTClockSource>:
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <LL_RCC_SetI2CClockSource>:
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004482:	43db      	mvns	r3, r3
 8004484:	401a      	ands	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800448e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <LL_RCC_SetLPTIMClockSource>:
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <LL_RCC_SetRNGClockSource>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80044dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80044e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_SetADCClockSource>:
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <LL_RCC_SetRTCClockSource>:
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <LL_RCC_GetRTCClockSource>:
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <LL_RCC_ForceBackupDomainReset>:
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800456e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <LL_RCC_ReleaseBackupDomainReset>:
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800458e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80045b8:	2300      	movs	r3, #0
 80045ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80045bc:	2300      	movs	r3, #0
 80045be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d058      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80045cc:	f7fe fdda 	bl	8003184 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d0:	f7fe f96a 	bl	80028a8 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80045d6:	e009      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fe f966 	bl	80028a8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	74fb      	strb	r3, [r7, #19]
        break;
 80045ea:	e006      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80045ec:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f8:	d1ee      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d13c      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004600:	f7ff ffa7 	bl	8004552 <LL_RCC_GetRTCClockSource>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	429a      	cmp	r2, r3
 800460c:	d00f      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800461c:	f7ff ffa5 	bl	800456a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004620:	f7ff ffb3 	bl	800458a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe f936 	bl	80028a8 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800463e:	e00b      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fe f932 	bl	80028a8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d902      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	74fb      	strb	r3, [r7, #19]
            break;
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004658:	f7ff feb4 	bl	80043c4 <LL_RCC_LSE_IsReady>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d1ee      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004662:	7cfb      	ldrb	r3, [r7, #19]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff5b 	bl	8004528 <LL_RCC_SetRTCClockSource>
 8004672:	e004      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
 8004678:	e001      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fea9 	bl	80043e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fe9e 	bl	80043e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d004      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fec0 	bl	8004440 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fee6 	bl	80044a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fedb 	bl	80044a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fed0 	bl	80044a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d004      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fea9 	bl	800446a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fe9e 	bl	800446a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fe93 	bl	800446a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fe5e 	bl	8004416 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	d107      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fea5 	bl	80044d4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fea3 	bl	80044fe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d107      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80047d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	58000400 	.word	0x58000400

080047e0 <LL_RCC_GetUSARTClockSource>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	401a      	ands	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	4313      	orrs	r3, r2
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <LL_RCC_GetLPUARTClockSource>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004810:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4013      	ands	r3, r2
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e050      	b.n	80048d8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	2b00      	cmp	r3, #0
 800483e:	d114      	bne.n	800486a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fe63 	bl	8005514 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_UART_Init+0xbc>)
 800485c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fe98 	bl	80055b8 <UART_SetConfig>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 f900 	bl	8005aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 f986 	bl	8005be2 <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	0800497d 	.word	0x0800497d

080048e4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e03c      	b.n	8004970 <HAL_UART_DeInit+0x8c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2224      	movs	r2, #36	; 0x24
 80048fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <HAL_UART_DeInit+0x54>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a11      	ldr	r2, [pc, #68]	; (8004978 <HAL_UART_DeInit+0x94>)
 8004934:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	0800498f 	.word	0x0800498f

0800497c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	460b      	mov	r3, r1
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e09c      	b.n	8004b06 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d16c      	bne.n	8004ab0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d85e      	bhi.n	8004a9a <HAL_UART_RegisterCallback+0xfa>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <HAL_UART_RegisterCallback+0x44>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a23 	.word	0x08004a23
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a37 	.word	0x08004a37
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a4b 	.word	0x08004a4b
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a5f 	.word	0x08004a5f
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004a73 	.word	0x08004a73
 8004a0c:	08004a7d 	.word	0x08004a7d
 8004a10:	08004a87 	.word	0x08004a87
 8004a14:	08004a91 	.word	0x08004a91
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004a20:	e070      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004a2a:	e06b      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004a34:	e066      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004a3e:	e061      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004a48:	e05c      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004a52:	e057      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004a5c:	e052      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004a66:	e04d      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8004a70:	e048      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8004a7a:	e043      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8004a84:	e03e      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8004a8e:	e039      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004a98:	e034      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
        break;
 8004aae:	e029      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11a      	bne.n	8004af0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	2b0b      	cmp	r3, #11
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_RegisterCallback+0x126>
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d005      	beq.n	8004ad0 <HAL_UART_RegisterCallback+0x130>
 8004ac4:	e009      	b.n	8004ada <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8004ace:	e019      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004ad8:	e014      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
        break;
 8004aee:	e009      	b.n	8004b04 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d173      	bne.n	8004c12 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_Transmit+0x26>
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e06c      	b.n	8004c14 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2221      	movs	r2, #33	; 0x21
 8004b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fead 	bl	80028a8 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	88fa      	ldrh	r2, [r7, #6]
 8004b54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d108      	bne.n	8004b7c <HAL_UART_Transmit+0x6c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e003      	b.n	8004b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b84:	e02c      	b.n	8004be0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f001 f874 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e039      	b.n	8004c14 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	3302      	adds	r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	e007      	b.n	8004bce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1cc      	bne.n	8004b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f001 f841 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e006      	b.n	8004c14 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b091      	sub	sp, #68	; 0x44
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d178      	bne.n	8004d26 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_UART_Transmit_IT+0x24>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e071      	b.n	8004d28 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	88fa      	ldrh	r2, [r7, #6]
 8004c56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2221      	movs	r2, #33	; 0x21
 8004c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c78:	d12a      	bne.n	8004cd0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d107      	bne.n	8004c94 <HAL_UART_Transmit_IT+0x78>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d103      	bne.n	8004c94 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <HAL_UART_Transmit_IT+0x118>)
 8004c90:	679a      	str	r2, [r3, #120]	; 0x78
 8004c92:	e002      	b.n	8004c9a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <HAL_UART_Transmit_IT+0x11c>)
 8004c98:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cba:	637a      	str	r2, [r7, #52]	; 0x34
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e5      	bne.n	8004c9a <HAL_UART_Transmit_IT+0x7e>
 8004cce:	e028      	b.n	8004d22 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd8:	d107      	bne.n	8004cea <HAL_UART_Transmit_IT+0xce>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HAL_UART_Transmit_IT+0x120>)
 8004ce6:	679a      	str	r2, [r3, #120]	; 0x78
 8004ce8:	e002      	b.n	8004cf0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_UART_Transmit_IT+0x124>)
 8004cee:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	69f9      	ldr	r1, [r7, #28]
 8004d14:	6a3a      	ldr	r2, [r7, #32]
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e6      	bne.n	8004cf0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e000      	b.n	8004d28 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3744      	adds	r7, #68	; 0x44
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	0800639f 	.word	0x0800639f
 8004d38:	080062c1 	.word	0x080062c1
 8004d3c:	08006201 	.word	0x08006201
 8004d40:	0800614b 	.word	0x0800614b

08004d44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d137      	bne.n	8004dcc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_UART_Receive_IT+0x24>
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e030      	b.n	8004dce <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <HAL_UART_Receive_IT+0x94>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01f      	beq.n	8004dbc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d018      	beq.n	8004dbc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69f9      	ldr	r1, [r7, #28]
 8004dae:	6a3a      	ldr	r2, [r7, #32]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e6      	bne.n	8004d8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f001 f824 	bl	8005e10 <UART_Start_Receive_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e000      	b.n	8004dce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	; 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40008000 	.word	0x40008000

08004ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0ba      	sub	sp, #232	; 0xe8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11b      	bne.n	8004e50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 82f3 	beq.w	800542c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
      }
      return;
 8004e4e:	e2ed      	b.n	800542c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8129 	beq.w	80050ac <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e5e:	4b90      	ldr	r3, [pc, #576]	; (80050a0 <HAL_UART_IRQHandler+0x2c4>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e6a:	4b8e      	ldr	r3, [pc, #568]	; (80050a4 <HAL_UART_IRQHandler+0x2c8>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 811c 	beq.w	80050ac <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xc8>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f043 0201 	orr.w	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d011      	beq.n	8004ed4 <HAL_UART_IRQHandler+0xf8>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f043 0204 	orr.w	r2, r3, #4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d011      	beq.n	8004f04 <HAL_UART_IRQHandler+0x128>
 8004ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d017      	beq.n	8004f40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f20:	4b5f      	ldr	r3, [pc, #380]	; (80050a0 <HAL_UART_IRQHandler+0x2c4>)
 8004f22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	f043 0208 	orr.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <HAL_UART_IRQHandler+0x196>
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8259 	beq.w	8005430 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d005      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d058      	beq.n	8005088 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 f83a 	bl	8006050 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d148      	bne.n	800507c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800501a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800502e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1d9      	bne.n	8004fea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_UART_IRQHandler+0x2cc>)
 8005048:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fdf2 	bl	8002c3a <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01f      	beq.n	800509c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800506a:	4610      	mov	r0, r2
 800506c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506e:	e015      	b.n	800509c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507a:	e00f      	b.n	800509c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005086:	e009      	b.n	800509c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800509a:	e1c9      	b.n	8005430 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	bf00      	nop
    return;
 800509e:	e1c7      	b.n	8005430 <HAL_UART_IRQHandler+0x654>
 80050a0:	10000001 	.word	0x10000001
 80050a4:	04000120 	.word	0x04000120
 80050a8:	0800611b 	.word	0x0800611b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	f040 8157 	bne.w	8005364 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8150 	beq.w	8005364 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8149 	beq.w	8005364 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2210      	movs	r2, #16
 80050d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	f040 80bd 	bne.w	8005264 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8199 	beq.w	8005434 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510c:	429a      	cmp	r2, r3
 800510e:	f080 8191 	bcs.w	8005434 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 8087 	bne.w	800523e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800515a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800515e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005166:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1da      	bne.n	8005130 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800518a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800519e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e1      	bne.n	800517a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e3      	bne.n	80051b6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800520a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800521e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005220:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800522c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e4      	bne.n	80051fc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005238:	4618      	mov	r0, r3
 800523a:	f7fd fca0 	bl	8002b7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8005256:	b292      	uxth	r2, r2
 8005258:	1a8a      	subs	r2, r1, r2
 800525a:	b292      	uxth	r2, r2
 800525c:	4611      	mov	r1, r2
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005262:	e0e7      	b.n	8005434 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005270:	b29b      	uxth	r3, r3
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80d9 	beq.w	8005438 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8005286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80d4 	beq.w	8005438 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052b2:	647b      	str	r3, [r7, #68]	; 0x44
 80052b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e4      	bne.n	8005290 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	623b      	str	r3, [r7, #32]
   return(result);
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052ee:	633a      	str	r2, [r7, #48]	; 0x30
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e1      	bne.n	80052c6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60fb      	str	r3, [r7, #12]
   return(result);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e4      	bne.n	8005316 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005358:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800535c:	4611      	mov	r1, r2
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005362:	e069      	b.n	8005438 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_UART_IRQHandler+0x5b6>
 8005370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005384:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005390:	e055      	b.n	800543e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b00      	cmp	r3, #0
 800539c:	d014      	beq.n	80053c8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03e      	beq.n	800543c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
    }
    return;
 80053c6:	e039      	b.n	800543c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <HAL_UART_IRQHandler+0x60c>
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 f850 	bl	8006486 <UART_EndTransmit_IT>
    return;
 80053e6:	e02a      	b.n	800543e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <HAL_UART_IRQHandler+0x630>
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800540a:	e018      	b.n	800543e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <HAL_UART_IRQHandler+0x662>
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	2b00      	cmp	r3, #0
 800541e:	da0e      	bge.n	800543e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800542a:	e008      	b.n	800543e <HAL_UART_IRQHandler+0x662>
      return;
 800542c:	bf00      	nop
 800542e:	e006      	b.n	800543e <HAL_UART_IRQHandler+0x662>
    return;
 8005430:	bf00      	nop
 8005432:	e004      	b.n	800543e <HAL_UART_IRQHandler+0x662>
      return;
 8005434:	bf00      	nop
 8005436:	e002      	b.n	800543e <HAL_UART_IRQHandler+0x662>
      return;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HAL_UART_IRQHandler+0x662>
    return;
 800543c:	bf00      	nop
  }
}
 800543e:	37e8      	adds	r7, #232	; 0xe8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005500:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
	...

08005514 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a1a      	ldr	r2, [pc, #104]	; (8005588 <UART_InitCallbacksToDefault+0x74>)
 8005520:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <UART_InitCallbacksToDefault+0x78>)
 8005528:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <UART_InitCallbacksToDefault+0x7c>)
 8005530:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <UART_InitCallbacksToDefault+0x80>)
 8005538:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <UART_InitCallbacksToDefault+0x84>)
 8005540:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <UART_InitCallbacksToDefault+0x88>)
 8005548:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <UART_InitCallbacksToDefault+0x8c>)
 8005550:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <UART_InitCallbacksToDefault+0x90>)
 8005558:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a12      	ldr	r2, [pc, #72]	; (80055a8 <UART_InitCallbacksToDefault+0x94>)
 8005560:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a11      	ldr	r2, [pc, #68]	; (80055ac <UART_InitCallbacksToDefault+0x98>)
 8005568:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <UART_InitCallbacksToDefault+0x9c>)
 8005570:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <UART_InitCallbacksToDefault+0xa0>)
 8005578:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	08005457 	.word	0x08005457
 800558c:	08005445 	.word	0x08005445
 8005590:	0800547b 	.word	0x0800547b
 8005594:	08005469 	.word	0x08005469
 8005598:	0800548d 	.word	0x0800548d
 800559c:	0800549f 	.word	0x0800549f
 80055a0:	080054b1 	.word	0x080054b1
 80055a4:	080054c3 	.word	0x080054c3
 80055a8:	08006f41 	.word	0x08006f41
 80055ac:	08006f53 	.word	0x08006f53
 80055b0:	08006f65 	.word	0x08006f65
 80055b4:	080054d5 	.word	0x080054d5

080055b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b08c      	sub	sp, #48	; 0x30
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4313      	orrs	r3, r2
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b94      	ldr	r3, [pc, #592]	; (8005838 <UART_SetConfig+0x280>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a89      	ldr	r2, [pc, #548]	; (800583c <UART_SetConfig+0x284>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005620:	4313      	orrs	r3, r2
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800562e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005638:	430b      	orrs	r3, r1
 800563a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f023 010f 	bic.w	r1, r3, #15
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7a      	ldr	r2, [pc, #488]	; (8005840 <UART_SetConfig+0x288>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d127      	bne.n	80056ac <UART_SetConfig+0xf4>
 800565c:	2003      	movs	r0, #3
 800565e:	f7ff f8bf 	bl	80047e0 <LL_RCC_GetUSARTClockSource>
 8005662:	4603      	mov	r3, r0
 8005664:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005668:	2b03      	cmp	r3, #3
 800566a:	d81b      	bhi.n	80056a4 <UART_SetConfig+0xec>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <UART_SetConfig+0xbc>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005685 	.word	0x08005685
 8005678:	08005695 	.word	0x08005695
 800567c:	0800568d 	.word	0x0800568d
 8005680:	0800569d 	.word	0x0800569d
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568a:	e080      	b.n	800578e <UART_SetConfig+0x1d6>
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e07c      	b.n	800578e <UART_SetConfig+0x1d6>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569a:	e078      	b.n	800578e <UART_SetConfig+0x1d6>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a2:	e074      	b.n	800578e <UART_SetConfig+0x1d6>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e070      	b.n	800578e <UART_SetConfig+0x1d6>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a64      	ldr	r2, [pc, #400]	; (8005844 <UART_SetConfig+0x28c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d138      	bne.n	8005728 <UART_SetConfig+0x170>
 80056b6:	200c      	movs	r0, #12
 80056b8:	f7ff f892 	bl	80047e0 <LL_RCC_GetUSARTClockSource>
 80056bc:	4603      	mov	r3, r0
 80056be:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d82c      	bhi.n	8005720 <UART_SetConfig+0x168>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x114>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005721 	.word	0x08005721
 80056d8:	08005721 	.word	0x08005721
 80056dc:	08005711 	.word	0x08005711
 80056e0:	08005721 	.word	0x08005721
 80056e4:	08005721 	.word	0x08005721
 80056e8:	08005721 	.word	0x08005721
 80056ec:	08005709 	.word	0x08005709
 80056f0:	08005721 	.word	0x08005721
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005719 	.word	0x08005719
 8005700:	2300      	movs	r3, #0
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005706:	e042      	b.n	800578e <UART_SetConfig+0x1d6>
 8005708:	2302      	movs	r3, #2
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570e:	e03e      	b.n	800578e <UART_SetConfig+0x1d6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005716:	e03a      	b.n	800578e <UART_SetConfig+0x1d6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571e:	e036      	b.n	800578e <UART_SetConfig+0x1d6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e032      	b.n	800578e <UART_SetConfig+0x1d6>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a43      	ldr	r2, [pc, #268]	; (800583c <UART_SetConfig+0x284>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d12a      	bne.n	8005788 <UART_SetConfig+0x1d0>
 8005732:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005736:	f7ff f865 	bl	8004804 <LL_RCC_GetLPUARTClockSource>
 800573a:	4603      	mov	r3, r0
 800573c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005740:	d01a      	beq.n	8005778 <UART_SetConfig+0x1c0>
 8005742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005746:	d81b      	bhi.n	8005780 <UART_SetConfig+0x1c8>
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	d00c      	beq.n	8005768 <UART_SetConfig+0x1b0>
 800574e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005752:	d815      	bhi.n	8005780 <UART_SetConfig+0x1c8>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <UART_SetConfig+0x1a8>
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d008      	beq.n	8005770 <UART_SetConfig+0x1b8>
 800575e:	e00f      	b.n	8005780 <UART_SetConfig+0x1c8>
 8005760:	2300      	movs	r3, #0
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005766:	e012      	b.n	800578e <UART_SetConfig+0x1d6>
 8005768:	2302      	movs	r3, #2
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576e:	e00e      	b.n	800578e <UART_SetConfig+0x1d6>
 8005770:	2304      	movs	r3, #4
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005776:	e00a      	b.n	800578e <UART_SetConfig+0x1d6>
 8005778:	2308      	movs	r3, #8
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577e:	e006      	b.n	800578e <UART_SetConfig+0x1d6>
 8005780:	2310      	movs	r3, #16
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005786:	e002      	b.n	800578e <UART_SetConfig+0x1d6>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2a      	ldr	r2, [pc, #168]	; (800583c <UART_SetConfig+0x284>)
 8005794:	4293      	cmp	r3, r2
 8005796:	f040 80a4 	bne.w	80058e2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800579a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d823      	bhi.n	80057ea <UART_SetConfig+0x232>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x1f0>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057eb 	.word	0x080057eb
 80057b8:	080057db 	.word	0x080057db
 80057bc:	080057eb 	.word	0x080057eb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	080057e3 	.word	0x080057e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fe fd24 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 80057d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057d2:	e010      	b.n	80057f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <UART_SetConfig+0x290>)
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057d8:	e00d      	b.n	80057f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fe fc69 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e0:	e009      	b.n	80057f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e8:	e005      	b.n	80057f6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8137 	beq.w	8005a6c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <UART_SetConfig+0x294>)
 8005804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005808:	461a      	mov	r2, r3
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005810:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4413      	add	r3, r2
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	429a      	cmp	r2, r3
 8005820:	d305      	bcc.n	800582e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	429a      	cmp	r2, r3
 800582c:	d910      	bls.n	8005850 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005834:	e11a      	b.n	8005a6c <UART_SetConfig+0x4b4>
 8005836:	bf00      	nop
 8005838:	cfff69f3 	.word	0xcfff69f3
 800583c:	40008000 	.word	0x40008000
 8005840:	40013800 	.word	0x40013800
 8005844:	40004400 	.word	0x40004400
 8005848:	00f42400 	.word	0x00f42400
 800584c:	0800ebc0 	.word	0x0800ebc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2200      	movs	r2, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	60fa      	str	r2, [r7, #12]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	4a8e      	ldr	r2, [pc, #568]	; (8005a98 <UART_SetConfig+0x4e0>)
 800585e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005862:	b29b      	uxth	r3, r3
 8005864:	2200      	movs	r2, #0
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005872:	f7fb fc3f 	bl	80010f4 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	020b      	lsls	r3, r1, #8
 8005888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800588c:	0202      	lsls	r2, r0, #8
 800588e:	6979      	ldr	r1, [r7, #20]
 8005890:	6849      	ldr	r1, [r1, #4]
 8005892:	0849      	lsrs	r1, r1, #1
 8005894:	2000      	movs	r0, #0
 8005896:	460c      	mov	r4, r1
 8005898:	4605      	mov	r5, r0
 800589a:	eb12 0804 	adds.w	r8, r2, r4
 800589e:	eb43 0905 	adc.w	r9, r3, r5
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	469a      	mov	sl, r3
 80058aa:	4693      	mov	fp, r2
 80058ac:	4652      	mov	r2, sl
 80058ae:	465b      	mov	r3, fp
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fb fc1e 	bl	80010f4 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c6:	d308      	bcc.n	80058da <UART_SetConfig+0x322>
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ce:	d204      	bcs.n	80058da <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	e0c8      	b.n	8005a6c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058e0:	e0c4      	b.n	8005a6c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ea:	d167      	bne.n	80059bc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80058ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d828      	bhi.n	8005946 <UART_SetConfig+0x38e>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x344>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005929 	.word	0x08005929
 8005904:	08005931 	.word	0x08005931
 8005908:	08005947 	.word	0x08005947
 800590c:	08005937 	.word	0x08005937
 8005910:	08005947 	.word	0x08005947
 8005914:	08005947 	.word	0x08005947
 8005918:	08005947 	.word	0x08005947
 800591c:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe fc7a 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8005924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005926:	e014      	b.n	8005952 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fe fc88 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b5a      	ldr	r3, [pc, #360]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005934:	e00d      	b.n	8005952 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fe fbbb 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8089 	beq.w	8005a6c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	4a4e      	ldr	r2, [pc, #312]	; (8005a98 <UART_SetConfig+0x4e0>)
 8005960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005964:	461a      	mov	r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	fbb3 f3f2 	udiv	r3, r3, r2
 800596c:	005a      	lsls	r2, r3, #1
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	441a      	add	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d916      	bls.n	80059b4 <UART_SetConfig+0x3fc>
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598c:	d212      	bcs.n	80059b4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f023 030f 	bic.w	r3, r3, #15
 8005996:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	8bfb      	ldrh	r3, [r7, #30]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	8bfa      	ldrh	r2, [r7, #30]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e05b      	b.n	8005a6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059ba:	e057      	b.n	8005a6c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d828      	bhi.n	8005a16 <UART_SetConfig+0x45e>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <UART_SetConfig+0x414>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	08005a01 	.word	0x08005a01
 80059d8:	08005a17 	.word	0x08005a17
 80059dc:	08005a07 	.word	0x08005a07
 80059e0:	08005a17 	.word	0x08005a17
 80059e4:	08005a17 	.word	0x08005a17
 80059e8:	08005a17 	.word	0x08005a17
 80059ec:	08005a0f 	.word	0x08005a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fe fc12 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 80059f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f8:	f7fe fc20 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 80059fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059fe:	e010      	b.n	8005a22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a00:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a04:	e00d      	b.n	8005a22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a06:	f7fe fb53 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005a0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a0c:	e009      	b.n	8005a22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a14:	e005      	b.n	8005a22 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a20:	bf00      	nop
    }

    if (pclk != 0U)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d021      	beq.n	8005a6c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <UART_SetConfig+0x4e0>)
 8005a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	441a      	add	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d909      	bls.n	8005a66 <UART_SetConfig+0x4ae>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d205      	bcs.n	8005a66 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e002      	b.n	8005a6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3730      	adds	r7, #48	; 0x30
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	0800ebc0 	.word	0x0800ebc0
 8005a9c:	00f42400 	.word	0x00f42400

08005aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9e:	d10a      	bne.n	8005bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af02      	add	r7, sp, #8
 8005be8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf2:	f7fc fe59 	bl	80028a8 <HAL_GetTick>
 8005bf6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d10e      	bne.n	8005c24 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f832 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e028      	b.n	8005c76 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d10e      	bne.n	8005c50 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f81c 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e012      	b.n	8005c76 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b09c      	sub	sp, #112	; 0x70
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	e0a9      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	f000 80a5 	beq.w	8005de4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fc fe05 	bl	80028a8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d140      	bne.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e069      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d051      	beq.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d149      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dac:	623a      	str	r2, [r7, #32]
 8005dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	6a3a      	ldr	r2, [r7, #32]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e010      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69da      	ldr	r2, [r3, #28]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	f43f af46 	beq.w	8005c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3770      	adds	r7, #112	; 0x70
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b0a3      	sub	sp, #140	; 0x8c
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e42:	d10e      	bne.n	8005e62 <UART_Start_Receive_IT+0x52>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <UART_Start_Receive_IT+0x48>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e56:	e02d      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	22ff      	movs	r2, #255	; 0xff
 8005e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e60:	e028      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <UART_Start_Receive_IT+0x76>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <UART_Start_Receive_IT+0x6c>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e7a:	e01b      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	227f      	movs	r2, #127	; 0x7f
 8005e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e84:	e016      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e8e:	d10d      	bne.n	8005eac <UART_Start_Receive_IT+0x9c>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <UART_Start_Receive_IT+0x92>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	227f      	movs	r2, #127	; 0x7f
 8005e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ea0:	e008      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	223f      	movs	r2, #63	; 0x3f
 8005ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005eaa:	e003      	b.n	8005eb4 <UART_Start_Receive_IT+0xa4>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2222      	movs	r2, #34	; 0x22
 8005ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005ee8:	673a      	str	r2, [r7, #112]	; 0x70
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005eee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e3      	bne.n	8005ec4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f04:	d14f      	bne.n	8005fa6 <UART_Start_Receive_IT+0x196>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d349      	bcc.n	8005fa6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d107      	bne.n	8005f2c <UART_Start_Receive_IT+0x11c>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a46      	ldr	r2, [pc, #280]	; (8006040 <UART_Start_Receive_IT+0x230>)
 8005f28:	675a      	str	r2, [r3, #116]	; 0x74
 8005f2a:	e002      	b.n	8005f32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a45      	ldr	r2, [pc, #276]	; (8006044 <UART_Start_Receive_IT+0x234>)
 8005f30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01a      	beq.n	8005f70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e4      	bne.n	8005f3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f90:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_Start_Receive_IT+0x160>
 8005fa4:	e046      	b.n	8006034 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fae:	d107      	bne.n	8005fc0 <UART_Start_Receive_IT+0x1b0>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a23      	ldr	r2, [pc, #140]	; (8006048 <UART_Start_Receive_IT+0x238>)
 8005fbc:	675a      	str	r2, [r3, #116]	; 0x74
 8005fbe:	e002      	b.n	8005fc6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a22      	ldr	r2, [pc, #136]	; (800604c <UART_Start_Receive_IT+0x23c>)
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d019      	beq.n	8006002 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005fe2:	677b      	str	r3, [r7, #116]	; 0x74
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_Start_Receive_IT+0x1be>
 8006000:	e018      	b.n	8006034 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	613b      	str	r3, [r7, #16]
   return(result);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f043 0320 	orr.w	r3, r3, #32
 8006016:	67bb      	str	r3, [r7, #120]	; 0x78
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	61bb      	str	r3, [r7, #24]
   return(result);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	378c      	adds	r7, #140	; 0x8c
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	08006bcd 	.word	0x08006bcd
 8006044:	08006861 	.word	0x08006861
 8006048:	080066a1 	.word	0x080066a1
 800604c:	080064e1 	.word	0x080064e1

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b095      	sub	sp, #84	; 0x54
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800606c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006076:	643b      	str	r3, [r7, #64]	; 0x40
 8006078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800607c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	61fb      	str	r3, [r7, #28]
   return(result);
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d118      	bne.n	80060fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f023 0310 	bic.w	r3, r3, #16
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006110:	bf00      	nop
 8006112:	3754      	adds	r7, #84	; 0x54
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800614a:	b480      	push	{r7}
 800614c:	b08f      	sub	sp, #60	; 0x3c
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	2b21      	cmp	r3, #33	; 0x21
 800615a:	d14c      	bne.n	80061f6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d132      	bne.n	80061ce <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	61fb      	str	r3, [r7, #28]
   return(result);
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006188:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e6      	bne.n	8006168 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ae:	633b      	str	r3, [r7, #48]	; 0x30
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6979      	ldr	r1, [r7, #20]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	613b      	str	r3, [r7, #16]
   return(result);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80061cc:	e013      	b.n	80061f6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80061f6:	bf00      	nop
 80061f8:	373c      	adds	r7, #60	; 0x3c
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b091      	sub	sp, #68	; 0x44
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	2b21      	cmp	r3, #33	; 0x21
 8006210:	d151      	bne.n	80062b6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d132      	bne.n	8006284 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	623b      	str	r3, [r7, #32]
   return(result);
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
 800623e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	60fb      	str	r3, [r7, #12]
   return(result);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	617b      	str	r3, [r7, #20]
   return(result);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e6      	bne.n	8006250 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006282:	e018      	b.n	80062b6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629e:	1c9a      	adds	r2, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80062b6:	bf00      	nop
 80062b8:	3744      	adds	r7, #68	; 0x44
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b091      	sub	sp, #68	; 0x44
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	2b21      	cmp	r3, #33	; 0x21
 80062d0:	d160      	bne.n	8006394 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80062d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80062da:	e057      	b.n	800638c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d133      	bne.n	8006350 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	623b      	str	r3, [r7, #32]
   return(result);
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006308:	633a      	str	r2, [r7, #48]	; 0x30
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	60fb      	str	r3, [r7, #12]
   return(result);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69b9      	ldr	r1, [r7, #24]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	617b      	str	r3, [r7, #20]
   return(result);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e6      	bne.n	800631c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800634e:	e021      	b.n	8006394 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006388:	3b01      	subs	r3, #1
 800638a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800638c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1a4      	bne.n	80062dc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006392:	e7ff      	b.n	8006394 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006394:	bf00      	nop
 8006396:	3744      	adds	r7, #68	; 0x44
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800639e:	b480      	push	{r7}
 80063a0:	b091      	sub	sp, #68	; 0x44
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	2b21      	cmp	r3, #33	; 0x21
 80063ae:	d165      	bne.n	800647c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80063b8:	e05c      	b.n	8006474 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d133      	bne.n	800642e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60bb      	str	r3, [r7, #8]
   return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e6      	bne.n	80063fa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800642c:	e026      	b.n	800647c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006438:	2b00      	cmp	r3, #0
 800643a:	d018      	beq.n	800646e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800646e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006470:	3b01      	subs	r3, #1
 8006472:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006476:	2b00      	cmp	r3, #0
 8006478:	d19f      	bne.n	80063ba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800647a:	e7ff      	b.n	800647c <UART_TxISR_16BIT_FIFOEN+0xde>
 800647c:	bf00      	nop
 800647e:	3744      	adds	r7, #68	; 0x44
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b088      	sub	sp, #32
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	60bb      	str	r3, [r7, #8]
   return(result);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6979      	ldr	r1, [r7, #20]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d8:	bf00      	nop
 80064da:	3720      	adds	r7, #32
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b09c      	sub	sp, #112	; 0x70
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f8:	2b22      	cmp	r3, #34	; 0x22
 80064fa:	f040 80c2 	bne.w	8006682 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006508:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800650c:	b2d9      	uxtb	r1, r3
 800650e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006512:	b2da      	uxtb	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	400a      	ands	r2, r1
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 80a5 	bne.w	8006692 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655c:	66bb      	str	r3, [r7, #104]	; 0x68
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006566:	65bb      	str	r3, [r7, #88]	; 0x58
 8006568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800656c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e6      	bne.n	8006548 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	667b      	str	r3, [r7, #100]	; 0x64
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800659a:	647a      	str	r2, [r7, #68]	; 0x44
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a35      	ldr	r2, [pc, #212]	; (800669c <UART_RxISR_8BIT+0x1bc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01f      	beq.n	800660c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	623b      	str	r3, [r7, #32]
   return(result);
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065ee:	663b      	str	r3, [r7, #96]	; 0x60
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
 80065fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d130      	bne.n	8006676 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60fb      	str	r3, [r7, #12]
   return(result);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	617b      	str	r3, [r7, #20]
   return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d103      	bne.n	8006662 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2210      	movs	r2, #16
 8006660:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800666e:	4611      	mov	r1, r2
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006674:	e00d      	b.n	8006692 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
}
 8006680:	e007      	b.n	8006692 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699a      	ldr	r2, [r3, #24]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0208 	orr.w	r2, r2, #8
 8006690:	619a      	str	r2, [r3, #24]
}
 8006692:	bf00      	nop
 8006694:	3770      	adds	r7, #112	; 0x70
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40008000 	.word	0x40008000

080066a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b09c      	sub	sp, #112	; 0x70
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b8:	2b22      	cmp	r3, #34	; 0x22
 80066ba:	f040 80c2 	bne.w	8006842 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066cc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80066ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80066d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80066d6:	4013      	ands	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	1c9a      	adds	r2, r3, #2
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 80a5 	bne.w	8006852 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800671c:	667b      	str	r3, [r7, #100]	; 0x64
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006726:	657b      	str	r3, [r7, #84]	; 0x54
 8006728:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800672c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	663b      	str	r3, [r7, #96]	; 0x60
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800675a:	643a      	str	r2, [r7, #64]	; 0x40
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a35      	ldr	r2, [pc, #212]	; (800685c <UART_RxISR_16BIT+0x1bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01f      	beq.n	80067cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d130      	bne.n	8006836 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6979      	ldr	r1, [r7, #20]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	613b      	str	r3, [r7, #16]
   return(result);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e6      	bne.n	80067da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d103      	bne.n	8006822 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2210      	movs	r2, #16
 8006820:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800682e:	4611      	mov	r1, r2
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006834:	e00d      	b.n	8006852 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
}
 8006840:	e007      	b.n	8006852 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0208 	orr.w	r2, r2, #8
 8006850:	619a      	str	r2, [r3, #24]
}
 8006852:	bf00      	nop
 8006854:	3770      	adds	r7, #112	; 0x70
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40008000 	.word	0x40008000

08006860 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b0ac      	sub	sp, #176	; 0xb0
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800686e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006896:	2b22      	cmp	r3, #34	; 0x22
 8006898:	f040 8188 	bne.w	8006bac <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068a6:	e12b      	b.n	8006b00 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80068b6:	b2d9      	uxtb	r1, r3
 80068b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	400a      	ands	r2, r1
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d055      	beq.n	80069a6 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d011      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	f043 0201 	orr.w	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800692a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d011      	beq.n	800695a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2202      	movs	r2, #2
 8006948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f043 0204 	orr.w	r2, r3, #4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800695a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d011      	beq.n	800698a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	f043 0202 	orr.w	r2, r3, #2
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 80a6 	bne.w	8006b00 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80069c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069d8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80069dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80069e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e4      	bne.n	80069b4 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80069fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a12:	66ba      	str	r2, [r7, #104]	; 0x68
 8006a14:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e1      	bne.n	80069ea <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a61      	ldr	r2, [pc, #388]	; (8006bc4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d021      	beq.n	8006a88 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01a      	beq.n	8006a88 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a74:	657b      	str	r3, [r7, #84]	; 0x54
 8006a76:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e4      	bne.n	8006a52 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d132      	bne.n	8006af6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e4      	bne.n	8006a96 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d103      	bne.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2210      	movs	r2, #16
 8006ae0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8006aee:	4611      	mov	r1, r2
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e004      	b.n	8006b00 <UART_RxISR_8BIT_FIFOEN+0x2a0>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8006b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f47f aec9 	bne.w	80068a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d049      	beq.n	8006bbc <UART_RxISR_8BIT_FIFOEN+0x35c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b2e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d242      	bcs.n	8006bbc <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8006b72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f043 0320 	orr.w	r3, r3, #32
 8006b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e4      	bne.n	8006b74 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006baa:	e007      	b.n	8006bbc <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	37b0      	adds	r7, #176	; 0xb0
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40008000 	.word	0x40008000
 8006bc8:	080064e1 	.word	0x080064e1

08006bcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b0ae      	sub	sp, #184	; 0xb8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bda:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c02:	2b22      	cmp	r3, #34	; 0x22
 8006c04:	f040 818c 	bne.w	8006f20 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c12:	e12f      	b.n	8006e74 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006c2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	1c9a      	adds	r2, r3, #2
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d055      	beq.n	8006d16 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d011      	beq.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2201      	movs	r2, #1
 8006c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	f043 0201 	orr.w	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc0:	f043 0204 	orr.w	r2, r3, #4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d011      	beq.n	8006cfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	f043 0202 	orr.w	r2, r3, #2
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 80a8 	bne.w	8006e74 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e2      	bne.n	8006d24 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3308      	adds	r3, #8
 8006d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e1      	bne.n	8006d5e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a61      	ldr	r2, [pc, #388]	; (8006f38 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d021      	beq.n	8006dfc <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01a      	beq.n	8006dfc <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e4      	bne.n	8006dc6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d132      	bne.n	8006e6a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	f023 0310 	bic.w	r3, r3, #16
 8006e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e4      	bne.n	8006e0a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d103      	bne.n	8006e56 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2210      	movs	r2, #16
 8006e54:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8006e62:	4611      	mov	r1, r2
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
 8006e68:	e004      	b.n	8006e74 <UART_RxISR_16BIT_FIFOEN+0x2a8>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e74:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <UART_RxISR_16BIT_FIFOEN+0x2be>
 8006e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f aec5 	bne.w	8006c14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e90:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e94:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d049      	beq.n	8006f30 <UART_RxISR_16BIT_FIFOEN+0x364>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ea2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d242      	bcs.n	8006f30 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006ece:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e3      	bne.n	8006eaa <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <UART_RxISR_16BIT_FIFOEN+0x370>)
 8006ee6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f043 0320 	orr.w	r3, r3, #32
 8006efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	617b      	str	r3, [r7, #20]
   return(result);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e4      	bne.n	8006ee8 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f1e:	e007      	b.n	8006f30 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	619a      	str	r2, [r3, #24]
}
 8006f30:	bf00      	nop
 8006f32:	37b8      	adds	r7, #184	; 0xb8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40008000 	.word	0x40008000
 8006f3c:	080066a1 	.word	0x080066a1

08006f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e027      	b.n	8006fdc <HAL_UARTEx_DisableFifoMode+0x66>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2224      	movs	r2, #36	; 0x24
 8006f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e02d      	b.n	800705a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2224      	movs	r2, #36	; 0x24
 800700a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f850 	bl	80070e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007076:	2302      	movs	r3, #2
 8007078:	e02d      	b.n	80070d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f812 	bl	80070e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007100:	e031      	b.n	8007166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007102:	2308      	movs	r3, #8
 8007104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007106:	2308      	movs	r3, #8
 8007108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	0e5b      	lsrs	r3, r3, #25
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	0f5b      	lsrs	r3, r3, #29
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	7b3a      	ldrb	r2, [r7, #12]
 800712e:	4910      	ldr	r1, [pc, #64]	; (8007170 <UARTEx_SetNbDataToProcess+0x90>)
 8007130:	5c8a      	ldrb	r2, [r1, r2]
 8007132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007136:	7b3a      	ldrb	r2, [r7, #12]
 8007138:	490e      	ldr	r1, [pc, #56]	; (8007174 <UARTEx_SetNbDataToProcess+0x94>)
 800713a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800713c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	7b7a      	ldrb	r2, [r7, #13]
 800714c:	4908      	ldr	r1, [pc, #32]	; (8007170 <UARTEx_SetNbDataToProcess+0x90>)
 800714e:	5c8a      	ldrb	r2, [r1, r2]
 8007150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007154:	7b7a      	ldrb	r2, [r7, #13]
 8007156:	4907      	ldr	r1, [pc, #28]	; (8007174 <UARTEx_SetNbDataToProcess+0x94>)
 8007158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800715a:	fb93 f3f2 	sdiv	r3, r3, r2
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	0800ebd8 	.word	0x0800ebd8
 8007174:	0800ebe0 	.word	0x0800ebe0

08007178 <MX_GNSS_Init>:

static GNSSParser_Data_t GNSSParser_Data;
static uint8_t msg[256];

void MX_GNSS_Init(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* Initialize the peripherals and the teseo device */
  if(BSP_COM_Init(COM1) != BSP_ERROR_NONE)
 800717c:	2000      	movs	r0, #0
 800717e:	f7fb f9b9 	bl	80024f4 <BSP_COM_Init>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <MX_GNSS_Init+0x14>
  {
    Error_Handler();
 8007188:	f7fa fa5a 	bl	8001640 <Error_Handler>
  }
}
 800718c:	bf00      	nop
 800718e:	bd80      	pop	{r7, pc}

08007190 <MX_GNSS_Process>:

void MX_GNSS_Process(void)
{
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af02      	add	r7, sp, #8
  GNSSParser_Status_t status, check;
  const CUSTOM_GNSS_Msg_t *gnssMsg;

  CUSTOM_GNSS_Init();
 8007196:	f000 f8c7 	bl	8007328 <CUSTOM_GNSS_Init>

  GNSS_PARSER_Init(&GNSSParser_Data);
 800719a:	484a      	ldr	r0, [pc, #296]	; (80072c4 <MX_GNSS_Process+0x134>)
 800719c:	f000 f9f0 	bl	8007580 <GNSS_PARSER_Init>

  for(;;)
  {
    gnssMsg = CUSTOM_GNSS_GetMessage();
 80071a0:	f000 f8d4 	bl	800734c <CUSTOM_GNSS_GetMessage>
 80071a4:	60b8      	str	r0, [r7, #8]

    if(gnssMsg == NULL)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8088 	beq.w	80072be <MX_GNSS_Process+0x12e>
    {
      continue;
    }

    check = GNSS_PARSER_CheckSanity((uint8_t *)gnssMsg->buf, gnssMsg->len);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	889b      	ldrh	r3, [r3, #4]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2200      	movs	r2, #0
 80071ba:	461c      	mov	r4, r3
 80071bc:	4615      	mov	r5, r2
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	4608      	mov	r0, r1
 80071c4:	f000 fa0a 	bl	80075dc <GNSS_PARSER_CheckSanity>
 80071c8:	4603      	mov	r3, r0
 80071ca:	71fb      	strb	r3, [r7, #7]

    if(check != GNSS_PARSER_ERROR)
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d070      	beq.n	80072b4 <MX_GNSS_Process+0x124>
    {
      for(int m = 0; m < 2; m++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e06a      	b.n	80072ae <MX_GNSS_Process+0x11e>
      {
        status = GNSS_PARSER_ParseMsg(&GNSSParser_Data, (eNMEAMsg)m, (uint8_t *)gnssMsg->buf);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	b2d9      	uxtb	r1, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	4838      	ldr	r0, [pc, #224]	; (80072c4 <MX_GNSS_Process+0x134>)
 80071e4:	f000 fa5f 	bl	80076a6 <GNSS_PARSER_ParseMsg>
 80071e8:	4603      	mov	r3, r0
 80071ea:	71bb      	strb	r3, [r7, #6]
        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == GPGGA))
 80071ec:	79bb      	ldrb	r3, [r7, #6]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d05a      	beq.n	80072a8 <MX_GNSS_Process+0x118>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d156      	bne.n	80072a8 <MX_GNSS_Process+0x118>
          GNSS_PRINT((char *)msg);

          sprintf((char *)msg, "GEOF : %d\r\n\n", GNSSParser_Data.gpgga_data.xyz.is_inside_ugm);
          GNSS_PRINT((char *)msg);
          #else
          sprintf((char *)msg, "%02d:%02d:%02d,", GNSSParser_Data.gpgga_data.utc.hh, GNSSParser_Data.gpgga_data.utc.mm, GNSSParser_Data.gpgga_data.utc.ss);
 80071fa:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <MX_GNSS_Process+0x134>)
 80071fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8007200:	461a      	mov	r2, r3
 8007202:	4b30      	ldr	r3, [pc, #192]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007204:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007208:	4619      	mov	r1, r3
 800720a:	4b2e      	ldr	r3, [pc, #184]	; (80072c4 <MX_GNSS_Process+0x134>)
 800720c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	460b      	mov	r3, r1
 8007214:	492c      	ldr	r1, [pc, #176]	; (80072c8 <MX_GNSS_Process+0x138>)
 8007216:	482d      	ldr	r0, [pc, #180]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007218:	f001 ffe4 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 800721c:	482b      	ldr	r0, [pc, #172]	; (80072cc <MX_GNSS_Process+0x13c>)
 800721e:	f000 f85f 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%f,", GNSSParser_Data.gpgga_data.xyz.lat);
 8007222:	4b28      	ldr	r3, [pc, #160]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007224:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007228:	4929      	ldr	r1, [pc, #164]	; (80072d0 <MX_GNSS_Process+0x140>)
 800722a:	4828      	ldr	r0, [pc, #160]	; (80072cc <MX_GNSS_Process+0x13c>)
 800722c:	f001 ffda 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 8007230:	4826      	ldr	r0, [pc, #152]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007232:	f000 f855 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%f,", GNSSParser_Data.gpgga_data.xyz.lon);
 8007236:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800723c:	4924      	ldr	r1, [pc, #144]	; (80072d0 <MX_GNSS_Process+0x140>)
 800723e:	4823      	ldr	r0, [pc, #140]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007240:	f001 ffd0 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 8007244:	4821      	ldr	r0, [pc, #132]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007246:	f000 f84b 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%f,", GNSSParser_Data.gpgga_data.xyz.alt);
 800724a:	4b1e      	ldr	r3, [pc, #120]	; (80072c4 <MX_GNSS_Process+0x134>)
 800724c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007250:	491f      	ldr	r1, [pc, #124]	; (80072d0 <MX_GNSS_Process+0x140>)
 8007252:	481e      	ldr	r0, [pc, #120]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007254:	f001 ffc6 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 8007258:	481c      	ldr	r0, [pc, #112]	; (80072cc <MX_GNSS_Process+0x13c>)
 800725a:	f000 f841 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%d,", GNSSParser_Data.gpgga_data.sats);
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007264:	461a      	mov	r2, r3
 8007266:	491b      	ldr	r1, [pc, #108]	; (80072d4 <MX_GNSS_Process+0x144>)
 8007268:	4818      	ldr	r0, [pc, #96]	; (80072cc <MX_GNSS_Process+0x13c>)
 800726a:	f001 ffbb 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 800726e:	4817      	ldr	r0, [pc, #92]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007270:	f000 f836 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%.2f,", GNSSParser_Data.gsa_data.hdop);
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 fa00 	bl	8000680 <__aeabi_f2d>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4914      	ldr	r1, [pc, #80]	; (80072d8 <MX_GNSS_Process+0x148>)
 8007286:	4811      	ldr	r0, [pc, #68]	; (80072cc <MX_GNSS_Process+0x13c>)
 8007288:	f001 ffac 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 800728c:	480f      	ldr	r0, [pc, #60]	; (80072cc <MX_GNSS_Process+0x13c>)
 800728e:	f000 f827 	bl	80072e0 <GNSS_PRINT>

          sprintf((char *)msg, "%d\r", GNSSParser_Data.gpgga_data.xyz.is_inside_ugm);
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <MX_GNSS_Process+0x134>)
 8007294:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007298:	461a      	mov	r2, r3
 800729a:	4910      	ldr	r1, [pc, #64]	; (80072dc <MX_GNSS_Process+0x14c>)
 800729c:	480b      	ldr	r0, [pc, #44]	; (80072cc <MX_GNSS_Process+0x13c>)
 800729e:	f001 ffa1 	bl	80091e4 <siprintf>
          GNSS_PRINT((char *)msg);
 80072a2:	480a      	ldr	r0, [pc, #40]	; (80072cc <MX_GNSS_Process+0x13c>)
 80072a4:	f000 f81c 	bl	80072e0 <GNSS_PRINT>
      for(int m = 0; m < 2; m++)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	dd91      	ble.n	80071d8 <MX_GNSS_Process+0x48>
          #endif
        }
      }
    }

    CUSTOM_GNSS_ReleaseMessage(CUSTOM_TESEO_LIV3F, gnssMsg);
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	2000      	movs	r0, #0
 80072b8:	f000 f856 	bl	8007368 <CUSTOM_GNSS_ReleaseMessage>
 80072bc:	e770      	b.n	80071a0 <MX_GNSS_Process+0x10>
      continue;
 80072be:	bf00      	nop
    gnssMsg = CUSTOM_GNSS_GetMessage();
 80072c0:	e76e      	b.n	80071a0 <MX_GNSS_Process+0x10>
 80072c2:	bf00      	nop
 80072c4:	200006b8 	.word	0x200006b8
 80072c8:	0800eaec 	.word	0x0800eaec
 80072cc:	20000770 	.word	0x20000770
 80072d0:	0800eafc 	.word	0x0800eafc
 80072d4:	0800eb00 	.word	0x0800eb00
 80072d8:	0800eb04 	.word	0x0800eb04
 80072dc:	0800eb0c 	.word	0x0800eb0c

080072e0 <GNSS_PRINT>:
  }
}

int GNSS_PRINT(char *pBuffer)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)pBuffer, (uint16_t)strlen((char *)pBuffer), 1000) != HAL_OK)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7f8 ff53 	bl	8000194 <strlen>
 80072ee:	4603      	mov	r3, r0
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4809      	ldr	r0, [pc, #36]	; (8007320 <GNSS_PRINT+0x40>)
 80072fa:	f7fd fc09 	bl	8004b10 <HAL_UART_Transmit>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <GNSS_PRINT+0x28>
  {
    return 1;
 8007304:	2301      	movs	r3, #1
 8007306:	e006      	b.n	8007316 <GNSS_PRINT+0x36>
  }
  fflush(stdout);
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <GNSS_PRINT+0x44>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fed6 	bl	80080c0 <fflush>

  return 0;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200005dc 	.word	0x200005dc
 8007324:	20000010 	.word	0x20000010

08007328 <CUSTOM_GNSS_Init>:

#endif /* USE_I2C */
#endif

int32_t CUSTOM_GNSS_Init()
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]

  if (TESEO_LIV3F_Probe() != BSP_ERROR_NONE)
 8007332:	f000 f839 	bl	80073a8 <TESEO_LIV3F_Probe>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <CUSTOM_GNSS_Init+0x1a>
  {
    ret = BSP_ERROR_NO_INIT;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007340:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8007342:	687b      	ldr	r3, [r7, #4]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <CUSTOM_GNSS_GetMessage>:

  return ret;
}

const CUSTOM_GNSS_Msg_t* CUSTOM_GNSS_GetMessage()
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
  const CUSTOM_GNSS_Msg_t* msg;

  msg = (CUSTOM_GNSS_Msg_t *)TESEO_LIV3F_GetMessage(&teseo_liv3f_obj);
 8007352:	4804      	ldr	r0, [pc, #16]	; (8007364 <CUSTOM_GNSS_GetMessage+0x18>)
 8007354:	f7fa fcc8 	bl	8001ce8 <TESEO_LIV3F_GetMessage>
 8007358:	6078      	str	r0, [r7, #4]

  return msg;
 800735a:	687b      	ldr	r3, [r7, #4]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000870 	.word	0x20000870

08007368 <CUSTOM_GNSS_ReleaseMessage>:

int32_t CUSTOM_GNSS_ReleaseMessage(uint32_t Instance, const CUSTOM_GNSS_Msg_t *Message)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_GNSS_INSTANCES_NBR)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <CUSTOM_GNSS_ReleaseMessage+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007378:	f06f 0301 	mvn.w	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e00c      	b.n	800739a <CUSTOM_GNSS_ReleaseMessage+0x32>
  }
  else
  {
    if (TESEO_LIV3F_ReleaseMessage(&teseo_liv3f_obj, (TESEO_LIV3F_Msg_t*)Message) != BSP_ERROR_NONE)
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	4808      	ldr	r0, [pc, #32]	; (80073a4 <CUSTOM_GNSS_ReleaseMessage+0x3c>)
 8007384:	f7fa fcbe 	bl	8001d04 <TESEO_LIV3F_ReleaseMessage>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <CUSTOM_GNSS_ReleaseMessage+0x2e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800738e:	f06f 0304 	mvn.w	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e001      	b.n	800739a <CUSTOM_GNSS_ReleaseMessage+0x32>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000870 	.word	0x20000870

080073a8 <TESEO_LIV3F_Probe>:
/**
 * @brief  Register Bus IOs for instance 0
 * @retval BSP status
 */
static int32_t TESEO_LIV3F_Probe(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08a      	sub	sp, #40	; 0x28
 80073ac:	af00      	add	r7, sp, #0
  io_ctx.Transmit_IT = CUSTOM_GNSS_I2C_Transmit_IT;
  io_ctx.Receive_IT  = CUSTOM_GNSS_I2C_Receive_IT;

#else

  io_ctx.BusType     = TESEO_LIV3F_UART_BUS;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]
  io_ctx.Init        = CUSTOM_GNSS_UART_Init;
 80073b2:	4b16      	ldr	r3, [pc, #88]	; (800740c <TESEO_LIV3F_Probe+0x64>)
 80073b4:	603b      	str	r3, [r7, #0]
  io_ctx.DeInit      = CUSTOM_GNSS_UART_DeInit;
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <TESEO_LIV3F_Probe+0x68>)
 80073b8:	607b      	str	r3, [r7, #4]
  io_ctx.Transmit_IT = CUSTOM_GNSS_UART_Transmit_IT;
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <TESEO_LIV3F_Probe+0x6c>)
 80073bc:	613b      	str	r3, [r7, #16]
  io_ctx.Receive_IT  = CUSTOM_GNSS_UART_Receive_IT;
 80073be:	4b16      	ldr	r3, [pc, #88]	; (8007418 <TESEO_LIV3F_Probe+0x70>)
 80073c0:	617b      	str	r3, [r7, #20]
  io_ctx.ClearOREF   = CUSTOM_GNSS_UART_ClearOREF;
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <TESEO_LIV3F_Probe+0x74>)
 80073c4:	623b      	str	r3, [r7, #32]

#endif

  io_ctx.Reset         = CUSTOM_GNSS_Rst;
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <TESEO_LIV3F_Probe+0x78>)
 80073c8:	61bb      	str	r3, [r7, #24]
  io_ctx.GetTick       = CUSTOM_GNSS_GetTick;
 80073ca:	4b16      	ldr	r3, [pc, #88]	; (8007424 <TESEO_LIV3F_Probe+0x7c>)
 80073cc:	61fb      	str	r3, [r7, #28]

//  CUSTOM_RegisterDefaultMspCallbacks();

  if (TESEO_LIV3F_RegisterBusIO(&teseo_liv3f_obj, &io_ctx) != TESEO_LIV3F_OK)
 80073ce:	463b      	mov	r3, r7
 80073d0:	4619      	mov	r1, r3
 80073d2:	4815      	ldr	r0, [pc, #84]	; (8007428 <TESEO_LIV3F_Probe+0x80>)
 80073d4:	f7fa fc02 	bl	8001bdc <TESEO_LIV3F_RegisterBusIO>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <TESEO_LIV3F_Probe+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80073de:	f06f 0306 	mvn.w	r3, #6
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
 80073e4:	e00d      	b.n	8007402 <TESEO_LIV3F_Probe+0x5a>
  }
  else
  {
    if (TESEO_LIV3F_Init(&teseo_liv3f_obj) != TESEO_LIV3F_OK)
 80073e6:	4810      	ldr	r0, [pc, #64]	; (8007428 <TESEO_LIV3F_Probe+0x80>)
 80073e8:	f7fa fc50 	bl	8001c8c <TESEO_LIV3F_Init>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <TESEO_LIV3F_Probe+0x52>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80073f2:	f06f 0304 	mvn.w	r3, #4
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
 80073f8:	e003      	b.n	8007402 <TESEO_LIV3F_Probe+0x5a>
    }
    else
    {
      CUSTOM_GNSS_RegisterCallbacks();
 80073fa:	f000 f82f 	bl	800745c <CUSTOM_GNSS_RegisterCallbacks>

      ret = BSP_ERROR_NONE;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return ret;
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007404:	4618      	mov	r0, r3
 8007406:	3728      	adds	r7, #40	; 0x28
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	0800173d 	.word	0x0800173d
 8007410:	080017b1 	.word	0x080017b1
 8007414:	080074a1 	.word	0x080074a1
 8007418:	080074e5 	.word	0x080074e5
 800741c:	08007569 	.word	0x08007569
 8007420:	0800742d 	.word	0x0800742d
 8007424:	08001865 	.word	0x08001865
 8007428:	20000870 	.word	0x20000870

0800742c <CUSTOM_GNSS_Rst>:

static void CUSTOM_GNSS_Rst(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CUSTOM_RST_PORT, CUSTOM_RST_PIN, GPIO_PIN_RESET);
 8007430:	2200      	movs	r2, #0
 8007432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <CUSTOM_GNSS_Rst+0x2c>)
 8007438:	f7fb fe8c 	bl	8003154 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800743c:	200a      	movs	r0, #10
 800743e:	f7fb fa3d 	bl	80028bc <HAL_Delay>
  HAL_GPIO_WritePin(CUSTOM_RST_PORT, CUSTOM_RST_PIN, GPIO_PIN_SET);
 8007442:	2201      	movs	r2, #1
 8007444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007448:	4803      	ldr	r0, [pc, #12]	; (8007458 <CUSTOM_GNSS_Rst+0x2c>)
 800744a:	f7fb fe83 	bl	8003154 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 800744e:	2096      	movs	r0, #150	; 0x96
 8007450:	f7fb fa34 	bl	80028bc <HAL_Delay>
}
 8007454:	bf00      	nop
 8007456:	bd80      	pop	{r7, pc}
 8007458:	48000400 	.word	0x48000400

0800745c <CUSTOM_GNSS_RegisterCallbacks>:

static void CUSTOM_GNSS_RegisterCallbacks(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0

#else

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  // FIXME: check the return value instead
  (void)CUSTOM_RegisterRxCb(CUSTOM_GNSS_UART_RxCb);
 8007460:	4803      	ldr	r0, [pc, #12]	; (8007470 <CUSTOM_GNSS_RegisterCallbacks+0x14>)
 8007462:	f000 f861 	bl	8007528 <BSP_USART1_RegisterRxCallback>
  (void)CUSTOM_RegisterErrorCb(CUSTOM_GNSS_UART_ErrorCb);
 8007466:	4803      	ldr	r0, [pc, #12]	; (8007474 <CUSTOM_GNSS_RegisterCallbacks+0x18>)
 8007468:	f000 f86e 	bl	8007548 <BSP_USART1_RegisterErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

#endif /* USE_I2C */
}
 800746c:	bf00      	nop
 800746e:	bd80      	pop	{r7, pc}
 8007470:	08007479 	.word	0x08007479
 8007474:	0800748d 	.word	0x0800748d

08007478 <CUSTOM_GNSS_UART_RxCb>:

#else

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void CUSTOM_GNSS_UART_RxCb(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  (void)(huart);
  TESEO_LIV3F_UART_RxCb();
 8007480:	f7fa fc50 	bl	8001d24 <TESEO_LIV3F_UART_RxCb>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <CUSTOM_GNSS_UART_ErrorCb>:

void CUSTOM_GNSS_UART_ErrorCb(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  (void)(huart);
  TESEO_LIV3F_UART_ErrorCb();
 8007494:	f7fa fc4d 	bl	8001d32 <TESEO_LIV3F_UART_ErrorCb>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <BSP_USART1_Send_IT>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t BSP_USART1_Send_IT(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	80fb      	strh	r3, [r7, #6]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80074b0:	f06f 0307 	mvn.w	r3, #7
 80074b4:	60fb      	str	r3, [r7, #12]

  UNUSED(DevAddr);

  if(HAL_UART_Transmit_IT(&huart1, (uint8_t *)pData, Length) == HAL_OK)
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	4808      	ldr	r0, [pc, #32]	; (80074e0 <BSP_USART1_Send_IT+0x40>)
 80074be:	f7fd fbad 	bl	8004c1c <HAL_UART_Transmit_IT>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <BSP_USART1_Send_IT+0x2e>
  {
    ret = BSP_ERROR_NONE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e002      	b.n	80074d4 <BSP_USART1_Send_IT+0x34>
  }
  else
  {
    ret =  BSP_ERROR_PERIPH_FAILURE;
 80074ce:	f06f 0303 	mvn.w	r3, #3
 80074d2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000204 	.word	0x20000204

080074e4 <BSP_USART1_Recv_IT>:
  * @param  pData Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t BSP_USART1_Recv_IT(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	80fb      	strh	r3, [r7, #6]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80074f4:	f06f 0307 	mvn.w	r3, #7
 80074f8:	60fb      	str	r3, [r7, #12]

  UNUSED(DevAddr);

  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)pData, Length) == HAL_OK)
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	4808      	ldr	r0, [pc, #32]	; (8007524 <BSP_USART1_Recv_IT+0x40>)
 8007502:	f7fd fc1f 	bl	8004d44 <HAL_UART_Receive_IT>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <BSP_USART1_Recv_IT+0x2e>
  {
    ret = BSP_ERROR_NONE;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e002      	b.n	8007518 <BSP_USART1_Recv_IT+0x34>
  }
  else
  {
    ret =  BSP_ERROR_PERIPH_FAILURE;
 8007512:	f06f 0303 	mvn.w	r3, #3
 8007516:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000204 	.word	0x20000204

08007528 <BSP_USART1_RegisterRxCallback>:

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
int32_t BSP_USART1_RegisterRxCallback(pUART_CallbackTypeDef pCallback)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  return HAL_UART_RegisterCallback(&huart1, HAL_UART_RX_COMPLETE_CB_ID, pCallback);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	2103      	movs	r1, #3
 8007534:	4803      	ldr	r0, [pc, #12]	; (8007544 <BSP_USART1_RegisterRxCallback+0x1c>)
 8007536:	f7fd fa33 	bl	80049a0 <HAL_UART_RegisterCallback>
 800753a:	4603      	mov	r3, r0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000204 	.word	0x20000204

08007548 <BSP_USART1_RegisterErrorCallback>:

int32_t BSP_USART1_RegisterErrorCallback(pUART_CallbackTypeDef pCallback)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  return HAL_UART_RegisterCallback(&huart1, HAL_UART_ERROR_CB_ID, pCallback);
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	2104      	movs	r1, #4
 8007554:	4803      	ldr	r0, [pc, #12]	; (8007564 <BSP_USART1_RegisterErrorCallback+0x1c>)
 8007556:	f7fd fa23 	bl	80049a0 <HAL_UART_RegisterCallback>
 800755a:	4603      	mov	r3, r0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000204 	.word	0x20000204

08007568 <BSP_USART1_ClearOREF>:
#endif

void BSP_USART1_ClearOREF(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_ORE);
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <BSP_USART1_ClearOREF+0x14>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2208      	movs	r2, #8
 8007572:	621a      	str	r2, [r3, #32]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr
 800757c:	20000204 	.word	0x20000204

08007580 <GNSS_PARSER_Init>:
#include "gnss_parser.h"

/* Exported functions --------------------------------------------------------*/

GNSSParser_Status_t GNSS_PARSER_Init(GNSSParser_Data_t *pGNSSParser_Data)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  GNSSParser_Status_t ret;

  if (pGNSSParser_Data != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01f      	beq.n	80075ce <GNSS_PARSER_Init+0x4e>
  {
    pGNSSParser_Data->debug = DEBUG_ON;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	701a      	strb	r2, [r3, #0]
    (void)memset((void *)(&pGNSSParser_Data->gpgga_data), 0, sizeof(GPGGA_Info_t));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3308      	adds	r3, #8
 8007598:	2248      	movs	r2, #72	; 0x48
 800759a:	2100      	movs	r1, #0
 800759c:	4618      	mov	r0, r3
 800759e:	f000 febe 	bl	800831e <memset>
    pGNSSParser_Data->gpgga_data.xyz.ew = (uint8_t)' ';
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    pGNSSParser_Data->gpgga_data.xyz.ns = (uint8_t)' ';
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pGNSSParser_Data->gpgga_data.xyz.mis = (uint8_t)' ';
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    
    (void)memset((void *)(&pGNSSParser_Data->gsa_data), 0, sizeof(GSA_Info_t));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3350      	adds	r3, #80	; 0x50
 80075be:	2264      	movs	r2, #100	; 0x64
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 feab 	bl	800831e <memset>

    ret = GNSS_PARSER_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	e001      	b.n	80075d2 <GNSS_PARSER_Init+0x52>
  }
  else
  {
    ret = GNSS_PARSER_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <GNSS_PARSER_CheckSanity>:

GNSSParser_Status_t GNSS_PARSER_CheckSanity(uint8_t *pSentence, uint64_t len)
{
 80075dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075e0:	b08b      	sub	sp, #44	; 0x2c
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	e9c7 2300 	strd	r2, r3, [r7]
  GNSSParser_Status_t ret;
  uint32_t checksum, check = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
  
  if((len > 0U) && (len < 5U))
 80075ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	d009      	beq.n	800760a <GNSS_PARSER_CheckSanity+0x2e>
 80075f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fa:	2a05      	cmp	r2, #5
 80075fc:	f173 0300 	sbcs.w	r3, r3, #0
 8007600:	d203      	bcs.n	800760a <GNSS_PARSER_CheckSanity+0x2e>
  {
    ret = GNSS_PARSER_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007608:	e046      	b.n	8007698 <GNSS_PARSER_CheckSanity+0xbc>
  }
  else if(len == 0U)
 800760a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760e:	4313      	orrs	r3, r2
 8007610:	d103      	bne.n	800761a <GNSS_PARSER_CheckSanity+0x3e>
  {
    ret = GNSS_PARSER_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007618:	e03e      	b.n	8007698 <GNSS_PARSER_CheckSanity+0xbc>
  }
  else
  {
    checksum = (char2int(pSentence[len-4U]) << 4) | char2int(pSentence[len-3U]);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	3b04      	subs	r3, #4
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 faf1 	bl	8007c0c <char2int>
 800762a:	4603      	mov	r3, r0
 800762c:	011e      	lsls	r6, r3, #4
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	3b03      	subs	r3, #3
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fae7 	bl	8007c0c <char2int>
 800763e:	4603      	mov	r3, r0
 8007640:	4333      	orrs	r3, r6
 8007642:	617b      	str	r3, [r7, #20]
    
    for(uint64_t c = 1U; c < (len-5U); c++) {
 8007644:	f04f 0201 	mov.w	r2, #1
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007650:	e00f      	b.n	8007672 <GNSS_PARSER_CheckSanity+0x96>
      check = (check ^ pSentence[c]);
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	4053      	eors	r3, r2
 8007660:	623b      	str	r3, [r7, #32]
    for(uint64_t c = 1U; c < (len-5U); c++) {
 8007662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007666:	f112 0801 	adds.w	r8, r2, #1
 800766a:	f143 0900 	adc.w	r9, r3, #0
 800766e:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8007672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007676:	1f54      	subs	r4, r2, #5
 8007678:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800767c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007680:	42a2      	cmp	r2, r4
 8007682:	41ab      	sbcs	r3, r5
 8007684:	d3e5      	bcc.n	8007652 <GNSS_PARSER_CheckSanity+0x76>
    }

    ret = (check == checksum) ? GNSS_PARSER_OK : GNSS_PARSER_ERROR;
 8007686:	6a3a      	ldr	r2, [r7, #32]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	429a      	cmp	r2, r3
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
    
  return ret;
 8007698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800769c:	4618      	mov	r0, r3
 800769e:	372c      	adds	r7, #44	; 0x2c
 80076a0:	46bd      	mov	sp, r7
 80076a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080076a6 <GNSS_PARSER_ParseMsg>:

GNSSParser_Status_t GNSS_PARSER_ParseMsg(GNSSParser_Data_t *pGNSSParser_Data, uint8_t msg, uint8_t *pBuffer)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b086      	sub	sp, #24
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	460b      	mov	r3, r1
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	72fb      	strb	r3, [r7, #11]
  ParseStatus_t status = PARSE_FAIL;
 80076b4:	2301      	movs	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]

  switch(msg) {
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <GNSS_PARSER_ParseMsg+0x1e>
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d009      	beq.n	80076d6 <GNSS_PARSER_ParseMsg+0x30>
    break;
  case GSA:
    status = NMEA_ParseGSA(&pGNSSParser_Data->gsa_data, pBuffer);
    break;
  default:
    break;
 80076c2:	e011      	b.n	80076e8 <GNSS_PARSER_ParseMsg+0x42>
    status = NMEA_ParseGPGGA(&pGNSSParser_Data->gpgga_data, pBuffer);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3308      	adds	r3, #8
 80076c8:	6879      	ldr	r1, [r7, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f88c 	bl	80077e8 <NMEA_ParseGPGGA>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]
    break;
 80076d4:	e008      	b.n	80076e8 <GNSS_PARSER_ParseMsg+0x42>
    status = NMEA_ParseGSA(&pGNSSParser_Data->gsa_data, pBuffer);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3350      	adds	r3, #80	; 0x50
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f9b1 	bl	8007a44 <NMEA_ParseGSA>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]
    break;
 80076e6:	bf00      	nop
  }
    
  return ((status == PARSE_FAIL) ? GNSS_PARSER_ERROR : GNSS_PARSER_OK);
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <scan_utc>:
/*
 * Function that scans a string with UTC Info_t and fills all fields of a
 * UTC_Info_t struct
 */
static void scan_utc(uint8_t *pUTCStr, UTC_Info_t *pUTC)
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  pUTC->utc = strtol((char *)pUTCStr,NULL,10);
 8007706:	220a      	movs	r2, #10
 8007708:	2100      	movs	r1, #0
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f002 fcce 	bl	800a0ac <strtol>
 8007710:	4602      	mov	r2, r0
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	601a      	str	r2, [r3, #0]
  
  pUTC->hh = (pUTC->utc / 10000);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a24      	ldr	r2, [pc, #144]	; (80077ac <scan_utc+0xb0>)
 800771c:	fb82 1203 	smull	r1, r2, r2, r3
 8007720:	1312      	asrs	r2, r2, #12
 8007722:	17db      	asrs	r3, r3, #31
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	b21a      	sxth	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	809a      	strh	r2, [r3, #4]
  pUTC->mm = (pUTC->utc - (pUTC->hh * 10000)) / 100;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <scan_utc+0xb4>)
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <scan_utc+0xb8>)
 8007742:	fb82 1203 	smull	r1, r2, r2, r3
 8007746:	1152      	asrs	r2, r2, #5
 8007748:	17db      	asrs	r3, r3, #31
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	b21a      	sxth	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	80da      	strh	r2, [r3, #6]
  pUTC->ss = pUTC->utc - ((pUTC->hh * 10000) + (pUTC->mm * 100));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	b29a      	uxth	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800775e:	b29b      	uxth	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	0149      	lsls	r1, r1, #5
 8007764:	1ac9      	subs	r1, r1, r3
 8007766:	0089      	lsls	r1, r1, #2
 8007768:	440b      	add	r3, r1
 800776a:	4619      	mov	r1, r3
 800776c:	0088      	lsls	r0, r1, #2
 800776e:	4619      	mov	r1, r3
 8007770:	4603      	mov	r3, r0
 8007772:	440b      	add	r3, r1
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	b299      	uxth	r1, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800777e:	b29b      	uxth	r3, r3
 8007780:	4618      	mov	r0, r3
 8007782:	0080      	lsls	r0, r0, #2
 8007784:	4403      	add	r3, r0
 8007786:	4618      	mov	r0, r3
 8007788:	0084      	lsls	r4, r0, #2
 800778a:	4618      	mov	r0, r3
 800778c:	4623      	mov	r3, r4
 800778e:	4403      	add	r3, r0
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	b29b      	uxth	r3, r3
 8007794:	440b      	add	r3, r1
 8007796:	b29b      	uxth	r3, r3
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	b29b      	uxth	r3, r3
 800779c:	b21a      	sxth	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	811a      	strh	r2, [r3, #8]
  
  return;
 80077a2:	bf00      	nop
}
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd90      	pop	{r4, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	68db8bad 	.word	0x68db8bad
 80077b0:	ffffd8f0 	.word	0xffffd8f0
 80077b4:	51eb851f 	.word	0x51eb851f

080077b8 <nmea_checksum>:

/*
 * Function that executes the 'OR' operation between first two elements of a buffer
 */
static uint32_t nmea_checksum(const uint8_t buf[])
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  return ((char2int(buf[0]) << 4) | (char2int(buf[1])));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fa21 	bl	8007c0c <char2int>
 80077ca:	4603      	mov	r3, r0
 80077cc:	011c      	lsls	r4, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3301      	adds	r3, #1
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa19 	bl	8007c0c <char2int>
 80077da:	4603      	mov	r3, r0
 80077dc:	4323      	orrs	r3, r4
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd90      	pop	{r4, r7, pc}
	...

080077e8 <NMEA_ParseGPGGA>:

ParseStatus_t NMEA_ParseGPGGA(GPGGA_Info_t *pGPGGAInfo, uint8_t NMEA[])
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	623b      	str	r3, [r7, #32]

  ParseStatus_t status = PARSE_FAIL;
 80077f6:	2301      	movs	r3, #1
 80077f8:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL) {
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8105 	beq.w	8007a0c <NMEA_ParseGPGGA+0x224>

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	77bb      	strb	r3, [r7, #30]
 8007806:	e012      	b.n	800782e <NMEA_ParseGPGGA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8007808:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 8007816:	4413      	add	r3, r2
 8007818:	2230      	movs	r2, #48	; 0x30
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fd7e 	bl	800831e <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8007822:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3301      	adds	r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	77bb      	strb	r3, [r7, #30]
 800782e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007832:	2b2f      	cmp	r3, #47	; 0x2f
 8007834:	dde8      	ble.n	8007808 <NMEA_ParseGPGGA+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e040      	b.n	80078c6 <NMEA_ParseGPGGA+0xde>
    {
      new_field = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	627b      	str	r3, [r7, #36]	; 0x24

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b2c      	cmp	r3, #44	; 0x2c
 8007852:	d005      	beq.n	8007860 <NMEA_ParseGPGGA+0x78>
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4413      	add	r3, r2
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b2a      	cmp	r3, #42	; 0x2a
 800785e:	d11a      	bne.n	8007896 <NMEA_ParseGPGGA+0xae>
      {
        app[j][k] = (uint8_t)'\0';
 8007860:	496d      	ldr	r1, [pc, #436]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4613      	mov	r3, r2
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	4413      	add	r3, r2
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	18ca      	adds	r2, r1, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8007876:	2301      	movs	r3, #1
 8007878:	627b      	str	r3, [r7, #36]	; 0x24

        if (strcmp((char *)app[0], "$GPGGA") == 0) {
 800787a:	4968      	ldr	r1, [pc, #416]	; (8007a1c <NMEA_ParseGPGGA+0x234>)
 800787c:	4866      	ldr	r0, [pc, #408]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 800787e:	f7f8 fc7f 	bl	8000180 <strcmp>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d125      	bne.n	80078d4 <NMEA_ParseGPGGA+0xec>
          j++;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	3301      	adds	r3, #1
 800788c:	617b      	str	r3, [r7, #20]
          k = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 8007892:	2301      	movs	r3, #1
 8007894:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d111      	bne.n	80078c0 <NMEA_ParseGPGGA+0xd8>
      {
        app[j][k] = NMEA[i];
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4413      	add	r3, r2
 80078a2:	7818      	ldrb	r0, [r3, #0]
 80078a4:	495c      	ldr	r1, [pc, #368]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4613      	mov	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	18ca      	adds	r2, r1, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4413      	add	r3, r2
 80078b6:	4602      	mov	r2, r0
 80078b8:	701a      	strb	r2, [r3, #0]
        k++;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3301      	adds	r3, #1
 80078be:	613b      	str	r3, [r7, #16]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	4413      	add	r3, r2
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b0a      	cmp	r3, #10
 80078d0:	d1b8      	bne.n	8007844 <NMEA_ParseGPGGA+0x5c>
 80078d2:	e000      	b.n	80078d6 <NMEA_ParseGPGGA+0xee>
          break;
 80078d4:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f040 8097 	bne.w	8007a0c <NMEA_ParseGPGGA+0x224>
    {
      int32_t valid = strtol((char *)app[6], NULL, BASE);
 80078de:	220a      	movs	r2, #10
 80078e0:	2100      	movs	r1, #0
 80078e2:	484f      	ldr	r0, [pc, #316]	; (8007a20 <NMEA_ParseGPGGA+0x238>)
 80078e4:	f002 fbe2 	bl	800a0ac <strtol>
 80078e8:	60f8      	str	r0, [r7, #12]
      if((valid == 1) || (valid == 0))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d002      	beq.n	80078f6 <NMEA_ParseGPGGA+0x10e>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d104      	bne.n	8007900 <NMEA_ParseGPGGA+0x118>
      {
        pGPGGAInfo->valid = (uint8_t)valid;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      scan_utc(app[1], &pGPGGAInfo->utc);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	4847      	ldr	r0, [pc, #284]	; (8007a24 <NMEA_ParseGPGGA+0x23c>)
 8007906:	f7ff fef9 	bl	80076fc <scan_utc>
      pGPGGAInfo->xyz.lat = strtod((char *)app[2], NULL);
 800790a:	2100      	movs	r1, #0
 800790c:	4846      	ldr	r0, [pc, #280]	; (8007a28 <NMEA_ParseGPGGA+0x240>)
 800790e:	f002 faf1 	bl	8009ef4 <strtod>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	e9c1 2304 	strd	r2, r3, [r1, #16]
      pGPGGAInfo->xyz.ns = *((uint8_t*)app[3]);
 800791c:	4b3e      	ldr	r3, [pc, #248]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 800791e:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      pGPGGAInfo->xyz.lon = strtod((char *)app[4], NULL);
 8007928:	2100      	movs	r1, #0
 800792a:	4840      	ldr	r0, [pc, #256]	; (8007a2c <NMEA_ParseGPGGA+0x244>)
 800792c:	f002 fae2 	bl	8009ef4 <strtod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	e9c1 2306 	strd	r2, r3, [r1, #24]
      pGPGGAInfo->xyz.ew = *((uint8_t*)app[5]);
 800793a:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 800793c:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      pGPGGAInfo->sats = strtol((char *)app[7], NULL, BASE);
 8007946:	220a      	movs	r2, #10
 8007948:	2100      	movs	r1, #0
 800794a:	4839      	ldr	r0, [pc, #228]	; (8007a30 <NMEA_ParseGPGGA+0x248>)
 800794c:	f002 fbae 	bl	800a0ac <strtol>
 8007950:	4603      	mov	r3, r0
 8007952:	b21a      	sxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	869a      	strh	r2, [r3, #52]	; 0x34
      pGPGGAInfo->acc = strtof((char *)app[8], NULL);
 8007958:	2100      	movs	r1, #0
 800795a:	4836      	ldr	r0, [pc, #216]	; (8007a34 <NMEA_ParseGPGGA+0x24c>)
 800795c:	f002 fad6 	bl	8009f0c <strtof>
 8007960:	4602      	mov	r2, r0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
      pGPGGAInfo->xyz.alt = strtof((char *)app[9], NULL);
 8007966:	2100      	movs	r1, #0
 8007968:	4833      	ldr	r0, [pc, #204]	; (8007a38 <NMEA_ParseGPGGA+0x250>)
 800796a:	f002 facf 	bl	8009f0c <strtof>
 800796e:	4603      	mov	r3, r0
 8007970:	4618      	mov	r0, r3
 8007972:	f7f8 fe85 	bl	8000680 <__aeabi_f2d>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      pGPGGAInfo->xyz.mis = *((uint8_t*)app[10]);
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 8007982:	f893 21e0 	ldrb.w	r2, [r3, #480]	; 0x1e0
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      pGPGGAInfo->geoid.height = strtol((char *)app[11], NULL, BASE);
 800798c:	220a      	movs	r2, #10
 800798e:	2100      	movs	r1, #0
 8007990:	482a      	ldr	r0, [pc, #168]	; (8007a3c <NMEA_ParseGPGGA+0x254>)
 8007992:	f002 fb8b 	bl	800a0ac <strtol>
 8007996:	4603      	mov	r3, r0
 8007998:	b21a      	sxth	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	871a      	strh	r2, [r3, #56]	; 0x38
      pGPGGAInfo->geoid.mis = *((uint8_t*)app[12]);
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <NMEA_ParseGPGGA+0x230>)
 80079a0:	f893 2240 	ldrb.w	r2, [r3, #576]	; 0x240
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      // This field is reserved
      //pGPGGAInfo->update = strtol((char *)app[13], NULL, BASE);

      pGPGGAInfo->xyz.lat = Convert_to_Degree(pGPGGAInfo->xyz.lat, pGPGGAInfo->xyz.ns);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079b6:	461a      	mov	r2, r3
 80079b8:	f000 f956 	bl	8007c68 <Convert_to_Degree>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      pGPGGAInfo->xyz.lon = Convert_to_Degree(pGPGGAInfo->xyz.lon, pGPGGAInfo->xyz.ew);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 f948 	bl	8007c68 <Convert_to_Degree>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	e9c1 2306 	strd	r2, r3, [r1, #24]

      pGPGGAInfo->xyz.is_inside_ugm = Geofence_Check(pGPGGAInfo->xyz.lat, pGPGGAInfo->xyz.lon);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80079ee:	f000 f99b 	bl	8007d28 <Geofence_Check>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

      pGPGGAInfo->checksum = nmea_checksum(app[15]);
 80079fc:	4810      	ldr	r0, [pc, #64]	; (8007a40 <NMEA_ParseGPGGA+0x258>)
 80079fe:	f7ff fedb 	bl	80077b8 <nmea_checksum>
 8007a02:	4602      	mov	r2, r0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40
      
      status = PARSE_SUCC;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	; 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200008b4 	.word	0x200008b4
 8007a1c:	0800eb10 	.word	0x0800eb10
 8007a20:	200009d4 	.word	0x200009d4
 8007a24:	200008e4 	.word	0x200008e4
 8007a28:	20000914 	.word	0x20000914
 8007a2c:	20000974 	.word	0x20000974
 8007a30:	20000a04 	.word	0x20000a04
 8007a34:	20000a34 	.word	0x20000a34
 8007a38:	20000a64 	.word	0x20000a64
 8007a3c:	20000ac4 	.word	0x20000ac4
 8007a40:	20000b84 	.word	0x20000b84

08007a44 <NMEA_ParseGSA>:
         
ParseStatus_t NMEA_ParseGSA(GSA_Info_t *pGSAInfo, uint8_t NMEA[])
{
 8007a44:	b590      	push	{r4, r7, lr}
 8007a46:	b08b      	sub	sp, #44	; 0x2c
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	623b      	str	r3, [r7, #32]
  
  ParseStatus_t status = PARSE_FAIL;
 8007a52:	2301      	movs	r3, #1
 8007a54:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80c3 	beq.w	8007be4 <NMEA_ParseGSA+0x1a0>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77bb      	strb	r3, [r7, #30]
 8007a62:	e012      	b.n	8007a8a <NMEA_ParseGSA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8007a64:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	4413      	add	r3, r2
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4a5f      	ldr	r2, [pc, #380]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007a72:	4413      	add	r3, r2
 8007a74:	2230      	movs	r2, #48	; 0x30
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fc50 	bl	800831e <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8007a7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	77bb      	strb	r3, [r7, #30]
 8007a8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007a8e:	2b2f      	cmp	r3, #47	; 0x2f
 8007a90:	dde8      	ble.n	8007a64 <NMEA_ParseGSA+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8007a92:	2300      	movs	r3, #0
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	613b      	str	r3, [r7, #16]
 8007a9e:	e040      	b.n	8007b22 <NMEA_ParseGSA+0xde>
    {
      new_field = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
      
      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b2c      	cmp	r3, #44	; 0x2c
 8007aae:	d005      	beq.n	8007abc <NMEA_ParseGSA+0x78>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aba:	d11a      	bne.n	8007af2 <NMEA_ParseGSA+0xae>
      {
        app[j][k] = (uint8_t)'\0';
 8007abc:	494c      	ldr	r1, [pc, #304]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	18ca      	adds	r2, r1, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4413      	add	r3, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (strcmp((char *)app[0], "$GNGSA") == 0)
 8007ad6:	4947      	ldr	r1, [pc, #284]	; (8007bf4 <NMEA_ParseGSA+0x1b0>)
 8007ad8:	4845      	ldr	r0, [pc, #276]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007ada:	f7f8 fb51 	bl	8000180 <strcmp>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d125      	bne.n	8007b30 <NMEA_ParseGSA+0xec>
        {
          j++;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
          k = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d111      	bne.n	8007b1c <NMEA_ParseGSA+0xd8>
      {
        app[j][k] = NMEA[i];
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4413      	add	r3, r2
 8007afe:	7818      	ldrb	r0, [r3, #0]
 8007b00:	493b      	ldr	r1, [pc, #236]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4613      	mov	r3, r2
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	4413      	add	r3, r2
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	18ca      	adds	r2, r1, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	4413      	add	r3, r2
 8007b12:	4602      	mov	r2, r0
 8007b14:	701a      	strb	r2, [r3, #0]
        k++;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	4413      	add	r3, r2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d1b8      	bne.n	8007aa0 <NMEA_ParseGSA+0x5c>
 8007b2e:	e000      	b.n	8007b32 <NMEA_ParseGSA+0xee>
          break;
 8007b30:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d155      	bne.n	8007be4 <NMEA_ParseGSA+0x1a0>
    {
      (void)strncpy((char *)pGSAInfo->constellation, (char *)app[0], MAX_STR_LEN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	492c      	ldr	r1, [pc, #176]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 fbb3 	bl	80092aa <strncpy>
      pGSAInfo->operating_mode = *((uint8_t*)app[1]);
 8007b44:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007b46:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 2020 	strb.w	r2, [r3, #32]
      pGSAInfo->current_mode = strtol((char *)app[2], NULL, BASE);
 8007b50:	220a      	movs	r2, #10
 8007b52:	2100      	movs	r1, #0
 8007b54:	4828      	ldr	r0, [pc, #160]	; (8007bf8 <NMEA_ParseGSA+0x1b4>)
 8007b56:	f002 faa9 	bl	800a0ac <strtol>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	b21a      	sxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	845a      	strh	r2, [r3, #34]	; 0x22

      int32_t *sat_prn = pGSAInfo->sat_prn;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3324      	adds	r3, #36	; 0x24
 8007b66:	60bb      	str	r3, [r7, #8]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
 8007b6c:	e019      	b.n	8007ba2 <NMEA_ParseGSA+0x15e>
      {
        *(&sat_prn[i]) = strtol((char *)app[3+i], NULL, BASE);
 8007b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b72:	1cda      	adds	r2, r3, #3
 8007b74:	4613      	mov	r3, r2
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	4413      	add	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <NMEA_ParseGSA+0x1ac>)
 8007b7e:	1898      	adds	r0, r3, r2
 8007b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	18d4      	adds	r4, r2, r3
 8007b8a:	220a      	movs	r2, #10
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f002 fa8d 	bl	800a0ac <strtol>
 8007b92:	4603      	mov	r3, r0
 8007b94:	6023      	str	r3, [r4, #0]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 8007b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ba6:	2b0b      	cmp	r3, #11
 8007ba8:	dde1      	ble.n	8007b6e <NMEA_ParseGSA+0x12a>
      }

      pGSAInfo->pdop = strtof((char *)app[15], NULL);
 8007baa:	2100      	movs	r1, #0
 8007bac:	4813      	ldr	r0, [pc, #76]	; (8007bfc <NMEA_ParseGSA+0x1b8>)
 8007bae:	f002 f9ad 	bl	8009f0c <strtof>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
      pGSAInfo->hdop = strtof((char *)app[16], NULL);
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4811      	ldr	r0, [pc, #68]	; (8007c00 <NMEA_ParseGSA+0x1bc>)
 8007bbc:	f002 f9a6 	bl	8009f0c <strtof>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	659a      	str	r2, [r3, #88]	; 0x58
      pGSAInfo->vdop = strtof((char *)app[17], NULL);
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	480e      	ldr	r0, [pc, #56]	; (8007c04 <NMEA_ParseGSA+0x1c0>)
 8007bca:	f002 f99f 	bl	8009f0c <strtof>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	65da      	str	r2, [r3, #92]	; 0x5c
      pGSAInfo->checksum = nmea_checksum(app[18]);
 8007bd4:	480c      	ldr	r0, [pc, #48]	; (8007c08 <NMEA_ParseGSA+0x1c4>)
 8007bd6:	f7ff fdef 	bl	80077b8 <nmea_checksum>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60

      status = PARSE_SUCC;
 8007be0:	2300      	movs	r3, #0
 8007be2:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8007be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	372c      	adds	r7, #44	; 0x2c
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd90      	pop	{r4, r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200008b4 	.word	0x200008b4
 8007bf4:	0800eb18 	.word	0x0800eb18
 8007bf8:	20000914 	.word	0x20000914
 8007bfc:	20000b84 	.word	0x20000b84
 8007c00:	20000bb4 	.word	0x20000bb4
 8007c04:	20000be4 	.word	0x20000be4
 8007c08:	20000c14 	.word	0x20000c14

08007c0c <char2int>:
 * @brief  Function that converts a character to unsigned integer
 * @param  c        The character to convert
 * @retval The returned unsigned integer
 */
uint32_t char2int(uint8_t c)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = (unsigned char)0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]

  if((c >= (uint8_t)'0') && (c <= (uint8_t)'9'))
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8007c1e:	d906      	bls.n	8007c2e <char2int+0x22>
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	2b39      	cmp	r3, #57	; 0x39
 8007c24:	d803      	bhi.n	8007c2e <char2int+0x22>
  {
    ret = (unsigned char)(c - (uint8_t)'0');
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	3b30      	subs	r3, #48	; 0x30
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'A') && (c <= (uint8_t)'F'))
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	d907      	bls.n	8007c44 <char2int+0x38>
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b46      	cmp	r3, #70	; 0x46
 8007c38:	d804      	bhi.n	8007c44 <char2int+0x38>
  {
    ret = (unsigned char)(c - (uint8_t)'A') + (unsigned)10;
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	3b41      	subs	r3, #65	; 0x41
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	330a      	adds	r3, #10
 8007c42:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'a') && (c <= (uint8_t)'f'))
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b60      	cmp	r3, #96	; 0x60
 8007c48:	d907      	bls.n	8007c5a <char2int+0x4e>
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	2b66      	cmp	r3, #102	; 0x66
 8007c4e:	d804      	bhi.n	8007c5a <char2int+0x4e>
  {
    ret = (unsigned char)(c - (uint8_t)'a') + (unsigned)10;
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	3b61      	subs	r3, #97	; 0x61
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	330a      	adds	r3, #10
 8007c58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
	...

08007c68 <Convert_to_Degree>:
 * @brief  Function that converts a DDM to decimal
 * @param  numeral        Number part
 * @param  sign           Character part
 * @retval The returned signed 64 bit float
 */
float64_t Convert_to_Degree(float64_t numeral, uint8_t sign) {
 8007c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c6c:	b08a      	sub	sp, #40	; 0x28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007c74:	4613      	mov	r3, r2
 8007c76:	71fb      	strb	r3, [r7, #7]
  int32_t degrees;
  float64_t ret;
  float64_t minutes;

  degrees = (int32_t) (numeral / 100.0F);
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <Convert_to_Degree+0xb0>)
 8007c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c82:	f7f8 fe7f 	bl	8000984 <__aeabi_ddiv>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f7f8 ffff 	bl	8000c90 <__aeabi_d2iz>
 8007c92:	4603      	mov	r3, r0
 8007c94:	61fb      	str	r3, [r7, #28]
  minutes = numeral - degrees * 100.0F;
 8007c96:	69f8      	ldr	r0, [r7, #28]
 8007c98:	f7f9 f94c 	bl	8000f34 <__aeabi_i2f>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	491f      	ldr	r1, [pc, #124]	; (8007d1c <Convert_to_Degree+0xb4>)
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7f8 fad5 	bl	8000250 <__aeabi_fmul>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f8 fce9 	bl	8000680 <__aeabi_f2d>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cb6:	f7f8 fb83 	bl	80003c0 <__aeabi_dsub>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  ret = degrees + (minutes / 60.0F);
 8007cc2:	69f8      	ldr	r0, [r7, #28]
 8007cc4:	f7f8 fcca 	bl	800065c <__aeabi_i2d>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4689      	mov	r9, r1
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <Convert_to_Degree+0xb8>)
 8007cd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cd6:	f7f8 fe55 	bl	8000984 <__aeabi_ddiv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 fb6f 	bl	80003c4 <__adddf3>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9c7 2308 	strd	r2, r3, [r7, #32]

  if (sign == 'S' || sign == 'W') {
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b53      	cmp	r3, #83	; 0x53
 8007cf2:	d002      	beq.n	8007cfa <Convert_to_Degree+0x92>
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	2b57      	cmp	r3, #87	; 0x57
 8007cf8:	d105      	bne.n	8007d06 <Convert_to_Degree+0x9e>
    ret = -ret;
 8007cfa:	6a3c      	ldr	r4, [r7, #32]
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007d02:	e9c7 4508 	strd	r4, r5, [r7, #32]
  }

  return ret;
 8007d06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	3728      	adds	r7, #40	; 0x28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d16:	bf00      	nop
 8007d18:	40590000 	.word	0x40590000
 8007d1c:	42c80000 	.word	0x42c80000
 8007d20:	404e0000 	.word	0x404e0000
 8007d24:	00000000 	.word	0x00000000

08007d28 <Geofence_Check>:
 * @brief  Function that checks if the point is inside the UGM area
 * @param  latitude        Latitude part
 * @param  longitude       Longitude part
 * @retval The returned unsigned 8-bit integer
 */
uint8_t Geofence_Check(float64_t latitude, float64_t longitude) {
 8007d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d2c:	b096      	sub	sp, #88	; 0x58
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007d34:	e9c7 2300 	strd	r2, r3, [r7]
  Coords_t ugm_coordinate;
  float64_t distance = 0;
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  ugm_coordinate.lat = -7.771376;
 8007d44:	a372      	add	r3, pc, #456	; (adr r3, 8007f10 <Geofence_Check+0x1e8>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  ugm_coordinate.lon = 110.377493;
 8007d4e:	a372      	add	r3, pc, #456	; (adr r3, 8007f18 <Geofence_Check+0x1f0>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	e9c7 2306 	strd	r2, r3, [r7, #24]

  float64_t dLat = degToRad(ugm_coordinate.lat) - degToRad(latitude);
 8007d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d5c:	a370      	add	r3, pc, #448	; (adr r3, 8007f20 <Geofence_Check+0x1f8>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fce5 	bl	8000730 <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	4b6f      	ldr	r3, [pc, #444]	; (8007f30 <Geofence_Check+0x208>)
 8007d74:	f7f8 fe06 	bl	8000984 <__aeabi_ddiv>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4614      	mov	r4, r2
 8007d7e:	461d      	mov	r5, r3
 8007d80:	a367      	add	r3, pc, #412	; (adr r3, 8007f20 <Geofence_Check+0x1f8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d8a:	f7f8 fcd1 	bl	8000730 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4610      	mov	r0, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	4b65      	ldr	r3, [pc, #404]	; (8007f30 <Geofence_Check+0x208>)
 8007d9c:	f7f8 fdf2 	bl	8000984 <__aeabi_ddiv>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fb0a 	bl	80003c0 <__aeabi_dsub>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  float64_t dLon = degToRad(ugm_coordinate.lon) - degToRad(longitude);
 8007db4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007db8:	a359      	add	r3, pc, #356	; (adr r3, 8007f20 <Geofence_Check+0x1f8>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fcb7 	bl	8000730 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f04f 0200 	mov.w	r2, #0
 8007dce:	4b58      	ldr	r3, [pc, #352]	; (8007f30 <Geofence_Check+0x208>)
 8007dd0:	f7f8 fdd8 	bl	8000984 <__aeabi_ddiv>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4614      	mov	r4, r2
 8007dda:	461d      	mov	r5, r3
 8007ddc:	a350      	add	r3, pc, #320	; (adr r3, 8007f20 <Geofence_Check+0x1f8>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de6:	f7f8 fca3 	bl	8000730 <__aeabi_dmul>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	4b4e      	ldr	r3, [pc, #312]	; (8007f30 <Geofence_Check+0x208>)
 8007df8:	f7f8 fdc4 	bl	8000984 <__aeabi_ddiv>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4620      	mov	r0, r4
 8007e02:	4629      	mov	r1, r5
 8007e04:	f7f8 fadc 	bl	80003c0 <__aeabi_dsub>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  float64_t a = pow(sin(dLat / 2), 2) + pow(sin(dLon / 2), 2) * cos(latitude) * cos(longitude);
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e1c:	f7f8 fdb2 	bl	8000984 <__aeabi_ddiv>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4610      	mov	r0, r2
 8007e26:	4619      	mov	r1, r3
 8007e28:	f004 fda2 	bl	800c970 <sin>
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e34:	f004 fe0a 	bl	800ca4c <pow>
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e48:	f7f8 fd9c 	bl	8000984 <__aeabi_ddiv>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4610      	mov	r0, r2
 8007e52:	4619      	mov	r1, r3
 8007e54:	f004 fd8c 	bl	800c970 <sin>
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e60:	f004 fdf4 	bl	800ca4c <pow>
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e6c:	f004 fd3a 	bl	800c8e4 <cos>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4640      	mov	r0, r8
 8007e76:	4649      	mov	r1, r9
 8007e78:	f7f8 fc5a 	bl	8000730 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4690      	mov	r8, r2
 8007e82:	4699      	mov	r9, r3
 8007e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e88:	f004 fd2c 	bl	800c8e4 <cos>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fc4c 	bl	8000730 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7f8 fa90 	bl	80003c4 <__adddf3>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  float64_t c = 2 * asin(sqrt(a));
 8007eac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007eb0:	f004 fe34 	bl	800cb1c <sqrt>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f004 fd9e 	bl	800c9fc <asin>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	f7f8 fa7e 	bl	80003c4 <__adddf3>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  distance = EARTH_RADIUS * c;
 8007ed0:	a315      	add	r3, pc, #84	; (adr r3, 8007f28 <Geofence_Check+0x200>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007eda:	f7f8 fc29 	bl	8000730 <__aeabi_dmul>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  if (distance < 1000) {
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <Geofence_Check+0x20c>)
 8007eec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ef0:	f7f8 fe90 	bl	8000c14 <__aeabi_dcmplt>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <Geofence_Check+0x1d6>
    return 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <Geofence_Check+0x1d8>
  } else {
    return 0;
 8007efe:	2300      	movs	r3, #0
  }
 8007f00:	4618      	mov	r0, r3
 8007f02:	3758      	adds	r7, #88	; 0x58
 8007f04:	46bd      	mov	sp, r7
 8007f06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	9713ad5c 	.word	0x9713ad5c
 8007f14:	c01f15e3 	.word	0xc01f15e3
 8007f18:	d8665e03 	.word	0xd8665e03
 8007f1c:	405b9828 	.word	0x405b9828
 8007f20:	54442d18 	.word	0x54442d18
 8007f24:	400921fb 	.word	0x400921fb
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	41584dae 	.word	0x41584dae
 8007f30:	40668000 	.word	0x40668000
 8007f34:	408f4000 	.word	0x408f4000

08007f38 <__errno>:
 8007f38:	4b01      	ldr	r3, [pc, #4]	; (8007f40 <__errno+0x8>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000010 	.word	0x20000010

08007f44 <__sflush_r>:
 8007f44:	898a      	ldrh	r2, [r1, #12]
 8007f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f48:	4605      	mov	r5, r0
 8007f4a:	0710      	lsls	r0, r2, #28
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d457      	bmi.n	8008000 <__sflush_r+0xbc>
 8007f50:	684b      	ldr	r3, [r1, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	dc04      	bgt.n	8007f60 <__sflush_r+0x1c>
 8007f56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dc01      	bgt.n	8007f60 <__sflush_r+0x1c>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	d0fa      	beq.n	8007f5c <__sflush_r+0x18>
 8007f66:	2300      	movs	r3, #0
 8007f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f6c:	682f      	ldr	r7, [r5, #0]
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	d032      	beq.n	8007fd8 <__sflush_r+0x94>
 8007f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	075a      	lsls	r2, r3, #29
 8007f78:	d505      	bpl.n	8007f86 <__sflush_r+0x42>
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	1ac0      	subs	r0, r0, r3
 8007f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f80:	b10b      	cbz	r3, 8007f86 <__sflush_r+0x42>
 8007f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f84:	1ac0      	subs	r0, r0, r3
 8007f86:	2300      	movs	r3, #0
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f8c:	6a21      	ldr	r1, [r4, #32]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b0      	blx	r6
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	d106      	bne.n	8007fa6 <__sflush_r+0x62>
 8007f98:	6829      	ldr	r1, [r5, #0]
 8007f9a:	291d      	cmp	r1, #29
 8007f9c:	d82c      	bhi.n	8007ff8 <__sflush_r+0xb4>
 8007f9e:	4a29      	ldr	r2, [pc, #164]	; (8008044 <__sflush_r+0x100>)
 8007fa0:	40ca      	lsrs	r2, r1
 8007fa2:	07d6      	lsls	r6, r2, #31
 8007fa4:	d528      	bpl.n	8007ff8 <__sflush_r+0xb4>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	6062      	str	r2, [r4, #4]
 8007faa:	04d9      	lsls	r1, r3, #19
 8007fac:	6922      	ldr	r2, [r4, #16]
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	d504      	bpl.n	8007fbc <__sflush_r+0x78>
 8007fb2:	1c42      	adds	r2, r0, #1
 8007fb4:	d101      	bne.n	8007fba <__sflush_r+0x76>
 8007fb6:	682b      	ldr	r3, [r5, #0]
 8007fb8:	b903      	cbnz	r3, 8007fbc <__sflush_r+0x78>
 8007fba:	6560      	str	r0, [r4, #84]	; 0x54
 8007fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fbe:	602f      	str	r7, [r5, #0]
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	d0cb      	beq.n	8007f5c <__sflush_r+0x18>
 8007fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc8:	4299      	cmp	r1, r3
 8007fca:	d002      	beq.n	8007fd2 <__sflush_r+0x8e>
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f000 f9af 	bl	8008330 <_free_r>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fd6:	e7c2      	b.n	8007f5e <__sflush_r+0x1a>
 8007fd8:	6a21      	ldr	r1, [r4, #32]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b0      	blx	r6
 8007fe0:	1c41      	adds	r1, r0, #1
 8007fe2:	d1c7      	bne.n	8007f74 <__sflush_r+0x30>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0c4      	beq.n	8007f74 <__sflush_r+0x30>
 8007fea:	2b1d      	cmp	r3, #29
 8007fec:	d001      	beq.n	8007ff2 <__sflush_r+0xae>
 8007fee:	2b16      	cmp	r3, #22
 8007ff0:	d101      	bne.n	8007ff6 <__sflush_r+0xb2>
 8007ff2:	602f      	str	r7, [r5, #0]
 8007ff4:	e7b2      	b.n	8007f5c <__sflush_r+0x18>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	e7ae      	b.n	8007f5e <__sflush_r+0x1a>
 8008000:	690f      	ldr	r7, [r1, #16]
 8008002:	2f00      	cmp	r7, #0
 8008004:	d0aa      	beq.n	8007f5c <__sflush_r+0x18>
 8008006:	0793      	lsls	r3, r2, #30
 8008008:	680e      	ldr	r6, [r1, #0]
 800800a:	bf08      	it	eq
 800800c:	694b      	ldreq	r3, [r1, #20]
 800800e:	600f      	str	r7, [r1, #0]
 8008010:	bf18      	it	ne
 8008012:	2300      	movne	r3, #0
 8008014:	1bf6      	subs	r6, r6, r7
 8008016:	608b      	str	r3, [r1, #8]
 8008018:	2e00      	cmp	r6, #0
 800801a:	dd9f      	ble.n	8007f5c <__sflush_r+0x18>
 800801c:	6a21      	ldr	r1, [r4, #32]
 800801e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008022:	4633      	mov	r3, r6
 8008024:	463a      	mov	r2, r7
 8008026:	4628      	mov	r0, r5
 8008028:	47e0      	blx	ip
 800802a:	2800      	cmp	r0, #0
 800802c:	dc06      	bgt.n	800803c <__sflush_r+0xf8>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800803a:	e790      	b.n	8007f5e <__sflush_r+0x1a>
 800803c:	4407      	add	r7, r0
 800803e:	1a36      	subs	r6, r6, r0
 8008040:	e7ea      	b.n	8008018 <__sflush_r+0xd4>
 8008042:	bf00      	nop
 8008044:	20400001 	.word	0x20400001

08008048 <_fflush_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	690b      	ldr	r3, [r1, #16]
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	b913      	cbnz	r3, 8008058 <_fflush_r+0x10>
 8008052:	2500      	movs	r5, #0
 8008054:	4628      	mov	r0, r5
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	b118      	cbz	r0, 8008062 <_fflush_r+0x1a>
 800805a:	6983      	ldr	r3, [r0, #24]
 800805c:	b90b      	cbnz	r3, 8008062 <_fflush_r+0x1a>
 800805e:	f000 f899 	bl	8008194 <__sinit>
 8008062:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <_fflush_r+0x6c>)
 8008064:	429c      	cmp	r4, r3
 8008066:	d11b      	bne.n	80080a0 <_fflush_r+0x58>
 8008068:	686c      	ldr	r4, [r5, #4]
 800806a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0ef      	beq.n	8008052 <_fflush_r+0xa>
 8008072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008074:	07d0      	lsls	r0, r2, #31
 8008076:	d404      	bmi.n	8008082 <_fflush_r+0x3a>
 8008078:	0599      	lsls	r1, r3, #22
 800807a:	d402      	bmi.n	8008082 <_fflush_r+0x3a>
 800807c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807e:	f000 f94c 	bl	800831a <__retarget_lock_acquire_recursive>
 8008082:	4628      	mov	r0, r5
 8008084:	4621      	mov	r1, r4
 8008086:	f7ff ff5d 	bl	8007f44 <__sflush_r>
 800808a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800808c:	07da      	lsls	r2, r3, #31
 800808e:	4605      	mov	r5, r0
 8008090:	d4e0      	bmi.n	8008054 <_fflush_r+0xc>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	059b      	lsls	r3, r3, #22
 8008096:	d4dd      	bmi.n	8008054 <_fflush_r+0xc>
 8008098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800809a:	f000 f93f 	bl	800831c <__retarget_lock_release_recursive>
 800809e:	e7d9      	b.n	8008054 <_fflush_r+0xc>
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <_fflush_r+0x70>)
 80080a2:	429c      	cmp	r4, r3
 80080a4:	d101      	bne.n	80080aa <_fflush_r+0x62>
 80080a6:	68ac      	ldr	r4, [r5, #8]
 80080a8:	e7df      	b.n	800806a <_fflush_r+0x22>
 80080aa:	4b04      	ldr	r3, [pc, #16]	; (80080bc <_fflush_r+0x74>)
 80080ac:	429c      	cmp	r4, r3
 80080ae:	bf08      	it	eq
 80080b0:	68ec      	ldreq	r4, [r5, #12]
 80080b2:	e7da      	b.n	800806a <_fflush_r+0x22>
 80080b4:	0800ec08 	.word	0x0800ec08
 80080b8:	0800ec28 	.word	0x0800ec28
 80080bc:	0800ebe8 	.word	0x0800ebe8

080080c0 <fflush>:
 80080c0:	4601      	mov	r1, r0
 80080c2:	b920      	cbnz	r0, 80080ce <fflush+0xe>
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <fflush+0x18>)
 80080c6:	4905      	ldr	r1, [pc, #20]	; (80080dc <fflush+0x1c>)
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	f000 b8e1 	b.w	8008290 <_fwalk_reent>
 80080ce:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <fflush+0x20>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f7ff bfb9 	b.w	8008048 <_fflush_r>
 80080d6:	bf00      	nop
 80080d8:	0800ec48 	.word	0x0800ec48
 80080dc:	08008049 	.word	0x08008049
 80080e0:	20000010 	.word	0x20000010

080080e4 <std>:
 80080e4:	2300      	movs	r3, #0
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	e9c0 3300 	strd	r3, r3, [r0]
 80080ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f2:	6083      	str	r3, [r0, #8]
 80080f4:	8181      	strh	r1, [r0, #12]
 80080f6:	6643      	str	r3, [r0, #100]	; 0x64
 80080f8:	81c2      	strh	r2, [r0, #14]
 80080fa:	6183      	str	r3, [r0, #24]
 80080fc:	4619      	mov	r1, r3
 80080fe:	2208      	movs	r2, #8
 8008100:	305c      	adds	r0, #92	; 0x5c
 8008102:	f000 f90c 	bl	800831e <memset>
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <std+0x38>)
 8008108:	6263      	str	r3, [r4, #36]	; 0x24
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <std+0x3c>)
 800810c:	62a3      	str	r3, [r4, #40]	; 0x28
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <std+0x40>)
 8008110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <std+0x44>)
 8008114:	6224      	str	r4, [r4, #32]
 8008116:	6323      	str	r3, [r4, #48]	; 0x30
 8008118:	bd10      	pop	{r4, pc}
 800811a:	bf00      	nop
 800811c:	08009225 	.word	0x08009225
 8008120:	08009247 	.word	0x08009247
 8008124:	0800927f 	.word	0x0800927f
 8008128:	080092a3 	.word	0x080092a3

0800812c <_cleanup_r>:
 800812c:	4901      	ldr	r1, [pc, #4]	; (8008134 <_cleanup_r+0x8>)
 800812e:	f000 b8af 	b.w	8008290 <_fwalk_reent>
 8008132:	bf00      	nop
 8008134:	08008049 	.word	0x08008049

08008138 <__sfmoreglue>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	2268      	movs	r2, #104	; 0x68
 800813c:	1e4d      	subs	r5, r1, #1
 800813e:	4355      	muls	r5, r2
 8008140:	460e      	mov	r6, r1
 8008142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008146:	f000 f95d 	bl	8008404 <_malloc_r>
 800814a:	4604      	mov	r4, r0
 800814c:	b140      	cbz	r0, 8008160 <__sfmoreglue+0x28>
 800814e:	2100      	movs	r1, #0
 8008150:	e9c0 1600 	strd	r1, r6, [r0]
 8008154:	300c      	adds	r0, #12
 8008156:	60a0      	str	r0, [r4, #8]
 8008158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800815c:	f000 f8df 	bl	800831e <memset>
 8008160:	4620      	mov	r0, r4
 8008162:	bd70      	pop	{r4, r5, r6, pc}

08008164 <__sfp_lock_acquire>:
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <__sfp_lock_acquire+0x8>)
 8008166:	f000 b8d8 	b.w	800831a <__retarget_lock_acquire_recursive>
 800816a:	bf00      	nop
 800816c:	200011b5 	.word	0x200011b5

08008170 <__sfp_lock_release>:
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <__sfp_lock_release+0x8>)
 8008172:	f000 b8d3 	b.w	800831c <__retarget_lock_release_recursive>
 8008176:	bf00      	nop
 8008178:	200011b5 	.word	0x200011b5

0800817c <__sinit_lock_acquire>:
 800817c:	4801      	ldr	r0, [pc, #4]	; (8008184 <__sinit_lock_acquire+0x8>)
 800817e:	f000 b8cc 	b.w	800831a <__retarget_lock_acquire_recursive>
 8008182:	bf00      	nop
 8008184:	200011b6 	.word	0x200011b6

08008188 <__sinit_lock_release>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__sinit_lock_release+0x8>)
 800818a:	f000 b8c7 	b.w	800831c <__retarget_lock_release_recursive>
 800818e:	bf00      	nop
 8008190:	200011b6 	.word	0x200011b6

08008194 <__sinit>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4604      	mov	r4, r0
 8008198:	f7ff fff0 	bl	800817c <__sinit_lock_acquire>
 800819c:	69a3      	ldr	r3, [r4, #24]
 800819e:	b11b      	cbz	r3, 80081a8 <__sinit+0x14>
 80081a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a4:	f7ff bff0 	b.w	8008188 <__sinit_lock_release>
 80081a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081ac:	6523      	str	r3, [r4, #80]	; 0x50
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <__sinit+0x68>)
 80081b0:	4a13      	ldr	r2, [pc, #76]	; (8008200 <__sinit+0x6c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80081b6:	42a3      	cmp	r3, r4
 80081b8:	bf04      	itt	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	61a3      	streq	r3, [r4, #24]
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 f820 	bl	8008204 <__sfp>
 80081c4:	6060      	str	r0, [r4, #4]
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 f81c 	bl	8008204 <__sfp>
 80081cc:	60a0      	str	r0, [r4, #8]
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f818 	bl	8008204 <__sfp>
 80081d4:	2200      	movs	r2, #0
 80081d6:	60e0      	str	r0, [r4, #12]
 80081d8:	2104      	movs	r1, #4
 80081da:	6860      	ldr	r0, [r4, #4]
 80081dc:	f7ff ff82 	bl	80080e4 <std>
 80081e0:	68a0      	ldr	r0, [r4, #8]
 80081e2:	2201      	movs	r2, #1
 80081e4:	2109      	movs	r1, #9
 80081e6:	f7ff ff7d 	bl	80080e4 <std>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	2202      	movs	r2, #2
 80081ee:	2112      	movs	r1, #18
 80081f0:	f7ff ff78 	bl	80080e4 <std>
 80081f4:	2301      	movs	r3, #1
 80081f6:	61a3      	str	r3, [r4, #24]
 80081f8:	e7d2      	b.n	80081a0 <__sinit+0xc>
 80081fa:	bf00      	nop
 80081fc:	0800ec48 	.word	0x0800ec48
 8008200:	0800812d 	.word	0x0800812d

08008204 <__sfp>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	4607      	mov	r7, r0
 8008208:	f7ff ffac 	bl	8008164 <__sfp_lock_acquire>
 800820c:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <__sfp+0x84>)
 800820e:	681e      	ldr	r6, [r3, #0]
 8008210:	69b3      	ldr	r3, [r6, #24]
 8008212:	b913      	cbnz	r3, 800821a <__sfp+0x16>
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff ffbd 	bl	8008194 <__sinit>
 800821a:	3648      	adds	r6, #72	; 0x48
 800821c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008220:	3b01      	subs	r3, #1
 8008222:	d503      	bpl.n	800822c <__sfp+0x28>
 8008224:	6833      	ldr	r3, [r6, #0]
 8008226:	b30b      	cbz	r3, 800826c <__sfp+0x68>
 8008228:	6836      	ldr	r6, [r6, #0]
 800822a:	e7f7      	b.n	800821c <__sfp+0x18>
 800822c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008230:	b9d5      	cbnz	r5, 8008268 <__sfp+0x64>
 8008232:	4b16      	ldr	r3, [pc, #88]	; (800828c <__sfp+0x88>)
 8008234:	60e3      	str	r3, [r4, #12]
 8008236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800823a:	6665      	str	r5, [r4, #100]	; 0x64
 800823c:	f000 f86c 	bl	8008318 <__retarget_lock_init_recursive>
 8008240:	f7ff ff96 	bl	8008170 <__sfp_lock_release>
 8008244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800824c:	6025      	str	r5, [r4, #0]
 800824e:	61a5      	str	r5, [r4, #24]
 8008250:	2208      	movs	r2, #8
 8008252:	4629      	mov	r1, r5
 8008254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008258:	f000 f861 	bl	800831e <memset>
 800825c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008264:	4620      	mov	r0, r4
 8008266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008268:	3468      	adds	r4, #104	; 0x68
 800826a:	e7d9      	b.n	8008220 <__sfp+0x1c>
 800826c:	2104      	movs	r1, #4
 800826e:	4638      	mov	r0, r7
 8008270:	f7ff ff62 	bl	8008138 <__sfmoreglue>
 8008274:	4604      	mov	r4, r0
 8008276:	6030      	str	r0, [r6, #0]
 8008278:	2800      	cmp	r0, #0
 800827a:	d1d5      	bne.n	8008228 <__sfp+0x24>
 800827c:	f7ff ff78 	bl	8008170 <__sfp_lock_release>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	e7ee      	b.n	8008264 <__sfp+0x60>
 8008286:	bf00      	nop
 8008288:	0800ec48 	.word	0x0800ec48
 800828c:	ffff0001 	.word	0xffff0001

08008290 <_fwalk_reent>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	4606      	mov	r6, r0
 8008296:	4688      	mov	r8, r1
 8008298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800829c:	2700      	movs	r7, #0
 800829e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082a2:	f1b9 0901 	subs.w	r9, r9, #1
 80082a6:	d505      	bpl.n	80082b4 <_fwalk_reent+0x24>
 80082a8:	6824      	ldr	r4, [r4, #0]
 80082aa:	2c00      	cmp	r4, #0
 80082ac:	d1f7      	bne.n	800829e <_fwalk_reent+0xe>
 80082ae:	4638      	mov	r0, r7
 80082b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b4:	89ab      	ldrh	r3, [r5, #12]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d907      	bls.n	80082ca <_fwalk_reent+0x3a>
 80082ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082be:	3301      	adds	r3, #1
 80082c0:	d003      	beq.n	80082ca <_fwalk_reent+0x3a>
 80082c2:	4629      	mov	r1, r5
 80082c4:	4630      	mov	r0, r6
 80082c6:	47c0      	blx	r8
 80082c8:	4307      	orrs	r7, r0
 80082ca:	3568      	adds	r5, #104	; 0x68
 80082cc:	e7e9      	b.n	80082a2 <_fwalk_reent+0x12>
	...

080082d0 <__libc_init_array>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4d0d      	ldr	r5, [pc, #52]	; (8008308 <__libc_init_array+0x38>)
 80082d4:	4c0d      	ldr	r4, [pc, #52]	; (800830c <__libc_init_array+0x3c>)
 80082d6:	1b64      	subs	r4, r4, r5
 80082d8:	10a4      	asrs	r4, r4, #2
 80082da:	2600      	movs	r6, #0
 80082dc:	42a6      	cmp	r6, r4
 80082de:	d109      	bne.n	80082f4 <__libc_init_array+0x24>
 80082e0:	4d0b      	ldr	r5, [pc, #44]	; (8008310 <__libc_init_array+0x40>)
 80082e2:	4c0c      	ldr	r4, [pc, #48]	; (8008314 <__libc_init_array+0x44>)
 80082e4:	f006 fbe6 	bl	800eab4 <_init>
 80082e8:	1b64      	subs	r4, r4, r5
 80082ea:	10a4      	asrs	r4, r4, #2
 80082ec:	2600      	movs	r6, #0
 80082ee:	42a6      	cmp	r6, r4
 80082f0:	d105      	bne.n	80082fe <__libc_init_array+0x2e>
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f8:	4798      	blx	r3
 80082fa:	3601      	adds	r6, #1
 80082fc:	e7ee      	b.n	80082dc <__libc_init_array+0xc>
 80082fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008302:	4798      	blx	r3
 8008304:	3601      	adds	r6, #1
 8008306:	e7f2      	b.n	80082ee <__libc_init_array+0x1e>
 8008308:	0800f2a0 	.word	0x0800f2a0
 800830c:	0800f2a0 	.word	0x0800f2a0
 8008310:	0800f2a0 	.word	0x0800f2a0
 8008314:	0800f2a4 	.word	0x0800f2a4

08008318 <__retarget_lock_init_recursive>:
 8008318:	4770      	bx	lr

0800831a <__retarget_lock_acquire_recursive>:
 800831a:	4770      	bx	lr

0800831c <__retarget_lock_release_recursive>:
 800831c:	4770      	bx	lr

0800831e <memset>:
 800831e:	4402      	add	r2, r0
 8008320:	4603      	mov	r3, r0
 8008322:	4293      	cmp	r3, r2
 8008324:	d100      	bne.n	8008328 <memset+0xa>
 8008326:	4770      	bx	lr
 8008328:	f803 1b01 	strb.w	r1, [r3], #1
 800832c:	e7f9      	b.n	8008322 <memset+0x4>
	...

08008330 <_free_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4605      	mov	r5, r0
 8008334:	2900      	cmp	r1, #0
 8008336:	d041      	beq.n	80083bc <_free_r+0x8c>
 8008338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800833c:	1f0c      	subs	r4, r1, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfb8      	it	lt
 8008342:	18e4      	addlt	r4, r4, r3
 8008344:	f003 f8fa 	bl	800b53c <__malloc_lock>
 8008348:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <_free_r+0x90>)
 800834a:	6813      	ldr	r3, [r2, #0]
 800834c:	b933      	cbnz	r3, 800835c <_free_r+0x2c>
 800834e:	6063      	str	r3, [r4, #4]
 8008350:	6014      	str	r4, [r2, #0]
 8008352:	4628      	mov	r0, r5
 8008354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008358:	f003 b8f6 	b.w	800b548 <__malloc_unlock>
 800835c:	42a3      	cmp	r3, r4
 800835e:	d908      	bls.n	8008372 <_free_r+0x42>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	1821      	adds	r1, r4, r0
 8008364:	428b      	cmp	r3, r1
 8008366:	bf01      	itttt	eq
 8008368:	6819      	ldreq	r1, [r3, #0]
 800836a:	685b      	ldreq	r3, [r3, #4]
 800836c:	1809      	addeq	r1, r1, r0
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	e7ed      	b.n	800834e <_free_r+0x1e>
 8008372:	461a      	mov	r2, r3
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b10b      	cbz	r3, 800837c <_free_r+0x4c>
 8008378:	42a3      	cmp	r3, r4
 800837a:	d9fa      	bls.n	8008372 <_free_r+0x42>
 800837c:	6811      	ldr	r1, [r2, #0]
 800837e:	1850      	adds	r0, r2, r1
 8008380:	42a0      	cmp	r0, r4
 8008382:	d10b      	bne.n	800839c <_free_r+0x6c>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	4401      	add	r1, r0
 8008388:	1850      	adds	r0, r2, r1
 800838a:	4283      	cmp	r3, r0
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	d1e0      	bne.n	8008352 <_free_r+0x22>
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	6053      	str	r3, [r2, #4]
 8008396:	4401      	add	r1, r0
 8008398:	6011      	str	r1, [r2, #0]
 800839a:	e7da      	b.n	8008352 <_free_r+0x22>
 800839c:	d902      	bls.n	80083a4 <_free_r+0x74>
 800839e:	230c      	movs	r3, #12
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	e7d6      	b.n	8008352 <_free_r+0x22>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	1821      	adds	r1, r4, r0
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf04      	itt	eq
 80083ac:	6819      	ldreq	r1, [r3, #0]
 80083ae:	685b      	ldreq	r3, [r3, #4]
 80083b0:	6063      	str	r3, [r4, #4]
 80083b2:	bf04      	itt	eq
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	6054      	str	r4, [r2, #4]
 80083ba:	e7ca      	b.n	8008352 <_free_r+0x22>
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop
 80083c0:	200011b8 	.word	0x200011b8

080083c4 <sbrk_aligned>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4e0e      	ldr	r6, [pc, #56]	; (8008400 <sbrk_aligned+0x3c>)
 80083c8:	460c      	mov	r4, r1
 80083ca:	6831      	ldr	r1, [r6, #0]
 80083cc:	4605      	mov	r5, r0
 80083ce:	b911      	cbnz	r1, 80083d6 <sbrk_aligned+0x12>
 80083d0:	f000 fef4 	bl	80091bc <_sbrk_r>
 80083d4:	6030      	str	r0, [r6, #0]
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 feef 	bl	80091bc <_sbrk_r>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	d00a      	beq.n	80083f8 <sbrk_aligned+0x34>
 80083e2:	1cc4      	adds	r4, r0, #3
 80083e4:	f024 0403 	bic.w	r4, r4, #3
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d007      	beq.n	80083fc <sbrk_aligned+0x38>
 80083ec:	1a21      	subs	r1, r4, r0
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 fee4 	bl	80091bc <_sbrk_r>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d101      	bne.n	80083fc <sbrk_aligned+0x38>
 80083f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80083fc:	4620      	mov	r0, r4
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	200011bc 	.word	0x200011bc

08008404 <_malloc_r>:
 8008404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008408:	1ccd      	adds	r5, r1, #3
 800840a:	f025 0503 	bic.w	r5, r5, #3
 800840e:	3508      	adds	r5, #8
 8008410:	2d0c      	cmp	r5, #12
 8008412:	bf38      	it	cc
 8008414:	250c      	movcc	r5, #12
 8008416:	2d00      	cmp	r5, #0
 8008418:	4607      	mov	r7, r0
 800841a:	db01      	blt.n	8008420 <_malloc_r+0x1c>
 800841c:	42a9      	cmp	r1, r5
 800841e:	d905      	bls.n	800842c <_malloc_r+0x28>
 8008420:	230c      	movs	r3, #12
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	2600      	movs	r6, #0
 8008426:	4630      	mov	r0, r6
 8008428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800842c:	4e2e      	ldr	r6, [pc, #184]	; (80084e8 <_malloc_r+0xe4>)
 800842e:	f003 f885 	bl	800b53c <__malloc_lock>
 8008432:	6833      	ldr	r3, [r6, #0]
 8008434:	461c      	mov	r4, r3
 8008436:	bb34      	cbnz	r4, 8008486 <_malloc_r+0x82>
 8008438:	4629      	mov	r1, r5
 800843a:	4638      	mov	r0, r7
 800843c:	f7ff ffc2 	bl	80083c4 <sbrk_aligned>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	4604      	mov	r4, r0
 8008444:	d14d      	bne.n	80084e2 <_malloc_r+0xde>
 8008446:	6834      	ldr	r4, [r6, #0]
 8008448:	4626      	mov	r6, r4
 800844a:	2e00      	cmp	r6, #0
 800844c:	d140      	bne.n	80084d0 <_malloc_r+0xcc>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	4631      	mov	r1, r6
 8008452:	4638      	mov	r0, r7
 8008454:	eb04 0803 	add.w	r8, r4, r3
 8008458:	f000 feb0 	bl	80091bc <_sbrk_r>
 800845c:	4580      	cmp	r8, r0
 800845e:	d13a      	bne.n	80084d6 <_malloc_r+0xd2>
 8008460:	6821      	ldr	r1, [r4, #0]
 8008462:	3503      	adds	r5, #3
 8008464:	1a6d      	subs	r5, r5, r1
 8008466:	f025 0503 	bic.w	r5, r5, #3
 800846a:	3508      	adds	r5, #8
 800846c:	2d0c      	cmp	r5, #12
 800846e:	bf38      	it	cc
 8008470:	250c      	movcc	r5, #12
 8008472:	4629      	mov	r1, r5
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff ffa5 	bl	80083c4 <sbrk_aligned>
 800847a:	3001      	adds	r0, #1
 800847c:	d02b      	beq.n	80084d6 <_malloc_r+0xd2>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	442b      	add	r3, r5
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	e00e      	b.n	80084a4 <_malloc_r+0xa0>
 8008486:	6822      	ldr	r2, [r4, #0]
 8008488:	1b52      	subs	r2, r2, r5
 800848a:	d41e      	bmi.n	80084ca <_malloc_r+0xc6>
 800848c:	2a0b      	cmp	r2, #11
 800848e:	d916      	bls.n	80084be <_malloc_r+0xba>
 8008490:	1961      	adds	r1, r4, r5
 8008492:	42a3      	cmp	r3, r4
 8008494:	6025      	str	r5, [r4, #0]
 8008496:	bf18      	it	ne
 8008498:	6059      	strne	r1, [r3, #4]
 800849a:	6863      	ldr	r3, [r4, #4]
 800849c:	bf08      	it	eq
 800849e:	6031      	streq	r1, [r6, #0]
 80084a0:	5162      	str	r2, [r4, r5]
 80084a2:	604b      	str	r3, [r1, #4]
 80084a4:	4638      	mov	r0, r7
 80084a6:	f104 060b 	add.w	r6, r4, #11
 80084aa:	f003 f84d 	bl	800b548 <__malloc_unlock>
 80084ae:	f026 0607 	bic.w	r6, r6, #7
 80084b2:	1d23      	adds	r3, r4, #4
 80084b4:	1af2      	subs	r2, r6, r3
 80084b6:	d0b6      	beq.n	8008426 <_malloc_r+0x22>
 80084b8:	1b9b      	subs	r3, r3, r6
 80084ba:	50a3      	str	r3, [r4, r2]
 80084bc:	e7b3      	b.n	8008426 <_malloc_r+0x22>
 80084be:	6862      	ldr	r2, [r4, #4]
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	bf0c      	ite	eq
 80084c4:	6032      	streq	r2, [r6, #0]
 80084c6:	605a      	strne	r2, [r3, #4]
 80084c8:	e7ec      	b.n	80084a4 <_malloc_r+0xa0>
 80084ca:	4623      	mov	r3, r4
 80084cc:	6864      	ldr	r4, [r4, #4]
 80084ce:	e7b2      	b.n	8008436 <_malloc_r+0x32>
 80084d0:	4634      	mov	r4, r6
 80084d2:	6876      	ldr	r6, [r6, #4]
 80084d4:	e7b9      	b.n	800844a <_malloc_r+0x46>
 80084d6:	230c      	movs	r3, #12
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	4638      	mov	r0, r7
 80084dc:	f003 f834 	bl	800b548 <__malloc_unlock>
 80084e0:	e7a1      	b.n	8008426 <_malloc_r+0x22>
 80084e2:	6025      	str	r5, [r4, #0]
 80084e4:	e7de      	b.n	80084a4 <_malloc_r+0xa0>
 80084e6:	bf00      	nop
 80084e8:	200011b8 	.word	0x200011b8

080084ec <__cvt>:
 80084ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	b088      	sub	sp, #32
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	461f      	mov	r7, r3
 80084f6:	4614      	mov	r4, r2
 80084f8:	bfb8      	it	lt
 80084fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80084fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008500:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008502:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008506:	bfb6      	itet	lt
 8008508:	461f      	movlt	r7, r3
 800850a:	2300      	movge	r3, #0
 800850c:	232d      	movlt	r3, #45	; 0x2d
 800850e:	7013      	strb	r3, [r2, #0]
 8008510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008512:	f023 0820 	bic.w	r8, r3, #32
 8008516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800851a:	d005      	beq.n	8008528 <__cvt+0x3c>
 800851c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008520:	d100      	bne.n	8008524 <__cvt+0x38>
 8008522:	3501      	adds	r5, #1
 8008524:	2302      	movs	r3, #2
 8008526:	e000      	b.n	800852a <__cvt+0x3e>
 8008528:	2303      	movs	r3, #3
 800852a:	aa07      	add	r2, sp, #28
 800852c:	9204      	str	r2, [sp, #16]
 800852e:	aa06      	add	r2, sp, #24
 8008530:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008534:	e9cd 3500 	strd	r3, r5, [sp]
 8008538:	4622      	mov	r2, r4
 800853a:	463b      	mov	r3, r7
 800853c:	f001 fe6c 	bl	800a218 <_dtoa_r>
 8008540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008544:	4606      	mov	r6, r0
 8008546:	d102      	bne.n	800854e <__cvt+0x62>
 8008548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800854a:	07db      	lsls	r3, r3, #31
 800854c:	d522      	bpl.n	8008594 <__cvt+0xa8>
 800854e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008552:	eb06 0905 	add.w	r9, r6, r5
 8008556:	d110      	bne.n	800857a <__cvt+0x8e>
 8008558:	7833      	ldrb	r3, [r6, #0]
 800855a:	2b30      	cmp	r3, #48	; 0x30
 800855c:	d10a      	bne.n	8008574 <__cvt+0x88>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4620      	mov	r0, r4
 8008564:	4639      	mov	r1, r7
 8008566:	f7f8 fb4b 	bl	8000c00 <__aeabi_dcmpeq>
 800856a:	b918      	cbnz	r0, 8008574 <__cvt+0x88>
 800856c:	f1c5 0501 	rsb	r5, r5, #1
 8008570:	f8ca 5000 	str.w	r5, [sl]
 8008574:	f8da 3000 	ldr.w	r3, [sl]
 8008578:	4499      	add	r9, r3
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	4620      	mov	r0, r4
 8008580:	4639      	mov	r1, r7
 8008582:	f7f8 fb3d 	bl	8000c00 <__aeabi_dcmpeq>
 8008586:	b108      	cbz	r0, 800858c <__cvt+0xa0>
 8008588:	f8cd 901c 	str.w	r9, [sp, #28]
 800858c:	2230      	movs	r2, #48	; 0x30
 800858e:	9b07      	ldr	r3, [sp, #28]
 8008590:	454b      	cmp	r3, r9
 8008592:	d307      	bcc.n	80085a4 <__cvt+0xb8>
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008598:	1b9b      	subs	r3, r3, r6
 800859a:	4630      	mov	r0, r6
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	b008      	add	sp, #32
 80085a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a4:	1c59      	adds	r1, r3, #1
 80085a6:	9107      	str	r1, [sp, #28]
 80085a8:	701a      	strb	r2, [r3, #0]
 80085aa:	e7f0      	b.n	800858e <__cvt+0xa2>

080085ac <__exponent>:
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	4603      	mov	r3, r0
 80085b0:	2900      	cmp	r1, #0
 80085b2:	bfb8      	it	lt
 80085b4:	4249      	neglt	r1, r1
 80085b6:	f803 2b02 	strb.w	r2, [r3], #2
 80085ba:	bfb4      	ite	lt
 80085bc:	222d      	movlt	r2, #45	; 0x2d
 80085be:	222b      	movge	r2, #43	; 0x2b
 80085c0:	2909      	cmp	r1, #9
 80085c2:	7042      	strb	r2, [r0, #1]
 80085c4:	dd2a      	ble.n	800861c <__exponent+0x70>
 80085c6:	f10d 0407 	add.w	r4, sp, #7
 80085ca:	46a4      	mov	ip, r4
 80085cc:	270a      	movs	r7, #10
 80085ce:	46a6      	mov	lr, r4
 80085d0:	460a      	mov	r2, r1
 80085d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085d6:	fb07 1516 	mls	r5, r7, r6, r1
 80085da:	3530      	adds	r5, #48	; 0x30
 80085dc:	2a63      	cmp	r2, #99	; 0x63
 80085de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80085e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085e6:	4631      	mov	r1, r6
 80085e8:	dcf1      	bgt.n	80085ce <__exponent+0x22>
 80085ea:	3130      	adds	r1, #48	; 0x30
 80085ec:	f1ae 0502 	sub.w	r5, lr, #2
 80085f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085f4:	1c44      	adds	r4, r0, #1
 80085f6:	4629      	mov	r1, r5
 80085f8:	4561      	cmp	r1, ip
 80085fa:	d30a      	bcc.n	8008612 <__exponent+0x66>
 80085fc:	f10d 0209 	add.w	r2, sp, #9
 8008600:	eba2 020e 	sub.w	r2, r2, lr
 8008604:	4565      	cmp	r5, ip
 8008606:	bf88      	it	hi
 8008608:	2200      	movhi	r2, #0
 800860a:	4413      	add	r3, r2
 800860c:	1a18      	subs	r0, r3, r0
 800860e:	b003      	add	sp, #12
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800861a:	e7ed      	b.n	80085f8 <__exponent+0x4c>
 800861c:	2330      	movs	r3, #48	; 0x30
 800861e:	3130      	adds	r1, #48	; 0x30
 8008620:	7083      	strb	r3, [r0, #2]
 8008622:	70c1      	strb	r1, [r0, #3]
 8008624:	1d03      	adds	r3, r0, #4
 8008626:	e7f1      	b.n	800860c <__exponent+0x60>

08008628 <_printf_float>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b091      	sub	sp, #68	; 0x44
 800862e:	460c      	mov	r4, r1
 8008630:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008634:	4616      	mov	r6, r2
 8008636:	461f      	mov	r7, r3
 8008638:	4605      	mov	r5, r0
 800863a:	f002 ff41 	bl	800b4c0 <_localeconv_r>
 800863e:	6803      	ldr	r3, [r0, #0]
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	4618      	mov	r0, r3
 8008644:	f7f7 fda6 	bl	8000194 <strlen>
 8008648:	2300      	movs	r3, #0
 800864a:	930e      	str	r3, [sp, #56]	; 0x38
 800864c:	f8d8 3000 	ldr.w	r3, [r8]
 8008650:	900a      	str	r0, [sp, #40]	; 0x28
 8008652:	3307      	adds	r3, #7
 8008654:	f023 0307 	bic.w	r3, r3, #7
 8008658:	f103 0208 	add.w	r2, r3, #8
 800865c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008660:	f8d4 b000 	ldr.w	fp, [r4]
 8008664:	f8c8 2000 	str.w	r2, [r8]
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008670:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008674:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008678:	930b      	str	r3, [sp, #44]	; 0x2c
 800867a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800867c:	4b9c      	ldr	r3, [pc, #624]	; (80088f0 <_printf_float+0x2c8>)
 800867e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008682:	4640      	mov	r0, r8
 8008684:	f7f8 faee 	bl	8000c64 <__aeabi_dcmpun>
 8008688:	bb70      	cbnz	r0, 80086e8 <_printf_float+0xc0>
 800868a:	4b99      	ldr	r3, [pc, #612]	; (80088f0 <_printf_float+0x2c8>)
 800868c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800868e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008692:	4640      	mov	r0, r8
 8008694:	f7f8 fac8 	bl	8000c28 <__aeabi_dcmple>
 8008698:	bb30      	cbnz	r0, 80086e8 <_printf_float+0xc0>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	4640      	mov	r0, r8
 80086a0:	4651      	mov	r1, sl
 80086a2:	f7f8 fab7 	bl	8000c14 <__aeabi_dcmplt>
 80086a6:	b110      	cbz	r0, 80086ae <_printf_float+0x86>
 80086a8:	232d      	movs	r3, #45	; 0x2d
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ae:	4b91      	ldr	r3, [pc, #580]	; (80088f4 <_printf_float+0x2cc>)
 80086b0:	4891      	ldr	r0, [pc, #580]	; (80088f8 <_printf_float+0x2d0>)
 80086b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086b6:	bf94      	ite	ls
 80086b8:	4698      	movls	r8, r3
 80086ba:	4680      	movhi	r8, r0
 80086bc:	2303      	movs	r3, #3
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f02b 0304 	bic.w	r3, fp, #4
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	f04f 0a00 	mov.w	sl, #0
 80086ca:	9700      	str	r7, [sp, #0]
 80086cc:	4633      	mov	r3, r6
 80086ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f9d2 	bl	8008a7c <_printf_common>
 80086d8:	3001      	adds	r0, #1
 80086da:	f040 808f 	bne.w	80087fc <_printf_float+0x1d4>
 80086de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e2:	b011      	add	sp, #68	; 0x44
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	4642      	mov	r2, r8
 80086ea:	4653      	mov	r3, sl
 80086ec:	4640      	mov	r0, r8
 80086ee:	4651      	mov	r1, sl
 80086f0:	f7f8 fab8 	bl	8000c64 <__aeabi_dcmpun>
 80086f4:	b140      	cbz	r0, 8008708 <_printf_float+0xe0>
 80086f6:	f1ba 0f00 	cmp.w	sl, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	232d      	movlt	r3, #45	; 0x2d
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008702:	487e      	ldr	r0, [pc, #504]	; (80088fc <_printf_float+0x2d4>)
 8008704:	4b7e      	ldr	r3, [pc, #504]	; (8008900 <_printf_float+0x2d8>)
 8008706:	e7d4      	b.n	80086b2 <_printf_float+0x8a>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008710:	d142      	bne.n	8008798 <_printf_float+0x170>
 8008712:	2306      	movs	r3, #6
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	9206      	str	r2, [sp, #24]
 800871a:	aa0e      	add	r2, sp, #56	; 0x38
 800871c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008720:	aa0d      	add	r2, sp, #52	; 0x34
 8008722:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008726:	9203      	str	r2, [sp, #12]
 8008728:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800872c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	6863      	ldr	r3, [r4, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4642      	mov	r2, r8
 8008738:	4653      	mov	r3, sl
 800873a:	4628      	mov	r0, r5
 800873c:	910b      	str	r1, [sp, #44]	; 0x2c
 800873e:	f7ff fed5 	bl	80084ec <__cvt>
 8008742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008744:	2947      	cmp	r1, #71	; 0x47
 8008746:	4680      	mov	r8, r0
 8008748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800874a:	d108      	bne.n	800875e <_printf_float+0x136>
 800874c:	1cc8      	adds	r0, r1, #3
 800874e:	db02      	blt.n	8008756 <_printf_float+0x12e>
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	4299      	cmp	r1, r3
 8008754:	dd40      	ble.n	80087d8 <_printf_float+0x1b0>
 8008756:	f1a9 0902 	sub.w	r9, r9, #2
 800875a:	fa5f f989 	uxtb.w	r9, r9
 800875e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008762:	d81f      	bhi.n	80087a4 <_printf_float+0x17c>
 8008764:	3901      	subs	r1, #1
 8008766:	464a      	mov	r2, r9
 8008768:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800876c:	910d      	str	r1, [sp, #52]	; 0x34
 800876e:	f7ff ff1d 	bl	80085ac <__exponent>
 8008772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008774:	1813      	adds	r3, r2, r0
 8008776:	2a01      	cmp	r2, #1
 8008778:	4682      	mov	sl, r0
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	dc02      	bgt.n	8008784 <_printf_float+0x15c>
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	07d2      	lsls	r2, r2, #31
 8008782:	d501      	bpl.n	8008788 <_printf_float+0x160>
 8008784:	3301      	adds	r3, #1
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800878c:	2b00      	cmp	r3, #0
 800878e:	d09c      	beq.n	80086ca <_printf_float+0xa2>
 8008790:	232d      	movs	r3, #45	; 0x2d
 8008792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008796:	e798      	b.n	80086ca <_printf_float+0xa2>
 8008798:	2947      	cmp	r1, #71	; 0x47
 800879a:	d1bc      	bne.n	8008716 <_printf_float+0xee>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ba      	bne.n	8008716 <_printf_float+0xee>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e7b7      	b.n	8008714 <_printf_float+0xec>
 80087a4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087a8:	d118      	bne.n	80087dc <_printf_float+0x1b4>
 80087aa:	2900      	cmp	r1, #0
 80087ac:	6863      	ldr	r3, [r4, #4]
 80087ae:	dd0b      	ble.n	80087c8 <_printf_float+0x1a0>
 80087b0:	6121      	str	r1, [r4, #16]
 80087b2:	b913      	cbnz	r3, 80087ba <_printf_float+0x192>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	07d0      	lsls	r0, r2, #31
 80087b8:	d502      	bpl.n	80087c0 <_printf_float+0x198>
 80087ba:	3301      	adds	r3, #1
 80087bc:	440b      	add	r3, r1
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c2:	f04f 0a00 	mov.w	sl, #0
 80087c6:	e7df      	b.n	8008788 <_printf_float+0x160>
 80087c8:	b913      	cbnz	r3, 80087d0 <_printf_float+0x1a8>
 80087ca:	6822      	ldr	r2, [r4, #0]
 80087cc:	07d2      	lsls	r2, r2, #31
 80087ce:	d501      	bpl.n	80087d4 <_printf_float+0x1ac>
 80087d0:	3302      	adds	r3, #2
 80087d2:	e7f4      	b.n	80087be <_printf_float+0x196>
 80087d4:	2301      	movs	r3, #1
 80087d6:	e7f2      	b.n	80087be <_printf_float+0x196>
 80087d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80087dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087de:	4299      	cmp	r1, r3
 80087e0:	db05      	blt.n	80087ee <_printf_float+0x1c6>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6121      	str	r1, [r4, #16]
 80087e6:	07d8      	lsls	r0, r3, #31
 80087e8:	d5ea      	bpl.n	80087c0 <_printf_float+0x198>
 80087ea:	1c4b      	adds	r3, r1, #1
 80087ec:	e7e7      	b.n	80087be <_printf_float+0x196>
 80087ee:	2900      	cmp	r1, #0
 80087f0:	bfd4      	ite	le
 80087f2:	f1c1 0202 	rsble	r2, r1, #2
 80087f6:	2201      	movgt	r2, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	e7e0      	b.n	80087be <_printf_float+0x196>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	055a      	lsls	r2, r3, #21
 8008800:	d407      	bmi.n	8008812 <_printf_float+0x1ea>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	4642      	mov	r2, r8
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	d12b      	bne.n	8008868 <_printf_float+0x240>
 8008810:	e765      	b.n	80086de <_printf_float+0xb6>
 8008812:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008816:	f240 80dc 	bls.w	80089d2 <_printf_float+0x3aa>
 800881a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	f7f8 f9ed 	bl	8000c00 <__aeabi_dcmpeq>
 8008826:	2800      	cmp	r0, #0
 8008828:	d033      	beq.n	8008892 <_printf_float+0x26a>
 800882a:	4a36      	ldr	r2, [pc, #216]	; (8008904 <_printf_float+0x2dc>)
 800882c:	2301      	movs	r3, #1
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f af52 	beq.w	80086de <_printf_float+0xb6>
 800883a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800883e:	429a      	cmp	r2, r3
 8008840:	db02      	blt.n	8008848 <_printf_float+0x220>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	07d8      	lsls	r0, r3, #31
 8008846:	d50f      	bpl.n	8008868 <_printf_float+0x240>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	f43f af43 	beq.w	80086de <_printf_float+0xb6>
 8008858:	f04f 0800 	mov.w	r8, #0
 800885c:	f104 091a 	add.w	r9, r4, #26
 8008860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008862:	3b01      	subs	r3, #1
 8008864:	4543      	cmp	r3, r8
 8008866:	dc09      	bgt.n	800887c <_printf_float+0x254>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	f100 8101 	bmi.w	8008a72 <_printf_float+0x44a>
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008874:	4298      	cmp	r0, r3
 8008876:	bfb8      	it	lt
 8008878:	4618      	movlt	r0, r3
 800887a:	e732      	b.n	80086e2 <_printf_float+0xba>
 800887c:	2301      	movs	r3, #1
 800887e:	464a      	mov	r2, r9
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af29 	beq.w	80086de <_printf_float+0xb6>
 800888c:	f108 0801 	add.w	r8, r8, #1
 8008890:	e7e6      	b.n	8008860 <_printf_float+0x238>
 8008892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc37      	bgt.n	8008908 <_printf_float+0x2e0>
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <_printf_float+0x2dc>)
 800889a:	2301      	movs	r3, #1
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af1b 	beq.w	80086de <_printf_float+0xb6>
 80088a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d102      	bne.n	80088b6 <_printf_float+0x28e>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d5d8      	bpl.n	8008868 <_printf_float+0x240>
 80088b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f af0c 	beq.w	80086de <_printf_float+0xb6>
 80088c6:	f04f 0900 	mov.w	r9, #0
 80088ca:	f104 0a1a 	add.w	sl, r4, #26
 80088ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d0:	425b      	negs	r3, r3
 80088d2:	454b      	cmp	r3, r9
 80088d4:	dc01      	bgt.n	80088da <_printf_float+0x2b2>
 80088d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d8:	e794      	b.n	8008804 <_printf_float+0x1dc>
 80088da:	2301      	movs	r3, #1
 80088dc:	4652      	mov	r2, sl
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f aefa 	beq.w	80086de <_printf_float+0xb6>
 80088ea:	f109 0901 	add.w	r9, r9, #1
 80088ee:	e7ee      	b.n	80088ce <_printf_float+0x2a6>
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800ec4c 	.word	0x0800ec4c
 80088f8:	0800ec50 	.word	0x0800ec50
 80088fc:	0800ec58 	.word	0x0800ec58
 8008900:	0800ec54 	.word	0x0800ec54
 8008904:	0800ec5c 	.word	0x0800ec5c
 8008908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890c:	429a      	cmp	r2, r3
 800890e:	bfa8      	it	ge
 8008910:	461a      	movge	r2, r3
 8008912:	2a00      	cmp	r2, #0
 8008914:	4691      	mov	r9, r2
 8008916:	dc37      	bgt.n	8008988 <_printf_float+0x360>
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008920:	f104 021a 	add.w	r2, r4, #26
 8008924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008928:	ebaa 0309 	sub.w	r3, sl, r9
 800892c:	455b      	cmp	r3, fp
 800892e:	dc33      	bgt.n	8008998 <_printf_float+0x370>
 8008930:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008934:	429a      	cmp	r2, r3
 8008936:	db3b      	blt.n	80089b0 <_printf_float+0x388>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d438      	bmi.n	80089b0 <_printf_float+0x388>
 800893e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008942:	eba3 020a 	sub.w	r2, r3, sl
 8008946:	eba3 0901 	sub.w	r9, r3, r1
 800894a:	4591      	cmp	r9, r2
 800894c:	bfa8      	it	ge
 800894e:	4691      	movge	r9, r2
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc34      	bgt.n	80089c0 <_printf_float+0x398>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0a1a 	add.w	sl, r4, #26
 8008962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af7b 	ble.w	8008868 <_printf_float+0x240>
 8008972:	2301      	movs	r3, #1
 8008974:	4652      	mov	r2, sl
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeae 	beq.w	80086de <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x33a>
 8008988:	4613      	mov	r3, r2
 800898a:	4631      	mov	r1, r6
 800898c:	4642      	mov	r2, r8
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	d1c0      	bne.n	8008918 <_printf_float+0x2f0>
 8008996:	e6a2      	b.n	80086de <_printf_float+0xb6>
 8008998:	2301      	movs	r3, #1
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	920b      	str	r2, [sp, #44]	; 0x2c
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f ae9b 	beq.w	80086de <_printf_float+0xb6>
 80089a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089aa:	f10b 0b01 	add.w	fp, fp, #1
 80089ae:	e7b9      	b.n	8008924 <_printf_float+0x2fc>
 80089b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1bf      	bne.n	800893e <_printf_float+0x316>
 80089be:	e68e      	b.n	80086de <_printf_float+0xb6>
 80089c0:	464b      	mov	r3, r9
 80089c2:	eb08 020a 	add.w	r2, r8, sl
 80089c6:	4631      	mov	r1, r6
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1c2      	bne.n	8008956 <_printf_float+0x32e>
 80089d0:	e685      	b.n	80086de <_printf_float+0xb6>
 80089d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d4:	2a01      	cmp	r2, #1
 80089d6:	dc01      	bgt.n	80089dc <_printf_float+0x3b4>
 80089d8:	07db      	lsls	r3, r3, #31
 80089da:	d537      	bpl.n	8008a4c <_printf_float+0x424>
 80089dc:	2301      	movs	r3, #1
 80089de:	4642      	mov	r2, r8
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae79 	beq.w	80086de <_printf_float+0xb6>
 80089ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f ae71 	beq.w	80086de <_printf_float+0xb6>
 80089fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f8 f8fc 	bl	8000c00 <__aeabi_dcmpeq>
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_printf_float+0x41a>
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0c:	f108 0201 	add.w	r2, r8, #1
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4631      	mov	r1, r6
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d10e      	bne.n	8008a3a <_printf_float+0x412>
 8008a1c:	e65f      	b.n	80086de <_printf_float+0xb6>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	464a      	mov	r2, r9
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae58 	beq.w	80086de <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4543      	cmp	r3, r8
 8008a38:	dcf1      	bgt.n	8008a1e <_printf_float+0x3f6>
 8008a3a:	4653      	mov	r3, sl
 8008a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a40:	e6e1      	b.n	8008806 <_printf_float+0x1de>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 091a 	add.w	r9, r4, #26
 8008a4a:	e7f2      	b.n	8008a32 <_printf_float+0x40a>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	e7df      	b.n	8008a12 <_printf_float+0x3ea>
 8008a52:	2301      	movs	r3, #1
 8008a54:	464a      	mov	r2, r9
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae3e 	beq.w	80086de <_printf_float+0xb6>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x42a>
 8008a70:	e6fe      	b.n	8008870 <_printf_float+0x248>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f4      	b.n	8008a66 <_printf_float+0x43e>

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4699      	mov	r9, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bfb8      	it	lt
 8008a90:	4613      	movlt	r3, r2
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a98:	4607      	mov	r7, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc26      	bgt.n	8008b12 <_printf_common+0x96>
 8008ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ac8:	1e13      	subs	r3, r2, #0
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42b      	bmi.n	8008b2c <_printf_common+0xb0>
 8008ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ad8:	4649      	mov	r1, r9
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c0      	blx	r8
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d01e      	beq.n	8008b20 <_printf_common+0xa4>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	68e5      	ldr	r5, [r4, #12]
 8008ae6:	6832      	ldr	r2, [r6, #0]
 8008ae8:	f003 0306 	and.w	r3, r3, #6
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	bf08      	it	eq
 8008af0:	1aad      	subeq	r5, r5, r2
 8008af2:	68a3      	ldr	r3, [r4, #8]
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	bf0c      	ite	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	2500      	movne	r5, #0
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bfc4      	itt	gt
 8008b02:	1a9b      	subgt	r3, r3, r2
 8008b04:	18ed      	addgt	r5, r5, r3
 8008b06:	2600      	movs	r6, #0
 8008b08:	341a      	adds	r4, #26
 8008b0a:	42b5      	cmp	r5, r6
 8008b0c:	d11a      	bne.n	8008b44 <_printf_common+0xc8>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e008      	b.n	8008b24 <_printf_common+0xa8>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4649      	mov	r1, r9
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c0      	blx	r8
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_printf_common+0xac>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	e7c6      	b.n	8008aba <_printf_common+0x3e>
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	2030      	movs	r0, #48	; 0x30
 8008b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b36:	4422      	add	r2, r4
 8008b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7c7      	b.n	8008ad4 <_printf_common+0x58>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4622      	mov	r2, r4
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c0      	blx	r8
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa4>
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7d9      	b.n	8008b0a <_printf_common+0x8e>
	...

08008b58 <_printf_i>:
 8008b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	7e0f      	ldrb	r7, [r1, #24]
 8008b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b60:	2f78      	cmp	r7, #120	; 0x78
 8008b62:	4691      	mov	r9, r2
 8008b64:	4680      	mov	r8, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b6e:	d807      	bhi.n	8008b80 <_printf_i+0x28>
 8008b70:	2f62      	cmp	r7, #98	; 0x62
 8008b72:	d80a      	bhi.n	8008b8a <_printf_i+0x32>
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f000 80d8 	beq.w	8008d2a <_printf_i+0x1d2>
 8008b7a:	2f58      	cmp	r7, #88	; 0x58
 8008b7c:	f000 80a3 	beq.w	8008cc6 <_printf_i+0x16e>
 8008b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b88:	e03a      	b.n	8008c00 <_printf_i+0xa8>
 8008b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b8e:	2b15      	cmp	r3, #21
 8008b90:	d8f6      	bhi.n	8008b80 <_printf_i+0x28>
 8008b92:	a101      	add	r1, pc, #4	; (adr r1, 8008b98 <_printf_i+0x40>)
 8008b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008b81 	.word	0x08008b81
 8008ba4:	08008b81 	.word	0x08008b81
 8008ba8:	08008b81 	.word	0x08008b81
 8008bac:	08008b81 	.word	0x08008b81
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b81 	.word	0x08008b81
 8008bb8:	08008b81 	.word	0x08008b81
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008d11 	.word	0x08008d11
 8008bc8:	08008c35 	.word	0x08008c35
 8008bcc:	08008cf3 	.word	0x08008cf3
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d33 	.word	0x08008d33
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008cfb 	.word	0x08008cfb
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	602a      	str	r2, [r5, #0]
 8008bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0a3      	b.n	8008d4c <_printf_i+0x1f4>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	6829      	ldr	r1, [r5, #0]
 8008c08:	0606      	lsls	r6, r0, #24
 8008c0a:	f101 0304 	add.w	r3, r1, #4
 8008c0e:	d50a      	bpl.n	8008c26 <_printf_i+0xce>
 8008c10:	680e      	ldr	r6, [r1, #0]
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	da03      	bge.n	8008c20 <_printf_i+0xc8>
 8008c18:	232d      	movs	r3, #45	; 0x2d
 8008c1a:	4276      	negs	r6, r6
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c20:	485e      	ldr	r0, [pc, #376]	; (8008d9c <_printf_i+0x244>)
 8008c22:	230a      	movs	r3, #10
 8008c24:	e019      	b.n	8008c5a <_printf_i+0x102>
 8008c26:	680e      	ldr	r6, [r1, #0]
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c2e:	bf18      	it	ne
 8008c30:	b236      	sxthne	r6, r6
 8008c32:	e7ef      	b.n	8008c14 <_printf_i+0xbc>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	6820      	ldr	r0, [r4, #0]
 8008c38:	1d19      	adds	r1, r3, #4
 8008c3a:	6029      	str	r1, [r5, #0]
 8008c3c:	0601      	lsls	r1, r0, #24
 8008c3e:	d501      	bpl.n	8008c44 <_printf_i+0xec>
 8008c40:	681e      	ldr	r6, [r3, #0]
 8008c42:	e002      	b.n	8008c4a <_printf_i+0xf2>
 8008c44:	0646      	lsls	r6, r0, #25
 8008c46:	d5fb      	bpl.n	8008c40 <_printf_i+0xe8>
 8008c48:	881e      	ldrh	r6, [r3, #0]
 8008c4a:	4854      	ldr	r0, [pc, #336]	; (8008d9c <_printf_i+0x244>)
 8008c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c4e:	bf0c      	ite	eq
 8008c50:	2308      	moveq	r3, #8
 8008c52:	230a      	movne	r3, #10
 8008c54:	2100      	movs	r1, #0
 8008c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c5a:	6865      	ldr	r5, [r4, #4]
 8008c5c:	60a5      	str	r5, [r4, #8]
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	bfa2      	ittt	ge
 8008c62:	6821      	ldrge	r1, [r4, #0]
 8008c64:	f021 0104 	bicge.w	r1, r1, #4
 8008c68:	6021      	strge	r1, [r4, #0]
 8008c6a:	b90e      	cbnz	r6, 8008c70 <_printf_i+0x118>
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	d04d      	beq.n	8008d0c <_printf_i+0x1b4>
 8008c70:	4615      	mov	r5, r2
 8008c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c76:	fb03 6711 	mls	r7, r3, r1, r6
 8008c7a:	5dc7      	ldrb	r7, [r0, r7]
 8008c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c80:	4637      	mov	r7, r6
 8008c82:	42bb      	cmp	r3, r7
 8008c84:	460e      	mov	r6, r1
 8008c86:	d9f4      	bls.n	8008c72 <_printf_i+0x11a>
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d10b      	bne.n	8008ca4 <_printf_i+0x14c>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	07de      	lsls	r6, r3, #31
 8008c90:	d508      	bpl.n	8008ca4 <_printf_i+0x14c>
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	6861      	ldr	r1, [r4, #4]
 8008c96:	4299      	cmp	r1, r3
 8008c98:	bfde      	ittt	le
 8008c9a:	2330      	movle	r3, #48	; 0x30
 8008c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ca4:	1b52      	subs	r2, r2, r5
 8008ca6:	6122      	str	r2, [r4, #16]
 8008ca8:	f8cd a000 	str.w	sl, [sp]
 8008cac:	464b      	mov	r3, r9
 8008cae:	aa03      	add	r2, sp, #12
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f7ff fee2 	bl	8008a7c <_printf_common>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d14c      	bne.n	8008d56 <_printf_i+0x1fe>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cc0:	b004      	add	sp, #16
 8008cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc6:	4835      	ldr	r0, [pc, #212]	; (8008d9c <_printf_i+0x244>)
 8008cc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ccc:	6829      	ldr	r1, [r5, #0]
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cd4:	6029      	str	r1, [r5, #0]
 8008cd6:	061d      	lsls	r5, r3, #24
 8008cd8:	d514      	bpl.n	8008d04 <_printf_i+0x1ac>
 8008cda:	07df      	lsls	r7, r3, #31
 8008cdc:	bf44      	itt	mi
 8008cde:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce2:	6023      	strmi	r3, [r4, #0]
 8008ce4:	b91e      	cbnz	r6, 8008cee <_printf_i+0x196>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	f023 0320 	bic.w	r3, r3, #32
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e7b0      	b.n	8008c54 <_printf_i+0xfc>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	f043 0320 	orr.w	r3, r3, #32
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	2378      	movs	r3, #120	; 0x78
 8008cfc:	4828      	ldr	r0, [pc, #160]	; (8008da0 <_printf_i+0x248>)
 8008cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d02:	e7e3      	b.n	8008ccc <_printf_i+0x174>
 8008d04:	0659      	lsls	r1, r3, #25
 8008d06:	bf48      	it	mi
 8008d08:	b2b6      	uxthmi	r6, r6
 8008d0a:	e7e6      	b.n	8008cda <_printf_i+0x182>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	e7bb      	b.n	8008c88 <_printf_i+0x130>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	6826      	ldr	r6, [r4, #0]
 8008d14:	6961      	ldr	r1, [r4, #20]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6028      	str	r0, [r5, #0]
 8008d1a:	0635      	lsls	r5, r6, #24
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0x1cc>
 8008d20:	6019      	str	r1, [r3, #0]
 8008d22:	e002      	b.n	8008d2a <_printf_i+0x1d2>
 8008d24:	0670      	lsls	r0, r6, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0x1c8>
 8008d28:	8019      	strh	r1, [r3, #0]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	4615      	mov	r5, r2
 8008d30:	e7ba      	b.n	8008ca8 <_printf_i+0x150>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	602a      	str	r2, [r5, #0]
 8008d38:	681d      	ldr	r5, [r3, #0]
 8008d3a:	6862      	ldr	r2, [r4, #4]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7f7 fa36 	bl	80001b0 <memchr>
 8008d44:	b108      	cbz	r0, 8008d4a <_printf_i+0x1f2>
 8008d46:	1b40      	subs	r0, r0, r5
 8008d48:	6060      	str	r0, [r4, #4]
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	6123      	str	r3, [r4, #16]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d54:	e7a8      	b.n	8008ca8 <_printf_i+0x150>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	47d0      	blx	sl
 8008d60:	3001      	adds	r0, #1
 8008d62:	d0ab      	beq.n	8008cbc <_printf_i+0x164>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	079b      	lsls	r3, r3, #30
 8008d68:	d413      	bmi.n	8008d92 <_printf_i+0x23a>
 8008d6a:	68e0      	ldr	r0, [r4, #12]
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	bfb8      	it	lt
 8008d72:	4618      	movlt	r0, r3
 8008d74:	e7a4      	b.n	8008cc0 <_printf_i+0x168>
 8008d76:	2301      	movs	r3, #1
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	47d0      	blx	sl
 8008d80:	3001      	adds	r0, #1
 8008d82:	d09b      	beq.n	8008cbc <_printf_i+0x164>
 8008d84:	3501      	adds	r5, #1
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	9903      	ldr	r1, [sp, #12]
 8008d8a:	1a5b      	subs	r3, r3, r1
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dcf2      	bgt.n	8008d76 <_printf_i+0x21e>
 8008d90:	e7eb      	b.n	8008d6a <_printf_i+0x212>
 8008d92:	2500      	movs	r5, #0
 8008d94:	f104 0619 	add.w	r6, r4, #25
 8008d98:	e7f5      	b.n	8008d86 <_printf_i+0x22e>
 8008d9a:	bf00      	nop
 8008d9c:	0800ec5e 	.word	0x0800ec5e
 8008da0:	0800ec6f 	.word	0x0800ec6f

08008da4 <_scanf_float>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	b087      	sub	sp, #28
 8008daa:	4617      	mov	r7, r2
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	688b      	ldr	r3, [r1, #8]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008db6:	bf83      	ittte	hi
 8008db8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008dbc:	195b      	addhi	r3, r3, r5
 8008dbe:	9302      	strhi	r3, [sp, #8]
 8008dc0:	2300      	movls	r3, #0
 8008dc2:	bf86      	itte	hi
 8008dc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dc8:	608b      	strhi	r3, [r1, #8]
 8008dca:	9302      	strls	r3, [sp, #8]
 8008dcc:	680b      	ldr	r3, [r1, #0]
 8008dce:	468b      	mov	fp, r1
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008dd6:	f84b 3b1c 	str.w	r3, [fp], #28
 8008dda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dde:	4680      	mov	r8, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	465e      	mov	r6, fp
 8008de4:	46aa      	mov	sl, r5
 8008de6:	46a9      	mov	r9, r5
 8008de8:	9501      	str	r5, [sp, #4]
 8008dea:	68a2      	ldr	r2, [r4, #8]
 8008dec:	b152      	cbz	r2, 8008e04 <_scanf_float+0x60>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b4e      	cmp	r3, #78	; 0x4e
 8008df4:	d864      	bhi.n	8008ec0 <_scanf_float+0x11c>
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d83c      	bhi.n	8008e74 <_scanf_float+0xd0>
 8008dfa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008dfe:	b2c8      	uxtb	r0, r1
 8008e00:	280e      	cmp	r0, #14
 8008e02:	d93a      	bls.n	8008e7a <_scanf_float+0xd6>
 8008e04:	f1b9 0f00 	cmp.w	r9, #0
 8008e08:	d003      	beq.n	8008e12 <_scanf_float+0x6e>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e16:	f1ba 0f01 	cmp.w	sl, #1
 8008e1a:	f200 8113 	bhi.w	8009044 <_scanf_float+0x2a0>
 8008e1e:	455e      	cmp	r6, fp
 8008e20:	f200 8105 	bhi.w	800902e <_scanf_float+0x28a>
 8008e24:	2501      	movs	r5, #1
 8008e26:	4628      	mov	r0, r5
 8008e28:	b007      	add	sp, #28
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e32:	2a0d      	cmp	r2, #13
 8008e34:	d8e6      	bhi.n	8008e04 <_scanf_float+0x60>
 8008e36:	a101      	add	r1, pc, #4	; (adr r1, 8008e3c <_scanf_float+0x98>)
 8008e38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e3c:	08008f7b 	.word	0x08008f7b
 8008e40:	08008e05 	.word	0x08008e05
 8008e44:	08008e05 	.word	0x08008e05
 8008e48:	08008e05 	.word	0x08008e05
 8008e4c:	08008fdb 	.word	0x08008fdb
 8008e50:	08008fb3 	.word	0x08008fb3
 8008e54:	08008e05 	.word	0x08008e05
 8008e58:	08008e05 	.word	0x08008e05
 8008e5c:	08008f89 	.word	0x08008f89
 8008e60:	08008e05 	.word	0x08008e05
 8008e64:	08008e05 	.word	0x08008e05
 8008e68:	08008e05 	.word	0x08008e05
 8008e6c:	08008e05 	.word	0x08008e05
 8008e70:	08008f41 	.word	0x08008f41
 8008e74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e78:	e7db      	b.n	8008e32 <_scanf_float+0x8e>
 8008e7a:	290e      	cmp	r1, #14
 8008e7c:	d8c2      	bhi.n	8008e04 <_scanf_float+0x60>
 8008e7e:	a001      	add	r0, pc, #4	; (adr r0, 8008e84 <_scanf_float+0xe0>)
 8008e80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e84:	08008f33 	.word	0x08008f33
 8008e88:	08008e05 	.word	0x08008e05
 8008e8c:	08008f33 	.word	0x08008f33
 8008e90:	08008fc7 	.word	0x08008fc7
 8008e94:	08008e05 	.word	0x08008e05
 8008e98:	08008ee1 	.word	0x08008ee1
 8008e9c:	08008f1d 	.word	0x08008f1d
 8008ea0:	08008f1d 	.word	0x08008f1d
 8008ea4:	08008f1d 	.word	0x08008f1d
 8008ea8:	08008f1d 	.word	0x08008f1d
 8008eac:	08008f1d 	.word	0x08008f1d
 8008eb0:	08008f1d 	.word	0x08008f1d
 8008eb4:	08008f1d 	.word	0x08008f1d
 8008eb8:	08008f1d 	.word	0x08008f1d
 8008ebc:	08008f1d 	.word	0x08008f1d
 8008ec0:	2b6e      	cmp	r3, #110	; 0x6e
 8008ec2:	d809      	bhi.n	8008ed8 <_scanf_float+0x134>
 8008ec4:	2b60      	cmp	r3, #96	; 0x60
 8008ec6:	d8b2      	bhi.n	8008e2e <_scanf_float+0x8a>
 8008ec8:	2b54      	cmp	r3, #84	; 0x54
 8008eca:	d077      	beq.n	8008fbc <_scanf_float+0x218>
 8008ecc:	2b59      	cmp	r3, #89	; 0x59
 8008ece:	d199      	bne.n	8008e04 <_scanf_float+0x60>
 8008ed0:	2d07      	cmp	r5, #7
 8008ed2:	d197      	bne.n	8008e04 <_scanf_float+0x60>
 8008ed4:	2508      	movs	r5, #8
 8008ed6:	e029      	b.n	8008f2c <_scanf_float+0x188>
 8008ed8:	2b74      	cmp	r3, #116	; 0x74
 8008eda:	d06f      	beq.n	8008fbc <_scanf_float+0x218>
 8008edc:	2b79      	cmp	r3, #121	; 0x79
 8008ede:	e7f6      	b.n	8008ece <_scanf_float+0x12a>
 8008ee0:	6821      	ldr	r1, [r4, #0]
 8008ee2:	05c8      	lsls	r0, r1, #23
 8008ee4:	d51a      	bpl.n	8008f1c <_scanf_float+0x178>
 8008ee6:	9b02      	ldr	r3, [sp, #8]
 8008ee8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008eec:	6021      	str	r1, [r4, #0]
 8008eee:	f109 0901 	add.w	r9, r9, #1
 8008ef2:	b11b      	cbz	r3, 8008efc <_scanf_float+0x158>
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	3201      	adds	r2, #1
 8008ef8:	9302      	str	r3, [sp, #8]
 8008efa:	60a2      	str	r2, [r4, #8]
 8008efc:	68a3      	ldr	r3, [r4, #8]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	3301      	adds	r3, #1
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	f340 8084 	ble.w	800901c <_scanf_float+0x278>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	603b      	str	r3, [r7, #0]
 8008f1a:	e766      	b.n	8008dea <_scanf_float+0x46>
 8008f1c:	eb1a 0f05 	cmn.w	sl, r5
 8008f20:	f47f af70 	bne.w	8008e04 <_scanf_float+0x60>
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f30:	e7e4      	b.n	8008efc <_scanf_float+0x158>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	0610      	lsls	r0, r2, #24
 8008f36:	f57f af65 	bpl.w	8008e04 <_scanf_float+0x60>
 8008f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f3e:	e7f4      	b.n	8008f2a <_scanf_float+0x186>
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	d10e      	bne.n	8008f64 <_scanf_float+0x1c0>
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	d10e      	bne.n	8008f6a <_scanf_float+0x1c6>
 8008f4c:	6822      	ldr	r2, [r4, #0]
 8008f4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f56:	d108      	bne.n	8008f6a <_scanf_float+0x1c6>
 8008f58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	f04f 0a01 	mov.w	sl, #1
 8008f62:	e7e3      	b.n	8008f2c <_scanf_float+0x188>
 8008f64:	f1ba 0f02 	cmp.w	sl, #2
 8008f68:	d055      	beq.n	8009016 <_scanf_float+0x272>
 8008f6a:	2d01      	cmp	r5, #1
 8008f6c:	d002      	beq.n	8008f74 <_scanf_float+0x1d0>
 8008f6e:	2d04      	cmp	r5, #4
 8008f70:	f47f af48 	bne.w	8008e04 <_scanf_float+0x60>
 8008f74:	3501      	adds	r5, #1
 8008f76:	b2ed      	uxtb	r5, r5
 8008f78:	e7d8      	b.n	8008f2c <_scanf_float+0x188>
 8008f7a:	f1ba 0f01 	cmp.w	sl, #1
 8008f7e:	f47f af41 	bne.w	8008e04 <_scanf_float+0x60>
 8008f82:	f04f 0a02 	mov.w	sl, #2
 8008f86:	e7d1      	b.n	8008f2c <_scanf_float+0x188>
 8008f88:	b97d      	cbnz	r5, 8008faa <_scanf_float+0x206>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	f47f af3c 	bne.w	8008e0a <_scanf_float+0x66>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f9c:	f47f af39 	bne.w	8008e12 <_scanf_float+0x6e>
 8008fa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	2501      	movs	r5, #1
 8008fa8:	e7c0      	b.n	8008f2c <_scanf_float+0x188>
 8008faa:	2d03      	cmp	r5, #3
 8008fac:	d0e2      	beq.n	8008f74 <_scanf_float+0x1d0>
 8008fae:	2d05      	cmp	r5, #5
 8008fb0:	e7de      	b.n	8008f70 <_scanf_float+0x1cc>
 8008fb2:	2d02      	cmp	r5, #2
 8008fb4:	f47f af26 	bne.w	8008e04 <_scanf_float+0x60>
 8008fb8:	2503      	movs	r5, #3
 8008fba:	e7b7      	b.n	8008f2c <_scanf_float+0x188>
 8008fbc:	2d06      	cmp	r5, #6
 8008fbe:	f47f af21 	bne.w	8008e04 <_scanf_float+0x60>
 8008fc2:	2507      	movs	r5, #7
 8008fc4:	e7b2      	b.n	8008f2c <_scanf_float+0x188>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	0591      	lsls	r1, r2, #22
 8008fca:	f57f af1b 	bpl.w	8008e04 <_scanf_float+0x60>
 8008fce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fd2:	6022      	str	r2, [r4, #0]
 8008fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fd8:	e7a8      	b.n	8008f2c <_scanf_float+0x188>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fe0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fe4:	d006      	beq.n	8008ff4 <_scanf_float+0x250>
 8008fe6:	0550      	lsls	r0, r2, #21
 8008fe8:	f57f af0c 	bpl.w	8008e04 <_scanf_float+0x60>
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	f43f af0f 	beq.w	8008e12 <_scanf_float+0x6e>
 8008ff4:	0591      	lsls	r1, r2, #22
 8008ff6:	bf58      	it	pl
 8008ff8:	9901      	ldrpl	r1, [sp, #4]
 8008ffa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ffe:	bf58      	it	pl
 8009000:	eba9 0101 	subpl.w	r1, r9, r1
 8009004:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009008:	bf58      	it	pl
 800900a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	e78a      	b.n	8008f2c <_scanf_float+0x188>
 8009016:	f04f 0a03 	mov.w	sl, #3
 800901a:	e787      	b.n	8008f2c <_scanf_float+0x188>
 800901c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009020:	4639      	mov	r1, r7
 8009022:	4640      	mov	r0, r8
 8009024:	4798      	blx	r3
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f aedf 	beq.w	8008dea <_scanf_float+0x46>
 800902c:	e6ea      	b.n	8008e04 <_scanf_float+0x60>
 800902e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009036:	463a      	mov	r2, r7
 8009038:	4640      	mov	r0, r8
 800903a:	4798      	blx	r3
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	3b01      	subs	r3, #1
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	e6ec      	b.n	8008e1e <_scanf_float+0x7a>
 8009044:	1e6b      	subs	r3, r5, #1
 8009046:	2b06      	cmp	r3, #6
 8009048:	d825      	bhi.n	8009096 <_scanf_float+0x2f2>
 800904a:	2d02      	cmp	r5, #2
 800904c:	d836      	bhi.n	80090bc <_scanf_float+0x318>
 800904e:	455e      	cmp	r6, fp
 8009050:	f67f aee8 	bls.w	8008e24 <_scanf_float+0x80>
 8009054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009058:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800905c:	463a      	mov	r2, r7
 800905e:	4640      	mov	r0, r8
 8009060:	4798      	blx	r3
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	3b01      	subs	r3, #1
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	e7f1      	b.n	800904e <_scanf_float+0x2aa>
 800906a:	9802      	ldr	r0, [sp, #8]
 800906c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009070:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009074:	9002      	str	r0, [sp, #8]
 8009076:	463a      	mov	r2, r7
 8009078:	4640      	mov	r0, r8
 800907a:	4798      	blx	r3
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	3b01      	subs	r3, #1
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009086:	fa5f fa8a 	uxtb.w	sl, sl
 800908a:	f1ba 0f02 	cmp.w	sl, #2
 800908e:	d1ec      	bne.n	800906a <_scanf_float+0x2c6>
 8009090:	3d03      	subs	r5, #3
 8009092:	b2ed      	uxtb	r5, r5
 8009094:	1b76      	subs	r6, r6, r5
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	05da      	lsls	r2, r3, #23
 800909a:	d52f      	bpl.n	80090fc <_scanf_float+0x358>
 800909c:	055b      	lsls	r3, r3, #21
 800909e:	d510      	bpl.n	80090c2 <_scanf_float+0x31e>
 80090a0:	455e      	cmp	r6, fp
 80090a2:	f67f aebf 	bls.w	8008e24 <_scanf_float+0x80>
 80090a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ae:	463a      	mov	r2, r7
 80090b0:	4640      	mov	r0, r8
 80090b2:	4798      	blx	r3
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	e7f1      	b.n	80090a0 <_scanf_float+0x2fc>
 80090bc:	46aa      	mov	sl, r5
 80090be:	9602      	str	r6, [sp, #8]
 80090c0:	e7df      	b.n	8009082 <_scanf_float+0x2de>
 80090c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	2965      	cmp	r1, #101	; 0x65
 80090ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80090ce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	d00c      	beq.n	80090f0 <_scanf_float+0x34c>
 80090d6:	2945      	cmp	r1, #69	; 0x45
 80090d8:	d00a      	beq.n	80090f0 <_scanf_float+0x34c>
 80090da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090de:	463a      	mov	r2, r7
 80090e0:	4640      	mov	r0, r8
 80090e2:	4798      	blx	r3
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	1eb5      	subs	r5, r6, #2
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f4:	463a      	mov	r2, r7
 80090f6:	4640      	mov	r0, r8
 80090f8:	4798      	blx	r3
 80090fa:	462e      	mov	r6, r5
 80090fc:	6825      	ldr	r5, [r4, #0]
 80090fe:	f015 0510 	ands.w	r5, r5, #16
 8009102:	d155      	bne.n	80091b0 <_scanf_float+0x40c>
 8009104:	7035      	strb	r5, [r6, #0]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009110:	d11b      	bne.n	800914a <_scanf_float+0x3a6>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	454b      	cmp	r3, r9
 8009116:	eba3 0209 	sub.w	r2, r3, r9
 800911a:	d123      	bne.n	8009164 <_scanf_float+0x3c0>
 800911c:	2200      	movs	r2, #0
 800911e:	4659      	mov	r1, fp
 8009120:	4640      	mov	r0, r8
 8009122:	f000 fee1 	bl	8009ee8 <_strtod_r>
 8009126:	6822      	ldr	r2, [r4, #0]
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	f012 0f02 	tst.w	r2, #2
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4606      	mov	r6, r0
 8009132:	460f      	mov	r7, r1
 8009134:	d021      	beq.n	800917a <_scanf_float+0x3d6>
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	9903      	ldr	r1, [sp, #12]
 800913a:	600a      	str	r2, [r1, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	e9c3 6700 	strd	r6, r7, [r3]
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	3301      	adds	r3, #1
 8009146:	60e3      	str	r3, [r4, #12]
 8009148:	e66d      	b.n	8008e26 <_scanf_float+0x82>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0e5      	beq.n	800911c <_scanf_float+0x378>
 8009150:	9905      	ldr	r1, [sp, #20]
 8009152:	230a      	movs	r3, #10
 8009154:	462a      	mov	r2, r5
 8009156:	3101      	adds	r1, #1
 8009158:	4640      	mov	r0, r8
 800915a:	f000 ffa5 	bl	800a0a8 <_strtol_r>
 800915e:	9b04      	ldr	r3, [sp, #16]
 8009160:	9e05      	ldr	r6, [sp, #20]
 8009162:	1ac2      	subs	r2, r0, r3
 8009164:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009168:	429e      	cmp	r6, r3
 800916a:	bf28      	it	cs
 800916c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009170:	4910      	ldr	r1, [pc, #64]	; (80091b4 <_scanf_float+0x410>)
 8009172:	4630      	mov	r0, r6
 8009174:	f000 f836 	bl	80091e4 <siprintf>
 8009178:	e7d0      	b.n	800911c <_scanf_float+0x378>
 800917a:	f012 0f04 	tst.w	r2, #4
 800917e:	f103 0204 	add.w	r2, r3, #4
 8009182:	d1d9      	bne.n	8009138 <_scanf_float+0x394>
 8009184:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009188:	f8cc 2000 	str.w	r2, [ip]
 800918c:	f8d3 8000 	ldr.w	r8, [r3]
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	f7f7 fd66 	bl	8000c64 <__aeabi_dcmpun>
 8009198:	b128      	cbz	r0, 80091a6 <_scanf_float+0x402>
 800919a:	4807      	ldr	r0, [pc, #28]	; (80091b8 <_scanf_float+0x414>)
 800919c:	f000 f81e 	bl	80091dc <nanf>
 80091a0:	f8c8 0000 	str.w	r0, [r8]
 80091a4:	e7cd      	b.n	8009142 <_scanf_float+0x39e>
 80091a6:	4630      	mov	r0, r6
 80091a8:	4639      	mov	r1, r7
 80091aa:	f7f7 fdb9 	bl	8000d20 <__aeabi_d2f>
 80091ae:	e7f7      	b.n	80091a0 <_scanf_float+0x3fc>
 80091b0:	2500      	movs	r5, #0
 80091b2:	e638      	b.n	8008e26 <_scanf_float+0x82>
 80091b4:	0800ec80 	.word	0x0800ec80
 80091b8:	0800f088 	.word	0x0800f088

080091bc <_sbrk_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_sbrk_r+0x1c>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	f7f8 fc94 	bl	8001af4 <_sbrk>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_sbrk_r+0x1a>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_sbrk_r+0x1a>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	200011c0 	.word	0x200011c0

080091dc <nanf>:
 80091dc:	4800      	ldr	r0, [pc, #0]	; (80091e0 <nanf+0x4>)
 80091de:	4770      	bx	lr
 80091e0:	7fc00000 	.word	0x7fc00000

080091e4 <siprintf>:
 80091e4:	b40e      	push	{r1, r2, r3}
 80091e6:	b500      	push	{lr}
 80091e8:	b09c      	sub	sp, #112	; 0x70
 80091ea:	ab1d      	add	r3, sp, #116	; 0x74
 80091ec:	9002      	str	r0, [sp, #8]
 80091ee:	9006      	str	r0, [sp, #24]
 80091f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091f4:	4809      	ldr	r0, [pc, #36]	; (800921c <siprintf+0x38>)
 80091f6:	9107      	str	r1, [sp, #28]
 80091f8:	9104      	str	r1, [sp, #16]
 80091fa:	4909      	ldr	r1, [pc, #36]	; (8009220 <siprintf+0x3c>)
 80091fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009200:	9105      	str	r1, [sp, #20]
 8009202:	6800      	ldr	r0, [r0, #0]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	a902      	add	r1, sp, #8
 8009208:	f002 fec8 	bl	800bf9c <_svfiprintf_r>
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	b01c      	add	sp, #112	; 0x70
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	b003      	add	sp, #12
 800921a:	4770      	bx	lr
 800921c:	20000010 	.word	0x20000010
 8009220:	ffff0208 	.word	0xffff0208

08009224 <__sread>:
 8009224:	b510      	push	{r4, lr}
 8009226:	460c      	mov	r4, r1
 8009228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922c:	f002 ffb6 	bl	800c19c <_read_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	bfab      	itete	ge
 8009234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009236:	89a3      	ldrhlt	r3, [r4, #12]
 8009238:	181b      	addge	r3, r3, r0
 800923a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800923e:	bfac      	ite	ge
 8009240:	6563      	strge	r3, [r4, #84]	; 0x54
 8009242:	81a3      	strhlt	r3, [r4, #12]
 8009244:	bd10      	pop	{r4, pc}

08009246 <__swrite>:
 8009246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924a:	461f      	mov	r7, r3
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	05db      	lsls	r3, r3, #23
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	4616      	mov	r6, r2
 8009256:	d505      	bpl.n	8009264 <__swrite+0x1e>
 8009258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925c:	2302      	movs	r3, #2
 800925e:	2200      	movs	r2, #0
 8009260:	f002 f932 	bl	800b4c8 <_lseek_r>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800926e:	81a3      	strh	r3, [r4, #12]
 8009270:	4632      	mov	r2, r6
 8009272:	463b      	mov	r3, r7
 8009274:	4628      	mov	r0, r5
 8009276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	f000 bf21 	b.w	800a0c0 <_write_r>

0800927e <__sseek>:
 800927e:	b510      	push	{r4, lr}
 8009280:	460c      	mov	r4, r1
 8009282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009286:	f002 f91f 	bl	800b4c8 <_lseek_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	bf15      	itete	ne
 8009290:	6560      	strne	r0, [r4, #84]	; 0x54
 8009292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800929a:	81a3      	strheq	r3, [r4, #12]
 800929c:	bf18      	it	ne
 800929e:	81a3      	strhne	r3, [r4, #12]
 80092a0:	bd10      	pop	{r4, pc}

080092a2 <__sclose>:
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 bf1d 	b.w	800a0e4 <_close_r>

080092aa <strncpy>:
 80092aa:	b510      	push	{r4, lr}
 80092ac:	3901      	subs	r1, #1
 80092ae:	4603      	mov	r3, r0
 80092b0:	b132      	cbz	r2, 80092c0 <strncpy+0x16>
 80092b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092b6:	f803 4b01 	strb.w	r4, [r3], #1
 80092ba:	3a01      	subs	r2, #1
 80092bc:	2c00      	cmp	r4, #0
 80092be:	d1f7      	bne.n	80092b0 <strncpy+0x6>
 80092c0:	441a      	add	r2, r3
 80092c2:	2100      	movs	r1, #0
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d100      	bne.n	80092ca <strncpy+0x20>
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	e7f9      	b.n	80092c4 <strncpy+0x1a>

080092d0 <sulp>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	460f      	mov	r7, r1
 80092d6:	4690      	mov	r8, r2
 80092d8:	f002 fca8 	bl	800bc2c <__ulp>
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	f1b8 0f00 	cmp.w	r8, #0
 80092e4:	d011      	beq.n	800930a <sulp+0x3a>
 80092e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80092ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dd0b      	ble.n	800930a <sulp+0x3a>
 80092f2:	051b      	lsls	r3, r3, #20
 80092f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092f8:	2400      	movs	r4, #0
 80092fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80092fe:	4622      	mov	r2, r4
 8009300:	462b      	mov	r3, r5
 8009302:	f7f7 fa15 	bl	8000730 <__aeabi_dmul>
 8009306:	4604      	mov	r4, r0
 8009308:	460d      	mov	r5, r1
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009312:	0000      	movs	r0, r0
 8009314:	0000      	movs	r0, r0
	...

08009318 <_strtod_l>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	b09f      	sub	sp, #124	; 0x7c
 800931e:	469b      	mov	fp, r3
 8009320:	2300      	movs	r3, #0
 8009322:	931a      	str	r3, [sp, #104]	; 0x68
 8009324:	4b9e      	ldr	r3, [pc, #632]	; (80095a0 <_strtod_l+0x288>)
 8009326:	9215      	str	r2, [sp, #84]	; 0x54
 8009328:	681f      	ldr	r7, [r3, #0]
 800932a:	4682      	mov	sl, r0
 800932c:	4638      	mov	r0, r7
 800932e:	460e      	mov	r6, r1
 8009330:	f7f6 ff30 	bl	8000194 <strlen>
 8009334:	f04f 0800 	mov.w	r8, #0
 8009338:	4604      	mov	r4, r0
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	9619      	str	r6, [sp, #100]	; 0x64
 8009340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	2a2b      	cmp	r2, #43	; 0x2b
 8009346:	d04c      	beq.n	80093e2 <_strtod_l+0xca>
 8009348:	d83a      	bhi.n	80093c0 <_strtod_l+0xa8>
 800934a:	2a0d      	cmp	r2, #13
 800934c:	d833      	bhi.n	80093b6 <_strtod_l+0x9e>
 800934e:	2a08      	cmp	r2, #8
 8009350:	d833      	bhi.n	80093ba <_strtod_l+0xa2>
 8009352:	2a00      	cmp	r2, #0
 8009354:	d03d      	beq.n	80093d2 <_strtod_l+0xba>
 8009356:	2300      	movs	r3, #0
 8009358:	930a      	str	r3, [sp, #40]	; 0x28
 800935a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800935c:	782b      	ldrb	r3, [r5, #0]
 800935e:	2b30      	cmp	r3, #48	; 0x30
 8009360:	f040 80aa 	bne.w	80094b8 <_strtod_l+0x1a0>
 8009364:	786b      	ldrb	r3, [r5, #1]
 8009366:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800936a:	2b58      	cmp	r3, #88	; 0x58
 800936c:	d166      	bne.n	800943c <_strtod_l+0x124>
 800936e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	ab1a      	add	r3, sp, #104	; 0x68
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4a8b      	ldr	r2, [pc, #556]	; (80095a4 <_strtod_l+0x28c>)
 8009378:	f8cd b008 	str.w	fp, [sp, #8]
 800937c:	ab1b      	add	r3, sp, #108	; 0x6c
 800937e:	a919      	add	r1, sp, #100	; 0x64
 8009380:	4650      	mov	r0, sl
 8009382:	f001 fd9f 	bl	800aec4 <__gethex>
 8009386:	f010 0607 	ands.w	r6, r0, #7
 800938a:	4604      	mov	r4, r0
 800938c:	d005      	beq.n	800939a <_strtod_l+0x82>
 800938e:	2e06      	cmp	r6, #6
 8009390:	d129      	bne.n	80093e6 <_strtod_l+0xce>
 8009392:	3501      	adds	r5, #1
 8009394:	2300      	movs	r3, #0
 8009396:	9519      	str	r5, [sp, #100]	; 0x64
 8009398:	930a      	str	r3, [sp, #40]	; 0x28
 800939a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 858a 	bne.w	8009eb6 <_strtod_l+0xb9e>
 80093a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a4:	b1d3      	cbz	r3, 80093dc <_strtod_l+0xc4>
 80093a6:	4642      	mov	r2, r8
 80093a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	b01f      	add	sp, #124	; 0x7c
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	2a20      	cmp	r2, #32
 80093b8:	d1cd      	bne.n	8009356 <_strtod_l+0x3e>
 80093ba:	3301      	adds	r3, #1
 80093bc:	9319      	str	r3, [sp, #100]	; 0x64
 80093be:	e7bf      	b.n	8009340 <_strtod_l+0x28>
 80093c0:	2a2d      	cmp	r2, #45	; 0x2d
 80093c2:	d1c8      	bne.n	8009356 <_strtod_l+0x3e>
 80093c4:	2201      	movs	r2, #1
 80093c6:	920a      	str	r2, [sp, #40]	; 0x28
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	9219      	str	r2, [sp, #100]	; 0x64
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1c3      	bne.n	800935a <_strtod_l+0x42>
 80093d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d4:	9619      	str	r6, [sp, #100]	; 0x64
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 856b 	bne.w	8009eb2 <_strtod_l+0xb9a>
 80093dc:	4642      	mov	r2, r8
 80093de:	464b      	mov	r3, r9
 80093e0:	e7e4      	b.n	80093ac <_strtod_l+0x94>
 80093e2:	2200      	movs	r2, #0
 80093e4:	e7ef      	b.n	80093c6 <_strtod_l+0xae>
 80093e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093e8:	b13a      	cbz	r2, 80093fa <_strtod_l+0xe2>
 80093ea:	2135      	movs	r1, #53	; 0x35
 80093ec:	a81c      	add	r0, sp, #112	; 0x70
 80093ee:	f002 fd21 	bl	800be34 <__copybits>
 80093f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093f4:	4650      	mov	r0, sl
 80093f6:	f002 f8ed 	bl	800b5d4 <_Bfree>
 80093fa:	3e01      	subs	r6, #1
 80093fc:	2e04      	cmp	r6, #4
 80093fe:	d806      	bhi.n	800940e <_strtod_l+0xf6>
 8009400:	e8df f006 	tbb	[pc, r6]
 8009404:	1714030a 	.word	0x1714030a
 8009408:	0a          	.byte	0x0a
 8009409:	00          	.byte	0x00
 800940a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800940e:	0721      	lsls	r1, r4, #28
 8009410:	d5c3      	bpl.n	800939a <_strtod_l+0x82>
 8009412:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009416:	e7c0      	b.n	800939a <_strtod_l+0x82>
 8009418:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800941c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800941e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009422:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009426:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800942a:	e7f0      	b.n	800940e <_strtod_l+0xf6>
 800942c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80095a8 <_strtod_l+0x290>
 8009430:	e7ed      	b.n	800940e <_strtod_l+0xf6>
 8009432:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009436:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800943a:	e7e8      	b.n	800940e <_strtod_l+0xf6>
 800943c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	9219      	str	r2, [sp, #100]	; 0x64
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b30      	cmp	r3, #48	; 0x30
 8009446:	d0f9      	beq.n	800943c <_strtod_l+0x124>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0a6      	beq.n	800939a <_strtod_l+0x82>
 800944c:	2301      	movs	r3, #1
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009452:	9308      	str	r3, [sp, #32]
 8009454:	2300      	movs	r3, #0
 8009456:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800945a:	469b      	mov	fp, r3
 800945c:	220a      	movs	r2, #10
 800945e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009460:	7805      	ldrb	r5, [r0, #0]
 8009462:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009466:	b2d9      	uxtb	r1, r3
 8009468:	2909      	cmp	r1, #9
 800946a:	d927      	bls.n	80094bc <_strtod_l+0x1a4>
 800946c:	4622      	mov	r2, r4
 800946e:	4639      	mov	r1, r7
 8009470:	f002 feac 	bl	800c1cc <strncmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	d033      	beq.n	80094e0 <_strtod_l+0x1c8>
 8009478:	2000      	movs	r0, #0
 800947a:	462a      	mov	r2, r5
 800947c:	465c      	mov	r4, fp
 800947e:	9004      	str	r0, [sp, #16]
 8009480:	4603      	mov	r3, r0
 8009482:	2a65      	cmp	r2, #101	; 0x65
 8009484:	d001      	beq.n	800948a <_strtod_l+0x172>
 8009486:	2a45      	cmp	r2, #69	; 0x45
 8009488:	d114      	bne.n	80094b4 <_strtod_l+0x19c>
 800948a:	b91c      	cbnz	r4, 8009494 <_strtod_l+0x17c>
 800948c:	9a07      	ldr	r2, [sp, #28]
 800948e:	4302      	orrs	r2, r0
 8009490:	d09f      	beq.n	80093d2 <_strtod_l+0xba>
 8009492:	2400      	movs	r4, #0
 8009494:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009496:	1c72      	adds	r2, r6, #1
 8009498:	9219      	str	r2, [sp, #100]	; 0x64
 800949a:	7872      	ldrb	r2, [r6, #1]
 800949c:	2a2b      	cmp	r2, #43	; 0x2b
 800949e:	d079      	beq.n	8009594 <_strtod_l+0x27c>
 80094a0:	2a2d      	cmp	r2, #45	; 0x2d
 80094a2:	f000 8083 	beq.w	80095ac <_strtod_l+0x294>
 80094a6:	2700      	movs	r7, #0
 80094a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80094ac:	2909      	cmp	r1, #9
 80094ae:	f240 8083 	bls.w	80095b8 <_strtod_l+0x2a0>
 80094b2:	9619      	str	r6, [sp, #100]	; 0x64
 80094b4:	2500      	movs	r5, #0
 80094b6:	e09f      	b.n	80095f8 <_strtod_l+0x2e0>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e7c8      	b.n	800944e <_strtod_l+0x136>
 80094bc:	f1bb 0f08 	cmp.w	fp, #8
 80094c0:	bfd5      	itete	le
 80094c2:	9906      	ldrle	r1, [sp, #24]
 80094c4:	9905      	ldrgt	r1, [sp, #20]
 80094c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80094ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80094ce:	f100 0001 	add.w	r0, r0, #1
 80094d2:	bfd4      	ite	le
 80094d4:	9306      	strle	r3, [sp, #24]
 80094d6:	9305      	strgt	r3, [sp, #20]
 80094d8:	f10b 0b01 	add.w	fp, fp, #1
 80094dc:	9019      	str	r0, [sp, #100]	; 0x64
 80094de:	e7be      	b.n	800945e <_strtod_l+0x146>
 80094e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094e2:	191a      	adds	r2, r3, r4
 80094e4:	9219      	str	r2, [sp, #100]	; 0x64
 80094e6:	5d1a      	ldrb	r2, [r3, r4]
 80094e8:	f1bb 0f00 	cmp.w	fp, #0
 80094ec:	d036      	beq.n	800955c <_strtod_l+0x244>
 80094ee:	9004      	str	r0, [sp, #16]
 80094f0:	465c      	mov	r4, fp
 80094f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80094f6:	2b09      	cmp	r3, #9
 80094f8:	d912      	bls.n	8009520 <_strtod_l+0x208>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e7c1      	b.n	8009482 <_strtod_l+0x16a>
 80094fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	9219      	str	r2, [sp, #100]	; 0x64
 8009504:	785a      	ldrb	r2, [r3, #1]
 8009506:	3001      	adds	r0, #1
 8009508:	2a30      	cmp	r2, #48	; 0x30
 800950a:	d0f8      	beq.n	80094fe <_strtod_l+0x1e6>
 800950c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009510:	2b08      	cmp	r3, #8
 8009512:	f200 84d5 	bhi.w	8009ec0 <_strtod_l+0xba8>
 8009516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	2000      	movs	r0, #0
 800951c:	9308      	str	r3, [sp, #32]
 800951e:	4604      	mov	r4, r0
 8009520:	3a30      	subs	r2, #48	; 0x30
 8009522:	f100 0301 	add.w	r3, r0, #1
 8009526:	d013      	beq.n	8009550 <_strtod_l+0x238>
 8009528:	9904      	ldr	r1, [sp, #16]
 800952a:	4419      	add	r1, r3
 800952c:	9104      	str	r1, [sp, #16]
 800952e:	4623      	mov	r3, r4
 8009530:	1905      	adds	r5, r0, r4
 8009532:	210a      	movs	r1, #10
 8009534:	42ab      	cmp	r3, r5
 8009536:	d113      	bne.n	8009560 <_strtod_l+0x248>
 8009538:	1823      	adds	r3, r4, r0
 800953a:	2b08      	cmp	r3, #8
 800953c:	f104 0401 	add.w	r4, r4, #1
 8009540:	4404      	add	r4, r0
 8009542:	dc1b      	bgt.n	800957c <_strtod_l+0x264>
 8009544:	9906      	ldr	r1, [sp, #24]
 8009546:	230a      	movs	r3, #10
 8009548:	fb03 2301 	mla	r3, r3, r1, r2
 800954c:	9306      	str	r3, [sp, #24]
 800954e:	2300      	movs	r3, #0
 8009550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009552:	1c51      	adds	r1, r2, #1
 8009554:	9119      	str	r1, [sp, #100]	; 0x64
 8009556:	7852      	ldrb	r2, [r2, #1]
 8009558:	4618      	mov	r0, r3
 800955a:	e7ca      	b.n	80094f2 <_strtod_l+0x1da>
 800955c:	4658      	mov	r0, fp
 800955e:	e7d3      	b.n	8009508 <_strtod_l+0x1f0>
 8009560:	2b08      	cmp	r3, #8
 8009562:	dc04      	bgt.n	800956e <_strtod_l+0x256>
 8009564:	9f06      	ldr	r7, [sp, #24]
 8009566:	434f      	muls	r7, r1
 8009568:	9706      	str	r7, [sp, #24]
 800956a:	3301      	adds	r3, #1
 800956c:	e7e2      	b.n	8009534 <_strtod_l+0x21c>
 800956e:	1c5f      	adds	r7, r3, #1
 8009570:	2f10      	cmp	r7, #16
 8009572:	bfde      	ittt	le
 8009574:	9f05      	ldrle	r7, [sp, #20]
 8009576:	434f      	mulle	r7, r1
 8009578:	9705      	strle	r7, [sp, #20]
 800957a:	e7f6      	b.n	800956a <_strtod_l+0x252>
 800957c:	2c10      	cmp	r4, #16
 800957e:	bfdf      	itttt	le
 8009580:	9905      	ldrle	r1, [sp, #20]
 8009582:	230a      	movle	r3, #10
 8009584:	fb03 2301 	mlale	r3, r3, r1, r2
 8009588:	9305      	strle	r3, [sp, #20]
 800958a:	e7e0      	b.n	800954e <_strtod_l+0x236>
 800958c:	2300      	movs	r3, #0
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	2301      	movs	r3, #1
 8009592:	e77b      	b.n	800948c <_strtod_l+0x174>
 8009594:	2700      	movs	r7, #0
 8009596:	1cb2      	adds	r2, r6, #2
 8009598:	9219      	str	r2, [sp, #100]	; 0x64
 800959a:	78b2      	ldrb	r2, [r6, #2]
 800959c:	e784      	b.n	80094a8 <_strtod_l+0x190>
 800959e:	bf00      	nop
 80095a0:	0800eed0 	.word	0x0800eed0
 80095a4:	0800ec88 	.word	0x0800ec88
 80095a8:	7ff00000 	.word	0x7ff00000
 80095ac:	2701      	movs	r7, #1
 80095ae:	e7f2      	b.n	8009596 <_strtod_l+0x27e>
 80095b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095b2:	1c51      	adds	r1, r2, #1
 80095b4:	9119      	str	r1, [sp, #100]	; 0x64
 80095b6:	7852      	ldrb	r2, [r2, #1]
 80095b8:	2a30      	cmp	r2, #48	; 0x30
 80095ba:	d0f9      	beq.n	80095b0 <_strtod_l+0x298>
 80095bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80095c0:	2908      	cmp	r1, #8
 80095c2:	f63f af77 	bhi.w	80094b4 <_strtod_l+0x19c>
 80095c6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80095ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095cc:	9209      	str	r2, [sp, #36]	; 0x24
 80095ce:	f04f 0e0a 	mov.w	lr, #10
 80095d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095d4:	1c51      	adds	r1, r2, #1
 80095d6:	9119      	str	r1, [sp, #100]	; 0x64
 80095d8:	7852      	ldrb	r2, [r2, #1]
 80095da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80095de:	2d09      	cmp	r5, #9
 80095e0:	d935      	bls.n	800964e <_strtod_l+0x336>
 80095e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095e4:	1b49      	subs	r1, r1, r5
 80095e6:	2908      	cmp	r1, #8
 80095e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80095ec:	dc02      	bgt.n	80095f4 <_strtod_l+0x2dc>
 80095ee:	4565      	cmp	r5, ip
 80095f0:	bfa8      	it	ge
 80095f2:	4665      	movge	r5, ip
 80095f4:	b107      	cbz	r7, 80095f8 <_strtod_l+0x2e0>
 80095f6:	426d      	negs	r5, r5
 80095f8:	2c00      	cmp	r4, #0
 80095fa:	d14c      	bne.n	8009696 <_strtod_l+0x37e>
 80095fc:	9907      	ldr	r1, [sp, #28]
 80095fe:	4301      	orrs	r1, r0
 8009600:	f47f aecb 	bne.w	800939a <_strtod_l+0x82>
 8009604:	2b00      	cmp	r3, #0
 8009606:	f47f aee4 	bne.w	80093d2 <_strtod_l+0xba>
 800960a:	2a69      	cmp	r2, #105	; 0x69
 800960c:	d026      	beq.n	800965c <_strtod_l+0x344>
 800960e:	dc23      	bgt.n	8009658 <_strtod_l+0x340>
 8009610:	2a49      	cmp	r2, #73	; 0x49
 8009612:	d023      	beq.n	800965c <_strtod_l+0x344>
 8009614:	2a4e      	cmp	r2, #78	; 0x4e
 8009616:	f47f aedc 	bne.w	80093d2 <_strtod_l+0xba>
 800961a:	499d      	ldr	r1, [pc, #628]	; (8009890 <_strtod_l+0x578>)
 800961c:	a819      	add	r0, sp, #100	; 0x64
 800961e:	f001 fe9f 	bl	800b360 <__match>
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f aed5 	beq.w	80093d2 <_strtod_l+0xba>
 8009628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b28      	cmp	r3, #40	; 0x28
 800962e:	d12c      	bne.n	800968a <_strtod_l+0x372>
 8009630:	4998      	ldr	r1, [pc, #608]	; (8009894 <_strtod_l+0x57c>)
 8009632:	aa1c      	add	r2, sp, #112	; 0x70
 8009634:	a819      	add	r0, sp, #100	; 0x64
 8009636:	f001 fea7 	bl	800b388 <__hexnan>
 800963a:	2805      	cmp	r0, #5
 800963c:	d125      	bne.n	800968a <_strtod_l+0x372>
 800963e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009640:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009644:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009648:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800964c:	e6a5      	b.n	800939a <_strtod_l+0x82>
 800964e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009652:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009656:	e7bc      	b.n	80095d2 <_strtod_l+0x2ba>
 8009658:	2a6e      	cmp	r2, #110	; 0x6e
 800965a:	e7dc      	b.n	8009616 <_strtod_l+0x2fe>
 800965c:	498e      	ldr	r1, [pc, #568]	; (8009898 <_strtod_l+0x580>)
 800965e:	a819      	add	r0, sp, #100	; 0x64
 8009660:	f001 fe7e 	bl	800b360 <__match>
 8009664:	2800      	cmp	r0, #0
 8009666:	f43f aeb4 	beq.w	80093d2 <_strtod_l+0xba>
 800966a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800966c:	498b      	ldr	r1, [pc, #556]	; (800989c <_strtod_l+0x584>)
 800966e:	3b01      	subs	r3, #1
 8009670:	a819      	add	r0, sp, #100	; 0x64
 8009672:	9319      	str	r3, [sp, #100]	; 0x64
 8009674:	f001 fe74 	bl	800b360 <__match>
 8009678:	b910      	cbnz	r0, 8009680 <_strtod_l+0x368>
 800967a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800967c:	3301      	adds	r3, #1
 800967e:	9319      	str	r3, [sp, #100]	; 0x64
 8009680:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80098a0 <_strtod_l+0x588>
 8009684:	f04f 0800 	mov.w	r8, #0
 8009688:	e687      	b.n	800939a <_strtod_l+0x82>
 800968a:	4886      	ldr	r0, [pc, #536]	; (80098a4 <_strtod_l+0x58c>)
 800968c:	f002 fd98 	bl	800c1c0 <nan>
 8009690:	4680      	mov	r8, r0
 8009692:	4689      	mov	r9, r1
 8009694:	e681      	b.n	800939a <_strtod_l+0x82>
 8009696:	9b04      	ldr	r3, [sp, #16]
 8009698:	9806      	ldr	r0, [sp, #24]
 800969a:	1aeb      	subs	r3, r5, r3
 800969c:	f1bb 0f00 	cmp.w	fp, #0
 80096a0:	bf08      	it	eq
 80096a2:	46a3      	moveq	fp, r4
 80096a4:	2c10      	cmp	r4, #16
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	4626      	mov	r6, r4
 80096aa:	bfa8      	it	ge
 80096ac:	2610      	movge	r6, #16
 80096ae:	f7f6 ffc5 	bl	800063c <__aeabi_ui2d>
 80096b2:	2c09      	cmp	r4, #9
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	dd13      	ble.n	80096e2 <_strtod_l+0x3ca>
 80096ba:	4b7b      	ldr	r3, [pc, #492]	; (80098a8 <_strtod_l+0x590>)
 80096bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096c4:	f7f7 f834 	bl	8000730 <__aeabi_dmul>
 80096c8:	4680      	mov	r8, r0
 80096ca:	9805      	ldr	r0, [sp, #20]
 80096cc:	4689      	mov	r9, r1
 80096ce:	f7f6 ffb5 	bl	800063c <__aeabi_ui2d>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f6 fe73 	bl	80003c4 <__adddf3>
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	2c0f      	cmp	r4, #15
 80096e4:	dc36      	bgt.n	8009754 <_strtod_l+0x43c>
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f43f ae56 	beq.w	800939a <_strtod_l+0x82>
 80096ee:	dd22      	ble.n	8009736 <_strtod_l+0x41e>
 80096f0:	2b16      	cmp	r3, #22
 80096f2:	dc09      	bgt.n	8009708 <_strtod_l+0x3f0>
 80096f4:	496c      	ldr	r1, [pc, #432]	; (80098a8 <_strtod_l+0x590>)
 80096f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fe:	4642      	mov	r2, r8
 8009700:	464b      	mov	r3, r9
 8009702:	f7f7 f815 	bl	8000730 <__aeabi_dmul>
 8009706:	e7c3      	b.n	8009690 <_strtod_l+0x378>
 8009708:	9a07      	ldr	r2, [sp, #28]
 800970a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800970e:	4293      	cmp	r3, r2
 8009710:	db20      	blt.n	8009754 <_strtod_l+0x43c>
 8009712:	4d65      	ldr	r5, [pc, #404]	; (80098a8 <_strtod_l+0x590>)
 8009714:	f1c4 040f 	rsb	r4, r4, #15
 8009718:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009724:	f7f7 f804 	bl	8000730 <__aeabi_dmul>
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	1b1c      	subs	r4, r3, r4
 800972c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009734:	e7e5      	b.n	8009702 <_strtod_l+0x3ea>
 8009736:	9b07      	ldr	r3, [sp, #28]
 8009738:	3316      	adds	r3, #22
 800973a:	db0b      	blt.n	8009754 <_strtod_l+0x43c>
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	1b5d      	subs	r5, r3, r5
 8009740:	4b59      	ldr	r3, [pc, #356]	; (80098a8 <_strtod_l+0x590>)
 8009742:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009746:	e9d5 2300 	ldrd	r2, r3, [r5]
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	f7f7 f919 	bl	8000984 <__aeabi_ddiv>
 8009752:	e79d      	b.n	8009690 <_strtod_l+0x378>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	1ba6      	subs	r6, r4, r6
 8009758:	441e      	add	r6, r3
 800975a:	2e00      	cmp	r6, #0
 800975c:	dd74      	ble.n	8009848 <_strtod_l+0x530>
 800975e:	f016 030f 	ands.w	r3, r6, #15
 8009762:	d00a      	beq.n	800977a <_strtod_l+0x462>
 8009764:	4950      	ldr	r1, [pc, #320]	; (80098a8 <_strtod_l+0x590>)
 8009766:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800976a:	4642      	mov	r2, r8
 800976c:	464b      	mov	r3, r9
 800976e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009772:	f7f6 ffdd 	bl	8000730 <__aeabi_dmul>
 8009776:	4680      	mov	r8, r0
 8009778:	4689      	mov	r9, r1
 800977a:	f036 060f 	bics.w	r6, r6, #15
 800977e:	d052      	beq.n	8009826 <_strtod_l+0x50e>
 8009780:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009784:	dd27      	ble.n	80097d6 <_strtod_l+0x4be>
 8009786:	f04f 0b00 	mov.w	fp, #0
 800978a:	f8cd b010 	str.w	fp, [sp, #16]
 800978e:	f8cd b020 	str.w	fp, [sp, #32]
 8009792:	f8cd b018 	str.w	fp, [sp, #24]
 8009796:	2322      	movs	r3, #34	; 0x22
 8009798:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80098a0 <_strtod_l+0x588>
 800979c:	f8ca 3000 	str.w	r3, [sl]
 80097a0:	f04f 0800 	mov.w	r8, #0
 80097a4:	9b08      	ldr	r3, [sp, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f43f adf7 	beq.w	800939a <_strtod_l+0x82>
 80097ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80097ae:	4650      	mov	r0, sl
 80097b0:	f001 ff10 	bl	800b5d4 <_Bfree>
 80097b4:	9906      	ldr	r1, [sp, #24]
 80097b6:	4650      	mov	r0, sl
 80097b8:	f001 ff0c 	bl	800b5d4 <_Bfree>
 80097bc:	9904      	ldr	r1, [sp, #16]
 80097be:	4650      	mov	r0, sl
 80097c0:	f001 ff08 	bl	800b5d4 <_Bfree>
 80097c4:	9908      	ldr	r1, [sp, #32]
 80097c6:	4650      	mov	r0, sl
 80097c8:	f001 ff04 	bl	800b5d4 <_Bfree>
 80097cc:	4659      	mov	r1, fp
 80097ce:	4650      	mov	r0, sl
 80097d0:	f001 ff00 	bl	800b5d4 <_Bfree>
 80097d4:	e5e1      	b.n	800939a <_strtod_l+0x82>
 80097d6:	4b35      	ldr	r3, [pc, #212]	; (80098ac <_strtod_l+0x594>)
 80097d8:	9305      	str	r3, [sp, #20]
 80097da:	2300      	movs	r3, #0
 80097dc:	1136      	asrs	r6, r6, #4
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	461f      	mov	r7, r3
 80097e4:	2e01      	cmp	r6, #1
 80097e6:	dc21      	bgt.n	800982c <_strtod_l+0x514>
 80097e8:	b10b      	cbz	r3, 80097ee <_strtod_l+0x4d6>
 80097ea:	4680      	mov	r8, r0
 80097ec:	4689      	mov	r9, r1
 80097ee:	4b2f      	ldr	r3, [pc, #188]	; (80098ac <_strtod_l+0x594>)
 80097f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80097f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80097f8:	4642      	mov	r2, r8
 80097fa:	464b      	mov	r3, r9
 80097fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009800:	f7f6 ff96 	bl	8000730 <__aeabi_dmul>
 8009804:	4b26      	ldr	r3, [pc, #152]	; (80098a0 <_strtod_l+0x588>)
 8009806:	460a      	mov	r2, r1
 8009808:	400b      	ands	r3, r1
 800980a:	4929      	ldr	r1, [pc, #164]	; (80098b0 <_strtod_l+0x598>)
 800980c:	428b      	cmp	r3, r1
 800980e:	4680      	mov	r8, r0
 8009810:	d8b9      	bhi.n	8009786 <_strtod_l+0x46e>
 8009812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009816:	428b      	cmp	r3, r1
 8009818:	bf86      	itte	hi
 800981a:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 80098b4 <_strtod_l+0x59c>
 800981e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009822:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009826:	2300      	movs	r3, #0
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	e07f      	b.n	800992c <_strtod_l+0x614>
 800982c:	07f2      	lsls	r2, r6, #31
 800982e:	d505      	bpl.n	800983c <_strtod_l+0x524>
 8009830:	9b05      	ldr	r3, [sp, #20]
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f6 ff7b 	bl	8000730 <__aeabi_dmul>
 800983a:	2301      	movs	r3, #1
 800983c:	9a05      	ldr	r2, [sp, #20]
 800983e:	3208      	adds	r2, #8
 8009840:	3701      	adds	r7, #1
 8009842:	1076      	asrs	r6, r6, #1
 8009844:	9205      	str	r2, [sp, #20]
 8009846:	e7cd      	b.n	80097e4 <_strtod_l+0x4cc>
 8009848:	d0ed      	beq.n	8009826 <_strtod_l+0x50e>
 800984a:	4276      	negs	r6, r6
 800984c:	f016 020f 	ands.w	r2, r6, #15
 8009850:	d00a      	beq.n	8009868 <_strtod_l+0x550>
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <_strtod_l+0x590>)
 8009854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f7 f890 	bl	8000984 <__aeabi_ddiv>
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	1136      	asrs	r6, r6, #4
 800986a:	d0dc      	beq.n	8009826 <_strtod_l+0x50e>
 800986c:	2e1f      	cmp	r6, #31
 800986e:	dd23      	ble.n	80098b8 <_strtod_l+0x5a0>
 8009870:	f04f 0b00 	mov.w	fp, #0
 8009874:	f8cd b010 	str.w	fp, [sp, #16]
 8009878:	f8cd b020 	str.w	fp, [sp, #32]
 800987c:	f8cd b018 	str.w	fp, [sp, #24]
 8009880:	2322      	movs	r3, #34	; 0x22
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	f04f 0900 	mov.w	r9, #0
 800988a:	f8ca 3000 	str.w	r3, [sl]
 800988e:	e789      	b.n	80097a4 <_strtod_l+0x48c>
 8009890:	0800ec59 	.word	0x0800ec59
 8009894:	0800ec9c 	.word	0x0800ec9c
 8009898:	0800ec51 	.word	0x0800ec51
 800989c:	0800eddc 	.word	0x0800eddc
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	0800f088 	.word	0x0800f088
 80098a8:	0800ef68 	.word	0x0800ef68
 80098ac:	0800ef40 	.word	0x0800ef40
 80098b0:	7ca00000 	.word	0x7ca00000
 80098b4:	7fefffff 	.word	0x7fefffff
 80098b8:	f016 0310 	ands.w	r3, r6, #16
 80098bc:	bf18      	it	ne
 80098be:	236a      	movne	r3, #106	; 0x6a
 80098c0:	4fb1      	ldr	r7, [pc, #708]	; (8009b88 <_strtod_l+0x870>)
 80098c2:	9305      	str	r3, [sp, #20]
 80098c4:	4640      	mov	r0, r8
 80098c6:	4649      	mov	r1, r9
 80098c8:	2300      	movs	r3, #0
 80098ca:	07f2      	lsls	r2, r6, #31
 80098cc:	d504      	bpl.n	80098d8 <_strtod_l+0x5c0>
 80098ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d2:	f7f6 ff2d 	bl	8000730 <__aeabi_dmul>
 80098d6:	2301      	movs	r3, #1
 80098d8:	1076      	asrs	r6, r6, #1
 80098da:	f107 0708 	add.w	r7, r7, #8
 80098de:	d1f4      	bne.n	80098ca <_strtod_l+0x5b2>
 80098e0:	b10b      	cbz	r3, 80098e6 <_strtod_l+0x5ce>
 80098e2:	4680      	mov	r8, r0
 80098e4:	4689      	mov	r9, r1
 80098e6:	9b05      	ldr	r3, [sp, #20]
 80098e8:	b1c3      	cbz	r3, 800991c <_strtod_l+0x604>
 80098ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80098ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	4649      	mov	r1, r9
 80098f6:	dd11      	ble.n	800991c <_strtod_l+0x604>
 80098f8:	2b1f      	cmp	r3, #31
 80098fa:	f340 8124 	ble.w	8009b46 <_strtod_l+0x82e>
 80098fe:	2b34      	cmp	r3, #52	; 0x34
 8009900:	bfde      	ittt	le
 8009902:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009906:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800990a:	fa03 f202 	lslle.w	r2, r3, r2
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	bfcc      	ite	gt
 8009914:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009918:	ea02 0901 	andle.w	r9, r2, r1
 800991c:	2200      	movs	r2, #0
 800991e:	2300      	movs	r3, #0
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f7 f96c 	bl	8000c00 <__aeabi_dcmpeq>
 8009928:	2800      	cmp	r0, #0
 800992a:	d1a1      	bne.n	8009870 <_strtod_l+0x558>
 800992c:	9b06      	ldr	r3, [sp, #24]
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	9908      	ldr	r1, [sp, #32]
 8009932:	4623      	mov	r3, r4
 8009934:	465a      	mov	r2, fp
 8009936:	4650      	mov	r0, sl
 8009938:	f001 feb4 	bl	800b6a4 <__s2b>
 800993c:	9008      	str	r0, [sp, #32]
 800993e:	2800      	cmp	r0, #0
 8009940:	f43f af21 	beq.w	8009786 <_strtod_l+0x46e>
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	1b5d      	subs	r5, r3, r5
 8009948:	9b07      	ldr	r3, [sp, #28]
 800994a:	2b00      	cmp	r3, #0
 800994c:	bfb4      	ite	lt
 800994e:	462b      	movlt	r3, r5
 8009950:	2300      	movge	r3, #0
 8009952:	930e      	str	r3, [sp, #56]	; 0x38
 8009954:	9b07      	ldr	r3, [sp, #28]
 8009956:	f04f 0b00 	mov.w	fp, #0
 800995a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800995e:	9314      	str	r3, [sp, #80]	; 0x50
 8009960:	f8cd b010 	str.w	fp, [sp, #16]
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	4650      	mov	r0, sl
 8009968:	6859      	ldr	r1, [r3, #4]
 800996a:	f001 fdf3 	bl	800b554 <_Balloc>
 800996e:	9006      	str	r0, [sp, #24]
 8009970:	2800      	cmp	r0, #0
 8009972:	f43f af10 	beq.w	8009796 <_strtod_l+0x47e>
 8009976:	9b08      	ldr	r3, [sp, #32]
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	3202      	adds	r2, #2
 800997c:	f103 010c 	add.w	r1, r3, #12
 8009980:	0092      	lsls	r2, r2, #2
 8009982:	300c      	adds	r0, #12
 8009984:	f001 fdcc 	bl	800b520 <memcpy>
 8009988:	ab1c      	add	r3, sp, #112	; 0x70
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	ab1b      	add	r3, sp, #108	; 0x6c
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	4642      	mov	r2, r8
 8009992:	464b      	mov	r3, r9
 8009994:	4650      	mov	r0, sl
 8009996:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800999a:	f002 f9c1 	bl	800bd20 <__d2b>
 800999e:	901a      	str	r0, [sp, #104]	; 0x68
 80099a0:	2800      	cmp	r0, #0
 80099a2:	f43f aef8 	beq.w	8009796 <_strtod_l+0x47e>
 80099a6:	2101      	movs	r1, #1
 80099a8:	4650      	mov	r0, sl
 80099aa:	f001 ff13 	bl	800b7d4 <__i2b>
 80099ae:	9004      	str	r0, [sp, #16]
 80099b0:	4603      	mov	r3, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aeef 	beq.w	8009796 <_strtod_l+0x47e>
 80099b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80099ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099bc:	2d00      	cmp	r5, #0
 80099be:	bfab      	itete	ge
 80099c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80099c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80099c4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80099c6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80099c8:	bfac      	ite	ge
 80099ca:	18ee      	addge	r6, r5, r3
 80099cc:	1b5c      	sublt	r4, r3, r5
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	1aed      	subs	r5, r5, r3
 80099d2:	4415      	add	r5, r2
 80099d4:	4b6d      	ldr	r3, [pc, #436]	; (8009b8c <_strtod_l+0x874>)
 80099d6:	3d01      	subs	r5, #1
 80099d8:	429d      	cmp	r5, r3
 80099da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099de:	f280 80c4 	bge.w	8009b6a <_strtod_l+0x852>
 80099e2:	1b5b      	subs	r3, r3, r5
 80099e4:	2b1f      	cmp	r3, #31
 80099e6:	eba2 0203 	sub.w	r2, r2, r3
 80099ea:	f04f 0701 	mov.w	r7, #1
 80099ee:	f300 80b1 	bgt.w	8009b54 <_strtod_l+0x83c>
 80099f2:	fa07 f303 	lsl.w	r3, r7, r3
 80099f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099f8:	2500      	movs	r5, #0
 80099fa:	18b7      	adds	r7, r6, r2
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	42be      	cmp	r6, r7
 8009a00:	4414      	add	r4, r2
 8009a02:	441c      	add	r4, r3
 8009a04:	4633      	mov	r3, r6
 8009a06:	bfa8      	it	ge
 8009a08:	463b      	movge	r3, r7
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	bfa8      	it	ge
 8009a0e:	4623      	movge	r3, r4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfc2      	ittt	gt
 8009a14:	1aff      	subgt	r7, r7, r3
 8009a16:	1ae4      	subgt	r4, r4, r3
 8009a18:	1af6      	subgt	r6, r6, r3
 8009a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dd17      	ble.n	8009a50 <_strtod_l+0x738>
 8009a20:	9904      	ldr	r1, [sp, #16]
 8009a22:	461a      	mov	r2, r3
 8009a24:	4650      	mov	r0, sl
 8009a26:	f001 ff93 	bl	800b950 <__pow5mult>
 8009a2a:	9004      	str	r0, [sp, #16]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f43f aeb2 	beq.w	8009796 <_strtod_l+0x47e>
 8009a32:	4601      	mov	r1, r0
 8009a34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a36:	4650      	mov	r0, sl
 8009a38:	f001 fee2 	bl	800b800 <__multiply>
 8009a3c:	9009      	str	r0, [sp, #36]	; 0x24
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f43f aea9 	beq.w	8009796 <_strtod_l+0x47e>
 8009a44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a46:	4650      	mov	r0, sl
 8009a48:	f001 fdc4 	bl	800b5d4 <_Bfree>
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a50:	2f00      	cmp	r7, #0
 8009a52:	f300 808e 	bgt.w	8009b72 <_strtod_l+0x85a>
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dd08      	ble.n	8009a6e <_strtod_l+0x756>
 8009a5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a5e:	9906      	ldr	r1, [sp, #24]
 8009a60:	4650      	mov	r0, sl
 8009a62:	f001 ff75 	bl	800b950 <__pow5mult>
 8009a66:	9006      	str	r0, [sp, #24]
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f43f ae94 	beq.w	8009796 <_strtod_l+0x47e>
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	dd08      	ble.n	8009a84 <_strtod_l+0x76c>
 8009a72:	9906      	ldr	r1, [sp, #24]
 8009a74:	4622      	mov	r2, r4
 8009a76:	4650      	mov	r0, sl
 8009a78:	f001 ffc4 	bl	800ba04 <__lshift>
 8009a7c:	9006      	str	r0, [sp, #24]
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f ae89 	beq.w	8009796 <_strtod_l+0x47e>
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd08      	ble.n	8009a9a <_strtod_l+0x782>
 8009a88:	9904      	ldr	r1, [sp, #16]
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	f001 ffb9 	bl	800ba04 <__lshift>
 8009a92:	9004      	str	r0, [sp, #16]
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f43f ae7e 	beq.w	8009796 <_strtod_l+0x47e>
 8009a9a:	9a06      	ldr	r2, [sp, #24]
 8009a9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f002 f83c 	bl	800bb1c <__mdiff>
 8009aa4:	4683      	mov	fp, r0
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f43f ae75 	beq.w	8009796 <_strtod_l+0x47e>
 8009aac:	2400      	movs	r4, #0
 8009aae:	68c3      	ldr	r3, [r0, #12]
 8009ab0:	9904      	ldr	r1, [sp, #16]
 8009ab2:	60c4      	str	r4, [r0, #12]
 8009ab4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ab6:	f002 f815 	bl	800bae4 <__mcmp>
 8009aba:	42a0      	cmp	r0, r4
 8009abc:	da6c      	bge.n	8009b98 <_strtod_l+0x880>
 8009abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac0:	ea53 0308 	orrs.w	r3, r3, r8
 8009ac4:	f040 8092 	bne.w	8009bec <_strtod_l+0x8d4>
 8009ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 808d 	bne.w	8009bec <_strtod_l+0x8d4>
 8009ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ad6:	0d1b      	lsrs	r3, r3, #20
 8009ad8:	051b      	lsls	r3, r3, #20
 8009ada:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ade:	f240 8085 	bls.w	8009bec <_strtod_l+0x8d4>
 8009ae2:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009ae6:	b91b      	cbnz	r3, 8009af0 <_strtod_l+0x7d8>
 8009ae8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	dd7d      	ble.n	8009bec <_strtod_l+0x8d4>
 8009af0:	4659      	mov	r1, fp
 8009af2:	2201      	movs	r2, #1
 8009af4:	4650      	mov	r0, sl
 8009af6:	f001 ff85 	bl	800ba04 <__lshift>
 8009afa:	9904      	ldr	r1, [sp, #16]
 8009afc:	4683      	mov	fp, r0
 8009afe:	f001 fff1 	bl	800bae4 <__mcmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	dd72      	ble.n	8009bec <_strtod_l+0x8d4>
 8009b06:	9905      	ldr	r1, [sp, #20]
 8009b08:	4a21      	ldr	r2, [pc, #132]	; (8009b90 <_strtod_l+0x878>)
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	f000 808d 	beq.w	8009c2c <_strtod_l+0x914>
 8009b12:	ea02 0109 	and.w	r1, r2, r9
 8009b16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b1a:	f300 8087 	bgt.w	8009c2c <_strtod_l+0x914>
 8009b1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b22:	f77f aead 	ble.w	8009880 <_strtod_l+0x568>
 8009b26:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <_strtod_l+0x87c>)
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f7f6 fdff 	bl	8000730 <__aeabi_dmul>
 8009b32:	460b      	mov	r3, r1
 8009b34:	4303      	orrs	r3, r0
 8009b36:	bf08      	it	eq
 8009b38:	2322      	moveq	r3, #34	; 0x22
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	bf08      	it	eq
 8009b40:	f8ca 3000 	streq.w	r3, [sl]
 8009b44:	e632      	b.n	80097ac <_strtod_l+0x494>
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	ea03 0808 	and.w	r8, r3, r8
 8009b52:	e6e3      	b.n	800991c <_strtod_l+0x604>
 8009b54:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009b58:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009b5c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009b60:	35e2      	adds	r5, #226	; 0xe2
 8009b62:	fa07 f505 	lsl.w	r5, r7, r5
 8009b66:	970f      	str	r7, [sp, #60]	; 0x3c
 8009b68:	e747      	b.n	80099fa <_strtod_l+0x6e2>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b70:	e743      	b.n	80099fa <_strtod_l+0x6e2>
 8009b72:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b74:	463a      	mov	r2, r7
 8009b76:	4650      	mov	r0, sl
 8009b78:	f001 ff44 	bl	800ba04 <__lshift>
 8009b7c:	901a      	str	r0, [sp, #104]	; 0x68
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f47f af69 	bne.w	8009a56 <_strtod_l+0x73e>
 8009b84:	e607      	b.n	8009796 <_strtod_l+0x47e>
 8009b86:	bf00      	nop
 8009b88:	0800ecb0 	.word	0x0800ecb0
 8009b8c:	fffffc02 	.word	0xfffffc02
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	39500000 	.word	0x39500000
 8009b98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b9c:	d165      	bne.n	8009c6a <_strtod_l+0x952>
 8009b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ba4:	b35a      	cbz	r2, 8009bfe <_strtod_l+0x8e6>
 8009ba6:	4a9a      	ldr	r2, [pc, #616]	; (8009e10 <_strtod_l+0xaf8>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d12b      	bne.n	8009c04 <_strtod_l+0x8ec>
 8009bac:	9b05      	ldr	r3, [sp, #20]
 8009bae:	4641      	mov	r1, r8
 8009bb0:	b303      	cbz	r3, 8009bf4 <_strtod_l+0x8dc>
 8009bb2:	4b98      	ldr	r3, [pc, #608]	; (8009e14 <_strtod_l+0xafc>)
 8009bb4:	464a      	mov	r2, r9
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bc0:	d81b      	bhi.n	8009bfa <_strtod_l+0x8e2>
 8009bc2:	0d1b      	lsrs	r3, r3, #20
 8009bc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	4299      	cmp	r1, r3
 8009bce:	d119      	bne.n	8009c04 <_strtod_l+0x8ec>
 8009bd0:	4b91      	ldr	r3, [pc, #580]	; (8009e18 <_strtod_l+0xb00>)
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d102      	bne.n	8009bde <_strtod_l+0x8c6>
 8009bd8:	3101      	adds	r1, #1
 8009bda:	f43f addc 	beq.w	8009796 <_strtod_l+0x47e>
 8009bde:	4b8d      	ldr	r3, [pc, #564]	; (8009e14 <_strtod_l+0xafc>)
 8009be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be2:	401a      	ands	r2, r3
 8009be4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009be8:	f04f 0800 	mov.w	r8, #0
 8009bec:	9b05      	ldr	r3, [sp, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d199      	bne.n	8009b26 <_strtod_l+0x80e>
 8009bf2:	e5db      	b.n	80097ac <_strtod_l+0x494>
 8009bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bf8:	e7e8      	b.n	8009bcc <_strtod_l+0x8b4>
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	e7e6      	b.n	8009bcc <_strtod_l+0x8b4>
 8009bfe:	ea53 0308 	orrs.w	r3, r3, r8
 8009c02:	d080      	beq.n	8009b06 <_strtod_l+0x7ee>
 8009c04:	b1e5      	cbz	r5, 8009c40 <_strtod_l+0x928>
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	421d      	tst	r5, r3
 8009c0a:	d0ef      	beq.n	8009bec <_strtod_l+0x8d4>
 8009c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0e:	9a05      	ldr	r2, [sp, #20]
 8009c10:	4640      	mov	r0, r8
 8009c12:	4649      	mov	r1, r9
 8009c14:	b1c3      	cbz	r3, 8009c48 <_strtod_l+0x930>
 8009c16:	f7ff fb5b 	bl	80092d0 <sulp>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c22:	f7f6 fbcf 	bl	80003c4 <__adddf3>
 8009c26:	4680      	mov	r8, r0
 8009c28:	4689      	mov	r9, r1
 8009c2a:	e7df      	b.n	8009bec <_strtod_l+0x8d4>
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c32:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009c36:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009c3a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009c3e:	e7d5      	b.n	8009bec <_strtod_l+0x8d4>
 8009c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c42:	ea13 0f08 	tst.w	r3, r8
 8009c46:	e7e0      	b.n	8009c0a <_strtod_l+0x8f2>
 8009c48:	f7ff fb42 	bl	80092d0 <sulp>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c54:	f7f6 fbb4 	bl	80003c0 <__aeabi_dsub>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	f7f6 ffce 	bl	8000c00 <__aeabi_dcmpeq>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d0c1      	beq.n	8009bec <_strtod_l+0x8d4>
 8009c68:	e60a      	b.n	8009880 <_strtod_l+0x568>
 8009c6a:	9904      	ldr	r1, [sp, #16]
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	f002 f8b3 	bl	800bdd8 <__ratio>
 8009c72:	2200      	movs	r2, #0
 8009c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460f      	mov	r7, r1
 8009c7c:	f7f6 ffd4 	bl	8000c28 <__aeabi_dcmple>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d070      	beq.n	8009d66 <_strtod_l+0xa4e>
 8009c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d042      	beq.n	8009d10 <_strtod_l+0x9f8>
 8009c8a:	4f64      	ldr	r7, [pc, #400]	; (8009e1c <_strtod_l+0xb04>)
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	4d63      	ldr	r5, [pc, #396]	; (8009e1c <_strtod_l+0xb04>)
 8009c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c96:	0d1b      	lsrs	r3, r3, #20
 8009c98:	051b      	lsls	r3, r3, #20
 8009c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c9e:	4b60      	ldr	r3, [pc, #384]	; (8009e20 <_strtod_l+0xb08>)
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	f040 80c5 	bne.w	8009e30 <_strtod_l+0xb18>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca8:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f001 ffbc 	bl	800bc2c <__ulp>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4630      	mov	r0, r6
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f6 fd38 	bl	8000730 <__aeabi_dmul>
 8009cc0:	4642      	mov	r2, r8
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	f7f6 fb7e 	bl	80003c4 <__adddf3>
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4952      	ldr	r1, [pc, #328]	; (8009e14 <_strtod_l+0xafc>)
 8009ccc:	4a55      	ldr	r2, [pc, #340]	; (8009e24 <_strtod_l+0xb0c>)
 8009cce:	4019      	ands	r1, r3
 8009cd0:	4291      	cmp	r1, r2
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	d95d      	bls.n	8009d92 <_strtod_l+0xa7a>
 8009cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cd8:	4b4f      	ldr	r3, [pc, #316]	; (8009e18 <_strtod_l+0xb00>)
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d103      	bne.n	8009ce6 <_strtod_l+0x9ce>
 8009cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f43f ad58 	beq.w	8009796 <_strtod_l+0x47e>
 8009ce6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009e18 <_strtod_l+0xb00>
 8009cea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009cee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	f001 fc6f 	bl	800b5d4 <_Bfree>
 8009cf6:	9906      	ldr	r1, [sp, #24]
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	f001 fc6b 	bl	800b5d4 <_Bfree>
 8009cfe:	9904      	ldr	r1, [sp, #16]
 8009d00:	4650      	mov	r0, sl
 8009d02:	f001 fc67 	bl	800b5d4 <_Bfree>
 8009d06:	4659      	mov	r1, fp
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f001 fc63 	bl	800b5d4 <_Bfree>
 8009d0e:	e629      	b.n	8009964 <_strtod_l+0x64c>
 8009d10:	f1b8 0f00 	cmp.w	r8, #0
 8009d14:	d119      	bne.n	8009d4a <_strtod_l+0xa32>
 8009d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d1c:	b9e3      	cbnz	r3, 8009d58 <_strtod_l+0xa40>
 8009d1e:	4b3f      	ldr	r3, [pc, #252]	; (8009e1c <_strtod_l+0xb04>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	4630      	mov	r0, r6
 8009d24:	4639      	mov	r1, r7
 8009d26:	f7f6 ff75 	bl	8000c14 <__aeabi_dcmplt>
 8009d2a:	b9c8      	cbnz	r0, 8009d60 <_strtod_l+0xa48>
 8009d2c:	4b3e      	ldr	r3, [pc, #248]	; (8009e28 <_strtod_l+0xb10>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fcfc 	bl	8000730 <__aeabi_dmul>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d40:	9416      	str	r4, [sp, #88]	; 0x58
 8009d42:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d44:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009d48:	e7a2      	b.n	8009c90 <_strtod_l+0x978>
 8009d4a:	f1b8 0f01 	cmp.w	r8, #1
 8009d4e:	d103      	bne.n	8009d58 <_strtod_l+0xa40>
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f43f ad94 	beq.w	8009880 <_strtod_l+0x568>
 8009d58:	4f34      	ldr	r7, [pc, #208]	; (8009e2c <_strtod_l+0xb14>)
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	2400      	movs	r4, #0
 8009d5e:	e796      	b.n	8009c8e <_strtod_l+0x976>
 8009d60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d62:	4d31      	ldr	r5, [pc, #196]	; (8009e28 <_strtod_l+0xb10>)
 8009d64:	e7ea      	b.n	8009d3c <_strtod_l+0xa24>
 8009d66:	4b30      	ldr	r3, [pc, #192]	; (8009e28 <_strtod_l+0xb10>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 fcdf 	bl	8000730 <__aeabi_dmul>
 8009d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	b933      	cbnz	r3, 8009d88 <_strtod_l+0xa70>
 8009d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d7e:	9010      	str	r0, [sp, #64]	; 0x40
 8009d80:	9311      	str	r3, [sp, #68]	; 0x44
 8009d82:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d86:	e783      	b.n	8009c90 <_strtod_l+0x978>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009d90:	e7f7      	b.n	8009d82 <_strtod_l+0xa6a>
 8009d92:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009d96:	9b05      	ldr	r3, [sp, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1a8      	bne.n	8009cee <_strtod_l+0x9d6>
 8009d9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009da2:	0d1b      	lsrs	r3, r3, #20
 8009da4:	051b      	lsls	r3, r3, #20
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d1a1      	bne.n	8009cee <_strtod_l+0x9d6>
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f7 f9b9 	bl	8001124 <__aeabi_d2lz>
 8009db2:	f7f6 fc8f 	bl	80006d4 <__aeabi_l2d>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 faff 	bl	80003c0 <__aeabi_dsub>
 8009dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dc8:	ea43 0308 	orr.w	r3, r3, r8
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	4604      	mov	r4, r0
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	d068      	beq.n	8009ea6 <_strtod_l+0xb8e>
 8009dd4:	a30a      	add	r3, pc, #40	; (adr r3, 8009e00 <_strtod_l+0xae8>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f7f6 ff1b 	bl	8000c14 <__aeabi_dcmplt>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f47f ace4 	bne.w	80097ac <_strtod_l+0x494>
 8009de4:	a308      	add	r3, pc, #32	; (adr r3, 8009e08 <_strtod_l+0xaf0>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 ff2f 	bl	8000c50 <__aeabi_dcmpgt>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	f43f af7b 	beq.w	8009cee <_strtod_l+0x9d6>
 8009df8:	e4d8      	b.n	80097ac <_strtod_l+0x494>
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w
 8009e00:	94a03595 	.word	0x94a03595
 8009e04:	3fdfffff 	.word	0x3fdfffff
 8009e08:	35afe535 	.word	0x35afe535
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	000fffff 	.word	0x000fffff
 8009e14:	7ff00000 	.word	0x7ff00000
 8009e18:	7fefffff 	.word	0x7fefffff
 8009e1c:	3ff00000 	.word	0x3ff00000
 8009e20:	7fe00000 	.word	0x7fe00000
 8009e24:	7c9fffff 	.word	0x7c9fffff
 8009e28:	3fe00000 	.word	0x3fe00000
 8009e2c:	bff00000 	.word	0xbff00000
 8009e30:	9b05      	ldr	r3, [sp, #20]
 8009e32:	b313      	cbz	r3, 8009e7a <_strtod_l+0xb62>
 8009e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e3a:	d81e      	bhi.n	8009e7a <_strtod_l+0xb62>
 8009e3c:	a326      	add	r3, pc, #152	; (adr r3, 8009ed8 <_strtod_l+0xbc0>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	4620      	mov	r0, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7f6 feef 	bl	8000c28 <__aeabi_dcmple>
 8009e4a:	b190      	cbz	r0, 8009e72 <_strtod_l+0xb5a>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7f6 ff46 	bl	8000ce0 <__aeabi_d2uiz>
 8009e54:	2801      	cmp	r0, #1
 8009e56:	bf38      	it	cc
 8009e58:	2001      	movcc	r0, #1
 8009e5a:	f7f6 fbef 	bl	800063c <__aeabi_ui2d>
 8009e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	b9d3      	cbnz	r3, 8009e9c <_strtod_l+0xb84>
 8009e66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e6a:	9012      	str	r0, [sp, #72]	; 0x48
 8009e6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009e78:	1a9f      	subs	r7, r3, r2
 8009e7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e7e:	f001 fed5 	bl	800bc2c <__ulp>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4630      	mov	r0, r6
 8009e88:	4639      	mov	r1, r7
 8009e8a:	f7f6 fc51 	bl	8000730 <__aeabi_dmul>
 8009e8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e92:	f7f6 fa97 	bl	80003c4 <__adddf3>
 8009e96:	4680      	mov	r8, r0
 8009e98:	4689      	mov	r9, r1
 8009e9a:	e77c      	b.n	8009d96 <_strtod_l+0xa7e>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009ea4:	e7e3      	b.n	8009e6e <_strtod_l+0xb56>
 8009ea6:	a30e      	add	r3, pc, #56	; (adr r3, 8009ee0 <_strtod_l+0xbc8>)
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	f7f6 feb2 	bl	8000c14 <__aeabi_dcmplt>
 8009eb0:	e79f      	b.n	8009df2 <_strtod_l+0xada>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	f7ff ba71 	b.w	80093a2 <_strtod_l+0x8a>
 8009ec0:	2a65      	cmp	r2, #101	; 0x65
 8009ec2:	f43f ab63 	beq.w	800958c <_strtod_l+0x274>
 8009ec6:	2a45      	cmp	r2, #69	; 0x45
 8009ec8:	f43f ab60 	beq.w	800958c <_strtod_l+0x274>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f7ff bb95 	b.w	80095fc <_strtod_l+0x2e4>
 8009ed2:	bf00      	nop
 8009ed4:	f3af 8000 	nop.w
 8009ed8:	ffc00000 	.word	0xffc00000
 8009edc:	41dfffff 	.word	0x41dfffff
 8009ee0:	94a03595 	.word	0x94a03595
 8009ee4:	3fcfffff 	.word	0x3fcfffff

08009ee8 <_strtod_r>:
 8009ee8:	4b01      	ldr	r3, [pc, #4]	; (8009ef0 <_strtod_r+0x8>)
 8009eea:	f7ff ba15 	b.w	8009318 <_strtod_l>
 8009eee:	bf00      	nop
 8009ef0:	20000078 	.word	0x20000078

08009ef4 <strtod>:
 8009ef4:	460a      	mov	r2, r1
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	4802      	ldr	r0, [pc, #8]	; (8009f04 <strtod+0x10>)
 8009efa:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <strtod+0x14>)
 8009efc:	6800      	ldr	r0, [r0, #0]
 8009efe:	f7ff ba0b 	b.w	8009318 <_strtod_l>
 8009f02:	bf00      	nop
 8009f04:	20000010 	.word	0x20000010
 8009f08:	20000078 	.word	0x20000078

08009f0c <strtof>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	4f22      	ldr	r7, [pc, #136]	; (8009f9c <strtof+0x90>)
 8009f12:	4b23      	ldr	r3, [pc, #140]	; (8009fa0 <strtof+0x94>)
 8009f14:	460a      	mov	r2, r1
 8009f16:	4601      	mov	r1, r0
 8009f18:	6838      	ldr	r0, [r7, #0]
 8009f1a:	f7ff f9fd 	bl	8009318 <_strtod_l>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4606      	mov	r6, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	f7f6 fe9d 	bl	8000c64 <__aeabi_dcmpun>
 8009f2a:	b168      	cbz	r0, 8009f48 <strtof+0x3c>
 8009f2c:	2c00      	cmp	r4, #0
 8009f2e:	481d      	ldr	r0, [pc, #116]	; (8009fa4 <strtof+0x98>)
 8009f30:	da06      	bge.n	8009f40 <strtof+0x34>
 8009f32:	f7ff f953 	bl	80091dc <nanf>
 8009f36:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	f7ff b94a 	b.w	80091dc <nanf>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7f6 fee8 	bl	8000d20 <__aeabi_d2f>
 8009f50:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009f54:	4605      	mov	r5, r0
 8009f56:	4914      	ldr	r1, [pc, #80]	; (8009fa8 <strtof+0x9c>)
 8009f58:	4640      	mov	r0, r8
 8009f5a:	f7f7 f8b5 	bl	80010c8 <__aeabi_fcmpun>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d1eb      	bne.n	8009f3a <strtof+0x2e>
 8009f62:	4911      	ldr	r1, [pc, #68]	; (8009fa8 <strtof+0x9c>)
 8009f64:	4640      	mov	r0, r8
 8009f66:	f7f7 f891 	bl	800108c <__aeabi_fcmple>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d1e5      	bne.n	8009f3a <strtof+0x2e>
 8009f6e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009f72:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <strtof+0xa0>)
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	f7f6 fe72 	bl	8000c64 <__aeabi_dcmpun>
 8009f80:	b940      	cbnz	r0, 8009f94 <strtof+0x88>
 8009f82:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <strtof+0xa0>)
 8009f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f7f6 fe4c 	bl	8000c28 <__aeabi_dcmple>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d0d2      	beq.n	8009f3a <strtof+0x2e>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2222      	movs	r2, #34	; 0x22
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e7ce      	b.n	8009f3a <strtof+0x2e>
 8009f9c:	20000010 	.word	0x20000010
 8009fa0:	20000078 	.word	0x20000078
 8009fa4:	0800f088 	.word	0x0800f088
 8009fa8:	7f7fffff 	.word	0x7f7fffff
 8009fac:	7fefffff 	.word	0x7fefffff

08009fb0 <_strtol_l.constprop.0>:
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	d001      	beq.n	8009fbe <_strtol_l.constprop.0+0xe>
 8009fba:	2b24      	cmp	r3, #36	; 0x24
 8009fbc:	d906      	bls.n	8009fcc <_strtol_l.constprop.0+0x1c>
 8009fbe:	f7fd ffbb 	bl	8007f38 <__errno>
 8009fc2:	2316      	movs	r3, #22
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	4f35      	ldr	r7, [pc, #212]	; (800a0a4 <_strtol_l.constprop.0+0xf4>)
 8009fce:	460d      	mov	r5, r1
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fd6:	5de6      	ldrb	r6, [r4, r7]
 8009fd8:	f016 0608 	ands.w	r6, r6, #8
 8009fdc:	d1f8      	bne.n	8009fd0 <_strtol_l.constprop.0+0x20>
 8009fde:	2c2d      	cmp	r4, #45	; 0x2d
 8009fe0:	d12f      	bne.n	800a042 <_strtol_l.constprop.0+0x92>
 8009fe2:	782c      	ldrb	r4, [r5, #0]
 8009fe4:	2601      	movs	r6, #1
 8009fe6:	1c85      	adds	r5, r0, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d057      	beq.n	800a09c <_strtol_l.constprop.0+0xec>
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	d109      	bne.n	800a004 <_strtol_l.constprop.0+0x54>
 8009ff0:	2c30      	cmp	r4, #48	; 0x30
 8009ff2:	d107      	bne.n	800a004 <_strtol_l.constprop.0+0x54>
 8009ff4:	7828      	ldrb	r0, [r5, #0]
 8009ff6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ffa:	2858      	cmp	r0, #88	; 0x58
 8009ffc:	d149      	bne.n	800a092 <_strtol_l.constprop.0+0xe2>
 8009ffe:	786c      	ldrb	r4, [r5, #1]
 800a000:	2310      	movs	r3, #16
 800a002:	3502      	adds	r5, #2
 800a004:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a008:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800a00c:	2700      	movs	r7, #0
 800a00e:	fbbe f9f3 	udiv	r9, lr, r3
 800a012:	4638      	mov	r0, r7
 800a014:	fb03 ea19 	mls	sl, r3, r9, lr
 800a018:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a01c:	f1bc 0f09 	cmp.w	ip, #9
 800a020:	d814      	bhi.n	800a04c <_strtol_l.constprop.0+0x9c>
 800a022:	4664      	mov	r4, ip
 800a024:	42a3      	cmp	r3, r4
 800a026:	dd22      	ble.n	800a06e <_strtol_l.constprop.0+0xbe>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	db1d      	blt.n	800a068 <_strtol_l.constprop.0+0xb8>
 800a02c:	4581      	cmp	r9, r0
 800a02e:	d31b      	bcc.n	800a068 <_strtol_l.constprop.0+0xb8>
 800a030:	d101      	bne.n	800a036 <_strtol_l.constprop.0+0x86>
 800a032:	45a2      	cmp	sl, r4
 800a034:	db18      	blt.n	800a068 <_strtol_l.constprop.0+0xb8>
 800a036:	fb00 4003 	mla	r0, r0, r3, r4
 800a03a:	2701      	movs	r7, #1
 800a03c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a040:	e7ea      	b.n	800a018 <_strtol_l.constprop.0+0x68>
 800a042:	2c2b      	cmp	r4, #43	; 0x2b
 800a044:	bf04      	itt	eq
 800a046:	782c      	ldrbeq	r4, [r5, #0]
 800a048:	1c85      	addeq	r5, r0, #2
 800a04a:	e7cd      	b.n	8009fe8 <_strtol_l.constprop.0+0x38>
 800a04c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a050:	f1bc 0f19 	cmp.w	ip, #25
 800a054:	d801      	bhi.n	800a05a <_strtol_l.constprop.0+0xaa>
 800a056:	3c37      	subs	r4, #55	; 0x37
 800a058:	e7e4      	b.n	800a024 <_strtol_l.constprop.0+0x74>
 800a05a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a05e:	f1bc 0f19 	cmp.w	ip, #25
 800a062:	d804      	bhi.n	800a06e <_strtol_l.constprop.0+0xbe>
 800a064:	3c57      	subs	r4, #87	; 0x57
 800a066:	e7dd      	b.n	800a024 <_strtol_l.constprop.0+0x74>
 800a068:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a06c:	e7e6      	b.n	800a03c <_strtol_l.constprop.0+0x8c>
 800a06e:	2f00      	cmp	r7, #0
 800a070:	da07      	bge.n	800a082 <_strtol_l.constprop.0+0xd2>
 800a072:	2322      	movs	r3, #34	; 0x22
 800a074:	f8c8 3000 	str.w	r3, [r8]
 800a078:	4670      	mov	r0, lr
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	d0a4      	beq.n	8009fc8 <_strtol_l.constprop.0+0x18>
 800a07e:	1e69      	subs	r1, r5, #1
 800a080:	e005      	b.n	800a08e <_strtol_l.constprop.0+0xde>
 800a082:	b106      	cbz	r6, 800a086 <_strtol_l.constprop.0+0xd6>
 800a084:	4240      	negs	r0, r0
 800a086:	2a00      	cmp	r2, #0
 800a088:	d09e      	beq.n	8009fc8 <_strtol_l.constprop.0+0x18>
 800a08a:	2f00      	cmp	r7, #0
 800a08c:	d1f7      	bne.n	800a07e <_strtol_l.constprop.0+0xce>
 800a08e:	6011      	str	r1, [r2, #0]
 800a090:	e79a      	b.n	8009fc8 <_strtol_l.constprop.0+0x18>
 800a092:	2430      	movs	r4, #48	; 0x30
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1b5      	bne.n	800a004 <_strtol_l.constprop.0+0x54>
 800a098:	2308      	movs	r3, #8
 800a09a:	e7b3      	b.n	800a004 <_strtol_l.constprop.0+0x54>
 800a09c:	2c30      	cmp	r4, #48	; 0x30
 800a09e:	d0a9      	beq.n	8009ff4 <_strtol_l.constprop.0+0x44>
 800a0a0:	230a      	movs	r3, #10
 800a0a2:	e7af      	b.n	800a004 <_strtol_l.constprop.0+0x54>
 800a0a4:	0800ecd9 	.word	0x0800ecd9

0800a0a8 <_strtol_r>:
 800a0a8:	f7ff bf82 	b.w	8009fb0 <_strtol_l.constprop.0>

0800a0ac <strtol>:
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	460a      	mov	r2, r1
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	4802      	ldr	r0, [pc, #8]	; (800a0bc <strtol+0x10>)
 800a0b4:	6800      	ldr	r0, [r0, #0]
 800a0b6:	f7ff bf7b 	b.w	8009fb0 <_strtol_l.constprop.0>
 800a0ba:	bf00      	nop
 800a0bc:	20000010 	.word	0x20000010

0800a0c0 <_write_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	; (800a0e0 <_write_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f7 fcc4 	bl	8001a5c <_write>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_write_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_write_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	200011c0 	.word	0x200011c0

0800a0e4 <_close_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d06      	ldr	r5, [pc, #24]	; (800a100 <_close_r+0x1c>)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	602b      	str	r3, [r5, #0]
 800a0f0:	f7f7 fcd0 	bl	8001a94 <_close>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_close_r+0x1a>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_close_r+0x1a>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	200011c0 	.word	0x200011c0

0800a104 <quorem>:
 800a104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	6903      	ldr	r3, [r0, #16]
 800a10a:	690c      	ldr	r4, [r1, #16]
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	4607      	mov	r7, r0
 800a110:	db7d      	blt.n	800a20e <quorem+0x10a>
 800a112:	3c01      	subs	r4, #1
 800a114:	f101 0814 	add.w	r8, r1, #20
 800a118:	f100 0514 	add.w	r5, r0, #20
 800a11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a12a:	3301      	adds	r3, #1
 800a12c:	429a      	cmp	r2, r3
 800a12e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a136:	fbb2 f6f3 	udiv	r6, r2, r3
 800a13a:	d32e      	bcc.n	800a19a <quorem+0x96>
 800a13c:	f04f 0e00 	mov.w	lr, #0
 800a140:	4640      	mov	r0, r8
 800a142:	46ac      	mov	ip, r5
 800a144:	46f2      	mov	sl, lr
 800a146:	f850 2b04 	ldr.w	r2, [r0], #4
 800a14a:	b293      	uxth	r3, r2
 800a14c:	fb06 e303 	mla	r3, r6, r3, lr
 800a150:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a154:	0c12      	lsrs	r2, r2, #16
 800a156:	b29b      	uxth	r3, r3
 800a158:	fb06 e202 	mla	r2, r6, r2, lr
 800a15c:	ebaa 0303 	sub.w	r3, sl, r3
 800a160:	f8dc a000 	ldr.w	sl, [ip]
 800a164:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a168:	b292      	uxth	r2, r2
 800a16a:	fa13 f38a 	uxtah	r3, r3, sl
 800a16e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a176:	b29b      	uxth	r3, r3
 800a178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a17c:	4581      	cmp	r9, r0
 800a17e:	f84c 3b04 	str.w	r3, [ip], #4
 800a182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a186:	d2de      	bcs.n	800a146 <quorem+0x42>
 800a188:	f855 300b 	ldr.w	r3, [r5, fp]
 800a18c:	b92b      	cbnz	r3, 800a19a <quorem+0x96>
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	3b04      	subs	r3, #4
 800a192:	429d      	cmp	r5, r3
 800a194:	461a      	mov	r2, r3
 800a196:	d32e      	bcc.n	800a1f6 <quorem+0xf2>
 800a198:	613c      	str	r4, [r7, #16]
 800a19a:	4638      	mov	r0, r7
 800a19c:	f001 fca2 	bl	800bae4 <__mcmp>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	db24      	blt.n	800a1ee <quorem+0xea>
 800a1a4:	3601      	adds	r6, #1
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f04f 0c00 	mov.w	ip, #0
 800a1ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b0:	f8d0 e000 	ldr.w	lr, [r0]
 800a1b4:	b293      	uxth	r3, r2
 800a1b6:	ebac 0303 	sub.w	r3, ip, r3
 800a1ba:	0c12      	lsrs	r2, r2, #16
 800a1bc:	fa13 f38e 	uxtah	r3, r3, lr
 800a1c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ce:	45c1      	cmp	r9, r8
 800a1d0:	f840 3b04 	str.w	r3, [r0], #4
 800a1d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1d8:	d2e8      	bcs.n	800a1ac <quorem+0xa8>
 800a1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e2:	b922      	cbnz	r2, 800a1ee <quorem+0xea>
 800a1e4:	3b04      	subs	r3, #4
 800a1e6:	429d      	cmp	r5, r3
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	d30a      	bcc.n	800a202 <quorem+0xfe>
 800a1ec:	613c      	str	r4, [r7, #16]
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	b003      	add	sp, #12
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	6812      	ldr	r2, [r2, #0]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	d1cc      	bne.n	800a198 <quorem+0x94>
 800a1fe:	3c01      	subs	r4, #1
 800a200:	e7c7      	b.n	800a192 <quorem+0x8e>
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	3b04      	subs	r3, #4
 800a206:	2a00      	cmp	r2, #0
 800a208:	d1f0      	bne.n	800a1ec <quorem+0xe8>
 800a20a:	3c01      	subs	r4, #1
 800a20c:	e7eb      	b.n	800a1e6 <quorem+0xe2>
 800a20e:	2000      	movs	r0, #0
 800a210:	e7ee      	b.n	800a1f0 <quorem+0xec>
 800a212:	0000      	movs	r0, r0
 800a214:	0000      	movs	r0, r0
	...

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a21e:	b099      	sub	sp, #100	; 0x64
 800a220:	4616      	mov	r6, r2
 800a222:	461f      	mov	r7, r3
 800a224:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a228:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a22c:	4605      	mov	r5, r0
 800a22e:	b974      	cbnz	r4, 800a24e <_dtoa_r+0x36>
 800a230:	2010      	movs	r0, #16
 800a232:	f001 f95b 	bl	800b4ec <malloc>
 800a236:	4602      	mov	r2, r0
 800a238:	6268      	str	r0, [r5, #36]	; 0x24
 800a23a:	b920      	cbnz	r0, 800a246 <_dtoa_r+0x2e>
 800a23c:	4ba8      	ldr	r3, [pc, #672]	; (800a4e0 <_dtoa_r+0x2c8>)
 800a23e:	21ea      	movs	r1, #234	; 0xea
 800a240:	48a8      	ldr	r0, [pc, #672]	; (800a4e4 <_dtoa_r+0x2cc>)
 800a242:	f001 ffe5 	bl	800c210 <__assert_func>
 800a246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a24a:	6004      	str	r4, [r0, #0]
 800a24c:	60c4      	str	r4, [r0, #12]
 800a24e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a250:	6819      	ldr	r1, [r3, #0]
 800a252:	b151      	cbz	r1, 800a26a <_dtoa_r+0x52>
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	604a      	str	r2, [r1, #4]
 800a258:	2301      	movs	r3, #1
 800a25a:	4093      	lsls	r3, r2
 800a25c:	608b      	str	r3, [r1, #8]
 800a25e:	4628      	mov	r0, r5
 800a260:	f001 f9b8 	bl	800b5d4 <_Bfree>
 800a264:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a266:	2200      	movs	r2, #0
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	1e3b      	subs	r3, r7, #0
 800a26c:	bfb9      	ittee	lt
 800a26e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a272:	9305      	strlt	r3, [sp, #20]
 800a274:	2300      	movge	r3, #0
 800a276:	f8c8 3000 	strge.w	r3, [r8]
 800a27a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a27e:	4b9a      	ldr	r3, [pc, #616]	; (800a4e8 <_dtoa_r+0x2d0>)
 800a280:	bfbc      	itt	lt
 800a282:	2201      	movlt	r2, #1
 800a284:	f8c8 2000 	strlt.w	r2, [r8]
 800a288:	ea33 0309 	bics.w	r3, r3, r9
 800a28c:	d119      	bne.n	800a2c2 <_dtoa_r+0xaa>
 800a28e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a290:	f242 730f 	movw	r3, #9999	; 0x270f
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a29a:	4333      	orrs	r3, r6
 800a29c:	f000 8580 	beq.w	800ada0 <_dtoa_r+0xb88>
 800a2a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2a2:	b953      	cbnz	r3, 800a2ba <_dtoa_r+0xa2>
 800a2a4:	4b91      	ldr	r3, [pc, #580]	; (800a4ec <_dtoa_r+0x2d4>)
 800a2a6:	e022      	b.n	800a2ee <_dtoa_r+0xd6>
 800a2a8:	4b91      	ldr	r3, [pc, #580]	; (800a4f0 <_dtoa_r+0x2d8>)
 800a2aa:	9303      	str	r3, [sp, #12]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	9803      	ldr	r0, [sp, #12]
 800a2b4:	b019      	add	sp, #100	; 0x64
 800a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ba:	4b8c      	ldr	r3, [pc, #560]	; (800a4ec <_dtoa_r+0x2d4>)
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	3303      	adds	r3, #3
 800a2c0:	e7f5      	b.n	800a2ae <_dtoa_r+0x96>
 800a2c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a2c6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a2ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f7f6 fc95 	bl	8000c00 <__aeabi_dcmpeq>
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	b158      	cbz	r0, 800a2f2 <_dtoa_r+0xda>
 800a2da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2dc:	2301      	movs	r3, #1
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8559 	beq.w	800ad9a <_dtoa_r+0xb82>
 800a2e8:	4882      	ldr	r0, [pc, #520]	; (800a4f4 <_dtoa_r+0x2dc>)
 800a2ea:	6018      	str	r0, [r3, #0]
 800a2ec:	1e43      	subs	r3, r0, #1
 800a2ee:	9303      	str	r3, [sp, #12]
 800a2f0:	e7df      	b.n	800a2b2 <_dtoa_r+0x9a>
 800a2f2:	ab16      	add	r3, sp, #88	; 0x58
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	ab17      	add	r3, sp, #92	; 0x5c
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a300:	f001 fd0e 	bl	800bd20 <__d2b>
 800a304:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a308:	4683      	mov	fp, r0
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	d07e      	beq.n	800a40c <_dtoa_r+0x1f4>
 800a30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a310:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a31c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a320:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a324:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a328:	4b73      	ldr	r3, [pc, #460]	; (800a4f8 <_dtoa_r+0x2e0>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	f7f6 f848 	bl	80003c0 <__aeabi_dsub>
 800a330:	a365      	add	r3, pc, #404	; (adr r3, 800a4c8 <_dtoa_r+0x2b0>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f6 f9fb 	bl	8000730 <__aeabi_dmul>
 800a33a:	a365      	add	r3, pc, #404	; (adr r3, 800a4d0 <_dtoa_r+0x2b8>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f6 f840 	bl	80003c4 <__adddf3>
 800a344:	4606      	mov	r6, r0
 800a346:	4620      	mov	r0, r4
 800a348:	460f      	mov	r7, r1
 800a34a:	f7f6 f987 	bl	800065c <__aeabi_i2d>
 800a34e:	a362      	add	r3, pc, #392	; (adr r3, 800a4d8 <_dtoa_r+0x2c0>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f6 f9ec 	bl	8000730 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7f6 f830 	bl	80003c4 <__adddf3>
 800a364:	4606      	mov	r6, r0
 800a366:	460f      	mov	r7, r1
 800a368:	f7f6 fc92 	bl	8000c90 <__aeabi_d2iz>
 800a36c:	2200      	movs	r2, #0
 800a36e:	4682      	mov	sl, r0
 800a370:	2300      	movs	r3, #0
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f6 fc4d 	bl	8000c14 <__aeabi_dcmplt>
 800a37a:	b148      	cbz	r0, 800a390 <_dtoa_r+0x178>
 800a37c:	4650      	mov	r0, sl
 800a37e:	f7f6 f96d 	bl	800065c <__aeabi_i2d>
 800a382:	4632      	mov	r2, r6
 800a384:	463b      	mov	r3, r7
 800a386:	f7f6 fc3b 	bl	8000c00 <__aeabi_dcmpeq>
 800a38a:	b908      	cbnz	r0, 800a390 <_dtoa_r+0x178>
 800a38c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a390:	f1ba 0f16 	cmp.w	sl, #22
 800a394:	d857      	bhi.n	800a446 <_dtoa_r+0x22e>
 800a396:	4b59      	ldr	r3, [pc, #356]	; (800a4fc <_dtoa_r+0x2e4>)
 800a398:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3a4:	f7f6 fc36 	bl	8000c14 <__aeabi_dcmplt>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d04e      	beq.n	800a44a <_dtoa_r+0x232>
 800a3ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3b6:	1b1c      	subs	r4, r3, r4
 800a3b8:	1e63      	subs	r3, r4, #1
 800a3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a3bc:	bf45      	ittet	mi
 800a3be:	f1c4 0301 	rsbmi	r3, r4, #1
 800a3c2:	9306      	strmi	r3, [sp, #24]
 800a3c4:	2300      	movpl	r3, #0
 800a3c6:	2300      	movmi	r3, #0
 800a3c8:	bf4c      	ite	mi
 800a3ca:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a3cc:	9306      	strpl	r3, [sp, #24]
 800a3ce:	f1ba 0f00 	cmp.w	sl, #0
 800a3d2:	db3c      	blt.n	800a44e <_dtoa_r+0x236>
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a3da:	4453      	add	r3, sl
 800a3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3de:	2300      	movs	r3, #0
 800a3e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a3e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	f200 808d 	bhi.w	800a504 <_dtoa_r+0x2ec>
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	bfc4      	itt	gt
 800a3ee:	3b04      	subgt	r3, #4
 800a3f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a3f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3f4:	f1a3 0302 	sub.w	r3, r3, #2
 800a3f8:	bfcc      	ite	gt
 800a3fa:	2400      	movgt	r4, #0
 800a3fc:	2401      	movle	r4, #1
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	f200 808c 	bhi.w	800a51c <_dtoa_r+0x304>
 800a404:	e8df f003 	tbb	[pc, r3]
 800a408:	5b4d4f2d 	.word	0x5b4d4f2d
 800a40c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a410:	441c      	add	r4, r3
 800a412:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a416:	2b20      	cmp	r3, #32
 800a418:	bfc3      	ittte	gt
 800a41a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a41e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a422:	fa09 f303 	lslgt.w	r3, r9, r3
 800a426:	f1c3 0320 	rsble	r3, r3, #32
 800a42a:	bfc6      	itte	gt
 800a42c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a430:	4318      	orrgt	r0, r3
 800a432:	fa06 f003 	lslle.w	r0, r6, r3
 800a436:	f7f6 f901 	bl	800063c <__aeabi_ui2d>
 800a43a:	2301      	movs	r3, #1
 800a43c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a440:	3c01      	subs	r4, #1
 800a442:	9313      	str	r3, [sp, #76]	; 0x4c
 800a444:	e770      	b.n	800a328 <_dtoa_r+0x110>
 800a446:	2301      	movs	r3, #1
 800a448:	e7b3      	b.n	800a3b2 <_dtoa_r+0x19a>
 800a44a:	900f      	str	r0, [sp, #60]	; 0x3c
 800a44c:	e7b2      	b.n	800a3b4 <_dtoa_r+0x19c>
 800a44e:	9b06      	ldr	r3, [sp, #24]
 800a450:	eba3 030a 	sub.w	r3, r3, sl
 800a454:	9306      	str	r3, [sp, #24]
 800a456:	f1ca 0300 	rsb	r3, sl, #0
 800a45a:	930a      	str	r3, [sp, #40]	; 0x28
 800a45c:	2300      	movs	r3, #0
 800a45e:	930e      	str	r3, [sp, #56]	; 0x38
 800a460:	e7bf      	b.n	800a3e2 <_dtoa_r+0x1ca>
 800a462:	2300      	movs	r3, #0
 800a464:	930b      	str	r3, [sp, #44]	; 0x2c
 800a466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dc5a      	bgt.n	800a522 <_dtoa_r+0x30a>
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	f8cd 9020 	str.w	r9, [sp, #32]
 800a474:	464b      	mov	r3, r9
 800a476:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a47a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a47c:	2200      	movs	r2, #0
 800a47e:	6042      	str	r2, [r0, #4]
 800a480:	2204      	movs	r2, #4
 800a482:	f102 0614 	add.w	r6, r2, #20
 800a486:	429e      	cmp	r6, r3
 800a488:	6841      	ldr	r1, [r0, #4]
 800a48a:	d950      	bls.n	800a52e <_dtoa_r+0x316>
 800a48c:	4628      	mov	r0, r5
 800a48e:	f001 f861 	bl	800b554 <_Balloc>
 800a492:	9003      	str	r0, [sp, #12]
 800a494:	2800      	cmp	r0, #0
 800a496:	d14e      	bne.n	800a536 <_dtoa_r+0x31e>
 800a498:	4b19      	ldr	r3, [pc, #100]	; (800a500 <_dtoa_r+0x2e8>)
 800a49a:	4602      	mov	r2, r0
 800a49c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4a0:	e6ce      	b.n	800a240 <_dtoa_r+0x28>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e7de      	b.n	800a464 <_dtoa_r+0x24c>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4ac:	eb0a 0903 	add.w	r9, sl, r3
 800a4b0:	f109 0301 	add.w	r3, r9, #1
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	9308      	str	r3, [sp, #32]
 800a4b8:	bfb8      	it	lt
 800a4ba:	2301      	movlt	r3, #1
 800a4bc:	e7dd      	b.n	800a47a <_dtoa_r+0x262>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e7f2      	b.n	800a4a8 <_dtoa_r+0x290>
 800a4c2:	bf00      	nop
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	636f4361 	.word	0x636f4361
 800a4cc:	3fd287a7 	.word	0x3fd287a7
 800a4d0:	8b60c8b3 	.word	0x8b60c8b3
 800a4d4:	3fc68a28 	.word	0x3fc68a28
 800a4d8:	509f79fb 	.word	0x509f79fb
 800a4dc:	3fd34413 	.word	0x3fd34413
 800a4e0:	0800ede6 	.word	0x0800ede6
 800a4e4:	0800edfd 	.word	0x0800edfd
 800a4e8:	7ff00000 	.word	0x7ff00000
 800a4ec:	0800ede2 	.word	0x0800ede2
 800a4f0:	0800edd9 	.word	0x0800edd9
 800a4f4:	0800ec5d 	.word	0x0800ec5d
 800a4f8:	3ff80000 	.word	0x3ff80000
 800a4fc:	0800ef68 	.word	0x0800ef68
 800a500:	0800ee58 	.word	0x0800ee58
 800a504:	2401      	movs	r4, #1
 800a506:	2300      	movs	r3, #0
 800a508:	9322      	str	r3, [sp, #136]	; 0x88
 800a50a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a50c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a510:	2200      	movs	r2, #0
 800a512:	f8cd 9020 	str.w	r9, [sp, #32]
 800a516:	2312      	movs	r3, #18
 800a518:	9223      	str	r2, [sp, #140]	; 0x8c
 800a51a:	e7ae      	b.n	800a47a <_dtoa_r+0x262>
 800a51c:	2301      	movs	r3, #1
 800a51e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a520:	e7f4      	b.n	800a50c <_dtoa_r+0x2f4>
 800a522:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a526:	f8cd 9020 	str.w	r9, [sp, #32]
 800a52a:	464b      	mov	r3, r9
 800a52c:	e7a5      	b.n	800a47a <_dtoa_r+0x262>
 800a52e:	3101      	adds	r1, #1
 800a530:	6041      	str	r1, [r0, #4]
 800a532:	0052      	lsls	r2, r2, #1
 800a534:	e7a5      	b.n	800a482 <_dtoa_r+0x26a>
 800a536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a538:	9a03      	ldr	r2, [sp, #12]
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	9b08      	ldr	r3, [sp, #32]
 800a53e:	2b0e      	cmp	r3, #14
 800a540:	f200 80a8 	bhi.w	800a694 <_dtoa_r+0x47c>
 800a544:	2c00      	cmp	r4, #0
 800a546:	f000 80a5 	beq.w	800a694 <_dtoa_r+0x47c>
 800a54a:	f1ba 0f00 	cmp.w	sl, #0
 800a54e:	dd34      	ble.n	800a5ba <_dtoa_r+0x3a2>
 800a550:	4a9a      	ldr	r2, [pc, #616]	; (800a7bc <_dtoa_r+0x5a4>)
 800a552:	f00a 030f 	and.w	r3, sl, #15
 800a556:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a55a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a55e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a562:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a566:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a56a:	d016      	beq.n	800a59a <_dtoa_r+0x382>
 800a56c:	4b94      	ldr	r3, [pc, #592]	; (800a7c0 <_dtoa_r+0x5a8>)
 800a56e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a572:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a576:	f7f6 fa05 	bl	8000984 <__aeabi_ddiv>
 800a57a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a57e:	f004 040f 	and.w	r4, r4, #15
 800a582:	2703      	movs	r7, #3
 800a584:	4e8e      	ldr	r6, [pc, #568]	; (800a7c0 <_dtoa_r+0x5a8>)
 800a586:	b954      	cbnz	r4, 800a59e <_dtoa_r+0x386>
 800a588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a58c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a590:	f7f6 f9f8 	bl	8000984 <__aeabi_ddiv>
 800a594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a598:	e029      	b.n	800a5ee <_dtoa_r+0x3d6>
 800a59a:	2702      	movs	r7, #2
 800a59c:	e7f2      	b.n	800a584 <_dtoa_r+0x36c>
 800a59e:	07e1      	lsls	r1, r4, #31
 800a5a0:	d508      	bpl.n	800a5b4 <_dtoa_r+0x39c>
 800a5a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5aa:	f7f6 f8c1 	bl	8000730 <__aeabi_dmul>
 800a5ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5b2:	3701      	adds	r7, #1
 800a5b4:	1064      	asrs	r4, r4, #1
 800a5b6:	3608      	adds	r6, #8
 800a5b8:	e7e5      	b.n	800a586 <_dtoa_r+0x36e>
 800a5ba:	f000 80a5 	beq.w	800a708 <_dtoa_r+0x4f0>
 800a5be:	f1ca 0400 	rsb	r4, sl, #0
 800a5c2:	4b7e      	ldr	r3, [pc, #504]	; (800a7bc <_dtoa_r+0x5a4>)
 800a5c4:	4e7e      	ldr	r6, [pc, #504]	; (800a7c0 <_dtoa_r+0x5a8>)
 800a5c6:	f004 020f 	and.w	r2, r4, #15
 800a5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5d6:	f7f6 f8ab 	bl	8000730 <__aeabi_dmul>
 800a5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5de:	1124      	asrs	r4, r4, #4
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2702      	movs	r7, #2
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	f040 8084 	bne.w	800a6f2 <_dtoa_r+0x4da>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1d2      	bne.n	800a594 <_dtoa_r+0x37c>
 800a5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 808b 	beq.w	800a70c <_dtoa_r+0x4f4>
 800a5f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a5fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a5fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a602:	4b70      	ldr	r3, [pc, #448]	; (800a7c4 <_dtoa_r+0x5ac>)
 800a604:	2200      	movs	r2, #0
 800a606:	f7f6 fb05 	bl	8000c14 <__aeabi_dcmplt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d07e      	beq.n	800a70c <_dtoa_r+0x4f4>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d07b      	beq.n	800a70c <_dtoa_r+0x4f4>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	dd38      	ble.n	800a68c <_dtoa_r+0x474>
 800a61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a61e:	4b6a      	ldr	r3, [pc, #424]	; (800a7c8 <_dtoa_r+0x5b0>)
 800a620:	2200      	movs	r2, #0
 800a622:	f7f6 f885 	bl	8000730 <__aeabi_dmul>
 800a626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a62a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800a62e:	3701      	adds	r7, #1
 800a630:	464c      	mov	r4, r9
 800a632:	4638      	mov	r0, r7
 800a634:	f7f6 f812 	bl	800065c <__aeabi_i2d>
 800a638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a63c:	f7f6 f878 	bl	8000730 <__aeabi_dmul>
 800a640:	4b62      	ldr	r3, [pc, #392]	; (800a7cc <_dtoa_r+0x5b4>)
 800a642:	2200      	movs	r2, #0
 800a644:	f7f5 febe 	bl	80003c4 <__adddf3>
 800a648:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a64c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a650:	9611      	str	r6, [sp, #68]	; 0x44
 800a652:	2c00      	cmp	r4, #0
 800a654:	d15d      	bne.n	800a712 <_dtoa_r+0x4fa>
 800a656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a65a:	4b5d      	ldr	r3, [pc, #372]	; (800a7d0 <_dtoa_r+0x5b8>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	f7f5 feaf 	bl	80003c0 <__aeabi_dsub>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a66a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a66c:	4633      	mov	r3, r6
 800a66e:	f7f6 faef 	bl	8000c50 <__aeabi_dcmpgt>
 800a672:	2800      	cmp	r0, #0
 800a674:	f040 829c 	bne.w	800abb0 <_dtoa_r+0x998>
 800a678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a67e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a682:	f7f6 fac7 	bl	8000c14 <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f040 8290 	bne.w	800abac <_dtoa_r+0x994>
 800a68c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a690:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a696:	2b00      	cmp	r3, #0
 800a698:	f2c0 8152 	blt.w	800a940 <_dtoa_r+0x728>
 800a69c:	f1ba 0f0e 	cmp.w	sl, #14
 800a6a0:	f300 814e 	bgt.w	800a940 <_dtoa_r+0x728>
 800a6a4:	4b45      	ldr	r3, [pc, #276]	; (800a7bc <_dtoa_r+0x5a4>)
 800a6a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a6b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f280 80db 	bge.w	800a870 <_dtoa_r+0x658>
 800a6ba:	9b08      	ldr	r3, [sp, #32]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f300 80d7 	bgt.w	800a870 <_dtoa_r+0x658>
 800a6c2:	f040 8272 	bne.w	800abaa <_dtoa_r+0x992>
 800a6c6:	4b42      	ldr	r3, [pc, #264]	; (800a7d0 <_dtoa_r+0x5b8>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ce:	f7f6 f82f 	bl	8000730 <__aeabi_dmul>
 800a6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6d6:	f7f6 fab1 	bl	8000c3c <__aeabi_dcmpge>
 800a6da:	9c08      	ldr	r4, [sp, #32]
 800a6dc:	4626      	mov	r6, r4
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8248 	bne.w	800ab74 <_dtoa_r+0x95c>
 800a6e4:	9f03      	ldr	r7, [sp, #12]
 800a6e6:	2331      	movs	r3, #49	; 0x31
 800a6e8:	f807 3b01 	strb.w	r3, [r7], #1
 800a6ec:	f10a 0a01 	add.w	sl, sl, #1
 800a6f0:	e244      	b.n	800ab7c <_dtoa_r+0x964>
 800a6f2:	07e2      	lsls	r2, r4, #31
 800a6f4:	d505      	bpl.n	800a702 <_dtoa_r+0x4ea>
 800a6f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6fa:	f7f6 f819 	bl	8000730 <__aeabi_dmul>
 800a6fe:	3701      	adds	r7, #1
 800a700:	2301      	movs	r3, #1
 800a702:	1064      	asrs	r4, r4, #1
 800a704:	3608      	adds	r6, #8
 800a706:	e76d      	b.n	800a5e4 <_dtoa_r+0x3cc>
 800a708:	2702      	movs	r7, #2
 800a70a:	e770      	b.n	800a5ee <_dtoa_r+0x3d6>
 800a70c:	9c08      	ldr	r4, [sp, #32]
 800a70e:	46d0      	mov	r8, sl
 800a710:	e78f      	b.n	800a632 <_dtoa_r+0x41a>
 800a712:	9903      	ldr	r1, [sp, #12]
 800a714:	4b29      	ldr	r3, [pc, #164]	; (800a7bc <_dtoa_r+0x5a4>)
 800a716:	4421      	add	r1, r4
 800a718:	9112      	str	r1, [sp, #72]	; 0x48
 800a71a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a71c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a720:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a724:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a728:	2900      	cmp	r1, #0
 800a72a:	d055      	beq.n	800a7d8 <_dtoa_r+0x5c0>
 800a72c:	4929      	ldr	r1, [pc, #164]	; (800a7d4 <_dtoa_r+0x5bc>)
 800a72e:	2000      	movs	r0, #0
 800a730:	f7f6 f928 	bl	8000984 <__aeabi_ddiv>
 800a734:	463b      	mov	r3, r7
 800a736:	4632      	mov	r2, r6
 800a738:	f7f5 fe42 	bl	80003c0 <__aeabi_dsub>
 800a73c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a740:	9f03      	ldr	r7, [sp, #12]
 800a742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a746:	f7f6 faa3 	bl	8000c90 <__aeabi_d2iz>
 800a74a:	4604      	mov	r4, r0
 800a74c:	f7f5 ff86 	bl	800065c <__aeabi_i2d>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a758:	f7f5 fe32 	bl	80003c0 <__aeabi_dsub>
 800a75c:	3430      	adds	r4, #48	; 0x30
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a766:	f807 4b01 	strb.w	r4, [r7], #1
 800a76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a76e:	f7f6 fa51 	bl	8000c14 <__aeabi_dcmplt>
 800a772:	2800      	cmp	r0, #0
 800a774:	d174      	bne.n	800a860 <_dtoa_r+0x648>
 800a776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a77a:	4912      	ldr	r1, [pc, #72]	; (800a7c4 <_dtoa_r+0x5ac>)
 800a77c:	2000      	movs	r0, #0
 800a77e:	f7f5 fe1f 	bl	80003c0 <__aeabi_dsub>
 800a782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a786:	f7f6 fa45 	bl	8000c14 <__aeabi_dcmplt>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f040 80b7 	bne.w	800a8fe <_dtoa_r+0x6e6>
 800a790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a792:	429f      	cmp	r7, r3
 800a794:	f43f af7a 	beq.w	800a68c <_dtoa_r+0x474>
 800a798:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <_dtoa_r+0x5b0>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f7f5 ffc6 	bl	8000730 <__aeabi_dmul>
 800a7a4:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <_dtoa_r+0x5b0>)
 800a7a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b0:	f7f5 ffbe 	bl	8000730 <__aeabi_dmul>
 800a7b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7b8:	e7c3      	b.n	800a742 <_dtoa_r+0x52a>
 800a7ba:	bf00      	nop
 800a7bc:	0800ef68 	.word	0x0800ef68
 800a7c0:	0800ef40 	.word	0x0800ef40
 800a7c4:	3ff00000 	.word	0x3ff00000
 800a7c8:	40240000 	.word	0x40240000
 800a7cc:	401c0000 	.word	0x401c0000
 800a7d0:	40140000 	.word	0x40140000
 800a7d4:	3fe00000 	.word	0x3fe00000
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f5 ffa8 	bl	8000730 <__aeabi_dmul>
 800a7e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7e6:	9c03      	ldr	r4, [sp, #12]
 800a7e8:	9314      	str	r3, [sp, #80]	; 0x50
 800a7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ee:	f7f6 fa4f 	bl	8000c90 <__aeabi_d2iz>
 800a7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800a7f4:	f7f5 ff32 	bl	800065c <__aeabi_i2d>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a800:	f7f5 fdde 	bl	80003c0 <__aeabi_dsub>
 800a804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a806:	3330      	adds	r3, #48	; 0x30
 800a808:	f804 3b01 	strb.w	r3, [r4], #1
 800a80c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a80e:	429c      	cmp	r4, r3
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	d124      	bne.n	800a864 <_dtoa_r+0x64c>
 800a81a:	4ba4      	ldr	r3, [pc, #656]	; (800aaac <_dtoa_r+0x894>)
 800a81c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a820:	f7f5 fdd0 	bl	80003c4 <__adddf3>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 fa10 	bl	8000c50 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d163      	bne.n	800a8fc <_dtoa_r+0x6e4>
 800a834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a838:	499c      	ldr	r1, [pc, #624]	; (800aaac <_dtoa_r+0x894>)
 800a83a:	2000      	movs	r0, #0
 800a83c:	f7f5 fdc0 	bl	80003c0 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4630      	mov	r0, r6
 800a846:	4639      	mov	r1, r7
 800a848:	f7f6 f9e4 	bl	8000c14 <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f43f af1d 	beq.w	800a68c <_dtoa_r+0x474>
 800a852:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a854:	1e7b      	subs	r3, r7, #1
 800a856:	9314      	str	r3, [sp, #80]	; 0x50
 800a858:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a85c:	2b30      	cmp	r3, #48	; 0x30
 800a85e:	d0f8      	beq.n	800a852 <_dtoa_r+0x63a>
 800a860:	46c2      	mov	sl, r8
 800a862:	e03b      	b.n	800a8dc <_dtoa_r+0x6c4>
 800a864:	4b92      	ldr	r3, [pc, #584]	; (800aab0 <_dtoa_r+0x898>)
 800a866:	f7f5 ff63 	bl	8000730 <__aeabi_dmul>
 800a86a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a86e:	e7bc      	b.n	800a7ea <_dtoa_r+0x5d2>
 800a870:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a874:	9f03      	ldr	r7, [sp, #12]
 800a876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f6 f881 	bl	8000984 <__aeabi_ddiv>
 800a882:	f7f6 fa05 	bl	8000c90 <__aeabi_d2iz>
 800a886:	4604      	mov	r4, r0
 800a888:	f7f5 fee8 	bl	800065c <__aeabi_i2d>
 800a88c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a890:	f7f5 ff4e 	bl	8000730 <__aeabi_dmul>
 800a894:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fd8e 	bl	80003c0 <__aeabi_dsub>
 800a8a4:	f807 6b01 	strb.w	r6, [r7], #1
 800a8a8:	9e03      	ldr	r6, [sp, #12]
 800a8aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a8ae:	1bbe      	subs	r6, r7, r6
 800a8b0:	45b4      	cmp	ip, r6
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	d136      	bne.n	800a926 <_dtoa_r+0x70e>
 800a8b8:	f7f5 fd84 	bl	80003c4 <__adddf3>
 800a8bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	f7f6 f9c4 	bl	8000c50 <__aeabi_dcmpgt>
 800a8c8:	bb58      	cbnz	r0, 800a922 <_dtoa_r+0x70a>
 800a8ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	f7f6 f995 	bl	8000c00 <__aeabi_dcmpeq>
 800a8d6:	b108      	cbz	r0, 800a8dc <_dtoa_r+0x6c4>
 800a8d8:	07e1      	lsls	r1, r4, #31
 800a8da:	d422      	bmi.n	800a922 <_dtoa_r+0x70a>
 800a8dc:	4628      	mov	r0, r5
 800a8de:	4659      	mov	r1, fp
 800a8e0:	f000 fe78 	bl	800b5d4 <_Bfree>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	703b      	strb	r3, [r7, #0]
 800a8e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8ea:	f10a 0001 	add.w	r0, sl, #1
 800a8ee:	6018      	str	r0, [r3, #0]
 800a8f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f43f acdd 	beq.w	800a2b2 <_dtoa_r+0x9a>
 800a8f8:	601f      	str	r7, [r3, #0]
 800a8fa:	e4da      	b.n	800a2b2 <_dtoa_r+0x9a>
 800a8fc:	4627      	mov	r7, r4
 800a8fe:	463b      	mov	r3, r7
 800a900:	461f      	mov	r7, r3
 800a902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a906:	2a39      	cmp	r2, #57	; 0x39
 800a908:	d107      	bne.n	800a91a <_dtoa_r+0x702>
 800a90a:	9a03      	ldr	r2, [sp, #12]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d1f7      	bne.n	800a900 <_dtoa_r+0x6e8>
 800a910:	9903      	ldr	r1, [sp, #12]
 800a912:	2230      	movs	r2, #48	; 0x30
 800a914:	f108 0801 	add.w	r8, r8, #1
 800a918:	700a      	strb	r2, [r1, #0]
 800a91a:	781a      	ldrb	r2, [r3, #0]
 800a91c:	3201      	adds	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	e79e      	b.n	800a860 <_dtoa_r+0x648>
 800a922:	46d0      	mov	r8, sl
 800a924:	e7eb      	b.n	800a8fe <_dtoa_r+0x6e6>
 800a926:	4b62      	ldr	r3, [pc, #392]	; (800aab0 <_dtoa_r+0x898>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 ff01 	bl	8000730 <__aeabi_dmul>
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4680      	mov	r8, r0
 800a934:	4689      	mov	r9, r1
 800a936:	f7f6 f963 	bl	8000c00 <__aeabi_dcmpeq>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d09b      	beq.n	800a876 <_dtoa_r+0x65e>
 800a93e:	e7cd      	b.n	800a8dc <_dtoa_r+0x6c4>
 800a940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a942:	2a00      	cmp	r2, #0
 800a944:	f000 80d0 	beq.w	800aae8 <_dtoa_r+0x8d0>
 800a948:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a94a:	2a01      	cmp	r2, #1
 800a94c:	f300 80b2 	bgt.w	800aab4 <_dtoa_r+0x89c>
 800a950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a952:	2a00      	cmp	r2, #0
 800a954:	f000 80a6 	beq.w	800aaa4 <_dtoa_r+0x88c>
 800a958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a95c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a95e:	9f06      	ldr	r7, [sp, #24]
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	441a      	add	r2, r3
 800a964:	9206      	str	r2, [sp, #24]
 800a966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a968:	2101      	movs	r1, #1
 800a96a:	441a      	add	r2, r3
 800a96c:	4628      	mov	r0, r5
 800a96e:	9209      	str	r2, [sp, #36]	; 0x24
 800a970:	f000 ff30 	bl	800b7d4 <__i2b>
 800a974:	4606      	mov	r6, r0
 800a976:	2f00      	cmp	r7, #0
 800a978:	dd0c      	ble.n	800a994 <_dtoa_r+0x77c>
 800a97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd09      	ble.n	800a994 <_dtoa_r+0x77c>
 800a980:	42bb      	cmp	r3, r7
 800a982:	9a06      	ldr	r2, [sp, #24]
 800a984:	bfa8      	it	ge
 800a986:	463b      	movge	r3, r7
 800a988:	1ad2      	subs	r2, r2, r3
 800a98a:	9206      	str	r2, [sp, #24]
 800a98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a98e:	1aff      	subs	r7, r7, r3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	9309      	str	r3, [sp, #36]	; 0x24
 800a994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a996:	b1f3      	cbz	r3, 800a9d6 <_dtoa_r+0x7be>
 800a998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80a8 	beq.w	800aaf0 <_dtoa_r+0x8d8>
 800a9a0:	2c00      	cmp	r4, #0
 800a9a2:	dd10      	ble.n	800a9c6 <_dtoa_r+0x7ae>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f000 ffd1 	bl	800b950 <__pow5mult>
 800a9ae:	465a      	mov	r2, fp
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	f000 ff23 	bl	800b800 <__multiply>
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	4680      	mov	r8, r0
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 fe08 	bl	800b5d4 <_Bfree>
 800a9c4:	46c3      	mov	fp, r8
 800a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c8:	1b1a      	subs	r2, r3, r4
 800a9ca:	d004      	beq.n	800a9d6 <_dtoa_r+0x7be>
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 ffbe 	bl	800b950 <__pow5mult>
 800a9d4:	4683      	mov	fp, r0
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f000 fefb 	bl	800b7d4 <__i2b>
 800a9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	f340 8086 	ble.w	800aaf4 <_dtoa_r+0x8dc>
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 ffaf 	bl	800b950 <__pow5mult>
 800a9f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	dd7f      	ble.n	800aafa <_dtoa_r+0x8e2>
 800a9fa:	f04f 0800 	mov.w	r8, #0
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa04:	6918      	ldr	r0, [r3, #16]
 800aa06:	f000 fe97 	bl	800b738 <__hi0bits>
 800aa0a:	f1c0 0020 	rsb	r0, r0, #32
 800aa0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa10:	4418      	add	r0, r3
 800aa12:	f010 001f 	ands.w	r0, r0, #31
 800aa16:	f000 8092 	beq.w	800ab3e <_dtoa_r+0x926>
 800aa1a:	f1c0 0320 	rsb	r3, r0, #32
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	f340 808a 	ble.w	800ab38 <_dtoa_r+0x920>
 800aa24:	f1c0 001c 	rsb	r0, r0, #28
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	4403      	add	r3, r0
 800aa2c:	9306      	str	r3, [sp, #24]
 800aa2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa30:	4403      	add	r3, r0
 800aa32:	4407      	add	r7, r0
 800aa34:	9309      	str	r3, [sp, #36]	; 0x24
 800aa36:	9b06      	ldr	r3, [sp, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dd05      	ble.n	800aa48 <_dtoa_r+0x830>
 800aa3c:	4659      	mov	r1, fp
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4628      	mov	r0, r5
 800aa42:	f000 ffdf 	bl	800ba04 <__lshift>
 800aa46:	4683      	mov	fp, r0
 800aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	dd05      	ble.n	800aa5a <_dtoa_r+0x842>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	461a      	mov	r2, r3
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 ffd6 	bl	800ba04 <__lshift>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d070      	beq.n	800ab42 <_dtoa_r+0x92a>
 800aa60:	4621      	mov	r1, r4
 800aa62:	4658      	mov	r0, fp
 800aa64:	f001 f83e 	bl	800bae4 <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	da6a      	bge.n	800ab42 <_dtoa_r+0x92a>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4659      	mov	r1, fp
 800aa70:	220a      	movs	r2, #10
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 fdd0 	bl	800b618 <__multadd>
 800aa78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa7e:	4683      	mov	fp, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8194 	beq.w	800adae <_dtoa_r+0xb96>
 800aa86:	4631      	mov	r1, r6
 800aa88:	2300      	movs	r3, #0
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f000 fdc3 	bl	800b618 <__multadd>
 800aa92:	f1b9 0f00 	cmp.w	r9, #0
 800aa96:	4606      	mov	r6, r0
 800aa98:	f300 8093 	bgt.w	800abc2 <_dtoa_r+0x9aa>
 800aa9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	dc57      	bgt.n	800ab52 <_dtoa_r+0x93a>
 800aaa2:	e08e      	b.n	800abc2 <_dtoa_r+0x9aa>
 800aaa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaaa:	e757      	b.n	800a95c <_dtoa_r+0x744>
 800aaac:	3fe00000 	.word	0x3fe00000
 800aab0:	40240000 	.word	0x40240000
 800aab4:	9b08      	ldr	r3, [sp, #32]
 800aab6:	1e5c      	subs	r4, r3, #1
 800aab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	bfbf      	itttt	lt
 800aabe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aac0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aac2:	1ae2      	sublt	r2, r4, r3
 800aac4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aac6:	bfb6      	itet	lt
 800aac8:	189b      	addlt	r3, r3, r2
 800aaca:	1b1c      	subge	r4, r3, r4
 800aacc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aace:	9b08      	ldr	r3, [sp, #32]
 800aad0:	bfb8      	it	lt
 800aad2:	2400      	movlt	r4, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb9      	ittee	lt
 800aad8:	9b06      	ldrlt	r3, [sp, #24]
 800aada:	9a08      	ldrlt	r2, [sp, #32]
 800aadc:	9f06      	ldrge	r7, [sp, #24]
 800aade:	9b08      	ldrge	r3, [sp, #32]
 800aae0:	bfbc      	itt	lt
 800aae2:	1a9f      	sublt	r7, r3, r2
 800aae4:	2300      	movlt	r3, #0
 800aae6:	e73b      	b.n	800a960 <_dtoa_r+0x748>
 800aae8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aaea:	9f06      	ldr	r7, [sp, #24]
 800aaec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aaee:	e742      	b.n	800a976 <_dtoa_r+0x75e>
 800aaf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaf2:	e76b      	b.n	800a9cc <_dtoa_r+0x7b4>
 800aaf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	dc19      	bgt.n	800ab2e <_dtoa_r+0x916>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	b9bb      	cbnz	r3, 800ab2e <_dtoa_r+0x916>
 800aafe:	9b05      	ldr	r3, [sp, #20]
 800ab00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab04:	b99b      	cbnz	r3, 800ab2e <_dtoa_r+0x916>
 800ab06:	9b05      	ldr	r3, [sp, #20]
 800ab08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab0c:	0d1b      	lsrs	r3, r3, #20
 800ab0e:	051b      	lsls	r3, r3, #20
 800ab10:	b183      	cbz	r3, 800ab34 <_dtoa_r+0x91c>
 800ab12:	9b06      	ldr	r3, [sp, #24]
 800ab14:	3301      	adds	r3, #1
 800ab16:	9306      	str	r3, [sp, #24]
 800ab18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1e:	f04f 0801 	mov.w	r8, #1
 800ab22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f47f af6a 	bne.w	800a9fe <_dtoa_r+0x7e6>
 800ab2a:	2001      	movs	r0, #1
 800ab2c:	e76f      	b.n	800aa0e <_dtoa_r+0x7f6>
 800ab2e:	f04f 0800 	mov.w	r8, #0
 800ab32:	e7f6      	b.n	800ab22 <_dtoa_r+0x90a>
 800ab34:	4698      	mov	r8, r3
 800ab36:	e7f4      	b.n	800ab22 <_dtoa_r+0x90a>
 800ab38:	f43f af7d 	beq.w	800aa36 <_dtoa_r+0x81e>
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	301c      	adds	r0, #28
 800ab40:	e772      	b.n	800aa28 <_dtoa_r+0x810>
 800ab42:	9b08      	ldr	r3, [sp, #32]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dc36      	bgt.n	800abb6 <_dtoa_r+0x99e>
 800ab48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	dd33      	ble.n	800abb6 <_dtoa_r+0x99e>
 800ab4e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab52:	f1b9 0f00 	cmp.w	r9, #0
 800ab56:	d10d      	bne.n	800ab74 <_dtoa_r+0x95c>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	2205      	movs	r2, #5
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 fd5a 	bl	800b618 <__multadd>
 800ab64:	4601      	mov	r1, r0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4658      	mov	r0, fp
 800ab6a:	f000 ffbb 	bl	800bae4 <__mcmp>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f73f adb8 	bgt.w	800a6e4 <_dtoa_r+0x4cc>
 800ab74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab76:	9f03      	ldr	r7, [sp, #12]
 800ab78:	ea6f 0a03 	mvn.w	sl, r3
 800ab7c:	f04f 0800 	mov.w	r8, #0
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f000 fd26 	bl	800b5d4 <_Bfree>
 800ab88:	2e00      	cmp	r6, #0
 800ab8a:	f43f aea7 	beq.w	800a8dc <_dtoa_r+0x6c4>
 800ab8e:	f1b8 0f00 	cmp.w	r8, #0
 800ab92:	d005      	beq.n	800aba0 <_dtoa_r+0x988>
 800ab94:	45b0      	cmp	r8, r6
 800ab96:	d003      	beq.n	800aba0 <_dtoa_r+0x988>
 800ab98:	4641      	mov	r1, r8
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 fd1a 	bl	800b5d4 <_Bfree>
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	f000 fd16 	bl	800b5d4 <_Bfree>
 800aba8:	e698      	b.n	800a8dc <_dtoa_r+0x6c4>
 800abaa:	2400      	movs	r4, #0
 800abac:	4626      	mov	r6, r4
 800abae:	e7e1      	b.n	800ab74 <_dtoa_r+0x95c>
 800abb0:	46c2      	mov	sl, r8
 800abb2:	4626      	mov	r6, r4
 800abb4:	e596      	b.n	800a6e4 <_dtoa_r+0x4cc>
 800abb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80fd 	beq.w	800adbc <_dtoa_r+0xba4>
 800abc2:	2f00      	cmp	r7, #0
 800abc4:	dd05      	ble.n	800abd2 <_dtoa_r+0x9ba>
 800abc6:	4631      	mov	r1, r6
 800abc8:	463a      	mov	r2, r7
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 ff1a 	bl	800ba04 <__lshift>
 800abd0:	4606      	mov	r6, r0
 800abd2:	f1b8 0f00 	cmp.w	r8, #0
 800abd6:	d05c      	beq.n	800ac92 <_dtoa_r+0xa7a>
 800abd8:	6871      	ldr	r1, [r6, #4]
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 fcba 	bl	800b554 <_Balloc>
 800abe0:	4607      	mov	r7, r0
 800abe2:	b928      	cbnz	r0, 800abf0 <_dtoa_r+0x9d8>
 800abe4:	4b80      	ldr	r3, [pc, #512]	; (800ade8 <_dtoa_r+0xbd0>)
 800abe6:	4602      	mov	r2, r0
 800abe8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abec:	f7ff bb28 	b.w	800a240 <_dtoa_r+0x28>
 800abf0:	6932      	ldr	r2, [r6, #16]
 800abf2:	3202      	adds	r2, #2
 800abf4:	0092      	lsls	r2, r2, #2
 800abf6:	f106 010c 	add.w	r1, r6, #12
 800abfa:	300c      	adds	r0, #12
 800abfc:	f000 fc90 	bl	800b520 <memcpy>
 800ac00:	2201      	movs	r2, #1
 800ac02:	4639      	mov	r1, r7
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 fefd 	bl	800ba04 <__lshift>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9308      	str	r3, [sp, #32]
 800ac10:	9b03      	ldr	r3, [sp, #12]
 800ac12:	444b      	add	r3, r9
 800ac14:	930a      	str	r3, [sp, #40]	; 0x28
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	46b0      	mov	r8, r6
 800ac1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac20:	4606      	mov	r6, r0
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	4621      	mov	r1, r4
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4658      	mov	r0, fp
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	f7ff fa6a 	bl	800a104 <quorem>
 800ac30:	4603      	mov	r3, r0
 800ac32:	3330      	adds	r3, #48	; 0x30
 800ac34:	9006      	str	r0, [sp, #24]
 800ac36:	4641      	mov	r1, r8
 800ac38:	4658      	mov	r0, fp
 800ac3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac3c:	f000 ff52 	bl	800bae4 <__mcmp>
 800ac40:	4632      	mov	r2, r6
 800ac42:	4681      	mov	r9, r0
 800ac44:	4621      	mov	r1, r4
 800ac46:	4628      	mov	r0, r5
 800ac48:	f000 ff68 	bl	800bb1c <__mdiff>
 800ac4c:	68c2      	ldr	r2, [r0, #12]
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac50:	4607      	mov	r7, r0
 800ac52:	bb02      	cbnz	r2, 800ac96 <_dtoa_r+0xa7e>
 800ac54:	4601      	mov	r1, r0
 800ac56:	4658      	mov	r0, fp
 800ac58:	f000 ff44 	bl	800bae4 <__mcmp>
 800ac5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4639      	mov	r1, r7
 800ac62:	4628      	mov	r0, r5
 800ac64:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ac68:	f000 fcb4 	bl	800b5d4 <_Bfree>
 800ac6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac70:	9f08      	ldr	r7, [sp, #32]
 800ac72:	ea43 0102 	orr.w	r1, r3, r2
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	430b      	orrs	r3, r1
 800ac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7c:	d10d      	bne.n	800ac9a <_dtoa_r+0xa82>
 800ac7e:	2b39      	cmp	r3, #57	; 0x39
 800ac80:	d029      	beq.n	800acd6 <_dtoa_r+0xabe>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	dd01      	ble.n	800ac8c <_dtoa_r+0xa74>
 800ac88:	9b06      	ldr	r3, [sp, #24]
 800ac8a:	3331      	adds	r3, #49	; 0x31
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	7013      	strb	r3, [r2, #0]
 800ac90:	e776      	b.n	800ab80 <_dtoa_r+0x968>
 800ac92:	4630      	mov	r0, r6
 800ac94:	e7b9      	b.n	800ac0a <_dtoa_r+0x9f2>
 800ac96:	2201      	movs	r2, #1
 800ac98:	e7e2      	b.n	800ac60 <_dtoa_r+0xa48>
 800ac9a:	f1b9 0f00 	cmp.w	r9, #0
 800ac9e:	db06      	blt.n	800acae <_dtoa_r+0xa96>
 800aca0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aca2:	ea41 0909 	orr.w	r9, r1, r9
 800aca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aca8:	ea59 0101 	orrs.w	r1, r9, r1
 800acac:	d120      	bne.n	800acf0 <_dtoa_r+0xad8>
 800acae:	2a00      	cmp	r2, #0
 800acb0:	ddec      	ble.n	800ac8c <_dtoa_r+0xa74>
 800acb2:	4659      	mov	r1, fp
 800acb4:	2201      	movs	r2, #1
 800acb6:	4628      	mov	r0, r5
 800acb8:	9308      	str	r3, [sp, #32]
 800acba:	f000 fea3 	bl	800ba04 <__lshift>
 800acbe:	4621      	mov	r1, r4
 800acc0:	4683      	mov	fp, r0
 800acc2:	f000 ff0f 	bl	800bae4 <__mcmp>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	9b08      	ldr	r3, [sp, #32]
 800acca:	dc02      	bgt.n	800acd2 <_dtoa_r+0xaba>
 800accc:	d1de      	bne.n	800ac8c <_dtoa_r+0xa74>
 800acce:	07da      	lsls	r2, r3, #31
 800acd0:	d5dc      	bpl.n	800ac8c <_dtoa_r+0xa74>
 800acd2:	2b39      	cmp	r3, #57	; 0x39
 800acd4:	d1d8      	bne.n	800ac88 <_dtoa_r+0xa70>
 800acd6:	9a04      	ldr	r2, [sp, #16]
 800acd8:	2339      	movs	r3, #57	; 0x39
 800acda:	7013      	strb	r3, [r2, #0]
 800acdc:	463b      	mov	r3, r7
 800acde:	461f      	mov	r7, r3
 800ace0:	3b01      	subs	r3, #1
 800ace2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ace6:	2a39      	cmp	r2, #57	; 0x39
 800ace8:	d050      	beq.n	800ad8c <_dtoa_r+0xb74>
 800acea:	3201      	adds	r2, #1
 800acec:	701a      	strb	r2, [r3, #0]
 800acee:	e747      	b.n	800ab80 <_dtoa_r+0x968>
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	dd03      	ble.n	800acfc <_dtoa_r+0xae4>
 800acf4:	2b39      	cmp	r3, #57	; 0x39
 800acf6:	d0ee      	beq.n	800acd6 <_dtoa_r+0xabe>
 800acf8:	3301      	adds	r3, #1
 800acfa:	e7c7      	b.n	800ac8c <_dtoa_r+0xa74>
 800acfc:	9a08      	ldr	r2, [sp, #32]
 800acfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad00:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad04:	428a      	cmp	r2, r1
 800ad06:	d02a      	beq.n	800ad5e <_dtoa_r+0xb46>
 800ad08:	4659      	mov	r1, fp
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 fc82 	bl	800b618 <__multadd>
 800ad14:	45b0      	cmp	r8, r6
 800ad16:	4683      	mov	fp, r0
 800ad18:	f04f 0300 	mov.w	r3, #0
 800ad1c:	f04f 020a 	mov.w	r2, #10
 800ad20:	4641      	mov	r1, r8
 800ad22:	4628      	mov	r0, r5
 800ad24:	d107      	bne.n	800ad36 <_dtoa_r+0xb1e>
 800ad26:	f000 fc77 	bl	800b618 <__multadd>
 800ad2a:	4680      	mov	r8, r0
 800ad2c:	4606      	mov	r6, r0
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	3301      	adds	r3, #1
 800ad32:	9308      	str	r3, [sp, #32]
 800ad34:	e775      	b.n	800ac22 <_dtoa_r+0xa0a>
 800ad36:	f000 fc6f 	bl	800b618 <__multadd>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	220a      	movs	r2, #10
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 fc68 	bl	800b618 <__multadd>
 800ad48:	4606      	mov	r6, r0
 800ad4a:	e7f0      	b.n	800ad2e <_dtoa_r+0xb16>
 800ad4c:	f1b9 0f00 	cmp.w	r9, #0
 800ad50:	9a03      	ldr	r2, [sp, #12]
 800ad52:	bfcc      	ite	gt
 800ad54:	464f      	movgt	r7, r9
 800ad56:	2701      	movle	r7, #1
 800ad58:	4417      	add	r7, r2
 800ad5a:	f04f 0800 	mov.w	r8, #0
 800ad5e:	4659      	mov	r1, fp
 800ad60:	2201      	movs	r2, #1
 800ad62:	4628      	mov	r0, r5
 800ad64:	9308      	str	r3, [sp, #32]
 800ad66:	f000 fe4d 	bl	800ba04 <__lshift>
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4683      	mov	fp, r0
 800ad6e:	f000 feb9 	bl	800bae4 <__mcmp>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	dcb2      	bgt.n	800acdc <_dtoa_r+0xac4>
 800ad76:	d102      	bne.n	800ad7e <_dtoa_r+0xb66>
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	07db      	lsls	r3, r3, #31
 800ad7c:	d4ae      	bmi.n	800acdc <_dtoa_r+0xac4>
 800ad7e:	463b      	mov	r3, r7
 800ad80:	461f      	mov	r7, r3
 800ad82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad86:	2a30      	cmp	r2, #48	; 0x30
 800ad88:	d0fa      	beq.n	800ad80 <_dtoa_r+0xb68>
 800ad8a:	e6f9      	b.n	800ab80 <_dtoa_r+0x968>
 800ad8c:	9a03      	ldr	r2, [sp, #12]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d1a5      	bne.n	800acde <_dtoa_r+0xac6>
 800ad92:	f10a 0a01 	add.w	sl, sl, #1
 800ad96:	2331      	movs	r3, #49	; 0x31
 800ad98:	e779      	b.n	800ac8e <_dtoa_r+0xa76>
 800ad9a:	4b14      	ldr	r3, [pc, #80]	; (800adec <_dtoa_r+0xbd4>)
 800ad9c:	f7ff baa7 	b.w	800a2ee <_dtoa_r+0xd6>
 800ada0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f47f aa80 	bne.w	800a2a8 <_dtoa_r+0x90>
 800ada8:	4b11      	ldr	r3, [pc, #68]	; (800adf0 <_dtoa_r+0xbd8>)
 800adaa:	f7ff baa0 	b.w	800a2ee <_dtoa_r+0xd6>
 800adae:	f1b9 0f00 	cmp.w	r9, #0
 800adb2:	dc03      	bgt.n	800adbc <_dtoa_r+0xba4>
 800adb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	f73f aecb 	bgt.w	800ab52 <_dtoa_r+0x93a>
 800adbc:	9f03      	ldr	r7, [sp, #12]
 800adbe:	4621      	mov	r1, r4
 800adc0:	4658      	mov	r0, fp
 800adc2:	f7ff f99f 	bl	800a104 <quorem>
 800adc6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800adca:	f807 3b01 	strb.w	r3, [r7], #1
 800adce:	9a03      	ldr	r2, [sp, #12]
 800add0:	1aba      	subs	r2, r7, r2
 800add2:	4591      	cmp	r9, r2
 800add4:	ddba      	ble.n	800ad4c <_dtoa_r+0xb34>
 800add6:	4659      	mov	r1, fp
 800add8:	2300      	movs	r3, #0
 800adda:	220a      	movs	r2, #10
 800addc:	4628      	mov	r0, r5
 800adde:	f000 fc1b 	bl	800b618 <__multadd>
 800ade2:	4683      	mov	fp, r0
 800ade4:	e7eb      	b.n	800adbe <_dtoa_r+0xba6>
 800ade6:	bf00      	nop
 800ade8:	0800ee58 	.word	0x0800ee58
 800adec:	0800ec5c 	.word	0x0800ec5c
 800adf0:	0800edd9 	.word	0x0800edd9

0800adf4 <rshift>:
 800adf4:	6903      	ldr	r3, [r0, #16]
 800adf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800adfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae02:	f100 0414 	add.w	r4, r0, #20
 800ae06:	dd45      	ble.n	800ae94 <rshift+0xa0>
 800ae08:	f011 011f 	ands.w	r1, r1, #31
 800ae0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae14:	d10c      	bne.n	800ae30 <rshift+0x3c>
 800ae16:	f100 0710 	add.w	r7, r0, #16
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	42b1      	cmp	r1, r6
 800ae1e:	d334      	bcc.n	800ae8a <rshift+0x96>
 800ae20:	1a9b      	subs	r3, r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	1eea      	subs	r2, r5, #3
 800ae26:	4296      	cmp	r6, r2
 800ae28:	bf38      	it	cc
 800ae2a:	2300      	movcc	r3, #0
 800ae2c:	4423      	add	r3, r4
 800ae2e:	e015      	b.n	800ae5c <rshift+0x68>
 800ae30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae34:	f1c1 0820 	rsb	r8, r1, #32
 800ae38:	40cf      	lsrs	r7, r1
 800ae3a:	f105 0e04 	add.w	lr, r5, #4
 800ae3e:	46a1      	mov	r9, r4
 800ae40:	4576      	cmp	r6, lr
 800ae42:	46f4      	mov	ip, lr
 800ae44:	d815      	bhi.n	800ae72 <rshift+0x7e>
 800ae46:	1a9a      	subs	r2, r3, r2
 800ae48:	0092      	lsls	r2, r2, #2
 800ae4a:	3a04      	subs	r2, #4
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	42ae      	cmp	r6, r5
 800ae50:	bf38      	it	cc
 800ae52:	2200      	movcc	r2, #0
 800ae54:	18a3      	adds	r3, r4, r2
 800ae56:	50a7      	str	r7, [r4, r2]
 800ae58:	b107      	cbz	r7, 800ae5c <rshift+0x68>
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	1b1a      	subs	r2, r3, r4
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae64:	bf08      	it	eq
 800ae66:	2300      	moveq	r3, #0
 800ae68:	6102      	str	r2, [r0, #16]
 800ae6a:	bf08      	it	eq
 800ae6c:	6143      	streq	r3, [r0, #20]
 800ae6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae72:	f8dc c000 	ldr.w	ip, [ip]
 800ae76:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae7a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae7e:	f849 7b04 	str.w	r7, [r9], #4
 800ae82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae86:	40cf      	lsrs	r7, r1
 800ae88:	e7da      	b.n	800ae40 <rshift+0x4c>
 800ae8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae92:	e7c3      	b.n	800ae1c <rshift+0x28>
 800ae94:	4623      	mov	r3, r4
 800ae96:	e7e1      	b.n	800ae5c <rshift+0x68>

0800ae98 <__hexdig_fun>:
 800ae98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	d802      	bhi.n	800aea6 <__hexdig_fun+0xe>
 800aea0:	3820      	subs	r0, #32
 800aea2:	b2c0      	uxtb	r0, r0
 800aea4:	4770      	bx	lr
 800aea6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aeaa:	2b05      	cmp	r3, #5
 800aeac:	d801      	bhi.n	800aeb2 <__hexdig_fun+0x1a>
 800aeae:	3847      	subs	r0, #71	; 0x47
 800aeb0:	e7f7      	b.n	800aea2 <__hexdig_fun+0xa>
 800aeb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d801      	bhi.n	800aebe <__hexdig_fun+0x26>
 800aeba:	3827      	subs	r0, #39	; 0x27
 800aebc:	e7f1      	b.n	800aea2 <__hexdig_fun+0xa>
 800aebe:	2000      	movs	r0, #0
 800aec0:	4770      	bx	lr
	...

0800aec4 <__gethex>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	b08b      	sub	sp, #44	; 0x2c
 800aeca:	468b      	mov	fp, r1
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	4bb2      	ldr	r3, [pc, #712]	; (800b198 <__gethex+0x2d4>)
 800aed0:	9002      	str	r0, [sp, #8]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	4690      	mov	r8, r2
 800aeda:	f7f5 f95b 	bl	8000194 <strlen>
 800aede:	9b03      	ldr	r3, [sp, #12]
 800aee0:	f8db 2000 	ldr.w	r2, [fp]
 800aee4:	4403      	add	r3, r0
 800aee6:	4682      	mov	sl, r0
 800aee8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aeec:	9306      	str	r3, [sp, #24]
 800aeee:	1c93      	adds	r3, r2, #2
 800aef0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aef4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aef8:	32fe      	adds	r2, #254	; 0xfe
 800aefa:	18d1      	adds	r1, r2, r3
 800aefc:	461f      	mov	r7, r3
 800aefe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af02:	9101      	str	r1, [sp, #4]
 800af04:	2830      	cmp	r0, #48	; 0x30
 800af06:	d0f8      	beq.n	800aefa <__gethex+0x36>
 800af08:	f7ff ffc6 	bl	800ae98 <__hexdig_fun>
 800af0c:	4604      	mov	r4, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d13a      	bne.n	800af88 <__gethex+0xc4>
 800af12:	9903      	ldr	r1, [sp, #12]
 800af14:	4652      	mov	r2, sl
 800af16:	4638      	mov	r0, r7
 800af18:	f001 f958 	bl	800c1cc <strncmp>
 800af1c:	4605      	mov	r5, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d166      	bne.n	800aff0 <__gethex+0x12c>
 800af22:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af26:	eb07 060a 	add.w	r6, r7, sl
 800af2a:	f7ff ffb5 	bl	800ae98 <__hexdig_fun>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d060      	beq.n	800aff4 <__gethex+0x130>
 800af32:	4633      	mov	r3, r6
 800af34:	7818      	ldrb	r0, [r3, #0]
 800af36:	2830      	cmp	r0, #48	; 0x30
 800af38:	461f      	mov	r7, r3
 800af3a:	f103 0301 	add.w	r3, r3, #1
 800af3e:	d0f9      	beq.n	800af34 <__gethex+0x70>
 800af40:	f7ff ffaa 	bl	800ae98 <__hexdig_fun>
 800af44:	2301      	movs	r3, #1
 800af46:	fab0 f480 	clz	r4, r0
 800af4a:	0964      	lsrs	r4, r4, #5
 800af4c:	4635      	mov	r5, r6
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	463a      	mov	r2, r7
 800af52:	4616      	mov	r6, r2
 800af54:	3201      	adds	r2, #1
 800af56:	7830      	ldrb	r0, [r6, #0]
 800af58:	f7ff ff9e 	bl	800ae98 <__hexdig_fun>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1f8      	bne.n	800af52 <__gethex+0x8e>
 800af60:	9903      	ldr	r1, [sp, #12]
 800af62:	4652      	mov	r2, sl
 800af64:	4630      	mov	r0, r6
 800af66:	f001 f931 	bl	800c1cc <strncmp>
 800af6a:	b980      	cbnz	r0, 800af8e <__gethex+0xca>
 800af6c:	b94d      	cbnz	r5, 800af82 <__gethex+0xbe>
 800af6e:	eb06 050a 	add.w	r5, r6, sl
 800af72:	462a      	mov	r2, r5
 800af74:	4616      	mov	r6, r2
 800af76:	3201      	adds	r2, #1
 800af78:	7830      	ldrb	r0, [r6, #0]
 800af7a:	f7ff ff8d 	bl	800ae98 <__hexdig_fun>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d1f8      	bne.n	800af74 <__gethex+0xb0>
 800af82:	1bad      	subs	r5, r5, r6
 800af84:	00ad      	lsls	r5, r5, #2
 800af86:	e004      	b.n	800af92 <__gethex+0xce>
 800af88:	2400      	movs	r4, #0
 800af8a:	4625      	mov	r5, r4
 800af8c:	e7e0      	b.n	800af50 <__gethex+0x8c>
 800af8e:	2d00      	cmp	r5, #0
 800af90:	d1f7      	bne.n	800af82 <__gethex+0xbe>
 800af92:	7833      	ldrb	r3, [r6, #0]
 800af94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af98:	2b50      	cmp	r3, #80	; 0x50
 800af9a:	d139      	bne.n	800b010 <__gethex+0x14c>
 800af9c:	7873      	ldrb	r3, [r6, #1]
 800af9e:	2b2b      	cmp	r3, #43	; 0x2b
 800afa0:	d02a      	beq.n	800aff8 <__gethex+0x134>
 800afa2:	2b2d      	cmp	r3, #45	; 0x2d
 800afa4:	d02c      	beq.n	800b000 <__gethex+0x13c>
 800afa6:	1c71      	adds	r1, r6, #1
 800afa8:	f04f 0900 	mov.w	r9, #0
 800afac:	7808      	ldrb	r0, [r1, #0]
 800afae:	f7ff ff73 	bl	800ae98 <__hexdig_fun>
 800afb2:	1e43      	subs	r3, r0, #1
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b18      	cmp	r3, #24
 800afb8:	d82a      	bhi.n	800b010 <__gethex+0x14c>
 800afba:	f1a0 0210 	sub.w	r2, r0, #16
 800afbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afc2:	f7ff ff69 	bl	800ae98 <__hexdig_fun>
 800afc6:	1e43      	subs	r3, r0, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b18      	cmp	r3, #24
 800afcc:	d91b      	bls.n	800b006 <__gethex+0x142>
 800afce:	f1b9 0f00 	cmp.w	r9, #0
 800afd2:	d000      	beq.n	800afd6 <__gethex+0x112>
 800afd4:	4252      	negs	r2, r2
 800afd6:	4415      	add	r5, r2
 800afd8:	f8cb 1000 	str.w	r1, [fp]
 800afdc:	b1d4      	cbz	r4, 800b014 <__gethex+0x150>
 800afde:	9b01      	ldr	r3, [sp, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	bf14      	ite	ne
 800afe4:	2700      	movne	r7, #0
 800afe6:	2706      	moveq	r7, #6
 800afe8:	4638      	mov	r0, r7
 800afea:	b00b      	add	sp, #44	; 0x2c
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff0:	463e      	mov	r6, r7
 800aff2:	4625      	mov	r5, r4
 800aff4:	2401      	movs	r4, #1
 800aff6:	e7cc      	b.n	800af92 <__gethex+0xce>
 800aff8:	f04f 0900 	mov.w	r9, #0
 800affc:	1cb1      	adds	r1, r6, #2
 800affe:	e7d5      	b.n	800afac <__gethex+0xe8>
 800b000:	f04f 0901 	mov.w	r9, #1
 800b004:	e7fa      	b.n	800affc <__gethex+0x138>
 800b006:	230a      	movs	r3, #10
 800b008:	fb03 0202 	mla	r2, r3, r2, r0
 800b00c:	3a10      	subs	r2, #16
 800b00e:	e7d6      	b.n	800afbe <__gethex+0xfa>
 800b010:	4631      	mov	r1, r6
 800b012:	e7e1      	b.n	800afd8 <__gethex+0x114>
 800b014:	1bf3      	subs	r3, r6, r7
 800b016:	3b01      	subs	r3, #1
 800b018:	4621      	mov	r1, r4
 800b01a:	2b07      	cmp	r3, #7
 800b01c:	dc0a      	bgt.n	800b034 <__gethex+0x170>
 800b01e:	9802      	ldr	r0, [sp, #8]
 800b020:	f000 fa98 	bl	800b554 <_Balloc>
 800b024:	4604      	mov	r4, r0
 800b026:	b940      	cbnz	r0, 800b03a <__gethex+0x176>
 800b028:	4b5c      	ldr	r3, [pc, #368]	; (800b19c <__gethex+0x2d8>)
 800b02a:	4602      	mov	r2, r0
 800b02c:	21de      	movs	r1, #222	; 0xde
 800b02e:	485c      	ldr	r0, [pc, #368]	; (800b1a0 <__gethex+0x2dc>)
 800b030:	f001 f8ee 	bl	800c210 <__assert_func>
 800b034:	3101      	adds	r1, #1
 800b036:	105b      	asrs	r3, r3, #1
 800b038:	e7ef      	b.n	800b01a <__gethex+0x156>
 800b03a:	f100 0914 	add.w	r9, r0, #20
 800b03e:	f04f 0b00 	mov.w	fp, #0
 800b042:	f1ca 0301 	rsb	r3, sl, #1
 800b046:	f8cd 9010 	str.w	r9, [sp, #16]
 800b04a:	f8cd b004 	str.w	fp, [sp, #4]
 800b04e:	9308      	str	r3, [sp, #32]
 800b050:	42b7      	cmp	r7, r6
 800b052:	d33f      	bcc.n	800b0d4 <__gethex+0x210>
 800b054:	9f04      	ldr	r7, [sp, #16]
 800b056:	9b01      	ldr	r3, [sp, #4]
 800b058:	f847 3b04 	str.w	r3, [r7], #4
 800b05c:	eba7 0709 	sub.w	r7, r7, r9
 800b060:	10bf      	asrs	r7, r7, #2
 800b062:	6127      	str	r7, [r4, #16]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fb67 	bl	800b738 <__hi0bits>
 800b06a:	017f      	lsls	r7, r7, #5
 800b06c:	f8d8 6000 	ldr.w	r6, [r8]
 800b070:	1a3f      	subs	r7, r7, r0
 800b072:	42b7      	cmp	r7, r6
 800b074:	dd62      	ble.n	800b13c <__gethex+0x278>
 800b076:	1bbf      	subs	r7, r7, r6
 800b078:	4639      	mov	r1, r7
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fefd 	bl	800be7a <__any_on>
 800b080:	4682      	mov	sl, r0
 800b082:	b1a8      	cbz	r0, 800b0b0 <__gethex+0x1ec>
 800b084:	1e7b      	subs	r3, r7, #1
 800b086:	1159      	asrs	r1, r3, #5
 800b088:	f003 021f 	and.w	r2, r3, #31
 800b08c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b090:	f04f 0a01 	mov.w	sl, #1
 800b094:	fa0a f202 	lsl.w	r2, sl, r2
 800b098:	420a      	tst	r2, r1
 800b09a:	d009      	beq.n	800b0b0 <__gethex+0x1ec>
 800b09c:	4553      	cmp	r3, sl
 800b09e:	dd05      	ble.n	800b0ac <__gethex+0x1e8>
 800b0a0:	1eb9      	subs	r1, r7, #2
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fee9 	bl	800be7a <__any_on>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d144      	bne.n	800b136 <__gethex+0x272>
 800b0ac:	f04f 0a02 	mov.w	sl, #2
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff fe9e 	bl	800adf4 <rshift>
 800b0b8:	443d      	add	r5, r7
 800b0ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0be:	42ab      	cmp	r3, r5
 800b0c0:	da4a      	bge.n	800b158 <__gethex+0x294>
 800b0c2:	9802      	ldr	r0, [sp, #8]
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f000 fa85 	bl	800b5d4 <_Bfree>
 800b0ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	27a3      	movs	r7, #163	; 0xa3
 800b0d2:	e789      	b.n	800afe8 <__gethex+0x124>
 800b0d4:	1e73      	subs	r3, r6, #1
 800b0d6:	9a06      	ldr	r2, [sp, #24]
 800b0d8:	9307      	str	r3, [sp, #28]
 800b0da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d019      	beq.n	800b116 <__gethex+0x252>
 800b0e2:	f1bb 0f20 	cmp.w	fp, #32
 800b0e6:	d107      	bne.n	800b0f8 <__gethex+0x234>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	f843 2b04 	str.w	r2, [r3], #4
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	469b      	mov	fp, r3
 800b0f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b0fc:	f7ff fecc 	bl	800ae98 <__hexdig_fun>
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	f000 000f 	and.w	r0, r0, #15
 800b106:	fa00 f00b 	lsl.w	r0, r0, fp
 800b10a:	4303      	orrs	r3, r0
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	f10b 0b04 	add.w	fp, fp, #4
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	e00d      	b.n	800b132 <__gethex+0x26e>
 800b116:	9a08      	ldr	r2, [sp, #32]
 800b118:	1e73      	subs	r3, r6, #1
 800b11a:	4413      	add	r3, r2
 800b11c:	42bb      	cmp	r3, r7
 800b11e:	d3e0      	bcc.n	800b0e2 <__gethex+0x21e>
 800b120:	4618      	mov	r0, r3
 800b122:	9903      	ldr	r1, [sp, #12]
 800b124:	9309      	str	r3, [sp, #36]	; 0x24
 800b126:	4652      	mov	r2, sl
 800b128:	f001 f850 	bl	800c1cc <strncmp>
 800b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b12e:	2800      	cmp	r0, #0
 800b130:	d1d7      	bne.n	800b0e2 <__gethex+0x21e>
 800b132:	461e      	mov	r6, r3
 800b134:	e78c      	b.n	800b050 <__gethex+0x18c>
 800b136:	f04f 0a03 	mov.w	sl, #3
 800b13a:	e7b9      	b.n	800b0b0 <__gethex+0x1ec>
 800b13c:	da09      	bge.n	800b152 <__gethex+0x28e>
 800b13e:	1bf7      	subs	r7, r6, r7
 800b140:	4621      	mov	r1, r4
 800b142:	9802      	ldr	r0, [sp, #8]
 800b144:	463a      	mov	r2, r7
 800b146:	f000 fc5d 	bl	800ba04 <__lshift>
 800b14a:	1bed      	subs	r5, r5, r7
 800b14c:	4604      	mov	r4, r0
 800b14e:	f100 0914 	add.w	r9, r0, #20
 800b152:	f04f 0a00 	mov.w	sl, #0
 800b156:	e7b0      	b.n	800b0ba <__gethex+0x1f6>
 800b158:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b15c:	42a8      	cmp	r0, r5
 800b15e:	dd71      	ble.n	800b244 <__gethex+0x380>
 800b160:	1b45      	subs	r5, r0, r5
 800b162:	42ae      	cmp	r6, r5
 800b164:	dc35      	bgt.n	800b1d2 <__gethex+0x30e>
 800b166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d029      	beq.n	800b1c2 <__gethex+0x2fe>
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d02b      	beq.n	800b1ca <__gethex+0x306>
 800b172:	2b01      	cmp	r3, #1
 800b174:	d11c      	bne.n	800b1b0 <__gethex+0x2ec>
 800b176:	42ae      	cmp	r6, r5
 800b178:	d11a      	bne.n	800b1b0 <__gethex+0x2ec>
 800b17a:	2e01      	cmp	r6, #1
 800b17c:	d112      	bne.n	800b1a4 <__gethex+0x2e0>
 800b17e:	9a05      	ldr	r2, [sp, #20]
 800b180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	2301      	movs	r3, #1
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	f8c9 3000 	str.w	r3, [r9]
 800b18e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b190:	2762      	movs	r7, #98	; 0x62
 800b192:	601c      	str	r4, [r3, #0]
 800b194:	e728      	b.n	800afe8 <__gethex+0x124>
 800b196:	bf00      	nop
 800b198:	0800eed0 	.word	0x0800eed0
 800b19c:	0800ee58 	.word	0x0800ee58
 800b1a0:	0800ee69 	.word	0x0800ee69
 800b1a4:	1e71      	subs	r1, r6, #1
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fe67 	bl	800be7a <__any_on>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1e6      	bne.n	800b17e <__gethex+0x2ba>
 800b1b0:	9802      	ldr	r0, [sp, #8]
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	f000 fa0e 	bl	800b5d4 <_Bfree>
 800b1b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	2750      	movs	r7, #80	; 0x50
 800b1c0:	e712      	b.n	800afe8 <__gethex+0x124>
 800b1c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f3      	bne.n	800b1b0 <__gethex+0x2ec>
 800b1c8:	e7d9      	b.n	800b17e <__gethex+0x2ba>
 800b1ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1d6      	bne.n	800b17e <__gethex+0x2ba>
 800b1d0:	e7ee      	b.n	800b1b0 <__gethex+0x2ec>
 800b1d2:	1e6f      	subs	r7, r5, #1
 800b1d4:	f1ba 0f00 	cmp.w	sl, #0
 800b1d8:	d131      	bne.n	800b23e <__gethex+0x37a>
 800b1da:	b127      	cbz	r7, 800b1e6 <__gethex+0x322>
 800b1dc:	4639      	mov	r1, r7
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fe4b 	bl	800be7a <__any_on>
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	117b      	asrs	r3, r7, #5
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b1ee:	f007 071f 	and.w	r7, r7, #31
 800b1f2:	fa01 f707 	lsl.w	r7, r1, r7
 800b1f6:	421f      	tst	r7, r3
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	bf18      	it	ne
 800b1fe:	f04a 0a02 	orrne.w	sl, sl, #2
 800b202:	1b76      	subs	r6, r6, r5
 800b204:	f7ff fdf6 	bl	800adf4 <rshift>
 800b208:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b20c:	2702      	movs	r7, #2
 800b20e:	f1ba 0f00 	cmp.w	sl, #0
 800b212:	d048      	beq.n	800b2a6 <__gethex+0x3e2>
 800b214:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d015      	beq.n	800b248 <__gethex+0x384>
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d017      	beq.n	800b250 <__gethex+0x38c>
 800b220:	2b01      	cmp	r3, #1
 800b222:	d109      	bne.n	800b238 <__gethex+0x374>
 800b224:	f01a 0f02 	tst.w	sl, #2
 800b228:	d006      	beq.n	800b238 <__gethex+0x374>
 800b22a:	f8d9 0000 	ldr.w	r0, [r9]
 800b22e:	ea4a 0a00 	orr.w	sl, sl, r0
 800b232:	f01a 0f01 	tst.w	sl, #1
 800b236:	d10e      	bne.n	800b256 <__gethex+0x392>
 800b238:	f047 0710 	orr.w	r7, r7, #16
 800b23c:	e033      	b.n	800b2a6 <__gethex+0x3e2>
 800b23e:	f04f 0a01 	mov.w	sl, #1
 800b242:	e7d0      	b.n	800b1e6 <__gethex+0x322>
 800b244:	2701      	movs	r7, #1
 800b246:	e7e2      	b.n	800b20e <__gethex+0x34a>
 800b248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b24a:	f1c3 0301 	rsb	r3, r3, #1
 800b24e:	9315      	str	r3, [sp, #84]	; 0x54
 800b250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0f0      	beq.n	800b238 <__gethex+0x374>
 800b256:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b25a:	f104 0314 	add.w	r3, r4, #20
 800b25e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b262:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b266:	f04f 0c00 	mov.w	ip, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b270:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b274:	d01c      	beq.n	800b2b0 <__gethex+0x3ec>
 800b276:	3201      	adds	r2, #1
 800b278:	6002      	str	r2, [r0, #0]
 800b27a:	2f02      	cmp	r7, #2
 800b27c:	f104 0314 	add.w	r3, r4, #20
 800b280:	d13d      	bne.n	800b2fe <__gethex+0x43a>
 800b282:	f8d8 2000 	ldr.w	r2, [r8]
 800b286:	3a01      	subs	r2, #1
 800b288:	42b2      	cmp	r2, r6
 800b28a:	d10a      	bne.n	800b2a2 <__gethex+0x3de>
 800b28c:	1171      	asrs	r1, r6, #5
 800b28e:	2201      	movs	r2, #1
 800b290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b294:	f006 061f 	and.w	r6, r6, #31
 800b298:	fa02 f606 	lsl.w	r6, r2, r6
 800b29c:	421e      	tst	r6, r3
 800b29e:	bf18      	it	ne
 800b2a0:	4617      	movne	r7, r2
 800b2a2:	f047 0720 	orr.w	r7, r7, #32
 800b2a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2a8:	601c      	str	r4, [r3, #0]
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	601d      	str	r5, [r3, #0]
 800b2ae:	e69b      	b.n	800afe8 <__gethex+0x124>
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2b6:	d8d8      	bhi.n	800b26a <__gethex+0x3a6>
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	459b      	cmp	fp, r3
 800b2bc:	db17      	blt.n	800b2ee <__gethex+0x42a>
 800b2be:	6861      	ldr	r1, [r4, #4]
 800b2c0:	9802      	ldr	r0, [sp, #8]
 800b2c2:	3101      	adds	r1, #1
 800b2c4:	f000 f946 	bl	800b554 <_Balloc>
 800b2c8:	4681      	mov	r9, r0
 800b2ca:	b918      	cbnz	r0, 800b2d4 <__gethex+0x410>
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <__gethex+0x474>)
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	2184      	movs	r1, #132	; 0x84
 800b2d2:	e6ac      	b.n	800b02e <__gethex+0x16a>
 800b2d4:	6922      	ldr	r2, [r4, #16]
 800b2d6:	3202      	adds	r2, #2
 800b2d8:	f104 010c 	add.w	r1, r4, #12
 800b2dc:	0092      	lsls	r2, r2, #2
 800b2de:	300c      	adds	r0, #12
 800b2e0:	f000 f91e 	bl	800b520 <memcpy>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	9802      	ldr	r0, [sp, #8]
 800b2e8:	f000 f974 	bl	800b5d4 <_Bfree>
 800b2ec:	464c      	mov	r4, r9
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f6:	6122      	str	r2, [r4, #16]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	615a      	str	r2, [r3, #20]
 800b2fc:	e7bd      	b.n	800b27a <__gethex+0x3b6>
 800b2fe:	6922      	ldr	r2, [r4, #16]
 800b300:	455a      	cmp	r2, fp
 800b302:	dd0b      	ble.n	800b31c <__gethex+0x458>
 800b304:	2101      	movs	r1, #1
 800b306:	4620      	mov	r0, r4
 800b308:	f7ff fd74 	bl	800adf4 <rshift>
 800b30c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b310:	3501      	adds	r5, #1
 800b312:	42ab      	cmp	r3, r5
 800b314:	f6ff aed5 	blt.w	800b0c2 <__gethex+0x1fe>
 800b318:	2701      	movs	r7, #1
 800b31a:	e7c2      	b.n	800b2a2 <__gethex+0x3de>
 800b31c:	f016 061f 	ands.w	r6, r6, #31
 800b320:	d0fa      	beq.n	800b318 <__gethex+0x454>
 800b322:	4453      	add	r3, sl
 800b324:	f1c6 0620 	rsb	r6, r6, #32
 800b328:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b32c:	f000 fa04 	bl	800b738 <__hi0bits>
 800b330:	42b0      	cmp	r0, r6
 800b332:	dbe7      	blt.n	800b304 <__gethex+0x440>
 800b334:	e7f0      	b.n	800b318 <__gethex+0x454>
 800b336:	bf00      	nop
 800b338:	0800ee58 	.word	0x0800ee58

0800b33c <L_shift>:
 800b33c:	f1c2 0208 	rsb	r2, r2, #8
 800b340:	0092      	lsls	r2, r2, #2
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	f1c2 0620 	rsb	r6, r2, #32
 800b348:	6843      	ldr	r3, [r0, #4]
 800b34a:	6804      	ldr	r4, [r0, #0]
 800b34c:	fa03 f506 	lsl.w	r5, r3, r6
 800b350:	432c      	orrs	r4, r5
 800b352:	40d3      	lsrs	r3, r2
 800b354:	6004      	str	r4, [r0, #0]
 800b356:	f840 3f04 	str.w	r3, [r0, #4]!
 800b35a:	4288      	cmp	r0, r1
 800b35c:	d3f4      	bcc.n	800b348 <L_shift+0xc>
 800b35e:	bd70      	pop	{r4, r5, r6, pc}

0800b360 <__match>:
 800b360:	b530      	push	{r4, r5, lr}
 800b362:	6803      	ldr	r3, [r0, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36a:	b914      	cbnz	r4, 800b372 <__match+0x12>
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	2001      	movs	r0, #1
 800b370:	bd30      	pop	{r4, r5, pc}
 800b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b376:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b37a:	2d19      	cmp	r5, #25
 800b37c:	bf98      	it	ls
 800b37e:	3220      	addls	r2, #32
 800b380:	42a2      	cmp	r2, r4
 800b382:	d0f0      	beq.n	800b366 <__match+0x6>
 800b384:	2000      	movs	r0, #0
 800b386:	e7f3      	b.n	800b370 <__match+0x10>

0800b388 <__hexnan>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	680b      	ldr	r3, [r1, #0]
 800b38e:	115e      	asrs	r6, r3, #5
 800b390:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b394:	f013 031f 	ands.w	r3, r3, #31
 800b398:	b087      	sub	sp, #28
 800b39a:	bf18      	it	ne
 800b39c:	3604      	addne	r6, #4
 800b39e:	2500      	movs	r5, #0
 800b3a0:	1f37      	subs	r7, r6, #4
 800b3a2:	4690      	mov	r8, r2
 800b3a4:	6802      	ldr	r2, [r0, #0]
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3ae:	46b9      	mov	r9, r7
 800b3b0:	463c      	mov	r4, r7
 800b3b2:	9502      	str	r5, [sp, #8]
 800b3b4:	46ab      	mov	fp, r5
 800b3b6:	7851      	ldrb	r1, [r2, #1]
 800b3b8:	1c53      	adds	r3, r2, #1
 800b3ba:	9303      	str	r3, [sp, #12]
 800b3bc:	b341      	cbz	r1, 800b410 <__hexnan+0x88>
 800b3be:	4608      	mov	r0, r1
 800b3c0:	9205      	str	r2, [sp, #20]
 800b3c2:	9104      	str	r1, [sp, #16]
 800b3c4:	f7ff fd68 	bl	800ae98 <__hexdig_fun>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d14f      	bne.n	800b46c <__hexnan+0xe4>
 800b3cc:	9904      	ldr	r1, [sp, #16]
 800b3ce:	9a05      	ldr	r2, [sp, #20]
 800b3d0:	2920      	cmp	r1, #32
 800b3d2:	d818      	bhi.n	800b406 <__hexnan+0x7e>
 800b3d4:	9b02      	ldr	r3, [sp, #8]
 800b3d6:	459b      	cmp	fp, r3
 800b3d8:	dd13      	ble.n	800b402 <__hexnan+0x7a>
 800b3da:	454c      	cmp	r4, r9
 800b3dc:	d206      	bcs.n	800b3ec <__hexnan+0x64>
 800b3de:	2d07      	cmp	r5, #7
 800b3e0:	dc04      	bgt.n	800b3ec <__hexnan+0x64>
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7ff ffa8 	bl	800b33c <L_shift>
 800b3ec:	4544      	cmp	r4, r8
 800b3ee:	d950      	bls.n	800b492 <__hexnan+0x10a>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b3f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3fa:	f8cd b008 	str.w	fp, [sp, #8]
 800b3fe:	464c      	mov	r4, r9
 800b400:	461d      	mov	r5, r3
 800b402:	9a03      	ldr	r2, [sp, #12]
 800b404:	e7d7      	b.n	800b3b6 <__hexnan+0x2e>
 800b406:	2929      	cmp	r1, #41	; 0x29
 800b408:	d156      	bne.n	800b4b8 <__hexnan+0x130>
 800b40a:	3202      	adds	r2, #2
 800b40c:	f8ca 2000 	str.w	r2, [sl]
 800b410:	f1bb 0f00 	cmp.w	fp, #0
 800b414:	d050      	beq.n	800b4b8 <__hexnan+0x130>
 800b416:	454c      	cmp	r4, r9
 800b418:	d206      	bcs.n	800b428 <__hexnan+0xa0>
 800b41a:	2d07      	cmp	r5, #7
 800b41c:	dc04      	bgt.n	800b428 <__hexnan+0xa0>
 800b41e:	462a      	mov	r2, r5
 800b420:	4649      	mov	r1, r9
 800b422:	4620      	mov	r0, r4
 800b424:	f7ff ff8a 	bl	800b33c <L_shift>
 800b428:	4544      	cmp	r4, r8
 800b42a:	d934      	bls.n	800b496 <__hexnan+0x10e>
 800b42c:	f1a8 0204 	sub.w	r2, r8, #4
 800b430:	4623      	mov	r3, r4
 800b432:	f853 1b04 	ldr.w	r1, [r3], #4
 800b436:	f842 1f04 	str.w	r1, [r2, #4]!
 800b43a:	429f      	cmp	r7, r3
 800b43c:	d2f9      	bcs.n	800b432 <__hexnan+0xaa>
 800b43e:	1b3b      	subs	r3, r7, r4
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	3304      	adds	r3, #4
 800b446:	3401      	adds	r4, #1
 800b448:	3e03      	subs	r6, #3
 800b44a:	42b4      	cmp	r4, r6
 800b44c:	bf88      	it	hi
 800b44e:	2304      	movhi	r3, #4
 800b450:	4443      	add	r3, r8
 800b452:	2200      	movs	r2, #0
 800b454:	f843 2b04 	str.w	r2, [r3], #4
 800b458:	429f      	cmp	r7, r3
 800b45a:	d2fb      	bcs.n	800b454 <__hexnan+0xcc>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	b91b      	cbnz	r3, 800b468 <__hexnan+0xe0>
 800b460:	4547      	cmp	r7, r8
 800b462:	d127      	bne.n	800b4b4 <__hexnan+0x12c>
 800b464:	2301      	movs	r3, #1
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	2005      	movs	r0, #5
 800b46a:	e026      	b.n	800b4ba <__hexnan+0x132>
 800b46c:	3501      	adds	r5, #1
 800b46e:	2d08      	cmp	r5, #8
 800b470:	f10b 0b01 	add.w	fp, fp, #1
 800b474:	dd06      	ble.n	800b484 <__hexnan+0xfc>
 800b476:	4544      	cmp	r4, r8
 800b478:	d9c3      	bls.n	800b402 <__hexnan+0x7a>
 800b47a:	2300      	movs	r3, #0
 800b47c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b480:	2501      	movs	r5, #1
 800b482:	3c04      	subs	r4, #4
 800b484:	6822      	ldr	r2, [r4, #0]
 800b486:	f000 000f 	and.w	r0, r0, #15
 800b48a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b48e:	6022      	str	r2, [r4, #0]
 800b490:	e7b7      	b.n	800b402 <__hexnan+0x7a>
 800b492:	2508      	movs	r5, #8
 800b494:	e7b5      	b.n	800b402 <__hexnan+0x7a>
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0df      	beq.n	800b45c <__hexnan+0xd4>
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4a0:	f1c3 0320 	rsb	r3, r3, #32
 800b4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4ac:	401a      	ands	r2, r3
 800b4ae:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4b2:	e7d3      	b.n	800b45c <__hexnan+0xd4>
 800b4b4:	3f04      	subs	r7, #4
 800b4b6:	e7d1      	b.n	800b45c <__hexnan+0xd4>
 800b4b8:	2004      	movs	r0, #4
 800b4ba:	b007      	add	sp, #28
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4c0 <_localeconv_r>:
 800b4c0:	4800      	ldr	r0, [pc, #0]	; (800b4c4 <_localeconv_r+0x4>)
 800b4c2:	4770      	bx	lr
 800b4c4:	20000168 	.word	0x20000168

0800b4c8 <_lseek_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d07      	ldr	r5, [pc, #28]	; (800b4e8 <_lseek_r+0x20>)
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	4608      	mov	r0, r1
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f7f6 fb00 	bl	8001adc <_lseek>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d102      	bne.n	800b4e6 <_lseek_r+0x1e>
 800b4e0:	682b      	ldr	r3, [r5, #0]
 800b4e2:	b103      	cbz	r3, 800b4e6 <_lseek_r+0x1e>
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	200011c0 	.word	0x200011c0

0800b4ec <malloc>:
 800b4ec:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <malloc+0xc>)
 800b4ee:	4601      	mov	r1, r0
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	f7fc bf87 	b.w	8008404 <_malloc_r>
 800b4f6:	bf00      	nop
 800b4f8:	20000010 	.word	0x20000010

0800b4fc <__ascii_mbtowc>:
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	b901      	cbnz	r1, 800b502 <__ascii_mbtowc+0x6>
 800b500:	a901      	add	r1, sp, #4
 800b502:	b142      	cbz	r2, 800b516 <__ascii_mbtowc+0x1a>
 800b504:	b14b      	cbz	r3, 800b51a <__ascii_mbtowc+0x1e>
 800b506:	7813      	ldrb	r3, [r2, #0]
 800b508:	600b      	str	r3, [r1, #0]
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	1e10      	subs	r0, r2, #0
 800b50e:	bf18      	it	ne
 800b510:	2001      	movne	r0, #1
 800b512:	b002      	add	sp, #8
 800b514:	4770      	bx	lr
 800b516:	4610      	mov	r0, r2
 800b518:	e7fb      	b.n	800b512 <__ascii_mbtowc+0x16>
 800b51a:	f06f 0001 	mvn.w	r0, #1
 800b51e:	e7f8      	b.n	800b512 <__ascii_mbtowc+0x16>

0800b520 <memcpy>:
 800b520:	440a      	add	r2, r1
 800b522:	4291      	cmp	r1, r2
 800b524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b528:	d100      	bne.n	800b52c <memcpy+0xc>
 800b52a:	4770      	bx	lr
 800b52c:	b510      	push	{r4, lr}
 800b52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b532:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b536:	4291      	cmp	r1, r2
 800b538:	d1f9      	bne.n	800b52e <memcpy+0xe>
 800b53a:	bd10      	pop	{r4, pc}

0800b53c <__malloc_lock>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__malloc_lock+0x8>)
 800b53e:	f7fc beec 	b.w	800831a <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	200011b4 	.word	0x200011b4

0800b548 <__malloc_unlock>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__malloc_unlock+0x8>)
 800b54a:	f7fc bee7 	b.w	800831c <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	200011b4 	.word	0x200011b4

0800b554 <_Balloc>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	b976      	cbnz	r6, 800b57c <_Balloc+0x28>
 800b55e:	2010      	movs	r0, #16
 800b560:	f7ff ffc4 	bl	800b4ec <malloc>
 800b564:	4602      	mov	r2, r0
 800b566:	6260      	str	r0, [r4, #36]	; 0x24
 800b568:	b920      	cbnz	r0, 800b574 <_Balloc+0x20>
 800b56a:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <_Balloc+0x78>)
 800b56c:	4818      	ldr	r0, [pc, #96]	; (800b5d0 <_Balloc+0x7c>)
 800b56e:	2166      	movs	r1, #102	; 0x66
 800b570:	f000 fe4e 	bl	800c210 <__assert_func>
 800b574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b578:	6006      	str	r6, [r0, #0]
 800b57a:	60c6      	str	r6, [r0, #12]
 800b57c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b57e:	68f3      	ldr	r3, [r6, #12]
 800b580:	b183      	cbz	r3, 800b5a4 <_Balloc+0x50>
 800b582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b58a:	b9b8      	cbnz	r0, 800b5bc <_Balloc+0x68>
 800b58c:	2101      	movs	r1, #1
 800b58e:	fa01 f605 	lsl.w	r6, r1, r5
 800b592:	1d72      	adds	r2, r6, #5
 800b594:	0092      	lsls	r2, r2, #2
 800b596:	4620      	mov	r0, r4
 800b598:	f000 fc90 	bl	800bebc <_calloc_r>
 800b59c:	b160      	cbz	r0, 800b5b8 <_Balloc+0x64>
 800b59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5a2:	e00e      	b.n	800b5c2 <_Balloc+0x6e>
 800b5a4:	2221      	movs	r2, #33	; 0x21
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fc87 	bl	800bebc <_calloc_r>
 800b5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b0:	60f0      	str	r0, [r6, #12]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e4      	bne.n	800b582 <_Balloc+0x2e>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	6802      	ldr	r2, [r0, #0]
 800b5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5c8:	e7f7      	b.n	800b5ba <_Balloc+0x66>
 800b5ca:	bf00      	nop
 800b5cc:	0800ede6 	.word	0x0800ede6
 800b5d0:	0800eee4 	.word	0x0800eee4

0800b5d4 <_Bfree>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	b976      	cbnz	r6, 800b5fc <_Bfree+0x28>
 800b5de:	2010      	movs	r0, #16
 800b5e0:	f7ff ff84 	bl	800b4ec <malloc>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b5e8:	b920      	cbnz	r0, 800b5f4 <_Bfree+0x20>
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <_Bfree+0x3c>)
 800b5ec:	4809      	ldr	r0, [pc, #36]	; (800b614 <_Bfree+0x40>)
 800b5ee:	218a      	movs	r1, #138	; 0x8a
 800b5f0:	f000 fe0e 	bl	800c210 <__assert_func>
 800b5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5f8:	6006      	str	r6, [r0, #0]
 800b5fa:	60c6      	str	r6, [r0, #12]
 800b5fc:	b13c      	cbz	r4, 800b60e <_Bfree+0x3a>
 800b5fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b600:	6862      	ldr	r2, [r4, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b608:	6021      	str	r1, [r4, #0]
 800b60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	0800ede6 	.word	0x0800ede6
 800b614:	0800eee4 	.word	0x0800eee4

0800b618 <__multadd>:
 800b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	690d      	ldr	r5, [r1, #16]
 800b61e:	4607      	mov	r7, r0
 800b620:	460c      	mov	r4, r1
 800b622:	461e      	mov	r6, r3
 800b624:	f101 0c14 	add.w	ip, r1, #20
 800b628:	2000      	movs	r0, #0
 800b62a:	f8dc 3000 	ldr.w	r3, [ip]
 800b62e:	b299      	uxth	r1, r3
 800b630:	fb02 6101 	mla	r1, r2, r1, r6
 800b634:	0c1e      	lsrs	r6, r3, #16
 800b636:	0c0b      	lsrs	r3, r1, #16
 800b638:	fb02 3306 	mla	r3, r2, r6, r3
 800b63c:	b289      	uxth	r1, r1
 800b63e:	3001      	adds	r0, #1
 800b640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b644:	4285      	cmp	r5, r0
 800b646:	f84c 1b04 	str.w	r1, [ip], #4
 800b64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b64e:	dcec      	bgt.n	800b62a <__multadd+0x12>
 800b650:	b30e      	cbz	r6, 800b696 <__multadd+0x7e>
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	42ab      	cmp	r3, r5
 800b656:	dc19      	bgt.n	800b68c <__multadd+0x74>
 800b658:	6861      	ldr	r1, [r4, #4]
 800b65a:	4638      	mov	r0, r7
 800b65c:	3101      	adds	r1, #1
 800b65e:	f7ff ff79 	bl	800b554 <_Balloc>
 800b662:	4680      	mov	r8, r0
 800b664:	b928      	cbnz	r0, 800b672 <__multadd+0x5a>
 800b666:	4602      	mov	r2, r0
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <__multadd+0x84>)
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <__multadd+0x88>)
 800b66c:	21b5      	movs	r1, #181	; 0xb5
 800b66e:	f000 fdcf 	bl	800c210 <__assert_func>
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	3202      	adds	r2, #2
 800b676:	f104 010c 	add.w	r1, r4, #12
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	300c      	adds	r0, #12
 800b67e:	f7ff ff4f 	bl	800b520 <memcpy>
 800b682:	4621      	mov	r1, r4
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ffa5 	bl	800b5d4 <_Bfree>
 800b68a:	4644      	mov	r4, r8
 800b68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b690:	3501      	adds	r5, #1
 800b692:	615e      	str	r6, [r3, #20]
 800b694:	6125      	str	r5, [r4, #16]
 800b696:	4620      	mov	r0, r4
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	0800ee58 	.word	0x0800ee58
 800b6a0:	0800eee4 	.word	0x0800eee4

0800b6a4 <__s2b>:
 800b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	4615      	mov	r5, r2
 800b6ac:	461f      	mov	r7, r3
 800b6ae:	2209      	movs	r2, #9
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	db09      	blt.n	800b6d4 <__s2b+0x30>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ff47 	bl	800b554 <_Balloc>
 800b6c6:	b940      	cbnz	r0, 800b6da <__s2b+0x36>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4b19      	ldr	r3, [pc, #100]	; (800b730 <__s2b+0x8c>)
 800b6cc:	4819      	ldr	r0, [pc, #100]	; (800b734 <__s2b+0x90>)
 800b6ce:	21ce      	movs	r1, #206	; 0xce
 800b6d0:	f000 fd9e 	bl	800c210 <__assert_func>
 800b6d4:	0052      	lsls	r2, r2, #1
 800b6d6:	3101      	adds	r1, #1
 800b6d8:	e7f0      	b.n	800b6bc <__s2b+0x18>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	6143      	str	r3, [r0, #20]
 800b6de:	2d09      	cmp	r5, #9
 800b6e0:	f04f 0301 	mov.w	r3, #1
 800b6e4:	6103      	str	r3, [r0, #16]
 800b6e6:	dd16      	ble.n	800b716 <__s2b+0x72>
 800b6e8:	f104 0909 	add.w	r9, r4, #9
 800b6ec:	46c8      	mov	r8, r9
 800b6ee:	442c      	add	r4, r5
 800b6f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	3b30      	subs	r3, #48	; 0x30
 800b6f8:	220a      	movs	r2, #10
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f7ff ff8c 	bl	800b618 <__multadd>
 800b700:	45a0      	cmp	r8, r4
 800b702:	d1f5      	bne.n	800b6f0 <__s2b+0x4c>
 800b704:	f1a5 0408 	sub.w	r4, r5, #8
 800b708:	444c      	add	r4, r9
 800b70a:	1b2d      	subs	r5, r5, r4
 800b70c:	1963      	adds	r3, r4, r5
 800b70e:	42bb      	cmp	r3, r7
 800b710:	db04      	blt.n	800b71c <__s2b+0x78>
 800b712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b716:	340a      	adds	r4, #10
 800b718:	2509      	movs	r5, #9
 800b71a:	e7f6      	b.n	800b70a <__s2b+0x66>
 800b71c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b720:	4601      	mov	r1, r0
 800b722:	3b30      	subs	r3, #48	; 0x30
 800b724:	220a      	movs	r2, #10
 800b726:	4630      	mov	r0, r6
 800b728:	f7ff ff76 	bl	800b618 <__multadd>
 800b72c:	e7ee      	b.n	800b70c <__s2b+0x68>
 800b72e:	bf00      	nop
 800b730:	0800ee58 	.word	0x0800ee58
 800b734:	0800eee4 	.word	0x0800eee4

0800b738 <__hi0bits>:
 800b738:	0c02      	lsrs	r2, r0, #16
 800b73a:	0412      	lsls	r2, r2, #16
 800b73c:	4603      	mov	r3, r0
 800b73e:	b9ca      	cbnz	r2, 800b774 <__hi0bits+0x3c>
 800b740:	0403      	lsls	r3, r0, #16
 800b742:	2010      	movs	r0, #16
 800b744:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b748:	bf04      	itt	eq
 800b74a:	021b      	lsleq	r3, r3, #8
 800b74c:	3008      	addeq	r0, #8
 800b74e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b752:	bf04      	itt	eq
 800b754:	011b      	lsleq	r3, r3, #4
 800b756:	3004      	addeq	r0, #4
 800b758:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b75c:	bf04      	itt	eq
 800b75e:	009b      	lsleq	r3, r3, #2
 800b760:	3002      	addeq	r0, #2
 800b762:	2b00      	cmp	r3, #0
 800b764:	db05      	blt.n	800b772 <__hi0bits+0x3a>
 800b766:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b76a:	f100 0001 	add.w	r0, r0, #1
 800b76e:	bf08      	it	eq
 800b770:	2020      	moveq	r0, #32
 800b772:	4770      	bx	lr
 800b774:	2000      	movs	r0, #0
 800b776:	e7e5      	b.n	800b744 <__hi0bits+0xc>

0800b778 <__lo0bits>:
 800b778:	6803      	ldr	r3, [r0, #0]
 800b77a:	4602      	mov	r2, r0
 800b77c:	f013 0007 	ands.w	r0, r3, #7
 800b780:	d00b      	beq.n	800b79a <__lo0bits+0x22>
 800b782:	07d9      	lsls	r1, r3, #31
 800b784:	d421      	bmi.n	800b7ca <__lo0bits+0x52>
 800b786:	0798      	lsls	r0, r3, #30
 800b788:	bf49      	itett	mi
 800b78a:	085b      	lsrmi	r3, r3, #1
 800b78c:	089b      	lsrpl	r3, r3, #2
 800b78e:	2001      	movmi	r0, #1
 800b790:	6013      	strmi	r3, [r2, #0]
 800b792:	bf5c      	itt	pl
 800b794:	6013      	strpl	r3, [r2, #0]
 800b796:	2002      	movpl	r0, #2
 800b798:	4770      	bx	lr
 800b79a:	b299      	uxth	r1, r3
 800b79c:	b909      	cbnz	r1, 800b7a2 <__lo0bits+0x2a>
 800b79e:	0c1b      	lsrs	r3, r3, #16
 800b7a0:	2010      	movs	r0, #16
 800b7a2:	b2d9      	uxtb	r1, r3
 800b7a4:	b909      	cbnz	r1, 800b7aa <__lo0bits+0x32>
 800b7a6:	3008      	adds	r0, #8
 800b7a8:	0a1b      	lsrs	r3, r3, #8
 800b7aa:	0719      	lsls	r1, r3, #28
 800b7ac:	bf04      	itt	eq
 800b7ae:	091b      	lsreq	r3, r3, #4
 800b7b0:	3004      	addeq	r0, #4
 800b7b2:	0799      	lsls	r1, r3, #30
 800b7b4:	bf04      	itt	eq
 800b7b6:	089b      	lsreq	r3, r3, #2
 800b7b8:	3002      	addeq	r0, #2
 800b7ba:	07d9      	lsls	r1, r3, #31
 800b7bc:	d403      	bmi.n	800b7c6 <__lo0bits+0x4e>
 800b7be:	085b      	lsrs	r3, r3, #1
 800b7c0:	f100 0001 	add.w	r0, r0, #1
 800b7c4:	d003      	beq.n	800b7ce <__lo0bits+0x56>
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	4770      	bx	lr
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	4770      	bx	lr
 800b7ce:	2020      	movs	r0, #32
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <__i2b>:
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	2101      	movs	r1, #1
 800b7da:	f7ff febb 	bl	800b554 <_Balloc>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	b928      	cbnz	r0, 800b7ee <__i2b+0x1a>
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <__i2b+0x24>)
 800b7e4:	4805      	ldr	r0, [pc, #20]	; (800b7fc <__i2b+0x28>)
 800b7e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ea:	f000 fd11 	bl	800c210 <__assert_func>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	6144      	str	r4, [r0, #20]
 800b7f2:	6103      	str	r3, [r0, #16]
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800ee58 	.word	0x0800ee58
 800b7fc:	0800eee4 	.word	0x0800eee4

0800b800 <__multiply>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	4691      	mov	r9, r2
 800b806:	690a      	ldr	r2, [r1, #16]
 800b808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bfb8      	it	lt
 800b810:	460b      	movlt	r3, r1
 800b812:	460c      	mov	r4, r1
 800b814:	bfbc      	itt	lt
 800b816:	464c      	movlt	r4, r9
 800b818:	4699      	movlt	r9, r3
 800b81a:	6927      	ldr	r7, [r4, #16]
 800b81c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	6861      	ldr	r1, [r4, #4]
 800b824:	eb07 060a 	add.w	r6, r7, sl
 800b828:	42b3      	cmp	r3, r6
 800b82a:	b085      	sub	sp, #20
 800b82c:	bfb8      	it	lt
 800b82e:	3101      	addlt	r1, #1
 800b830:	f7ff fe90 	bl	800b554 <_Balloc>
 800b834:	b930      	cbnz	r0, 800b844 <__multiply+0x44>
 800b836:	4602      	mov	r2, r0
 800b838:	4b43      	ldr	r3, [pc, #268]	; (800b948 <__multiply+0x148>)
 800b83a:	4844      	ldr	r0, [pc, #272]	; (800b94c <__multiply+0x14c>)
 800b83c:	f240 115d 	movw	r1, #349	; 0x15d
 800b840:	f000 fce6 	bl	800c210 <__assert_func>
 800b844:	f100 0514 	add.w	r5, r0, #20
 800b848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b84c:	462b      	mov	r3, r5
 800b84e:	2200      	movs	r2, #0
 800b850:	4543      	cmp	r3, r8
 800b852:	d321      	bcc.n	800b898 <__multiply+0x98>
 800b854:	f104 0314 	add.w	r3, r4, #20
 800b858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b85c:	f109 0314 	add.w	r3, r9, #20
 800b860:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b864:	9202      	str	r2, [sp, #8]
 800b866:	1b3a      	subs	r2, r7, r4
 800b868:	3a15      	subs	r2, #21
 800b86a:	f022 0203 	bic.w	r2, r2, #3
 800b86e:	3204      	adds	r2, #4
 800b870:	f104 0115 	add.w	r1, r4, #21
 800b874:	428f      	cmp	r7, r1
 800b876:	bf38      	it	cc
 800b878:	2204      	movcc	r2, #4
 800b87a:	9201      	str	r2, [sp, #4]
 800b87c:	9a02      	ldr	r2, [sp, #8]
 800b87e:	9303      	str	r3, [sp, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d80c      	bhi.n	800b89e <__multiply+0x9e>
 800b884:	2e00      	cmp	r6, #0
 800b886:	dd03      	ble.n	800b890 <__multiply+0x90>
 800b888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d059      	beq.n	800b944 <__multiply+0x144>
 800b890:	6106      	str	r6, [r0, #16]
 800b892:	b005      	add	sp, #20
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	f843 2b04 	str.w	r2, [r3], #4
 800b89c:	e7d8      	b.n	800b850 <__multiply+0x50>
 800b89e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8a2:	f1ba 0f00 	cmp.w	sl, #0
 800b8a6:	d023      	beq.n	800b8f0 <__multiply+0xf0>
 800b8a8:	f104 0e14 	add.w	lr, r4, #20
 800b8ac:	46a9      	mov	r9, r5
 800b8ae:	f04f 0c00 	mov.w	ip, #0
 800b8b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b8ba:	fa1f fb82 	uxth.w	fp, r2
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8c4:	4461      	add	r1, ip
 800b8c6:	f8d9 c000 	ldr.w	ip, [r9]
 800b8ca:	0c12      	lsrs	r2, r2, #16
 800b8cc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b8d0:	fb0a c202 	mla	r2, sl, r2, ip
 800b8d4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8d8:	b289      	uxth	r1, r1
 800b8da:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8de:	4577      	cmp	r7, lr
 800b8e0:	f849 1b04 	str.w	r1, [r9], #4
 800b8e4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8e8:	d8e3      	bhi.n	800b8b2 <__multiply+0xb2>
 800b8ea:	9a01      	ldr	r2, [sp, #4]
 800b8ec:	f845 c002 	str.w	ip, [r5, r2]
 800b8f0:	9a03      	ldr	r2, [sp, #12]
 800b8f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	d020      	beq.n	800b940 <__multiply+0x140>
 800b8fe:	6829      	ldr	r1, [r5, #0]
 800b900:	f104 0c14 	add.w	ip, r4, #20
 800b904:	46ae      	mov	lr, r5
 800b906:	f04f 0a00 	mov.w	sl, #0
 800b90a:	f8bc b000 	ldrh.w	fp, [ip]
 800b90e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b912:	fb09 220b 	mla	r2, r9, fp, r2
 800b916:	4492      	add	sl, r2
 800b918:	b289      	uxth	r1, r1
 800b91a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b91e:	f84e 1b04 	str.w	r1, [lr], #4
 800b922:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b926:	f8be 1000 	ldrh.w	r1, [lr]
 800b92a:	0c12      	lsrs	r2, r2, #16
 800b92c:	fb09 1102 	mla	r1, r9, r2, r1
 800b930:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b934:	4567      	cmp	r7, ip
 800b936:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b93a:	d8e6      	bhi.n	800b90a <__multiply+0x10a>
 800b93c:	9a01      	ldr	r2, [sp, #4]
 800b93e:	50a9      	str	r1, [r5, r2]
 800b940:	3504      	adds	r5, #4
 800b942:	e79b      	b.n	800b87c <__multiply+0x7c>
 800b944:	3e01      	subs	r6, #1
 800b946:	e79d      	b.n	800b884 <__multiply+0x84>
 800b948:	0800ee58 	.word	0x0800ee58
 800b94c:	0800eee4 	.word	0x0800eee4

0800b950 <__pow5mult>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	4615      	mov	r5, r2
 800b956:	f012 0203 	ands.w	r2, r2, #3
 800b95a:	4606      	mov	r6, r0
 800b95c:	460f      	mov	r7, r1
 800b95e:	d007      	beq.n	800b970 <__pow5mult+0x20>
 800b960:	4c25      	ldr	r4, [pc, #148]	; (800b9f8 <__pow5mult+0xa8>)
 800b962:	3a01      	subs	r2, #1
 800b964:	2300      	movs	r3, #0
 800b966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b96a:	f7ff fe55 	bl	800b618 <__multadd>
 800b96e:	4607      	mov	r7, r0
 800b970:	10ad      	asrs	r5, r5, #2
 800b972:	d03d      	beq.n	800b9f0 <__pow5mult+0xa0>
 800b974:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b976:	b97c      	cbnz	r4, 800b998 <__pow5mult+0x48>
 800b978:	2010      	movs	r0, #16
 800b97a:	f7ff fdb7 	bl	800b4ec <malloc>
 800b97e:	4602      	mov	r2, r0
 800b980:	6270      	str	r0, [r6, #36]	; 0x24
 800b982:	b928      	cbnz	r0, 800b990 <__pow5mult+0x40>
 800b984:	4b1d      	ldr	r3, [pc, #116]	; (800b9fc <__pow5mult+0xac>)
 800b986:	481e      	ldr	r0, [pc, #120]	; (800ba00 <__pow5mult+0xb0>)
 800b988:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b98c:	f000 fc40 	bl	800c210 <__assert_func>
 800b990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b994:	6004      	str	r4, [r0, #0]
 800b996:	60c4      	str	r4, [r0, #12]
 800b998:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b99c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9a0:	b94c      	cbnz	r4, 800b9b6 <__pow5mult+0x66>
 800b9a2:	f240 2171 	movw	r1, #625	; 0x271
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7ff ff14 	bl	800b7d4 <__i2b>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	f04f 0900 	mov.w	r9, #0
 800b9ba:	07eb      	lsls	r3, r5, #31
 800b9bc:	d50a      	bpl.n	800b9d4 <__pow5mult+0x84>
 800b9be:	4639      	mov	r1, r7
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff ff1c 	bl	800b800 <__multiply>
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff fe01 	bl	800b5d4 <_Bfree>
 800b9d2:	4647      	mov	r7, r8
 800b9d4:	106d      	asrs	r5, r5, #1
 800b9d6:	d00b      	beq.n	800b9f0 <__pow5mult+0xa0>
 800b9d8:	6820      	ldr	r0, [r4, #0]
 800b9da:	b938      	cbnz	r0, 800b9ec <__pow5mult+0x9c>
 800b9dc:	4622      	mov	r2, r4
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f7ff ff0d 	bl	800b800 <__multiply>
 800b9e6:	6020      	str	r0, [r4, #0]
 800b9e8:	f8c0 9000 	str.w	r9, [r0]
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	e7e4      	b.n	800b9ba <__pow5mult+0x6a>
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800f030 	.word	0x0800f030
 800b9fc:	0800ede6 	.word	0x0800ede6
 800ba00:	0800eee4 	.word	0x0800eee4

0800ba04 <__lshift>:
 800ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	460c      	mov	r4, r1
 800ba0a:	6849      	ldr	r1, [r1, #4]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	4607      	mov	r7, r0
 800ba16:	4691      	mov	r9, r2
 800ba18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba1c:	f108 0601 	add.w	r6, r8, #1
 800ba20:	42b3      	cmp	r3, r6
 800ba22:	db0b      	blt.n	800ba3c <__lshift+0x38>
 800ba24:	4638      	mov	r0, r7
 800ba26:	f7ff fd95 	bl	800b554 <_Balloc>
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	b948      	cbnz	r0, 800ba42 <__lshift+0x3e>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	4b2a      	ldr	r3, [pc, #168]	; (800badc <__lshift+0xd8>)
 800ba32:	482b      	ldr	r0, [pc, #172]	; (800bae0 <__lshift+0xdc>)
 800ba34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba38:	f000 fbea 	bl	800c210 <__assert_func>
 800ba3c:	3101      	adds	r1, #1
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	e7ee      	b.n	800ba20 <__lshift+0x1c>
 800ba42:	2300      	movs	r3, #0
 800ba44:	f100 0114 	add.w	r1, r0, #20
 800ba48:	f100 0210 	add.w	r2, r0, #16
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	4553      	cmp	r3, sl
 800ba50:	db37      	blt.n	800bac2 <__lshift+0xbe>
 800ba52:	6920      	ldr	r0, [r4, #16]
 800ba54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba58:	f104 0314 	add.w	r3, r4, #20
 800ba5c:	f019 091f 	ands.w	r9, r9, #31
 800ba60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba68:	d02f      	beq.n	800baca <__lshift+0xc6>
 800ba6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba6e:	468a      	mov	sl, r1
 800ba70:	f04f 0c00 	mov.w	ip, #0
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	fa02 f209 	lsl.w	r2, r2, r9
 800ba7a:	ea42 020c 	orr.w	r2, r2, ip
 800ba7e:	f84a 2b04 	str.w	r2, [sl], #4
 800ba82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba86:	4298      	cmp	r0, r3
 800ba88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba8c:	d8f2      	bhi.n	800ba74 <__lshift+0x70>
 800ba8e:	1b03      	subs	r3, r0, r4
 800ba90:	3b15      	subs	r3, #21
 800ba92:	f023 0303 	bic.w	r3, r3, #3
 800ba96:	3304      	adds	r3, #4
 800ba98:	f104 0215 	add.w	r2, r4, #21
 800ba9c:	4290      	cmp	r0, r2
 800ba9e:	bf38      	it	cc
 800baa0:	2304      	movcc	r3, #4
 800baa2:	f841 c003 	str.w	ip, [r1, r3]
 800baa6:	f1bc 0f00 	cmp.w	ip, #0
 800baaa:	d001      	beq.n	800bab0 <__lshift+0xac>
 800baac:	f108 0602 	add.w	r6, r8, #2
 800bab0:	3e01      	subs	r6, #1
 800bab2:	4638      	mov	r0, r7
 800bab4:	612e      	str	r6, [r5, #16]
 800bab6:	4621      	mov	r1, r4
 800bab8:	f7ff fd8c 	bl	800b5d4 <_Bfree>
 800babc:	4628      	mov	r0, r5
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bac6:	3301      	adds	r3, #1
 800bac8:	e7c1      	b.n	800ba4e <__lshift+0x4a>
 800baca:	3904      	subs	r1, #4
 800bacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bad4:	4298      	cmp	r0, r3
 800bad6:	d8f9      	bhi.n	800bacc <__lshift+0xc8>
 800bad8:	e7ea      	b.n	800bab0 <__lshift+0xac>
 800bada:	bf00      	nop
 800badc:	0800ee58 	.word	0x0800ee58
 800bae0:	0800eee4 	.word	0x0800eee4

0800bae4 <__mcmp>:
 800bae4:	690a      	ldr	r2, [r1, #16]
 800bae6:	4603      	mov	r3, r0
 800bae8:	6900      	ldr	r0, [r0, #16]
 800baea:	1a80      	subs	r0, r0, r2
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	d10d      	bne.n	800bb0c <__mcmp+0x28>
 800baf0:	3314      	adds	r3, #20
 800baf2:	3114      	adds	r1, #20
 800baf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800baf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bafc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb04:	4295      	cmp	r5, r2
 800bb06:	d002      	beq.n	800bb0e <__mcmp+0x2a>
 800bb08:	d304      	bcc.n	800bb14 <__mcmp+0x30>
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	bd30      	pop	{r4, r5, pc}
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	d3f4      	bcc.n	800bafc <__mcmp+0x18>
 800bb12:	e7fb      	b.n	800bb0c <__mcmp+0x28>
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb18:	e7f8      	b.n	800bb0c <__mcmp+0x28>
	...

0800bb1c <__mdiff>:
 800bb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	460d      	mov	r5, r1
 800bb22:	4607      	mov	r7, r0
 800bb24:	4611      	mov	r1, r2
 800bb26:	4628      	mov	r0, r5
 800bb28:	4614      	mov	r4, r2
 800bb2a:	f7ff ffdb 	bl	800bae4 <__mcmp>
 800bb2e:	1e06      	subs	r6, r0, #0
 800bb30:	d111      	bne.n	800bb56 <__mdiff+0x3a>
 800bb32:	4631      	mov	r1, r6
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff fd0d 	bl	800b554 <_Balloc>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <__mdiff+0x2e>
 800bb3e:	4b39      	ldr	r3, [pc, #228]	; (800bc24 <__mdiff+0x108>)
 800bb40:	f240 2132 	movw	r1, #562	; 0x232
 800bb44:	4838      	ldr	r0, [pc, #224]	; (800bc28 <__mdiff+0x10c>)
 800bb46:	f000 fb63 	bl	800c210 <__assert_func>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bb50:	4610      	mov	r0, r2
 800bb52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	bfa4      	itt	ge
 800bb58:	4623      	movge	r3, r4
 800bb5a:	462c      	movge	r4, r5
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	6861      	ldr	r1, [r4, #4]
 800bb60:	bfa6      	itte	ge
 800bb62:	461d      	movge	r5, r3
 800bb64:	2600      	movge	r6, #0
 800bb66:	2601      	movlt	r6, #1
 800bb68:	f7ff fcf4 	bl	800b554 <_Balloc>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	b918      	cbnz	r0, 800bb78 <__mdiff+0x5c>
 800bb70:	4b2c      	ldr	r3, [pc, #176]	; (800bc24 <__mdiff+0x108>)
 800bb72:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb76:	e7e5      	b.n	800bb44 <__mdiff+0x28>
 800bb78:	6927      	ldr	r7, [r4, #16]
 800bb7a:	60c6      	str	r6, [r0, #12]
 800bb7c:	692e      	ldr	r6, [r5, #16]
 800bb7e:	f104 0014 	add.w	r0, r4, #20
 800bb82:	f105 0914 	add.w	r9, r5, #20
 800bb86:	f102 0e14 	add.w	lr, r2, #20
 800bb8a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800bb8e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb92:	3410      	adds	r4, #16
 800bb94:	46f2      	mov	sl, lr
 800bb96:	2100      	movs	r1, #0
 800bb98:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb9c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bba0:	fa1f f883 	uxth.w	r8, r3
 800bba4:	fa11 f18b 	uxtah	r1, r1, fp
 800bba8:	0c1b      	lsrs	r3, r3, #16
 800bbaa:	eba1 0808 	sub.w	r8, r1, r8
 800bbae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbb6:	fa1f f888 	uxth.w	r8, r8
 800bbba:	1419      	asrs	r1, r3, #16
 800bbbc:	454e      	cmp	r6, r9
 800bbbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbc2:	f84a 3b04 	str.w	r3, [sl], #4
 800bbc6:	d8e7      	bhi.n	800bb98 <__mdiff+0x7c>
 800bbc8:	1b73      	subs	r3, r6, r5
 800bbca:	3b15      	subs	r3, #21
 800bbcc:	f023 0303 	bic.w	r3, r3, #3
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	3515      	adds	r5, #21
 800bbd4:	42ae      	cmp	r6, r5
 800bbd6:	bf38      	it	cc
 800bbd8:	2304      	movcc	r3, #4
 800bbda:	4418      	add	r0, r3
 800bbdc:	4473      	add	r3, lr
 800bbde:	469e      	mov	lr, r3
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	4566      	cmp	r6, ip
 800bbe4:	d30e      	bcc.n	800bc04 <__mdiff+0xe8>
 800bbe6:	f10c 0103 	add.w	r1, ip, #3
 800bbea:	1a09      	subs	r1, r1, r0
 800bbec:	f021 0103 	bic.w	r1, r1, #3
 800bbf0:	3803      	subs	r0, #3
 800bbf2:	4584      	cmp	ip, r0
 800bbf4:	bf38      	it	cc
 800bbf6:	2100      	movcc	r1, #0
 800bbf8:	4419      	add	r1, r3
 800bbfa:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bbfe:	b17b      	cbz	r3, 800bc20 <__mdiff+0x104>
 800bc00:	6117      	str	r7, [r2, #16]
 800bc02:	e7a5      	b.n	800bb50 <__mdiff+0x34>
 800bc04:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc08:	fa11 f488 	uxtah	r4, r1, r8
 800bc0c:	1425      	asrs	r5, r4, #16
 800bc0e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800bc12:	b2a4      	uxth	r4, r4
 800bc14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800bc18:	f84e 4b04 	str.w	r4, [lr], #4
 800bc1c:	1429      	asrs	r1, r5, #16
 800bc1e:	e7e0      	b.n	800bbe2 <__mdiff+0xc6>
 800bc20:	3f01      	subs	r7, #1
 800bc22:	e7ea      	b.n	800bbfa <__mdiff+0xde>
 800bc24:	0800ee58 	.word	0x0800ee58
 800bc28:	0800eee4 	.word	0x0800eee4

0800bc2c <__ulp>:
 800bc2c:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <__ulp+0x48>)
 800bc2e:	400b      	ands	r3, r1
 800bc30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dd02      	ble.n	800bc3e <__ulp+0x12>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4770      	bx	lr
 800bc3e:	425b      	negs	r3, r3
 800bc40:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc44:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc48:	f04f 0000 	mov.w	r0, #0
 800bc4c:	f04f 0100 	mov.w	r1, #0
 800bc50:	da04      	bge.n	800bc5c <__ulp+0x30>
 800bc52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc56:	fa43 f102 	asr.w	r1, r3, r2
 800bc5a:	4770      	bx	lr
 800bc5c:	f1a2 0314 	sub.w	r3, r2, #20
 800bc60:	2b1e      	cmp	r3, #30
 800bc62:	bfda      	itte	le
 800bc64:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bc68:	fa22 f303 	lsrle.w	r3, r2, r3
 800bc6c:	2301      	movgt	r3, #1
 800bc6e:	4618      	mov	r0, r3
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	7ff00000 	.word	0x7ff00000

0800bc78 <__b2d>:
 800bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	6907      	ldr	r7, [r0, #16]
 800bc7e:	f100 0914 	add.w	r9, r0, #20
 800bc82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bc86:	f1a7 0804 	sub.w	r8, r7, #4
 800bc8a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7ff fd52 	bl	800b738 <__hi0bits>
 800bc94:	f1c0 0320 	rsb	r3, r0, #32
 800bc98:	280a      	cmp	r0, #10
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	491f      	ldr	r1, [pc, #124]	; (800bd1c <__b2d+0xa4>)
 800bc9e:	dc17      	bgt.n	800bcd0 <__b2d+0x58>
 800bca0:	f1c0 0c0b 	rsb	ip, r0, #11
 800bca4:	45c1      	cmp	r9, r8
 800bca6:	fa26 f30c 	lsr.w	r3, r6, ip
 800bcaa:	bf38      	it	cc
 800bcac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bcb0:	ea43 0501 	orr.w	r5, r3, r1
 800bcb4:	bf28      	it	cs
 800bcb6:	2200      	movcs	r2, #0
 800bcb8:	f100 0315 	add.w	r3, r0, #21
 800bcbc:	fa06 f303 	lsl.w	r3, r6, r3
 800bcc0:	fa22 f20c 	lsr.w	r2, r2, ip
 800bcc4:	ea43 0402 	orr.w	r4, r3, r2
 800bcc8:	4620      	mov	r0, r4
 800bcca:	4629      	mov	r1, r5
 800bccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd0:	45c1      	cmp	r9, r8
 800bcd2:	bf3a      	itte	cc
 800bcd4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bcd8:	f1a7 0808 	subcc.w	r8, r7, #8
 800bcdc:	2200      	movcs	r2, #0
 800bcde:	f1b0 030b 	subs.w	r3, r0, #11
 800bce2:	d016      	beq.n	800bd12 <__b2d+0x9a>
 800bce4:	f1c3 0720 	rsb	r7, r3, #32
 800bce8:	fa22 f107 	lsr.w	r1, r2, r7
 800bcec:	45c8      	cmp	r8, r9
 800bcee:	fa06 f603 	lsl.w	r6, r6, r3
 800bcf2:	ea46 0601 	orr.w	r6, r6, r1
 800bcf6:	bf8c      	ite	hi
 800bcf8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bcfc:	2100      	movls	r1, #0
 800bcfe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bd02:	fa02 f003 	lsl.w	r0, r2, r3
 800bd06:	40f9      	lsrs	r1, r7
 800bd08:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd0c:	ea40 0401 	orr.w	r4, r0, r1
 800bd10:	e7da      	b.n	800bcc8 <__b2d+0x50>
 800bd12:	ea46 0501 	orr.w	r5, r6, r1
 800bd16:	4614      	mov	r4, r2
 800bd18:	e7d6      	b.n	800bcc8 <__b2d+0x50>
 800bd1a:	bf00      	nop
 800bd1c:	3ff00000 	.word	0x3ff00000

0800bd20 <__d2b>:
 800bd20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd24:	2101      	movs	r1, #1
 800bd26:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bd2a:	4690      	mov	r8, r2
 800bd2c:	461d      	mov	r5, r3
 800bd2e:	f7ff fc11 	bl	800b554 <_Balloc>
 800bd32:	4604      	mov	r4, r0
 800bd34:	b930      	cbnz	r0, 800bd44 <__d2b+0x24>
 800bd36:	4602      	mov	r2, r0
 800bd38:	4b25      	ldr	r3, [pc, #148]	; (800bdd0 <__d2b+0xb0>)
 800bd3a:	4826      	ldr	r0, [pc, #152]	; (800bdd4 <__d2b+0xb4>)
 800bd3c:	f240 310a 	movw	r1, #778	; 0x30a
 800bd40:	f000 fa66 	bl	800c210 <__assert_func>
 800bd44:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bd48:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bd4c:	bb2d      	cbnz	r5, 800bd9a <__d2b+0x7a>
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	f1b8 0300 	subs.w	r3, r8, #0
 800bd54:	d026      	beq.n	800bda4 <__d2b+0x84>
 800bd56:	4668      	mov	r0, sp
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	f7ff fd0d 	bl	800b778 <__lo0bits>
 800bd5e:	9900      	ldr	r1, [sp, #0]
 800bd60:	b1f0      	cbz	r0, 800bda0 <__d2b+0x80>
 800bd62:	9a01      	ldr	r2, [sp, #4]
 800bd64:	f1c0 0320 	rsb	r3, r0, #32
 800bd68:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	40c2      	lsrs	r2, r0
 800bd70:	6163      	str	r3, [r4, #20]
 800bd72:	9201      	str	r2, [sp, #4]
 800bd74:	9b01      	ldr	r3, [sp, #4]
 800bd76:	61a3      	str	r3, [r4, #24]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bf14      	ite	ne
 800bd7c:	2102      	movne	r1, #2
 800bd7e:	2101      	moveq	r1, #1
 800bd80:	6121      	str	r1, [r4, #16]
 800bd82:	b1c5      	cbz	r5, 800bdb6 <__d2b+0x96>
 800bd84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd88:	4405      	add	r5, r0
 800bd8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd8e:	603d      	str	r5, [r7, #0]
 800bd90:	6030      	str	r0, [r6, #0]
 800bd92:	4620      	mov	r0, r4
 800bd94:	b002      	add	sp, #8
 800bd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd9e:	e7d6      	b.n	800bd4e <__d2b+0x2e>
 800bda0:	6161      	str	r1, [r4, #20]
 800bda2:	e7e7      	b.n	800bd74 <__d2b+0x54>
 800bda4:	a801      	add	r0, sp, #4
 800bda6:	f7ff fce7 	bl	800b778 <__lo0bits>
 800bdaa:	9b01      	ldr	r3, [sp, #4]
 800bdac:	6163      	str	r3, [r4, #20]
 800bdae:	2101      	movs	r1, #1
 800bdb0:	6121      	str	r1, [r4, #16]
 800bdb2:	3020      	adds	r0, #32
 800bdb4:	e7e5      	b.n	800bd82 <__d2b+0x62>
 800bdb6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bdba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdbe:	6038      	str	r0, [r7, #0]
 800bdc0:	6918      	ldr	r0, [r3, #16]
 800bdc2:	f7ff fcb9 	bl	800b738 <__hi0bits>
 800bdc6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bdca:	6031      	str	r1, [r6, #0]
 800bdcc:	e7e1      	b.n	800bd92 <__d2b+0x72>
 800bdce:	bf00      	nop
 800bdd0:	0800ee58 	.word	0x0800ee58
 800bdd4:	0800eee4 	.word	0x0800eee4

0800bdd8 <__ratio>:
 800bdd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	4688      	mov	r8, r1
 800bdde:	4669      	mov	r1, sp
 800bde0:	4681      	mov	r9, r0
 800bde2:	f7ff ff49 	bl	800bc78 <__b2d>
 800bde6:	460f      	mov	r7, r1
 800bde8:	4604      	mov	r4, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	a901      	add	r1, sp, #4
 800bdf0:	f7ff ff42 	bl	800bc78 <__b2d>
 800bdf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bdfc:	eba3 0c02 	sub.w	ip, r3, r2
 800be00:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be04:	1a9b      	subs	r3, r3, r2
 800be06:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bfd5      	itete	le
 800be0e:	460a      	movle	r2, r1
 800be10:	462a      	movgt	r2, r5
 800be12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be1a:	468b      	mov	fp, r1
 800be1c:	bfd8      	it	le
 800be1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be22:	465b      	mov	r3, fp
 800be24:	4602      	mov	r2, r0
 800be26:	4639      	mov	r1, r7
 800be28:	4620      	mov	r0, r4
 800be2a:	f7f4 fdab 	bl	8000984 <__aeabi_ddiv>
 800be2e:	b003      	add	sp, #12
 800be30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be34 <__copybits>:
 800be34:	3901      	subs	r1, #1
 800be36:	b570      	push	{r4, r5, r6, lr}
 800be38:	1149      	asrs	r1, r1, #5
 800be3a:	6914      	ldr	r4, [r2, #16]
 800be3c:	3101      	adds	r1, #1
 800be3e:	f102 0314 	add.w	r3, r2, #20
 800be42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be4a:	1f05      	subs	r5, r0, #4
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	d30c      	bcc.n	800be6a <__copybits+0x36>
 800be50:	1aa3      	subs	r3, r4, r2
 800be52:	3b11      	subs	r3, #17
 800be54:	f023 0303 	bic.w	r3, r3, #3
 800be58:	3211      	adds	r2, #17
 800be5a:	42a2      	cmp	r2, r4
 800be5c:	bf88      	it	hi
 800be5e:	2300      	movhi	r3, #0
 800be60:	4418      	add	r0, r3
 800be62:	2300      	movs	r3, #0
 800be64:	4288      	cmp	r0, r1
 800be66:	d305      	bcc.n	800be74 <__copybits+0x40>
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800be6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800be72:	e7eb      	b.n	800be4c <__copybits+0x18>
 800be74:	f840 3b04 	str.w	r3, [r0], #4
 800be78:	e7f4      	b.n	800be64 <__copybits+0x30>

0800be7a <__any_on>:
 800be7a:	f100 0214 	add.w	r2, r0, #20
 800be7e:	6900      	ldr	r0, [r0, #16]
 800be80:	114b      	asrs	r3, r1, #5
 800be82:	4298      	cmp	r0, r3
 800be84:	b510      	push	{r4, lr}
 800be86:	db11      	blt.n	800beac <__any_on+0x32>
 800be88:	dd0a      	ble.n	800bea0 <__any_on+0x26>
 800be8a:	f011 011f 	ands.w	r1, r1, #31
 800be8e:	d007      	beq.n	800bea0 <__any_on+0x26>
 800be90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800be94:	fa24 f001 	lsr.w	r0, r4, r1
 800be98:	fa00 f101 	lsl.w	r1, r0, r1
 800be9c:	428c      	cmp	r4, r1
 800be9e:	d10b      	bne.n	800beb8 <__any_on+0x3e>
 800bea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d803      	bhi.n	800beb0 <__any_on+0x36>
 800bea8:	2000      	movs	r0, #0
 800beaa:	bd10      	pop	{r4, pc}
 800beac:	4603      	mov	r3, r0
 800beae:	e7f7      	b.n	800bea0 <__any_on+0x26>
 800beb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d0f5      	beq.n	800bea4 <__any_on+0x2a>
 800beb8:	2001      	movs	r0, #1
 800beba:	e7f6      	b.n	800beaa <__any_on+0x30>

0800bebc <_calloc_r>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	fba1 5402 	umull	r5, r4, r1, r2
 800bec2:	b934      	cbnz	r4, 800bed2 <_calloc_r+0x16>
 800bec4:	4629      	mov	r1, r5
 800bec6:	f7fc fa9d 	bl	8008404 <_malloc_r>
 800beca:	4606      	mov	r6, r0
 800becc:	b928      	cbnz	r0, 800beda <_calloc_r+0x1e>
 800bece:	4630      	mov	r0, r6
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	220c      	movs	r2, #12
 800bed4:	6002      	str	r2, [r0, #0]
 800bed6:	2600      	movs	r6, #0
 800bed8:	e7f9      	b.n	800bece <_calloc_r+0x12>
 800beda:	462a      	mov	r2, r5
 800bedc:	4621      	mov	r1, r4
 800bede:	f7fc fa1e 	bl	800831e <memset>
 800bee2:	e7f4      	b.n	800bece <_calloc_r+0x12>

0800bee4 <__ssputs_r>:
 800bee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee8:	688e      	ldr	r6, [r1, #8]
 800beea:	429e      	cmp	r6, r3
 800beec:	4682      	mov	sl, r0
 800beee:	460c      	mov	r4, r1
 800bef0:	4690      	mov	r8, r2
 800bef2:	461f      	mov	r7, r3
 800bef4:	d838      	bhi.n	800bf68 <__ssputs_r+0x84>
 800bef6:	898a      	ldrh	r2, [r1, #12]
 800bef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800befc:	d032      	beq.n	800bf64 <__ssputs_r+0x80>
 800befe:	6825      	ldr	r5, [r4, #0]
 800bf00:	6909      	ldr	r1, [r1, #16]
 800bf02:	eba5 0901 	sub.w	r9, r5, r1
 800bf06:	6965      	ldr	r5, [r4, #20]
 800bf08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf10:	3301      	adds	r3, #1
 800bf12:	444b      	add	r3, r9
 800bf14:	106d      	asrs	r5, r5, #1
 800bf16:	429d      	cmp	r5, r3
 800bf18:	bf38      	it	cc
 800bf1a:	461d      	movcc	r5, r3
 800bf1c:	0553      	lsls	r3, r2, #21
 800bf1e:	d531      	bpl.n	800bf84 <__ssputs_r+0xa0>
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7fc fa6f 	bl	8008404 <_malloc_r>
 800bf26:	4606      	mov	r6, r0
 800bf28:	b950      	cbnz	r0, 800bf40 <__ssputs_r+0x5c>
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	f8ca 3000 	str.w	r3, [sl]
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf40:	6921      	ldr	r1, [r4, #16]
 800bf42:	464a      	mov	r2, r9
 800bf44:	f7ff faec 	bl	800b520 <memcpy>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	6126      	str	r6, [r4, #16]
 800bf56:	6165      	str	r5, [r4, #20]
 800bf58:	444e      	add	r6, r9
 800bf5a:	eba5 0509 	sub.w	r5, r5, r9
 800bf5e:	6026      	str	r6, [r4, #0]
 800bf60:	60a5      	str	r5, [r4, #8]
 800bf62:	463e      	mov	r6, r7
 800bf64:	42be      	cmp	r6, r7
 800bf66:	d900      	bls.n	800bf6a <__ssputs_r+0x86>
 800bf68:	463e      	mov	r6, r7
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	4641      	mov	r1, r8
 800bf70:	f000 f97e 	bl	800c270 <memmove>
 800bf74:	68a3      	ldr	r3, [r4, #8]
 800bf76:	1b9b      	subs	r3, r3, r6
 800bf78:	60a3      	str	r3, [r4, #8]
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	4433      	add	r3, r6
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	2000      	movs	r0, #0
 800bf82:	e7db      	b.n	800bf3c <__ssputs_r+0x58>
 800bf84:	462a      	mov	r2, r5
 800bf86:	f000 f98d 	bl	800c2a4 <_realloc_r>
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d1e1      	bne.n	800bf54 <__ssputs_r+0x70>
 800bf90:	6921      	ldr	r1, [r4, #16]
 800bf92:	4650      	mov	r0, sl
 800bf94:	f7fc f9cc 	bl	8008330 <_free_r>
 800bf98:	e7c7      	b.n	800bf2a <__ssputs_r+0x46>
	...

0800bf9c <_svfiprintf_r>:
 800bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	4698      	mov	r8, r3
 800bfa2:	898b      	ldrh	r3, [r1, #12]
 800bfa4:	061b      	lsls	r3, r3, #24
 800bfa6:	b09d      	sub	sp, #116	; 0x74
 800bfa8:	4607      	mov	r7, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	4614      	mov	r4, r2
 800bfae:	d50e      	bpl.n	800bfce <_svfiprintf_r+0x32>
 800bfb0:	690b      	ldr	r3, [r1, #16]
 800bfb2:	b963      	cbnz	r3, 800bfce <_svfiprintf_r+0x32>
 800bfb4:	2140      	movs	r1, #64	; 0x40
 800bfb6:	f7fc fa25 	bl	8008404 <_malloc_r>
 800bfba:	6028      	str	r0, [r5, #0]
 800bfbc:	6128      	str	r0, [r5, #16]
 800bfbe:	b920      	cbnz	r0, 800bfca <_svfiprintf_r+0x2e>
 800bfc0:	230c      	movs	r3, #12
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfc8:	e0d1      	b.n	800c16e <_svfiprintf_r+0x1d2>
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	616b      	str	r3, [r5, #20]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd2:	2320      	movs	r3, #32
 800bfd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfdc:	2330      	movs	r3, #48	; 0x30
 800bfde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c188 <_svfiprintf_r+0x1ec>
 800bfe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfe6:	f04f 0901 	mov.w	r9, #1
 800bfea:	4623      	mov	r3, r4
 800bfec:	469a      	mov	sl, r3
 800bfee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff2:	b10a      	cbz	r2, 800bff8 <_svfiprintf_r+0x5c>
 800bff4:	2a25      	cmp	r2, #37	; 0x25
 800bff6:	d1f9      	bne.n	800bfec <_svfiprintf_r+0x50>
 800bff8:	ebba 0b04 	subs.w	fp, sl, r4
 800bffc:	d00b      	beq.n	800c016 <_svfiprintf_r+0x7a>
 800bffe:	465b      	mov	r3, fp
 800c000:	4622      	mov	r2, r4
 800c002:	4629      	mov	r1, r5
 800c004:	4638      	mov	r0, r7
 800c006:	f7ff ff6d 	bl	800bee4 <__ssputs_r>
 800c00a:	3001      	adds	r0, #1
 800c00c:	f000 80aa 	beq.w	800c164 <_svfiprintf_r+0x1c8>
 800c010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c012:	445a      	add	r2, fp
 800c014:	9209      	str	r2, [sp, #36]	; 0x24
 800c016:	f89a 3000 	ldrb.w	r3, [sl]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80a2 	beq.w	800c164 <_svfiprintf_r+0x1c8>
 800c020:	2300      	movs	r3, #0
 800c022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c02a:	f10a 0a01 	add.w	sl, sl, #1
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	9307      	str	r3, [sp, #28]
 800c032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c036:	931a      	str	r3, [sp, #104]	; 0x68
 800c038:	4654      	mov	r4, sl
 800c03a:	2205      	movs	r2, #5
 800c03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c040:	4851      	ldr	r0, [pc, #324]	; (800c188 <_svfiprintf_r+0x1ec>)
 800c042:	f7f4 f8b5 	bl	80001b0 <memchr>
 800c046:	9a04      	ldr	r2, [sp, #16]
 800c048:	b9d8      	cbnz	r0, 800c082 <_svfiprintf_r+0xe6>
 800c04a:	06d0      	lsls	r0, r2, #27
 800c04c:	bf44      	itt	mi
 800c04e:	2320      	movmi	r3, #32
 800c050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c054:	0711      	lsls	r1, r2, #28
 800c056:	bf44      	itt	mi
 800c058:	232b      	movmi	r3, #43	; 0x2b
 800c05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c05e:	f89a 3000 	ldrb.w	r3, [sl]
 800c062:	2b2a      	cmp	r3, #42	; 0x2a
 800c064:	d015      	beq.n	800c092 <_svfiprintf_r+0xf6>
 800c066:	9a07      	ldr	r2, [sp, #28]
 800c068:	4654      	mov	r4, sl
 800c06a:	2000      	movs	r0, #0
 800c06c:	f04f 0c0a 	mov.w	ip, #10
 800c070:	4621      	mov	r1, r4
 800c072:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c076:	3b30      	subs	r3, #48	; 0x30
 800c078:	2b09      	cmp	r3, #9
 800c07a:	d94e      	bls.n	800c11a <_svfiprintf_r+0x17e>
 800c07c:	b1b0      	cbz	r0, 800c0ac <_svfiprintf_r+0x110>
 800c07e:	9207      	str	r2, [sp, #28]
 800c080:	e014      	b.n	800c0ac <_svfiprintf_r+0x110>
 800c082:	eba0 0308 	sub.w	r3, r0, r8
 800c086:	fa09 f303 	lsl.w	r3, r9, r3
 800c08a:	4313      	orrs	r3, r2
 800c08c:	9304      	str	r3, [sp, #16]
 800c08e:	46a2      	mov	sl, r4
 800c090:	e7d2      	b.n	800c038 <_svfiprintf_r+0x9c>
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	1d19      	adds	r1, r3, #4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	9103      	str	r1, [sp, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	bfbb      	ittet	lt
 800c09e:	425b      	neglt	r3, r3
 800c0a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c0a4:	9307      	strge	r3, [sp, #28]
 800c0a6:	9307      	strlt	r3, [sp, #28]
 800c0a8:	bfb8      	it	lt
 800c0aa:	9204      	strlt	r2, [sp, #16]
 800c0ac:	7823      	ldrb	r3, [r4, #0]
 800c0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c0b0:	d10c      	bne.n	800c0cc <_svfiprintf_r+0x130>
 800c0b2:	7863      	ldrb	r3, [r4, #1]
 800c0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0b6:	d135      	bne.n	800c124 <_svfiprintf_r+0x188>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	1d1a      	adds	r2, r3, #4
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	9203      	str	r2, [sp, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bfb8      	it	lt
 800c0c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0c8:	3402      	adds	r4, #2
 800c0ca:	9305      	str	r3, [sp, #20]
 800c0cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c18c <_svfiprintf_r+0x1f0>
 800c0d0:	7821      	ldrb	r1, [r4, #0]
 800c0d2:	2203      	movs	r2, #3
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	f7f4 f86b 	bl	80001b0 <memchr>
 800c0da:	b140      	cbz	r0, 800c0ee <_svfiprintf_r+0x152>
 800c0dc:	2340      	movs	r3, #64	; 0x40
 800c0de:	eba0 000a 	sub.w	r0, r0, sl
 800c0e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	4303      	orrs	r3, r0
 800c0ea:	3401      	adds	r4, #1
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f2:	4827      	ldr	r0, [pc, #156]	; (800c190 <_svfiprintf_r+0x1f4>)
 800c0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0f8:	2206      	movs	r2, #6
 800c0fa:	f7f4 f859 	bl	80001b0 <memchr>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d038      	beq.n	800c174 <_svfiprintf_r+0x1d8>
 800c102:	4b24      	ldr	r3, [pc, #144]	; (800c194 <_svfiprintf_r+0x1f8>)
 800c104:	bb1b      	cbnz	r3, 800c14e <_svfiprintf_r+0x1b2>
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	3307      	adds	r3, #7
 800c10a:	f023 0307 	bic.w	r3, r3, #7
 800c10e:	3308      	adds	r3, #8
 800c110:	9303      	str	r3, [sp, #12]
 800c112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c114:	4433      	add	r3, r6
 800c116:	9309      	str	r3, [sp, #36]	; 0x24
 800c118:	e767      	b.n	800bfea <_svfiprintf_r+0x4e>
 800c11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c11e:	460c      	mov	r4, r1
 800c120:	2001      	movs	r0, #1
 800c122:	e7a5      	b.n	800c070 <_svfiprintf_r+0xd4>
 800c124:	2300      	movs	r3, #0
 800c126:	3401      	adds	r4, #1
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	4619      	mov	r1, r3
 800c12c:	f04f 0c0a 	mov.w	ip, #10
 800c130:	4620      	mov	r0, r4
 800c132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c136:	3a30      	subs	r2, #48	; 0x30
 800c138:	2a09      	cmp	r2, #9
 800c13a:	d903      	bls.n	800c144 <_svfiprintf_r+0x1a8>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d0c5      	beq.n	800c0cc <_svfiprintf_r+0x130>
 800c140:	9105      	str	r1, [sp, #20]
 800c142:	e7c3      	b.n	800c0cc <_svfiprintf_r+0x130>
 800c144:	fb0c 2101 	mla	r1, ip, r1, r2
 800c148:	4604      	mov	r4, r0
 800c14a:	2301      	movs	r3, #1
 800c14c:	e7f0      	b.n	800c130 <_svfiprintf_r+0x194>
 800c14e:	ab03      	add	r3, sp, #12
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	462a      	mov	r2, r5
 800c154:	4b10      	ldr	r3, [pc, #64]	; (800c198 <_svfiprintf_r+0x1fc>)
 800c156:	a904      	add	r1, sp, #16
 800c158:	4638      	mov	r0, r7
 800c15a:	f7fc fa65 	bl	8008628 <_printf_float>
 800c15e:	1c42      	adds	r2, r0, #1
 800c160:	4606      	mov	r6, r0
 800c162:	d1d6      	bne.n	800c112 <_svfiprintf_r+0x176>
 800c164:	89ab      	ldrh	r3, [r5, #12]
 800c166:	065b      	lsls	r3, r3, #25
 800c168:	f53f af2c 	bmi.w	800bfc4 <_svfiprintf_r+0x28>
 800c16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c16e:	b01d      	add	sp, #116	; 0x74
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	ab03      	add	r3, sp, #12
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	462a      	mov	r2, r5
 800c17a:	4b07      	ldr	r3, [pc, #28]	; (800c198 <_svfiprintf_r+0x1fc>)
 800c17c:	a904      	add	r1, sp, #16
 800c17e:	4638      	mov	r0, r7
 800c180:	f7fc fcea 	bl	8008b58 <_printf_i>
 800c184:	e7eb      	b.n	800c15e <_svfiprintf_r+0x1c2>
 800c186:	bf00      	nop
 800c188:	0800f03c 	.word	0x0800f03c
 800c18c:	0800f042 	.word	0x0800f042
 800c190:	0800f046 	.word	0x0800f046
 800c194:	08008629 	.word	0x08008629
 800c198:	0800bee5 	.word	0x0800bee5

0800c19c <_read_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d07      	ldr	r5, [pc, #28]	; (800c1bc <_read_r+0x20>)
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	602a      	str	r2, [r5, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f7f5 fc39 	bl	8001a22 <_read>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_read_r+0x1e>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_read_r+0x1e>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	200011c0 	.word	0x200011c0

0800c1c0 <nan>:
 800c1c0:	4901      	ldr	r1, [pc, #4]	; (800c1c8 <nan+0x8>)
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	7ff80000 	.word	0x7ff80000

0800c1cc <strncmp>:
 800c1cc:	b510      	push	{r4, lr}
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	b172      	cbz	r2, 800c1f0 <strncmp+0x24>
 800c1d2:	3901      	subs	r1, #1
 800c1d4:	1884      	adds	r4, r0, r2
 800c1d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1de:	4290      	cmp	r0, r2
 800c1e0:	d101      	bne.n	800c1e6 <strncmp+0x1a>
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	d101      	bne.n	800c1ea <strncmp+0x1e>
 800c1e6:	1a80      	subs	r0, r0, r2
 800c1e8:	bd10      	pop	{r4, pc}
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1f3      	bne.n	800c1d6 <strncmp+0xa>
 800c1ee:	e7fa      	b.n	800c1e6 <strncmp+0x1a>
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	e7f9      	b.n	800c1e8 <strncmp+0x1c>

0800c1f4 <__ascii_wctomb>:
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	b141      	cbz	r1, 800c20c <__ascii_wctomb+0x18>
 800c1fa:	2aff      	cmp	r2, #255	; 0xff
 800c1fc:	d904      	bls.n	800c208 <__ascii_wctomb+0x14>
 800c1fe:	228a      	movs	r2, #138	; 0x8a
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c206:	4770      	bx	lr
 800c208:	700a      	strb	r2, [r1, #0]
 800c20a:	2001      	movs	r0, #1
 800c20c:	4770      	bx	lr
	...

0800c210 <__assert_func>:
 800c210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c212:	4614      	mov	r4, r2
 800c214:	461a      	mov	r2, r3
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <__assert_func+0x2c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4605      	mov	r5, r0
 800c21c:	68d8      	ldr	r0, [r3, #12]
 800c21e:	b14c      	cbz	r4, 800c234 <__assert_func+0x24>
 800c220:	4b07      	ldr	r3, [pc, #28]	; (800c240 <__assert_func+0x30>)
 800c222:	9100      	str	r1, [sp, #0]
 800c224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c228:	4906      	ldr	r1, [pc, #24]	; (800c244 <__assert_func+0x34>)
 800c22a:	462b      	mov	r3, r5
 800c22c:	f000 f80e 	bl	800c24c <fiprintf>
 800c230:	f000 fa7e 	bl	800c730 <abort>
 800c234:	4b04      	ldr	r3, [pc, #16]	; (800c248 <__assert_func+0x38>)
 800c236:	461c      	mov	r4, r3
 800c238:	e7f3      	b.n	800c222 <__assert_func+0x12>
 800c23a:	bf00      	nop
 800c23c:	20000010 	.word	0x20000010
 800c240:	0800f04d 	.word	0x0800f04d
 800c244:	0800f05a 	.word	0x0800f05a
 800c248:	0800f088 	.word	0x0800f088

0800c24c <fiprintf>:
 800c24c:	b40e      	push	{r1, r2, r3}
 800c24e:	b503      	push	{r0, r1, lr}
 800c250:	4601      	mov	r1, r0
 800c252:	ab03      	add	r3, sp, #12
 800c254:	4805      	ldr	r0, [pc, #20]	; (800c26c <fiprintf+0x20>)
 800c256:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25a:	6800      	ldr	r0, [r0, #0]
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	f000 f877 	bl	800c350 <_vfiprintf_r>
 800c262:	b002      	add	sp, #8
 800c264:	f85d eb04 	ldr.w	lr, [sp], #4
 800c268:	b003      	add	sp, #12
 800c26a:	4770      	bx	lr
 800c26c:	20000010 	.word	0x20000010

0800c270 <memmove>:
 800c270:	4288      	cmp	r0, r1
 800c272:	b510      	push	{r4, lr}
 800c274:	eb01 0402 	add.w	r4, r1, r2
 800c278:	d902      	bls.n	800c280 <memmove+0x10>
 800c27a:	4284      	cmp	r4, r0
 800c27c:	4623      	mov	r3, r4
 800c27e:	d807      	bhi.n	800c290 <memmove+0x20>
 800c280:	1e43      	subs	r3, r0, #1
 800c282:	42a1      	cmp	r1, r4
 800c284:	d008      	beq.n	800c298 <memmove+0x28>
 800c286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c28a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c28e:	e7f8      	b.n	800c282 <memmove+0x12>
 800c290:	4402      	add	r2, r0
 800c292:	4601      	mov	r1, r0
 800c294:	428a      	cmp	r2, r1
 800c296:	d100      	bne.n	800c29a <memmove+0x2a>
 800c298:	bd10      	pop	{r4, pc}
 800c29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2a2:	e7f7      	b.n	800c294 <memmove+0x24>

0800c2a4 <_realloc_r>:
 800c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	4614      	mov	r4, r2
 800c2ac:	460e      	mov	r6, r1
 800c2ae:	b921      	cbnz	r1, 800c2ba <_realloc_r+0x16>
 800c2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	f7fc b8a5 	b.w	8008404 <_malloc_r>
 800c2ba:	b92a      	cbnz	r2, 800c2c8 <_realloc_r+0x24>
 800c2bc:	f7fc f838 	bl	8008330 <_free_r>
 800c2c0:	4625      	mov	r5, r4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	f000 fa9e 	bl	800c808 <_malloc_usable_size_r>
 800c2cc:	4284      	cmp	r4, r0
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	d802      	bhi.n	800c2d8 <_realloc_r+0x34>
 800c2d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2d6:	d812      	bhi.n	800c2fe <_realloc_r+0x5a>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4640      	mov	r0, r8
 800c2dc:	f7fc f892 	bl	8008404 <_malloc_r>
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d0ed      	beq.n	800c2c2 <_realloc_r+0x1e>
 800c2e6:	42bc      	cmp	r4, r7
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	bf28      	it	cs
 800c2ee:	463a      	movcs	r2, r7
 800c2f0:	f7ff f916 	bl	800b520 <memcpy>
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f7fc f81a 	bl	8008330 <_free_r>
 800c2fc:	e7e1      	b.n	800c2c2 <_realloc_r+0x1e>
 800c2fe:	4635      	mov	r5, r6
 800c300:	e7df      	b.n	800c2c2 <_realloc_r+0x1e>

0800c302 <__sfputc_r>:
 800c302:	6893      	ldr	r3, [r2, #8]
 800c304:	3b01      	subs	r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	b410      	push	{r4}
 800c30a:	6093      	str	r3, [r2, #8]
 800c30c:	da07      	bge.n	800c31e <__sfputc_r+0x1c>
 800c30e:	6994      	ldr	r4, [r2, #24]
 800c310:	42a3      	cmp	r3, r4
 800c312:	db01      	blt.n	800c318 <__sfputc_r+0x16>
 800c314:	290a      	cmp	r1, #10
 800c316:	d102      	bne.n	800c31e <__sfputc_r+0x1c>
 800c318:	bc10      	pop	{r4}
 800c31a:	f000 b949 	b.w	800c5b0 <__swbuf_r>
 800c31e:	6813      	ldr	r3, [r2, #0]
 800c320:	1c58      	adds	r0, r3, #1
 800c322:	6010      	str	r0, [r2, #0]
 800c324:	7019      	strb	r1, [r3, #0]
 800c326:	4608      	mov	r0, r1
 800c328:	bc10      	pop	{r4}
 800c32a:	4770      	bx	lr

0800c32c <__sfputs_r>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	4606      	mov	r6, r0
 800c330:	460f      	mov	r7, r1
 800c332:	4614      	mov	r4, r2
 800c334:	18d5      	adds	r5, r2, r3
 800c336:	42ac      	cmp	r4, r5
 800c338:	d101      	bne.n	800c33e <__sfputs_r+0x12>
 800c33a:	2000      	movs	r0, #0
 800c33c:	e007      	b.n	800c34e <__sfputs_r+0x22>
 800c33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c342:	463a      	mov	r2, r7
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff ffdc 	bl	800c302 <__sfputc_r>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	d1f3      	bne.n	800c336 <__sfputs_r+0xa>
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c350 <_vfiprintf_r>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	460d      	mov	r5, r1
 800c356:	b09d      	sub	sp, #116	; 0x74
 800c358:	4614      	mov	r4, r2
 800c35a:	4698      	mov	r8, r3
 800c35c:	4606      	mov	r6, r0
 800c35e:	b118      	cbz	r0, 800c368 <_vfiprintf_r+0x18>
 800c360:	6983      	ldr	r3, [r0, #24]
 800c362:	b90b      	cbnz	r3, 800c368 <_vfiprintf_r+0x18>
 800c364:	f7fb ff16 	bl	8008194 <__sinit>
 800c368:	4b89      	ldr	r3, [pc, #548]	; (800c590 <_vfiprintf_r+0x240>)
 800c36a:	429d      	cmp	r5, r3
 800c36c:	d11b      	bne.n	800c3a6 <_vfiprintf_r+0x56>
 800c36e:	6875      	ldr	r5, [r6, #4]
 800c370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c372:	07d9      	lsls	r1, r3, #31
 800c374:	d405      	bmi.n	800c382 <_vfiprintf_r+0x32>
 800c376:	89ab      	ldrh	r3, [r5, #12]
 800c378:	059a      	lsls	r2, r3, #22
 800c37a:	d402      	bmi.n	800c382 <_vfiprintf_r+0x32>
 800c37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c37e:	f7fb ffcc 	bl	800831a <__retarget_lock_acquire_recursive>
 800c382:	89ab      	ldrh	r3, [r5, #12]
 800c384:	071b      	lsls	r3, r3, #28
 800c386:	d501      	bpl.n	800c38c <_vfiprintf_r+0x3c>
 800c388:	692b      	ldr	r3, [r5, #16]
 800c38a:	b9eb      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x78>
 800c38c:	4629      	mov	r1, r5
 800c38e:	4630      	mov	r0, r6
 800c390:	f000 f960 	bl	800c654 <__swsetup_r>
 800c394:	b1c0      	cbz	r0, 800c3c8 <_vfiprintf_r+0x78>
 800c396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c398:	07dc      	lsls	r4, r3, #31
 800c39a:	d50e      	bpl.n	800c3ba <_vfiprintf_r+0x6a>
 800c39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3a0:	b01d      	add	sp, #116	; 0x74
 800c3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a6:	4b7b      	ldr	r3, [pc, #492]	; (800c594 <_vfiprintf_r+0x244>)
 800c3a8:	429d      	cmp	r5, r3
 800c3aa:	d101      	bne.n	800c3b0 <_vfiprintf_r+0x60>
 800c3ac:	68b5      	ldr	r5, [r6, #8]
 800c3ae:	e7df      	b.n	800c370 <_vfiprintf_r+0x20>
 800c3b0:	4b79      	ldr	r3, [pc, #484]	; (800c598 <_vfiprintf_r+0x248>)
 800c3b2:	429d      	cmp	r5, r3
 800c3b4:	bf08      	it	eq
 800c3b6:	68f5      	ldreq	r5, [r6, #12]
 800c3b8:	e7da      	b.n	800c370 <_vfiprintf_r+0x20>
 800c3ba:	89ab      	ldrh	r3, [r5, #12]
 800c3bc:	0598      	lsls	r0, r3, #22
 800c3be:	d4ed      	bmi.n	800c39c <_vfiprintf_r+0x4c>
 800c3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3c2:	f7fb ffab 	bl	800831c <__retarget_lock_release_recursive>
 800c3c6:	e7e9      	b.n	800c39c <_vfiprintf_r+0x4c>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3d6:	2330      	movs	r3, #48	; 0x30
 800c3d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c59c <_vfiprintf_r+0x24c>
 800c3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3e0:	f04f 0901 	mov.w	r9, #1
 800c3e4:	4623      	mov	r3, r4
 800c3e6:	469a      	mov	sl, r3
 800c3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ec:	b10a      	cbz	r2, 800c3f2 <_vfiprintf_r+0xa2>
 800c3ee:	2a25      	cmp	r2, #37	; 0x25
 800c3f0:	d1f9      	bne.n	800c3e6 <_vfiprintf_r+0x96>
 800c3f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3f6:	d00b      	beq.n	800c410 <_vfiprintf_r+0xc0>
 800c3f8:	465b      	mov	r3, fp
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4630      	mov	r0, r6
 800c400:	f7ff ff94 	bl	800c32c <__sfputs_r>
 800c404:	3001      	adds	r0, #1
 800c406:	f000 80aa 	beq.w	800c55e <_vfiprintf_r+0x20e>
 800c40a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c40c:	445a      	add	r2, fp
 800c40e:	9209      	str	r2, [sp, #36]	; 0x24
 800c410:	f89a 3000 	ldrb.w	r3, [sl]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80a2 	beq.w	800c55e <_vfiprintf_r+0x20e>
 800c41a:	2300      	movs	r3, #0
 800c41c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c424:	f10a 0a01 	add.w	sl, sl, #1
 800c428:	9304      	str	r3, [sp, #16]
 800c42a:	9307      	str	r3, [sp, #28]
 800c42c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c430:	931a      	str	r3, [sp, #104]	; 0x68
 800c432:	4654      	mov	r4, sl
 800c434:	2205      	movs	r2, #5
 800c436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43a:	4858      	ldr	r0, [pc, #352]	; (800c59c <_vfiprintf_r+0x24c>)
 800c43c:	f7f3 feb8 	bl	80001b0 <memchr>
 800c440:	9a04      	ldr	r2, [sp, #16]
 800c442:	b9d8      	cbnz	r0, 800c47c <_vfiprintf_r+0x12c>
 800c444:	06d1      	lsls	r1, r2, #27
 800c446:	bf44      	itt	mi
 800c448:	2320      	movmi	r3, #32
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44e:	0713      	lsls	r3, r2, #28
 800c450:	bf44      	itt	mi
 800c452:	232b      	movmi	r3, #43	; 0x2b
 800c454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c458:	f89a 3000 	ldrb.w	r3, [sl]
 800c45c:	2b2a      	cmp	r3, #42	; 0x2a
 800c45e:	d015      	beq.n	800c48c <_vfiprintf_r+0x13c>
 800c460:	9a07      	ldr	r2, [sp, #28]
 800c462:	4654      	mov	r4, sl
 800c464:	2000      	movs	r0, #0
 800c466:	f04f 0c0a 	mov.w	ip, #10
 800c46a:	4621      	mov	r1, r4
 800c46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c470:	3b30      	subs	r3, #48	; 0x30
 800c472:	2b09      	cmp	r3, #9
 800c474:	d94e      	bls.n	800c514 <_vfiprintf_r+0x1c4>
 800c476:	b1b0      	cbz	r0, 800c4a6 <_vfiprintf_r+0x156>
 800c478:	9207      	str	r2, [sp, #28]
 800c47a:	e014      	b.n	800c4a6 <_vfiprintf_r+0x156>
 800c47c:	eba0 0308 	sub.w	r3, r0, r8
 800c480:	fa09 f303 	lsl.w	r3, r9, r3
 800c484:	4313      	orrs	r3, r2
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	46a2      	mov	sl, r4
 800c48a:	e7d2      	b.n	800c432 <_vfiprintf_r+0xe2>
 800c48c:	9b03      	ldr	r3, [sp, #12]
 800c48e:	1d19      	adds	r1, r3, #4
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	9103      	str	r1, [sp, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	bfbb      	ittet	lt
 800c498:	425b      	neglt	r3, r3
 800c49a:	f042 0202 	orrlt.w	r2, r2, #2
 800c49e:	9307      	strge	r3, [sp, #28]
 800c4a0:	9307      	strlt	r3, [sp, #28]
 800c4a2:	bfb8      	it	lt
 800c4a4:	9204      	strlt	r2, [sp, #16]
 800c4a6:	7823      	ldrb	r3, [r4, #0]
 800c4a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c4aa:	d10c      	bne.n	800c4c6 <_vfiprintf_r+0x176>
 800c4ac:	7863      	ldrb	r3, [r4, #1]
 800c4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b0:	d135      	bne.n	800c51e <_vfiprintf_r+0x1ce>
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	9203      	str	r2, [sp, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	bfb8      	it	lt
 800c4be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c4c2:	3402      	adds	r4, #2
 800c4c4:	9305      	str	r3, [sp, #20]
 800c4c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c5a0 <_vfiprintf_r+0x250>
 800c4ca:	7821      	ldrb	r1, [r4, #0]
 800c4cc:	2203      	movs	r2, #3
 800c4ce:	4650      	mov	r0, sl
 800c4d0:	f7f3 fe6e 	bl	80001b0 <memchr>
 800c4d4:	b140      	cbz	r0, 800c4e8 <_vfiprintf_r+0x198>
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	eba0 000a 	sub.w	r0, r0, sl
 800c4dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	4303      	orrs	r3, r0
 800c4e4:	3401      	adds	r4, #1
 800c4e6:	9304      	str	r3, [sp, #16]
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	482d      	ldr	r0, [pc, #180]	; (800c5a4 <_vfiprintf_r+0x254>)
 800c4ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4f2:	2206      	movs	r2, #6
 800c4f4:	f7f3 fe5c 	bl	80001b0 <memchr>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d03f      	beq.n	800c57c <_vfiprintf_r+0x22c>
 800c4fc:	4b2a      	ldr	r3, [pc, #168]	; (800c5a8 <_vfiprintf_r+0x258>)
 800c4fe:	bb1b      	cbnz	r3, 800c548 <_vfiprintf_r+0x1f8>
 800c500:	9b03      	ldr	r3, [sp, #12]
 800c502:	3307      	adds	r3, #7
 800c504:	f023 0307 	bic.w	r3, r3, #7
 800c508:	3308      	adds	r3, #8
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50e:	443b      	add	r3, r7
 800c510:	9309      	str	r3, [sp, #36]	; 0x24
 800c512:	e767      	b.n	800c3e4 <_vfiprintf_r+0x94>
 800c514:	fb0c 3202 	mla	r2, ip, r2, r3
 800c518:	460c      	mov	r4, r1
 800c51a:	2001      	movs	r0, #1
 800c51c:	e7a5      	b.n	800c46a <_vfiprintf_r+0x11a>
 800c51e:	2300      	movs	r3, #0
 800c520:	3401      	adds	r4, #1
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	4619      	mov	r1, r3
 800c526:	f04f 0c0a 	mov.w	ip, #10
 800c52a:	4620      	mov	r0, r4
 800c52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c530:	3a30      	subs	r2, #48	; 0x30
 800c532:	2a09      	cmp	r2, #9
 800c534:	d903      	bls.n	800c53e <_vfiprintf_r+0x1ee>
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0c5      	beq.n	800c4c6 <_vfiprintf_r+0x176>
 800c53a:	9105      	str	r1, [sp, #20]
 800c53c:	e7c3      	b.n	800c4c6 <_vfiprintf_r+0x176>
 800c53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c542:	4604      	mov	r4, r0
 800c544:	2301      	movs	r3, #1
 800c546:	e7f0      	b.n	800c52a <_vfiprintf_r+0x1da>
 800c548:	ab03      	add	r3, sp, #12
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	462a      	mov	r2, r5
 800c54e:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <_vfiprintf_r+0x25c>)
 800c550:	a904      	add	r1, sp, #16
 800c552:	4630      	mov	r0, r6
 800c554:	f7fc f868 	bl	8008628 <_printf_float>
 800c558:	4607      	mov	r7, r0
 800c55a:	1c78      	adds	r0, r7, #1
 800c55c:	d1d6      	bne.n	800c50c <_vfiprintf_r+0x1bc>
 800c55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c560:	07d9      	lsls	r1, r3, #31
 800c562:	d405      	bmi.n	800c570 <_vfiprintf_r+0x220>
 800c564:	89ab      	ldrh	r3, [r5, #12]
 800c566:	059a      	lsls	r2, r3, #22
 800c568:	d402      	bmi.n	800c570 <_vfiprintf_r+0x220>
 800c56a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c56c:	f7fb fed6 	bl	800831c <__retarget_lock_release_recursive>
 800c570:	89ab      	ldrh	r3, [r5, #12]
 800c572:	065b      	lsls	r3, r3, #25
 800c574:	f53f af12 	bmi.w	800c39c <_vfiprintf_r+0x4c>
 800c578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c57a:	e711      	b.n	800c3a0 <_vfiprintf_r+0x50>
 800c57c:	ab03      	add	r3, sp, #12
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	462a      	mov	r2, r5
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <_vfiprintf_r+0x25c>)
 800c584:	a904      	add	r1, sp, #16
 800c586:	4630      	mov	r0, r6
 800c588:	f7fc fae6 	bl	8008b58 <_printf_i>
 800c58c:	e7e4      	b.n	800c558 <_vfiprintf_r+0x208>
 800c58e:	bf00      	nop
 800c590:	0800ec08 	.word	0x0800ec08
 800c594:	0800ec28 	.word	0x0800ec28
 800c598:	0800ebe8 	.word	0x0800ebe8
 800c59c:	0800f03c 	.word	0x0800f03c
 800c5a0:	0800f042 	.word	0x0800f042
 800c5a4:	0800f046 	.word	0x0800f046
 800c5a8:	08008629 	.word	0x08008629
 800c5ac:	0800c32d 	.word	0x0800c32d

0800c5b0 <__swbuf_r>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	460e      	mov	r6, r1
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	b118      	cbz	r0, 800c5c2 <__swbuf_r+0x12>
 800c5ba:	6983      	ldr	r3, [r0, #24]
 800c5bc:	b90b      	cbnz	r3, 800c5c2 <__swbuf_r+0x12>
 800c5be:	f7fb fde9 	bl	8008194 <__sinit>
 800c5c2:	4b21      	ldr	r3, [pc, #132]	; (800c648 <__swbuf_r+0x98>)
 800c5c4:	429c      	cmp	r4, r3
 800c5c6:	d12b      	bne.n	800c620 <__swbuf_r+0x70>
 800c5c8:	686c      	ldr	r4, [r5, #4]
 800c5ca:	69a3      	ldr	r3, [r4, #24]
 800c5cc:	60a3      	str	r3, [r4, #8]
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	071a      	lsls	r2, r3, #28
 800c5d2:	d52f      	bpl.n	800c634 <__swbuf_r+0x84>
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	b36b      	cbz	r3, 800c634 <__swbuf_r+0x84>
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	6820      	ldr	r0, [r4, #0]
 800c5dc:	1ac0      	subs	r0, r0, r3
 800c5de:	6963      	ldr	r3, [r4, #20]
 800c5e0:	b2f6      	uxtb	r6, r6
 800c5e2:	4283      	cmp	r3, r0
 800c5e4:	4637      	mov	r7, r6
 800c5e6:	dc04      	bgt.n	800c5f2 <__swbuf_r+0x42>
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f7fb fd2c 	bl	8008048 <_fflush_r>
 800c5f0:	bb30      	cbnz	r0, 800c640 <__swbuf_r+0x90>
 800c5f2:	68a3      	ldr	r3, [r4, #8]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	60a3      	str	r3, [r4, #8]
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	6022      	str	r2, [r4, #0]
 800c5fe:	701e      	strb	r6, [r3, #0]
 800c600:	6963      	ldr	r3, [r4, #20]
 800c602:	3001      	adds	r0, #1
 800c604:	4283      	cmp	r3, r0
 800c606:	d004      	beq.n	800c612 <__swbuf_r+0x62>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	07db      	lsls	r3, r3, #31
 800c60c:	d506      	bpl.n	800c61c <__swbuf_r+0x6c>
 800c60e:	2e0a      	cmp	r6, #10
 800c610:	d104      	bne.n	800c61c <__swbuf_r+0x6c>
 800c612:	4621      	mov	r1, r4
 800c614:	4628      	mov	r0, r5
 800c616:	f7fb fd17 	bl	8008048 <_fflush_r>
 800c61a:	b988      	cbnz	r0, 800c640 <__swbuf_r+0x90>
 800c61c:	4638      	mov	r0, r7
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <__swbuf_r+0x9c>)
 800c622:	429c      	cmp	r4, r3
 800c624:	d101      	bne.n	800c62a <__swbuf_r+0x7a>
 800c626:	68ac      	ldr	r4, [r5, #8]
 800c628:	e7cf      	b.n	800c5ca <__swbuf_r+0x1a>
 800c62a:	4b09      	ldr	r3, [pc, #36]	; (800c650 <__swbuf_r+0xa0>)
 800c62c:	429c      	cmp	r4, r3
 800c62e:	bf08      	it	eq
 800c630:	68ec      	ldreq	r4, [r5, #12]
 800c632:	e7ca      	b.n	800c5ca <__swbuf_r+0x1a>
 800c634:	4621      	mov	r1, r4
 800c636:	4628      	mov	r0, r5
 800c638:	f000 f80c 	bl	800c654 <__swsetup_r>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0cb      	beq.n	800c5d8 <__swbuf_r+0x28>
 800c640:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c644:	e7ea      	b.n	800c61c <__swbuf_r+0x6c>
 800c646:	bf00      	nop
 800c648:	0800ec08 	.word	0x0800ec08
 800c64c:	0800ec28 	.word	0x0800ec28
 800c650:	0800ebe8 	.word	0x0800ebe8

0800c654 <__swsetup_r>:
 800c654:	4b32      	ldr	r3, [pc, #200]	; (800c720 <__swsetup_r+0xcc>)
 800c656:	b570      	push	{r4, r5, r6, lr}
 800c658:	681d      	ldr	r5, [r3, #0]
 800c65a:	4606      	mov	r6, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	b125      	cbz	r5, 800c66a <__swsetup_r+0x16>
 800c660:	69ab      	ldr	r3, [r5, #24]
 800c662:	b913      	cbnz	r3, 800c66a <__swsetup_r+0x16>
 800c664:	4628      	mov	r0, r5
 800c666:	f7fb fd95 	bl	8008194 <__sinit>
 800c66a:	4b2e      	ldr	r3, [pc, #184]	; (800c724 <__swsetup_r+0xd0>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	d10f      	bne.n	800c690 <__swsetup_r+0x3c>
 800c670:	686c      	ldr	r4, [r5, #4]
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c678:	0719      	lsls	r1, r3, #28
 800c67a:	d42c      	bmi.n	800c6d6 <__swsetup_r+0x82>
 800c67c:	06dd      	lsls	r5, r3, #27
 800c67e:	d411      	bmi.n	800c6a4 <__swsetup_r+0x50>
 800c680:	2309      	movs	r3, #9
 800c682:	6033      	str	r3, [r6, #0]
 800c684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c688:	81a3      	strh	r3, [r4, #12]
 800c68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c68e:	e03e      	b.n	800c70e <__swsetup_r+0xba>
 800c690:	4b25      	ldr	r3, [pc, #148]	; (800c728 <__swsetup_r+0xd4>)
 800c692:	429c      	cmp	r4, r3
 800c694:	d101      	bne.n	800c69a <__swsetup_r+0x46>
 800c696:	68ac      	ldr	r4, [r5, #8]
 800c698:	e7eb      	b.n	800c672 <__swsetup_r+0x1e>
 800c69a:	4b24      	ldr	r3, [pc, #144]	; (800c72c <__swsetup_r+0xd8>)
 800c69c:	429c      	cmp	r4, r3
 800c69e:	bf08      	it	eq
 800c6a0:	68ec      	ldreq	r4, [r5, #12]
 800c6a2:	e7e6      	b.n	800c672 <__swsetup_r+0x1e>
 800c6a4:	0758      	lsls	r0, r3, #29
 800c6a6:	d512      	bpl.n	800c6ce <__swsetup_r+0x7a>
 800c6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6aa:	b141      	cbz	r1, 800c6be <__swsetup_r+0x6a>
 800c6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d002      	beq.n	800c6ba <__swsetup_r+0x66>
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7fb fe3b 	bl	8008330 <_free_r>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6c4:	81a3      	strh	r3, [r4, #12]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6923      	ldr	r3, [r4, #16]
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f043 0308 	orr.w	r3, r3, #8
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	b94b      	cbnz	r3, 800c6ee <__swsetup_r+0x9a>
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6e4:	d003      	beq.n	800c6ee <__swsetup_r+0x9a>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f000 f84d 	bl	800c788 <__smakebuf_r>
 800c6ee:	89a0      	ldrh	r0, [r4, #12]
 800c6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6f4:	f010 0301 	ands.w	r3, r0, #1
 800c6f8:	d00a      	beq.n	800c710 <__swsetup_r+0xbc>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60a3      	str	r3, [r4, #8]
 800c6fe:	6963      	ldr	r3, [r4, #20]
 800c700:	425b      	negs	r3, r3
 800c702:	61a3      	str	r3, [r4, #24]
 800c704:	6923      	ldr	r3, [r4, #16]
 800c706:	b943      	cbnz	r3, 800c71a <__swsetup_r+0xc6>
 800c708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c70c:	d1ba      	bne.n	800c684 <__swsetup_r+0x30>
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	0781      	lsls	r1, r0, #30
 800c712:	bf58      	it	pl
 800c714:	6963      	ldrpl	r3, [r4, #20]
 800c716:	60a3      	str	r3, [r4, #8]
 800c718:	e7f4      	b.n	800c704 <__swsetup_r+0xb0>
 800c71a:	2000      	movs	r0, #0
 800c71c:	e7f7      	b.n	800c70e <__swsetup_r+0xba>
 800c71e:	bf00      	nop
 800c720:	20000010 	.word	0x20000010
 800c724:	0800ec08 	.word	0x0800ec08
 800c728:	0800ec28 	.word	0x0800ec28
 800c72c:	0800ebe8 	.word	0x0800ebe8

0800c730 <abort>:
 800c730:	b508      	push	{r3, lr}
 800c732:	2006      	movs	r0, #6
 800c734:	f000 f898 	bl	800c868 <raise>
 800c738:	2001      	movs	r0, #1
 800c73a:	f7f5 f968 	bl	8001a0e <_exit>

0800c73e <__swhatbuf_r>:
 800c73e:	b570      	push	{r4, r5, r6, lr}
 800c740:	460e      	mov	r6, r1
 800c742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c746:	2900      	cmp	r1, #0
 800c748:	b096      	sub	sp, #88	; 0x58
 800c74a:	4614      	mov	r4, r2
 800c74c:	461d      	mov	r5, r3
 800c74e:	da08      	bge.n	800c762 <__swhatbuf_r+0x24>
 800c750:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	602a      	str	r2, [r5, #0]
 800c758:	061a      	lsls	r2, r3, #24
 800c75a:	d410      	bmi.n	800c77e <__swhatbuf_r+0x40>
 800c75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c760:	e00e      	b.n	800c780 <__swhatbuf_r+0x42>
 800c762:	466a      	mov	r2, sp
 800c764:	f000 f89c 	bl	800c8a0 <_fstat_r>
 800c768:	2800      	cmp	r0, #0
 800c76a:	dbf1      	blt.n	800c750 <__swhatbuf_r+0x12>
 800c76c:	9a01      	ldr	r2, [sp, #4]
 800c76e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c772:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c776:	425a      	negs	r2, r3
 800c778:	415a      	adcs	r2, r3
 800c77a:	602a      	str	r2, [r5, #0]
 800c77c:	e7ee      	b.n	800c75c <__swhatbuf_r+0x1e>
 800c77e:	2340      	movs	r3, #64	; 0x40
 800c780:	2000      	movs	r0, #0
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	b016      	add	sp, #88	; 0x58
 800c786:	bd70      	pop	{r4, r5, r6, pc}

0800c788 <__smakebuf_r>:
 800c788:	898b      	ldrh	r3, [r1, #12]
 800c78a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c78c:	079d      	lsls	r5, r3, #30
 800c78e:	4606      	mov	r6, r0
 800c790:	460c      	mov	r4, r1
 800c792:	d507      	bpl.n	800c7a4 <__smakebuf_r+0x1c>
 800c794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	2301      	movs	r3, #1
 800c79e:	6163      	str	r3, [r4, #20]
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	ab01      	add	r3, sp, #4
 800c7a6:	466a      	mov	r2, sp
 800c7a8:	f7ff ffc9 	bl	800c73e <__swhatbuf_r>
 800c7ac:	9900      	ldr	r1, [sp, #0]
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7fb fe27 	bl	8008404 <_malloc_r>
 800c7b6:	b948      	cbnz	r0, 800c7cc <__smakebuf_r+0x44>
 800c7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7bc:	059a      	lsls	r2, r3, #22
 800c7be:	d4ef      	bmi.n	800c7a0 <__smakebuf_r+0x18>
 800c7c0:	f023 0303 	bic.w	r3, r3, #3
 800c7c4:	f043 0302 	orr.w	r3, r3, #2
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7e3      	b.n	800c794 <__smakebuf_r+0xc>
 800c7cc:	4b0d      	ldr	r3, [pc, #52]	; (800c804 <__smakebuf_r+0x7c>)
 800c7ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	6020      	str	r0, [r4, #0]
 800c7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	9b00      	ldr	r3, [sp, #0]
 800c7dc:	6163      	str	r3, [r4, #20]
 800c7de:	9b01      	ldr	r3, [sp, #4]
 800c7e0:	6120      	str	r0, [r4, #16]
 800c7e2:	b15b      	cbz	r3, 800c7fc <__smakebuf_r+0x74>
 800c7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 f86b 	bl	800c8c4 <_isatty_r>
 800c7ee:	b128      	cbz	r0, 800c7fc <__smakebuf_r+0x74>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	f043 0301 	orr.w	r3, r3, #1
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	89a0      	ldrh	r0, [r4, #12]
 800c7fe:	4305      	orrs	r5, r0
 800c800:	81a5      	strh	r5, [r4, #12]
 800c802:	e7cd      	b.n	800c7a0 <__smakebuf_r+0x18>
 800c804:	0800812d 	.word	0x0800812d

0800c808 <_malloc_usable_size_r>:
 800c808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c80c:	1f18      	subs	r0, r3, #4
 800c80e:	2b00      	cmp	r3, #0
 800c810:	bfbc      	itt	lt
 800c812:	580b      	ldrlt	r3, [r1, r0]
 800c814:	18c0      	addlt	r0, r0, r3
 800c816:	4770      	bx	lr

0800c818 <_raise_r>:
 800c818:	291f      	cmp	r1, #31
 800c81a:	b538      	push	{r3, r4, r5, lr}
 800c81c:	4604      	mov	r4, r0
 800c81e:	460d      	mov	r5, r1
 800c820:	d904      	bls.n	800c82c <_raise_r+0x14>
 800c822:	2316      	movs	r3, #22
 800c824:	6003      	str	r3, [r0, #0]
 800c826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c82e:	b112      	cbz	r2, 800c836 <_raise_r+0x1e>
 800c830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c834:	b94b      	cbnz	r3, 800c84a <_raise_r+0x32>
 800c836:	4620      	mov	r0, r4
 800c838:	f000 f830 	bl	800c89c <_getpid_r>
 800c83c:	462a      	mov	r2, r5
 800c83e:	4601      	mov	r1, r0
 800c840:	4620      	mov	r0, r4
 800c842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c846:	f000 b817 	b.w	800c878 <_kill_r>
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d00a      	beq.n	800c864 <_raise_r+0x4c>
 800c84e:	1c59      	adds	r1, r3, #1
 800c850:	d103      	bne.n	800c85a <_raise_r+0x42>
 800c852:	2316      	movs	r3, #22
 800c854:	6003      	str	r3, [r0, #0]
 800c856:	2001      	movs	r0, #1
 800c858:	e7e7      	b.n	800c82a <_raise_r+0x12>
 800c85a:	2400      	movs	r4, #0
 800c85c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c860:	4628      	mov	r0, r5
 800c862:	4798      	blx	r3
 800c864:	2000      	movs	r0, #0
 800c866:	e7e0      	b.n	800c82a <_raise_r+0x12>

0800c868 <raise>:
 800c868:	4b02      	ldr	r3, [pc, #8]	; (800c874 <raise+0xc>)
 800c86a:	4601      	mov	r1, r0
 800c86c:	6818      	ldr	r0, [r3, #0]
 800c86e:	f7ff bfd3 	b.w	800c818 <_raise_r>
 800c872:	bf00      	nop
 800c874:	20000010 	.word	0x20000010

0800c878 <_kill_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d07      	ldr	r5, [pc, #28]	; (800c898 <_kill_r+0x20>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	4611      	mov	r1, r2
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	f7f5 f8b2 	bl	80019ee <_kill>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	d102      	bne.n	800c894 <_kill_r+0x1c>
 800c88e:	682b      	ldr	r3, [r5, #0]
 800c890:	b103      	cbz	r3, 800c894 <_kill_r+0x1c>
 800c892:	6023      	str	r3, [r4, #0]
 800c894:	bd38      	pop	{r3, r4, r5, pc}
 800c896:	bf00      	nop
 800c898:	200011c0 	.word	0x200011c0

0800c89c <_getpid_r>:
 800c89c:	f7f5 b8a0 	b.w	80019e0 <_getpid>

0800c8a0 <_fstat_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	; (800c8c0 <_fstat_r+0x20>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	f7f5 f8fc 	bl	8001aaa <_fstat>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d102      	bne.n	800c8bc <_fstat_r+0x1c>
 800c8b6:	682b      	ldr	r3, [r5, #0]
 800c8b8:	b103      	cbz	r3, 800c8bc <_fstat_r+0x1c>
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	200011c0 	.word	0x200011c0

0800c8c4 <_isatty_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d06      	ldr	r5, [pc, #24]	; (800c8e0 <_isatty_r+0x1c>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f5 f8fa 	bl	8001ac8 <_isatty>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_isatty_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_isatty_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	200011c0 	.word	0x200011c0

0800c8e4 <cos>:
 800c8e4:	b530      	push	{r4, r5, lr}
 800c8e6:	4a20      	ldr	r2, [pc, #128]	; (800c968 <cos+0x84>)
 800c8e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	b087      	sub	sp, #28
 800c8f0:	dc06      	bgt.n	800c900 <cos+0x1c>
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	b007      	add	sp, #28
 800c8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8fc:	f001 baf0 	b.w	800dee0 <__kernel_cos>
 800c900:	4a1a      	ldr	r2, [pc, #104]	; (800c96c <cos+0x88>)
 800c902:	4293      	cmp	r3, r2
 800c904:	dd05      	ble.n	800c912 <cos+0x2e>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	f7f3 fd59 	bl	80003c0 <__aeabi_dsub>
 800c90e:	b007      	add	sp, #28
 800c910:	bd30      	pop	{r4, r5, pc}
 800c912:	aa02      	add	r2, sp, #8
 800c914:	f001 f83c 	bl	800d990 <__ieee754_rem_pio2>
 800c918:	f000 0003 	and.w	r0, r0, #3
 800c91c:	2801      	cmp	r0, #1
 800c91e:	d009      	beq.n	800c934 <cos+0x50>
 800c920:	2802      	cmp	r0, #2
 800c922:	d011      	beq.n	800c948 <cos+0x64>
 800c924:	b9b8      	cbnz	r0, 800c956 <cos+0x72>
 800c926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c92e:	f001 fad7 	bl	800dee0 <__kernel_cos>
 800c932:	e7ec      	b.n	800c90e <cos+0x2a>
 800c934:	9000      	str	r0, [sp, #0]
 800c936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c93e:	f001 fecf 	bl	800e6e0 <__kernel_sin>
 800c942:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c946:	e7e2      	b.n	800c90e <cos+0x2a>
 800c948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c950:	f001 fac6 	bl	800dee0 <__kernel_cos>
 800c954:	e7f5      	b.n	800c942 <cos+0x5e>
 800c956:	2301      	movs	r3, #1
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c962:	f001 febd 	bl	800e6e0 <__kernel_sin>
 800c966:	e7d2      	b.n	800c90e <cos+0x2a>
 800c968:	3fe921fb 	.word	0x3fe921fb
 800c96c:	7fefffff 	.word	0x7fefffff

0800c970 <sin>:
 800c970:	b530      	push	{r4, r5, lr}
 800c972:	4a20      	ldr	r2, [pc, #128]	; (800c9f4 <sin+0x84>)
 800c974:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c978:	4293      	cmp	r3, r2
 800c97a:	b087      	sub	sp, #28
 800c97c:	dc06      	bgt.n	800c98c <sin+0x1c>
 800c97e:	2300      	movs	r3, #0
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	2200      	movs	r2, #0
 800c984:	2300      	movs	r3, #0
 800c986:	f001 feab 	bl	800e6e0 <__kernel_sin>
 800c98a:	e006      	b.n	800c99a <sin+0x2a>
 800c98c:	4a1a      	ldr	r2, [pc, #104]	; (800c9f8 <sin+0x88>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	dd05      	ble.n	800c99e <sin+0x2e>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	f7f3 fd13 	bl	80003c0 <__aeabi_dsub>
 800c99a:	b007      	add	sp, #28
 800c99c:	bd30      	pop	{r4, r5, pc}
 800c99e:	aa02      	add	r2, sp, #8
 800c9a0:	f000 fff6 	bl	800d990 <__ieee754_rem_pio2>
 800c9a4:	f000 0003 	and.w	r0, r0, #3
 800c9a8:	2801      	cmp	r0, #1
 800c9aa:	d009      	beq.n	800c9c0 <sin+0x50>
 800c9ac:	2802      	cmp	r0, #2
 800c9ae:	d00e      	beq.n	800c9ce <sin+0x5e>
 800c9b0:	b9c0      	cbnz	r0, 800c9e4 <sin+0x74>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9be:	e7e2      	b.n	800c986 <sin+0x16>
 800c9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c8:	f001 fa8a 	bl	800dee0 <__kernel_cos>
 800c9cc:	e7e5      	b.n	800c99a <sin+0x2a>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9da:	f001 fe81 	bl	800e6e0 <__kernel_sin>
 800c9de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c9e2:	e7da      	b.n	800c99a <sin+0x2a>
 800c9e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ec:	f001 fa78 	bl	800dee0 <__kernel_cos>
 800c9f0:	e7f5      	b.n	800c9de <sin+0x6e>
 800c9f2:	bf00      	nop
 800c9f4:	3fe921fb 	.word	0x3fe921fb
 800c9f8:	7fefffff 	.word	0x7fefffff

0800c9fc <asin>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	f000 f8b1 	bl	800cb68 <__ieee754_asin>
 800ca06:	4622      	mov	r2, r4
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	4620      	mov	r0, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	f7f4 f927 	bl	8000c64 <__aeabi_dcmpun>
 800ca16:	b988      	cbnz	r0, 800ca3c <asin+0x40>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f001 ff42 	bl	800e8a4 <fabs>
 800ca20:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <asin+0x48>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	f7f4 f914 	bl	8000c50 <__aeabi_dcmpgt>
 800ca28:	b140      	cbz	r0, 800ca3c <asin+0x40>
 800ca2a:	f7fb fa85 	bl	8007f38 <__errno>
 800ca2e:	2321      	movs	r3, #33	; 0x21
 800ca30:	6003      	str	r3, [r0, #0]
 800ca32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca36:	4804      	ldr	r0, [pc, #16]	; (800ca48 <asin+0x4c>)
 800ca38:	f7ff bbc2 	b.w	800c1c0 <nan>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	4639      	mov	r1, r7
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca42:	bf00      	nop
 800ca44:	3ff00000 	.word	0x3ff00000
 800ca48:	0800f088 	.word	0x0800f088

0800ca4c <pow>:
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	4614      	mov	r4, r2
 800ca52:	461d      	mov	r5, r3
 800ca54:	4680      	mov	r8, r0
 800ca56:	4689      	mov	r9, r1
 800ca58:	f000 fa82 	bl	800cf60 <__ieee754_pow>
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	4606      	mov	r6, r0
 800ca60:	460f      	mov	r7, r1
 800ca62:	462b      	mov	r3, r5
 800ca64:	4620      	mov	r0, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f4 f8fc 	bl	8000c64 <__aeabi_dcmpun>
 800ca6c:	bbc8      	cbnz	r0, 800cae2 <pow+0x96>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2300      	movs	r3, #0
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f4 f8c3 	bl	8000c00 <__aeabi_dcmpeq>
 800ca7a:	b1b8      	cbz	r0, 800caac <pow+0x60>
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4620      	mov	r0, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	f7f4 f8bc 	bl	8000c00 <__aeabi_dcmpeq>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d141      	bne.n	800cb10 <pow+0xc4>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	f001 ff0b 	bl	800e8aa <finite>
 800ca94:	b328      	cbz	r0, 800cae2 <pow+0x96>
 800ca96:	2200      	movs	r2, #0
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7f4 f8b9 	bl	8000c14 <__aeabi_dcmplt>
 800caa2:	b1f0      	cbz	r0, 800cae2 <pow+0x96>
 800caa4:	f7fb fa48 	bl	8007f38 <__errno>
 800caa8:	2322      	movs	r3, #34	; 0x22
 800caaa:	e019      	b.n	800cae0 <pow+0x94>
 800caac:	4630      	mov	r0, r6
 800caae:	4639      	mov	r1, r7
 800cab0:	f001 fefb 	bl	800e8aa <finite>
 800cab4:	b9c8      	cbnz	r0, 800caea <pow+0x9e>
 800cab6:	4640      	mov	r0, r8
 800cab8:	4649      	mov	r1, r9
 800caba:	f001 fef6 	bl	800e8aa <finite>
 800cabe:	b1a0      	cbz	r0, 800caea <pow+0x9e>
 800cac0:	4620      	mov	r0, r4
 800cac2:	4629      	mov	r1, r5
 800cac4:	f001 fef1 	bl	800e8aa <finite>
 800cac8:	b178      	cbz	r0, 800caea <pow+0x9e>
 800caca:	4632      	mov	r2, r6
 800cacc:	463b      	mov	r3, r7
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f4 f8c7 	bl	8000c64 <__aeabi_dcmpun>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d0e4      	beq.n	800caa4 <pow+0x58>
 800cada:	f7fb fa2d 	bl	8007f38 <__errno>
 800cade:	2321      	movs	r3, #33	; 0x21
 800cae0:	6003      	str	r3, [r0, #0]
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f4 f885 	bl	8000c00 <__aeabi_dcmpeq>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d0f3      	beq.n	800cae2 <pow+0x96>
 800cafa:	4640      	mov	r0, r8
 800cafc:	4649      	mov	r1, r9
 800cafe:	f001 fed4 	bl	800e8aa <finite>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d0ed      	beq.n	800cae2 <pow+0x96>
 800cb06:	4620      	mov	r0, r4
 800cb08:	4629      	mov	r1, r5
 800cb0a:	f001 fece 	bl	800e8aa <finite>
 800cb0e:	e7c8      	b.n	800caa2 <pow+0x56>
 800cb10:	4f01      	ldr	r7, [pc, #4]	; (800cb18 <pow+0xcc>)
 800cb12:	2600      	movs	r6, #0
 800cb14:	e7e5      	b.n	800cae2 <pow+0x96>
 800cb16:	bf00      	nop
 800cb18:	3ff00000 	.word	0x3ff00000

0800cb1c <sqrt>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460f      	mov	r7, r1
 800cb22:	f001 f92d 	bl	800dd80 <__ieee754_sqrt>
 800cb26:	4632      	mov	r2, r6
 800cb28:	4604      	mov	r4, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	463b      	mov	r3, r7
 800cb2e:	4630      	mov	r0, r6
 800cb30:	4639      	mov	r1, r7
 800cb32:	f7f4 f897 	bl	8000c64 <__aeabi_dcmpun>
 800cb36:	b990      	cbnz	r0, 800cb5e <sqrt+0x42>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	4639      	mov	r1, r7
 800cb40:	f7f4 f868 	bl	8000c14 <__aeabi_dcmplt>
 800cb44:	b158      	cbz	r0, 800cb5e <sqrt+0x42>
 800cb46:	f7fb f9f7 	bl	8007f38 <__errno>
 800cb4a:	2321      	movs	r3, #33	; 0x21
 800cb4c:	6003      	str	r3, [r0, #0]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2300      	movs	r3, #0
 800cb52:	4610      	mov	r0, r2
 800cb54:	4619      	mov	r1, r3
 800cb56:	f7f3 ff15 	bl	8000984 <__aeabi_ddiv>
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	460d      	mov	r5, r1
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb64:	0000      	movs	r0, r0
	...

0800cb68 <__ieee754_asin>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	4bc4      	ldr	r3, [pc, #784]	; (800ce80 <__ieee754_asin+0x318>)
 800cb6e:	b087      	sub	sp, #28
 800cb70:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cb74:	429e      	cmp	r6, r3
 800cb76:	4602      	mov	r2, r0
 800cb78:	4604      	mov	r4, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	9105      	str	r1, [sp, #20]
 800cb7e:	dd29      	ble.n	800cbd4 <__ieee754_asin+0x6c>
 800cb80:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800cb84:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800cb88:	4603      	mov	r3, r0
 800cb8a:	4333      	orrs	r3, r6
 800cb8c:	d114      	bne.n	800cbb8 <__ieee754_asin+0x50>
 800cb8e:	a3a2      	add	r3, pc, #648	; (adr r3, 800ce18 <__ieee754_asin+0x2b0>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fdcc 	bl	8000730 <__aeabi_dmul>
 800cb98:	a3a1      	add	r3, pc, #644	; (adr r3, 800ce20 <__ieee754_asin+0x2b8>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	4620      	mov	r0, r4
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7f3 fdc3 	bl	8000730 <__aeabi_dmul>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 fc07 	bl	80003c4 <__adddf3>
 800cbb6:	e006      	b.n	800cbc6 <__ieee754_asin+0x5e>
 800cbb8:	460b      	mov	r3, r1
 800cbba:	f7f3 fc01 	bl	80003c0 <__aeabi_dsub>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	f7f3 fedf 	bl	8000984 <__aeabi_ddiv>
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	460d      	mov	r5, r1
 800cbca:	4620      	mov	r0, r4
 800cbcc:	4629      	mov	r1, r5
 800cbce:	b007      	add	sp, #28
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	4bab      	ldr	r3, [pc, #684]	; (800ce84 <__ieee754_asin+0x31c>)
 800cbd6:	429e      	cmp	r6, r3
 800cbd8:	dc0e      	bgt.n	800cbf8 <__ieee754_asin+0x90>
 800cbda:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cbde:	f280 80ab 	bge.w	800cd38 <__ieee754_asin+0x1d0>
 800cbe2:	a391      	add	r3, pc, #580	; (adr r3, 800ce28 <__ieee754_asin+0x2c0>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fbec 	bl	80003c4 <__adddf3>
 800cbec:	4ba6      	ldr	r3, [pc, #664]	; (800ce88 <__ieee754_asin+0x320>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f7f4 f82e 	bl	8000c50 <__aeabi_dcmpgt>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d1e8      	bne.n	800cbca <__ieee754_asin+0x62>
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f001 fe52 	bl	800e8a4 <fabs>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	2000      	movs	r0, #0
 800cc06:	49a0      	ldr	r1, [pc, #640]	; (800ce88 <__ieee754_asin+0x320>)
 800cc08:	f7f3 fbda 	bl	80003c0 <__aeabi_dsub>
 800cc0c:	4b9f      	ldr	r3, [pc, #636]	; (800ce8c <__ieee754_asin+0x324>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f7f3 fd8e 	bl	8000730 <__aeabi_dmul>
 800cc14:	a386      	add	r3, pc, #536	; (adr r3, 800ce30 <__ieee754_asin+0x2c8>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	f7f3 fd87 	bl	8000730 <__aeabi_dmul>
 800cc22:	a385      	add	r3, pc, #532	; (adr r3, 800ce38 <__ieee754_asin+0x2d0>)
 800cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc28:	f7f3 fbcc 	bl	80003c4 <__adddf3>
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	462b      	mov	r3, r5
 800cc30:	f7f3 fd7e 	bl	8000730 <__aeabi_dmul>
 800cc34:	a382      	add	r3, pc, #520	; (adr r3, 800ce40 <__ieee754_asin+0x2d8>)
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	f7f3 fbc1 	bl	80003c0 <__aeabi_dsub>
 800cc3e:	4622      	mov	r2, r4
 800cc40:	462b      	mov	r3, r5
 800cc42:	f7f3 fd75 	bl	8000730 <__aeabi_dmul>
 800cc46:	a380      	add	r3, pc, #512	; (adr r3, 800ce48 <__ieee754_asin+0x2e0>)
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 fbba 	bl	80003c4 <__adddf3>
 800cc50:	4622      	mov	r2, r4
 800cc52:	462b      	mov	r3, r5
 800cc54:	f7f3 fd6c 	bl	8000730 <__aeabi_dmul>
 800cc58:	a37d      	add	r3, pc, #500	; (adr r3, 800ce50 <__ieee754_asin+0x2e8>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fbaf 	bl	80003c0 <__aeabi_dsub>
 800cc62:	4622      	mov	r2, r4
 800cc64:	462b      	mov	r3, r5
 800cc66:	f7f3 fd63 	bl	8000730 <__aeabi_dmul>
 800cc6a:	a37b      	add	r3, pc, #492	; (adr r3, 800ce58 <__ieee754_asin+0x2f0>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	f7f3 fba8 	bl	80003c4 <__adddf3>
 800cc74:	4622      	mov	r2, r4
 800cc76:	462b      	mov	r3, r5
 800cc78:	f7f3 fd5a 	bl	8000730 <__aeabi_dmul>
 800cc7c:	a378      	add	r3, pc, #480	; (adr r3, 800ce60 <__ieee754_asin+0x2f8>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	e9cd 0100 	strd	r0, r1, [sp]
 800cc86:	4620      	mov	r0, r4
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7f3 fd51 	bl	8000730 <__aeabi_dmul>
 800cc8e:	a376      	add	r3, pc, #472	; (adr r3, 800ce68 <__ieee754_asin+0x300>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 fb94 	bl	80003c0 <__aeabi_dsub>
 800cc98:	4622      	mov	r2, r4
 800cc9a:	462b      	mov	r3, r5
 800cc9c:	f7f3 fd48 	bl	8000730 <__aeabi_dmul>
 800cca0:	a373      	add	r3, pc, #460	; (adr r3, 800ce70 <__ieee754_asin+0x308>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 fb8d 	bl	80003c4 <__adddf3>
 800ccaa:	4622      	mov	r2, r4
 800ccac:	462b      	mov	r3, r5
 800ccae:	f7f3 fd3f 	bl	8000730 <__aeabi_dmul>
 800ccb2:	a371      	add	r3, pc, #452	; (adr r3, 800ce78 <__ieee754_asin+0x310>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	f7f3 fb82 	bl	80003c0 <__aeabi_dsub>
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	f7f3 fd36 	bl	8000730 <__aeabi_dmul>
 800ccc4:	4b70      	ldr	r3, [pc, #448]	; (800ce88 <__ieee754_asin+0x320>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f7f3 fb7c 	bl	80003c4 <__adddf3>
 800cccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	f001 f854 	bl	800dd80 <__ieee754_sqrt>
 800ccd8:	4b6d      	ldr	r3, [pc, #436]	; (800ce90 <__ieee754_asin+0x328>)
 800ccda:	429e      	cmp	r6, r3
 800ccdc:	4682      	mov	sl, r0
 800ccde:	468b      	mov	fp, r1
 800cce0:	f340 80d8 	ble.w	800ce94 <__ieee754_asin+0x32c>
 800cce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccec:	f7f3 fe4a 	bl	8000984 <__aeabi_ddiv>
 800ccf0:	4652      	mov	r2, sl
 800ccf2:	465b      	mov	r3, fp
 800ccf4:	f7f3 fd1c 	bl	8000730 <__aeabi_dmul>
 800ccf8:	4652      	mov	r2, sl
 800ccfa:	465b      	mov	r3, fp
 800ccfc:	f7f3 fb62 	bl	80003c4 <__adddf3>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	f7f3 fb5e 	bl	80003c4 <__adddf3>
 800cd08:	a345      	add	r3, pc, #276	; (adr r3, 800ce20 <__ieee754_asin+0x2b8>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fb57 	bl	80003c0 <__aeabi_dsub>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	a140      	add	r1, pc, #256	; (adr r1, 800ce18 <__ieee754_asin+0x2b0>)
 800cd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1c:	f7f3 fb50 	bl	80003c0 <__aeabi_dsub>
 800cd20:	9b05      	ldr	r3, [sp, #20]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bfdc      	itt	le
 800cd26:	4602      	movle	r2, r0
 800cd28:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	460d      	mov	r5, r1
 800cd30:	bfdc      	itt	le
 800cd32:	4614      	movle	r4, r2
 800cd34:	461d      	movle	r5, r3
 800cd36:	e748      	b.n	800cbca <__ieee754_asin+0x62>
 800cd38:	460b      	mov	r3, r1
 800cd3a:	f7f3 fcf9 	bl	8000730 <__aeabi_dmul>
 800cd3e:	a33c      	add	r3, pc, #240	; (adr r3, 800ce30 <__ieee754_asin+0x2c8>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	4606      	mov	r6, r0
 800cd46:	460f      	mov	r7, r1
 800cd48:	f7f3 fcf2 	bl	8000730 <__aeabi_dmul>
 800cd4c:	a33a      	add	r3, pc, #232	; (adr r3, 800ce38 <__ieee754_asin+0x2d0>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 fb37 	bl	80003c4 <__adddf3>
 800cd56:	4632      	mov	r2, r6
 800cd58:	463b      	mov	r3, r7
 800cd5a:	f7f3 fce9 	bl	8000730 <__aeabi_dmul>
 800cd5e:	a338      	add	r3, pc, #224	; (adr r3, 800ce40 <__ieee754_asin+0x2d8>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	f7f3 fb2c 	bl	80003c0 <__aeabi_dsub>
 800cd68:	4632      	mov	r2, r6
 800cd6a:	463b      	mov	r3, r7
 800cd6c:	f7f3 fce0 	bl	8000730 <__aeabi_dmul>
 800cd70:	a335      	add	r3, pc, #212	; (adr r3, 800ce48 <__ieee754_asin+0x2e0>)
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	f7f3 fb25 	bl	80003c4 <__adddf3>
 800cd7a:	4632      	mov	r2, r6
 800cd7c:	463b      	mov	r3, r7
 800cd7e:	f7f3 fcd7 	bl	8000730 <__aeabi_dmul>
 800cd82:	a333      	add	r3, pc, #204	; (adr r3, 800ce50 <__ieee754_asin+0x2e8>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	f7f3 fb1a 	bl	80003c0 <__aeabi_dsub>
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	463b      	mov	r3, r7
 800cd90:	f7f3 fcce 	bl	8000730 <__aeabi_dmul>
 800cd94:	a330      	add	r3, pc, #192	; (adr r3, 800ce58 <__ieee754_asin+0x2f0>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f7f3 fb13 	bl	80003c4 <__adddf3>
 800cd9e:	4632      	mov	r2, r6
 800cda0:	463b      	mov	r3, r7
 800cda2:	f7f3 fcc5 	bl	8000730 <__aeabi_dmul>
 800cda6:	a32e      	add	r3, pc, #184	; (adr r3, 800ce60 <__ieee754_asin+0x2f8>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	4680      	mov	r8, r0
 800cdae:	4689      	mov	r9, r1
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	f7f3 fcbc 	bl	8000730 <__aeabi_dmul>
 800cdb8:	a32b      	add	r3, pc, #172	; (adr r3, 800ce68 <__ieee754_asin+0x300>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 faff 	bl	80003c0 <__aeabi_dsub>
 800cdc2:	4632      	mov	r2, r6
 800cdc4:	463b      	mov	r3, r7
 800cdc6:	f7f3 fcb3 	bl	8000730 <__aeabi_dmul>
 800cdca:	a329      	add	r3, pc, #164	; (adr r3, 800ce70 <__ieee754_asin+0x308>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7f3 faf8 	bl	80003c4 <__adddf3>
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	f7f3 fcaa 	bl	8000730 <__aeabi_dmul>
 800cddc:	a326      	add	r3, pc, #152	; (adr r3, 800ce78 <__ieee754_asin+0x310>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	f7f3 faed 	bl	80003c0 <__aeabi_dsub>
 800cde6:	4632      	mov	r2, r6
 800cde8:	463b      	mov	r3, r7
 800cdea:	f7f3 fca1 	bl	8000730 <__aeabi_dmul>
 800cdee:	4b26      	ldr	r3, [pc, #152]	; (800ce88 <__ieee754_asin+0x320>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f7f3 fae7 	bl	80003c4 <__adddf3>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fdc1 	bl	8000984 <__aeabi_ddiv>
 800ce02:	4622      	mov	r2, r4
 800ce04:	462b      	mov	r3, r5
 800ce06:	f7f3 fc93 	bl	8000730 <__aeabi_dmul>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	4620      	mov	r0, r4
 800ce10:	4629      	mov	r1, r5
 800ce12:	e6ce      	b.n	800cbb2 <__ieee754_asin+0x4a>
 800ce14:	f3af 8000 	nop.w
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	3ff921fb 	.word	0x3ff921fb
 800ce20:	33145c07 	.word	0x33145c07
 800ce24:	3c91a626 	.word	0x3c91a626
 800ce28:	8800759c 	.word	0x8800759c
 800ce2c:	7e37e43c 	.word	0x7e37e43c
 800ce30:	0dfdf709 	.word	0x0dfdf709
 800ce34:	3f023de1 	.word	0x3f023de1
 800ce38:	7501b288 	.word	0x7501b288
 800ce3c:	3f49efe0 	.word	0x3f49efe0
 800ce40:	b5688f3b 	.word	0xb5688f3b
 800ce44:	3fa48228 	.word	0x3fa48228
 800ce48:	0e884455 	.word	0x0e884455
 800ce4c:	3fc9c155 	.word	0x3fc9c155
 800ce50:	03eb6f7d 	.word	0x03eb6f7d
 800ce54:	3fd4d612 	.word	0x3fd4d612
 800ce58:	55555555 	.word	0x55555555
 800ce5c:	3fc55555 	.word	0x3fc55555
 800ce60:	b12e9282 	.word	0xb12e9282
 800ce64:	3fb3b8c5 	.word	0x3fb3b8c5
 800ce68:	1b8d0159 	.word	0x1b8d0159
 800ce6c:	3fe6066c 	.word	0x3fe6066c
 800ce70:	9c598ac8 	.word	0x9c598ac8
 800ce74:	40002ae5 	.word	0x40002ae5
 800ce78:	1c8a2d4b 	.word	0x1c8a2d4b
 800ce7c:	40033a27 	.word	0x40033a27
 800ce80:	3fefffff 	.word	0x3fefffff
 800ce84:	3fdfffff 	.word	0x3fdfffff
 800ce88:	3ff00000 	.word	0x3ff00000
 800ce8c:	3fe00000 	.word	0x3fe00000
 800ce90:	3fef3332 	.word	0x3fef3332
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	f7f3 fa94 	bl	80003c4 <__adddf3>
 800ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cea0:	4606      	mov	r6, r0
 800cea2:	460f      	mov	r7, r1
 800cea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea8:	f7f3 fd6c 	bl	8000984 <__aeabi_ddiv>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fc3c 	bl	8000730 <__aeabi_dmul>
 800ceb8:	f04f 0800 	mov.w	r8, #0
 800cebc:	4606      	mov	r6, r0
 800cebe:	460f      	mov	r7, r1
 800cec0:	4642      	mov	r2, r8
 800cec2:	465b      	mov	r3, fp
 800cec4:	4640      	mov	r0, r8
 800cec6:	4659      	mov	r1, fp
 800cec8:	f7f3 fc32 	bl	8000730 <__aeabi_dmul>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4620      	mov	r0, r4
 800ced2:	4629      	mov	r1, r5
 800ced4:	f7f3 fa74 	bl	80003c0 <__aeabi_dsub>
 800ced8:	4642      	mov	r2, r8
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	465b      	mov	r3, fp
 800cee0:	4650      	mov	r0, sl
 800cee2:	4659      	mov	r1, fp
 800cee4:	f7f3 fa6e 	bl	80003c4 <__adddf3>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fd48 	bl	8000984 <__aeabi_ddiv>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	f7f3 fa64 	bl	80003c4 <__adddf3>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	a113      	add	r1, pc, #76	; (adr r1, 800cf50 <__ieee754_asin+0x3e8>)
 800cf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf06:	f7f3 fa5b 	bl	80003c0 <__aeabi_dsub>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 fa55 	bl	80003c0 <__aeabi_dsub>
 800cf16:	4642      	mov	r2, r8
 800cf18:	4604      	mov	r4, r0
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4640      	mov	r0, r8
 800cf20:	4659      	mov	r1, fp
 800cf22:	f7f3 fa4f 	bl	80003c4 <__adddf3>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	a10b      	add	r1, pc, #44	; (adr r1, 800cf58 <__ieee754_asin+0x3f0>)
 800cf2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf30:	f7f3 fa46 	bl	80003c0 <__aeabi_dsub>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4620      	mov	r0, r4
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f7f3 fa40 	bl	80003c0 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	a104      	add	r1, pc, #16	; (adr r1, 800cf58 <__ieee754_asin+0x3f0>)
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	e6e7      	b.n	800cd1c <__ieee754_asin+0x1b4>
 800cf4c:	f3af 8000 	nop.w
 800cf50:	33145c07 	.word	0x33145c07
 800cf54:	3c91a626 	.word	0x3c91a626
 800cf58:	54442d18 	.word	0x54442d18
 800cf5c:	3fe921fb 	.word	0x3fe921fb

0800cf60 <__ieee754_pow>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	b093      	sub	sp, #76	; 0x4c
 800cf66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf6a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800cf6e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800cf72:	4689      	mov	r9, r1
 800cf74:	ea56 0102 	orrs.w	r1, r6, r2
 800cf78:	4680      	mov	r8, r0
 800cf7a:	d111      	bne.n	800cfa0 <__ieee754_pow+0x40>
 800cf7c:	1803      	adds	r3, r0, r0
 800cf7e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800cf82:	4152      	adcs	r2, r2
 800cf84:	4299      	cmp	r1, r3
 800cf86:	4b82      	ldr	r3, [pc, #520]	; (800d190 <__ieee754_pow+0x230>)
 800cf88:	4193      	sbcs	r3, r2
 800cf8a:	f080 84b9 	bcs.w	800d900 <__ieee754_pow+0x9a0>
 800cf8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf92:	4640      	mov	r0, r8
 800cf94:	4649      	mov	r1, r9
 800cf96:	f7f3 fa15 	bl	80003c4 <__adddf3>
 800cf9a:	4683      	mov	fp, r0
 800cf9c:	468c      	mov	ip, r1
 800cf9e:	e06f      	b.n	800d080 <__ieee754_pow+0x120>
 800cfa0:	4b7c      	ldr	r3, [pc, #496]	; (800d194 <__ieee754_pow+0x234>)
 800cfa2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cfa6:	429c      	cmp	r4, r3
 800cfa8:	464d      	mov	r5, r9
 800cfaa:	4682      	mov	sl, r0
 800cfac:	dc06      	bgt.n	800cfbc <__ieee754_pow+0x5c>
 800cfae:	d101      	bne.n	800cfb4 <__ieee754_pow+0x54>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d1ec      	bne.n	800cf8e <__ieee754_pow+0x2e>
 800cfb4:	429e      	cmp	r6, r3
 800cfb6:	dc01      	bgt.n	800cfbc <__ieee754_pow+0x5c>
 800cfb8:	d10f      	bne.n	800cfda <__ieee754_pow+0x7a>
 800cfba:	b172      	cbz	r2, 800cfda <__ieee754_pow+0x7a>
 800cfbc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cfc0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cfc4:	ea55 050a 	orrs.w	r5, r5, sl
 800cfc8:	d1e1      	bne.n	800cf8e <__ieee754_pow+0x2e>
 800cfca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cfce:	18db      	adds	r3, r3, r3
 800cfd0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cfd4:	4152      	adcs	r2, r2
 800cfd6:	429d      	cmp	r5, r3
 800cfd8:	e7d5      	b.n	800cf86 <__ieee754_pow+0x26>
 800cfda:	2d00      	cmp	r5, #0
 800cfdc:	da39      	bge.n	800d052 <__ieee754_pow+0xf2>
 800cfde:	4b6e      	ldr	r3, [pc, #440]	; (800d198 <__ieee754_pow+0x238>)
 800cfe0:	429e      	cmp	r6, r3
 800cfe2:	dc52      	bgt.n	800d08a <__ieee754_pow+0x12a>
 800cfe4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cfe8:	429e      	cmp	r6, r3
 800cfea:	f340 849c 	ble.w	800d926 <__ieee754_pow+0x9c6>
 800cfee:	1533      	asrs	r3, r6, #20
 800cff0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cff4:	2b14      	cmp	r3, #20
 800cff6:	dd0f      	ble.n	800d018 <__ieee754_pow+0xb8>
 800cff8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cffc:	fa22 f103 	lsr.w	r1, r2, r3
 800d000:	fa01 f303 	lsl.w	r3, r1, r3
 800d004:	4293      	cmp	r3, r2
 800d006:	f040 848e 	bne.w	800d926 <__ieee754_pow+0x9c6>
 800d00a:	f001 0101 	and.w	r1, r1, #1
 800d00e:	f1c1 0302 	rsb	r3, r1, #2
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	b182      	cbz	r2, 800d038 <__ieee754_pow+0xd8>
 800d016:	e05d      	b.n	800d0d4 <__ieee754_pow+0x174>
 800d018:	2a00      	cmp	r2, #0
 800d01a:	d159      	bne.n	800d0d0 <__ieee754_pow+0x170>
 800d01c:	f1c3 0314 	rsb	r3, r3, #20
 800d020:	fa46 f103 	asr.w	r1, r6, r3
 800d024:	fa01 f303 	lsl.w	r3, r1, r3
 800d028:	42b3      	cmp	r3, r6
 800d02a:	f040 8479 	bne.w	800d920 <__ieee754_pow+0x9c0>
 800d02e:	f001 0101 	and.w	r1, r1, #1
 800d032:	f1c1 0302 	rsb	r3, r1, #2
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	4b58      	ldr	r3, [pc, #352]	; (800d19c <__ieee754_pow+0x23c>)
 800d03a:	429e      	cmp	r6, r3
 800d03c:	d132      	bne.n	800d0a4 <__ieee754_pow+0x144>
 800d03e:	2f00      	cmp	r7, #0
 800d040:	f280 846a 	bge.w	800d918 <__ieee754_pow+0x9b8>
 800d044:	4955      	ldr	r1, [pc, #340]	; (800d19c <__ieee754_pow+0x23c>)
 800d046:	4642      	mov	r2, r8
 800d048:	464b      	mov	r3, r9
 800d04a:	2000      	movs	r0, #0
 800d04c:	f7f3 fc9a 	bl	8000984 <__aeabi_ddiv>
 800d050:	e7a3      	b.n	800cf9a <__ieee754_pow+0x3a>
 800d052:	2300      	movs	r3, #0
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	2a00      	cmp	r2, #0
 800d058:	d13c      	bne.n	800d0d4 <__ieee754_pow+0x174>
 800d05a:	4b4e      	ldr	r3, [pc, #312]	; (800d194 <__ieee754_pow+0x234>)
 800d05c:	429e      	cmp	r6, r3
 800d05e:	d1eb      	bne.n	800d038 <__ieee754_pow+0xd8>
 800d060:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d064:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d068:	ea53 030a 	orrs.w	r3, r3, sl
 800d06c:	f000 8448 	beq.w	800d900 <__ieee754_pow+0x9a0>
 800d070:	4b4b      	ldr	r3, [pc, #300]	; (800d1a0 <__ieee754_pow+0x240>)
 800d072:	429c      	cmp	r4, r3
 800d074:	dd0b      	ble.n	800d08e <__ieee754_pow+0x12e>
 800d076:	2f00      	cmp	r7, #0
 800d078:	f2c0 8448 	blt.w	800d90c <__ieee754_pow+0x9ac>
 800d07c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d080:	4658      	mov	r0, fp
 800d082:	4661      	mov	r1, ip
 800d084:	b013      	add	sp, #76	; 0x4c
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08a:	2302      	movs	r3, #2
 800d08c:	e7e2      	b.n	800d054 <__ieee754_pow+0xf4>
 800d08e:	2f00      	cmp	r7, #0
 800d090:	f04f 0b00 	mov.w	fp, #0
 800d094:	f04f 0c00 	mov.w	ip, #0
 800d098:	daf2      	bge.n	800d080 <__ieee754_pow+0x120>
 800d09a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800d09e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800d0a2:	e7ed      	b.n	800d080 <__ieee754_pow+0x120>
 800d0a4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d0a8:	d106      	bne.n	800d0b8 <__ieee754_pow+0x158>
 800d0aa:	4642      	mov	r2, r8
 800d0ac:	464b      	mov	r3, r9
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	f7f3 fb3d 	bl	8000730 <__aeabi_dmul>
 800d0b6:	e770      	b.n	800cf9a <__ieee754_pow+0x3a>
 800d0b8:	4b3a      	ldr	r3, [pc, #232]	; (800d1a4 <__ieee754_pow+0x244>)
 800d0ba:	429f      	cmp	r7, r3
 800d0bc:	d10a      	bne.n	800d0d4 <__ieee754_pow+0x174>
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	db08      	blt.n	800d0d4 <__ieee754_pow+0x174>
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	b013      	add	sp, #76	; 0x4c
 800d0c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	f000 be58 	b.w	800dd80 <__ieee754_sqrt>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	f001 fbe4 	bl	800e8a4 <fabs>
 800d0dc:	4683      	mov	fp, r0
 800d0de:	468c      	mov	ip, r1
 800d0e0:	f1ba 0f00 	cmp.w	sl, #0
 800d0e4:	d128      	bne.n	800d138 <__ieee754_pow+0x1d8>
 800d0e6:	b124      	cbz	r4, 800d0f2 <__ieee754_pow+0x192>
 800d0e8:	4b2c      	ldr	r3, [pc, #176]	; (800d19c <__ieee754_pow+0x23c>)
 800d0ea:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d122      	bne.n	800d138 <__ieee754_pow+0x1d8>
 800d0f2:	2f00      	cmp	r7, #0
 800d0f4:	da07      	bge.n	800d106 <__ieee754_pow+0x1a6>
 800d0f6:	465a      	mov	r2, fp
 800d0f8:	4663      	mov	r3, ip
 800d0fa:	4928      	ldr	r1, [pc, #160]	; (800d19c <__ieee754_pow+0x23c>)
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	f7f3 fc41 	bl	8000984 <__aeabi_ddiv>
 800d102:	4683      	mov	fp, r0
 800d104:	468c      	mov	ip, r1
 800d106:	2d00      	cmp	r5, #0
 800d108:	daba      	bge.n	800d080 <__ieee754_pow+0x120>
 800d10a:	9b00      	ldr	r3, [sp, #0]
 800d10c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d110:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d114:	4323      	orrs	r3, r4
 800d116:	d108      	bne.n	800d12a <__ieee754_pow+0x1ca>
 800d118:	465a      	mov	r2, fp
 800d11a:	4663      	mov	r3, ip
 800d11c:	4658      	mov	r0, fp
 800d11e:	4661      	mov	r1, ip
 800d120:	f7f3 f94e 	bl	80003c0 <__aeabi_dsub>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	e790      	b.n	800d04c <__ieee754_pow+0xec>
 800d12a:	9b00      	ldr	r3, [sp, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d1a7      	bne.n	800d080 <__ieee754_pow+0x120>
 800d130:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800d134:	469c      	mov	ip, r3
 800d136:	e7a3      	b.n	800d080 <__ieee754_pow+0x120>
 800d138:	0feb      	lsrs	r3, r5, #31
 800d13a:	3b01      	subs	r3, #1
 800d13c:	930c      	str	r3, [sp, #48]	; 0x30
 800d13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d140:	9b00      	ldr	r3, [sp, #0]
 800d142:	4313      	orrs	r3, r2
 800d144:	d104      	bne.n	800d150 <__ieee754_pow+0x1f0>
 800d146:	4642      	mov	r2, r8
 800d148:	464b      	mov	r3, r9
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	e7e7      	b.n	800d120 <__ieee754_pow+0x1c0>
 800d150:	4b15      	ldr	r3, [pc, #84]	; (800d1a8 <__ieee754_pow+0x248>)
 800d152:	429e      	cmp	r6, r3
 800d154:	f340 80f6 	ble.w	800d344 <__ieee754_pow+0x3e4>
 800d158:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d15c:	429e      	cmp	r6, r3
 800d15e:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <__ieee754_pow+0x240>)
 800d160:	dd09      	ble.n	800d176 <__ieee754_pow+0x216>
 800d162:	429c      	cmp	r4, r3
 800d164:	dc0c      	bgt.n	800d180 <__ieee754_pow+0x220>
 800d166:	2f00      	cmp	r7, #0
 800d168:	da0c      	bge.n	800d184 <__ieee754_pow+0x224>
 800d16a:	2000      	movs	r0, #0
 800d16c:	b013      	add	sp, #76	; 0x4c
 800d16e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d172:	f001 bb92 	b.w	800e89a <__math_oflow>
 800d176:	429c      	cmp	r4, r3
 800d178:	dbf5      	blt.n	800d166 <__ieee754_pow+0x206>
 800d17a:	4b08      	ldr	r3, [pc, #32]	; (800d19c <__ieee754_pow+0x23c>)
 800d17c:	429c      	cmp	r4, r3
 800d17e:	dd15      	ble.n	800d1ac <__ieee754_pow+0x24c>
 800d180:	2f00      	cmp	r7, #0
 800d182:	dcf2      	bgt.n	800d16a <__ieee754_pow+0x20a>
 800d184:	2000      	movs	r0, #0
 800d186:	b013      	add	sp, #76	; 0x4c
 800d188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	f001 bb80 	b.w	800e890 <__math_uflow>
 800d190:	fff00000 	.word	0xfff00000
 800d194:	7ff00000 	.word	0x7ff00000
 800d198:	433fffff 	.word	0x433fffff
 800d19c:	3ff00000 	.word	0x3ff00000
 800d1a0:	3fefffff 	.word	0x3fefffff
 800d1a4:	3fe00000 	.word	0x3fe00000
 800d1a8:	41e00000 	.word	0x41e00000
 800d1ac:	4661      	mov	r1, ip
 800d1ae:	4b60      	ldr	r3, [pc, #384]	; (800d330 <__ieee754_pow+0x3d0>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4658      	mov	r0, fp
 800d1b4:	f7f3 f904 	bl	80003c0 <__aeabi_dsub>
 800d1b8:	a355      	add	r3, pc, #340	; (adr r3, 800d310 <__ieee754_pow+0x3b0>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 fab5 	bl	8000730 <__aeabi_dmul>
 800d1c6:	a354      	add	r3, pc, #336	; (adr r3, 800d318 <__ieee754_pow+0x3b8>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	f7f3 faac 	bl	8000730 <__aeabi_dmul>
 800d1d8:	4b56      	ldr	r3, [pc, #344]	; (800d334 <__ieee754_pow+0x3d4>)
 800d1da:	4682      	mov	sl, r0
 800d1dc:	468b      	mov	fp, r1
 800d1de:	2200      	movs	r2, #0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 faa4 	bl	8000730 <__aeabi_dmul>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	a14c      	add	r1, pc, #304	; (adr r1, 800d320 <__ieee754_pow+0x3c0>)
 800d1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f2:	f7f3 f8e5 	bl	80003c0 <__aeabi_dsub>
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	462b      	mov	r3, r5
 800d1fa:	f7f3 fa99 	bl	8000730 <__aeabi_dmul>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	2000      	movs	r0, #0
 800d204:	494c      	ldr	r1, [pc, #304]	; (800d338 <__ieee754_pow+0x3d8>)
 800d206:	f7f3 f8db 	bl	80003c0 <__aeabi_dsub>
 800d20a:	4622      	mov	r2, r4
 800d20c:	462b      	mov	r3, r5
 800d20e:	4680      	mov	r8, r0
 800d210:	4689      	mov	r9, r1
 800d212:	4620      	mov	r0, r4
 800d214:	4629      	mov	r1, r5
 800d216:	f7f3 fa8b 	bl	8000730 <__aeabi_dmul>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4640      	mov	r0, r8
 800d220:	4649      	mov	r1, r9
 800d222:	f7f3 fa85 	bl	8000730 <__aeabi_dmul>
 800d226:	a340      	add	r3, pc, #256	; (adr r3, 800d328 <__ieee754_pow+0x3c8>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f7f3 fa80 	bl	8000730 <__aeabi_dmul>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4650      	mov	r0, sl
 800d236:	4659      	mov	r1, fp
 800d238:	f7f3 f8c2 	bl	80003c0 <__aeabi_dsub>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	4630      	mov	r0, r6
 800d246:	4639      	mov	r1, r7
 800d248:	f7f3 f8bc 	bl	80003c4 <__adddf3>
 800d24c:	f04f 0a00 	mov.w	sl, #0
 800d250:	4632      	mov	r2, r6
 800d252:	463b      	mov	r3, r7
 800d254:	4650      	mov	r0, sl
 800d256:	468b      	mov	fp, r1
 800d258:	f7f3 f8b2 	bl	80003c0 <__aeabi_dsub>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	4620      	mov	r0, r4
 800d262:	4629      	mov	r1, r5
 800d264:	f7f3 f8ac 	bl	80003c0 <__aeabi_dsub>
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d26c:	3b01      	subs	r3, #1
 800d26e:	4313      	orrs	r3, r2
 800d270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d274:	bf0c      	ite	eq
 800d276:	4b31      	ldreq	r3, [pc, #196]	; (800d33c <__ieee754_pow+0x3dc>)
 800d278:	4b2d      	ldrne	r3, [pc, #180]	; (800d330 <__ieee754_pow+0x3d0>)
 800d27a:	2600      	movs	r6, #0
 800d27c:	2200      	movs	r2, #0
 800d27e:	e9cd 2300 	strd	r2, r3, [sp]
 800d282:	4604      	mov	r4, r0
 800d284:	460d      	mov	r5, r1
 800d286:	4632      	mov	r2, r6
 800d288:	463b      	mov	r3, r7
 800d28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d28e:	f7f3 f897 	bl	80003c0 <__aeabi_dsub>
 800d292:	4652      	mov	r2, sl
 800d294:	465b      	mov	r3, fp
 800d296:	f7f3 fa4b 	bl	8000730 <__aeabi_dmul>
 800d29a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4689      	mov	r9, r1
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f3 fa43 	bl	8000730 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f3 f887 	bl	80003c4 <__adddf3>
 800d2b6:	4632      	mov	r2, r6
 800d2b8:	463b      	mov	r3, r7
 800d2ba:	4680      	mov	r8, r0
 800d2bc:	4689      	mov	r9, r1
 800d2be:	4650      	mov	r0, sl
 800d2c0:	4659      	mov	r1, fp
 800d2c2:	f7f3 fa35 	bl	8000730 <__aeabi_dmul>
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d2d6:	f7f3 f875 	bl	80003c4 <__adddf3>
 800d2da:	4b19      	ldr	r3, [pc, #100]	; (800d340 <__ieee754_pow+0x3e0>)
 800d2dc:	4299      	cmp	r1, r3
 800d2de:	4682      	mov	sl, r0
 800d2e0:	460f      	mov	r7, r1
 800d2e2:	460e      	mov	r6, r1
 800d2e4:	f340 82e7 	ble.w	800d8b6 <__ieee754_pow+0x956>
 800d2e8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d2ec:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d2f0:	4303      	orrs	r3, r0
 800d2f2:	f000 81e1 	beq.w	800d6b8 <__ieee754_pow+0x758>
 800d2f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f7f3 fc89 	bl	8000c14 <__aeabi_dcmplt>
 800d302:	3800      	subs	r0, #0
 800d304:	bf18      	it	ne
 800d306:	2001      	movne	r0, #1
 800d308:	e730      	b.n	800d16c <__ieee754_pow+0x20c>
 800d30a:	bf00      	nop
 800d30c:	f3af 8000 	nop.w
 800d310:	60000000 	.word	0x60000000
 800d314:	3ff71547 	.word	0x3ff71547
 800d318:	f85ddf44 	.word	0xf85ddf44
 800d31c:	3e54ae0b 	.word	0x3e54ae0b
 800d320:	55555555 	.word	0x55555555
 800d324:	3fd55555 	.word	0x3fd55555
 800d328:	652b82fe 	.word	0x652b82fe
 800d32c:	3ff71547 	.word	0x3ff71547
 800d330:	3ff00000 	.word	0x3ff00000
 800d334:	3fd00000 	.word	0x3fd00000
 800d338:	3fe00000 	.word	0x3fe00000
 800d33c:	bff00000 	.word	0xbff00000
 800d340:	408fffff 	.word	0x408fffff
 800d344:	4bd2      	ldr	r3, [pc, #840]	; (800d690 <__ieee754_pow+0x730>)
 800d346:	402b      	ands	r3, r5
 800d348:	2200      	movs	r2, #0
 800d34a:	b943      	cbnz	r3, 800d35e <__ieee754_pow+0x3fe>
 800d34c:	4658      	mov	r0, fp
 800d34e:	4bd1      	ldr	r3, [pc, #836]	; (800d694 <__ieee754_pow+0x734>)
 800d350:	4661      	mov	r1, ip
 800d352:	f7f3 f9ed 	bl	8000730 <__aeabi_dmul>
 800d356:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d35a:	4683      	mov	fp, r0
 800d35c:	460c      	mov	r4, r1
 800d35e:	1523      	asrs	r3, r4, #20
 800d360:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d364:	4413      	add	r3, r2
 800d366:	930b      	str	r3, [sp, #44]	; 0x2c
 800d368:	4bcb      	ldr	r3, [pc, #812]	; (800d698 <__ieee754_pow+0x738>)
 800d36a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d36e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d372:	429c      	cmp	r4, r3
 800d374:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d378:	dd08      	ble.n	800d38c <__ieee754_pow+0x42c>
 800d37a:	4bc8      	ldr	r3, [pc, #800]	; (800d69c <__ieee754_pow+0x73c>)
 800d37c:	429c      	cmp	r4, r3
 800d37e:	f340 8199 	ble.w	800d6b4 <__ieee754_pow+0x754>
 800d382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d384:	3301      	adds	r3, #1
 800d386:	930b      	str	r3, [sp, #44]	; 0x2c
 800d388:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d38c:	2600      	movs	r6, #0
 800d38e:	00f3      	lsls	r3, r6, #3
 800d390:	930d      	str	r3, [sp, #52]	; 0x34
 800d392:	4bc3      	ldr	r3, [pc, #780]	; (800d6a0 <__ieee754_pow+0x740>)
 800d394:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d398:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d39c:	4658      	mov	r0, fp
 800d39e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	4623      	mov	r3, r4
 800d3a8:	f7f3 f80a 	bl	80003c0 <__aeabi_dsub>
 800d3ac:	46da      	mov	sl, fp
 800d3ae:	4652      	mov	r2, sl
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d3b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d3ba:	f7f3 f803 	bl	80003c4 <__adddf3>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	49b7      	ldr	r1, [pc, #732]	; (800d6a4 <__ieee754_pow+0x744>)
 800d3c6:	f7f3 fadd 	bl	8000984 <__aeabi_ddiv>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d3d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d3d6:	f7f3 f9ab 	bl	8000730 <__aeabi_dmul>
 800d3da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d3de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d3e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d3ee:	46ab      	mov	fp, r5
 800d3f0:	106d      	asrs	r5, r5, #1
 800d3f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d3f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d3fa:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d3fe:	2200      	movs	r2, #0
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	4614      	mov	r4, r2
 800d406:	461d      	mov	r5, r3
 800d408:	f7f3 f992 	bl	8000730 <__aeabi_dmul>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d414:	f7f2 ffd4 	bl	80003c0 <__aeabi_dsub>
 800d418:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	4620      	mov	r0, r4
 800d422:	4629      	mov	r1, r5
 800d424:	f7f2 ffcc 	bl	80003c0 <__aeabi_dsub>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	4650      	mov	r0, sl
 800d42e:	4659      	mov	r1, fp
 800d430:	f7f2 ffc6 	bl	80003c0 <__aeabi_dsub>
 800d434:	4642      	mov	r2, r8
 800d436:	464b      	mov	r3, r9
 800d438:	f7f3 f97a 	bl	8000730 <__aeabi_dmul>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	4630      	mov	r0, r6
 800d442:	4639      	mov	r1, r7
 800d444:	f7f2 ffbc 	bl	80003c0 <__aeabi_dsub>
 800d448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d44c:	f7f3 f970 	bl	8000730 <__aeabi_dmul>
 800d450:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d454:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d458:	4610      	mov	r0, r2
 800d45a:	4619      	mov	r1, r3
 800d45c:	f7f3 f968 	bl	8000730 <__aeabi_dmul>
 800d460:	a379      	add	r3, pc, #484	; (adr r3, 800d648 <__ieee754_pow+0x6e8>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	4604      	mov	r4, r0
 800d468:	460d      	mov	r5, r1
 800d46a:	f7f3 f961 	bl	8000730 <__aeabi_dmul>
 800d46e:	a378      	add	r3, pc, #480	; (adr r3, 800d650 <__ieee754_pow+0x6f0>)
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	f7f2 ffa6 	bl	80003c4 <__adddf3>
 800d478:	4622      	mov	r2, r4
 800d47a:	462b      	mov	r3, r5
 800d47c:	f7f3 f958 	bl	8000730 <__aeabi_dmul>
 800d480:	a375      	add	r3, pc, #468	; (adr r3, 800d658 <__ieee754_pow+0x6f8>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f2 ff9d 	bl	80003c4 <__adddf3>
 800d48a:	4622      	mov	r2, r4
 800d48c:	462b      	mov	r3, r5
 800d48e:	f7f3 f94f 	bl	8000730 <__aeabi_dmul>
 800d492:	a373      	add	r3, pc, #460	; (adr r3, 800d660 <__ieee754_pow+0x700>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f2 ff94 	bl	80003c4 <__adddf3>
 800d49c:	4622      	mov	r2, r4
 800d49e:	462b      	mov	r3, r5
 800d4a0:	f7f3 f946 	bl	8000730 <__aeabi_dmul>
 800d4a4:	a370      	add	r3, pc, #448	; (adr r3, 800d668 <__ieee754_pow+0x708>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 ff8b 	bl	80003c4 <__adddf3>
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	f7f3 f93d 	bl	8000730 <__aeabi_dmul>
 800d4b6:	a36e      	add	r3, pc, #440	; (adr r3, 800d670 <__ieee754_pow+0x710>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	f7f2 ff82 	bl	80003c4 <__adddf3>
 800d4c0:	4622      	mov	r2, r4
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	460f      	mov	r7, r1
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f3 f930 	bl	8000730 <__aeabi_dmul>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	f7f3 f92a 	bl	8000730 <__aeabi_dmul>
 800d4dc:	4642      	mov	r2, r8
 800d4de:	4604      	mov	r4, r0
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	464b      	mov	r3, r9
 800d4e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4e8:	f7f2 ff6c 	bl	80003c4 <__adddf3>
 800d4ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4f0:	f7f3 f91e 	bl	8000730 <__aeabi_dmul>
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	462b      	mov	r3, r5
 800d4f8:	f7f2 ff64 	bl	80003c4 <__adddf3>
 800d4fc:	4642      	mov	r2, r8
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	464b      	mov	r3, r9
 800d504:	4640      	mov	r0, r8
 800d506:	4649      	mov	r1, r9
 800d508:	f7f3 f912 	bl	8000730 <__aeabi_dmul>
 800d50c:	4b66      	ldr	r3, [pc, #408]	; (800d6a8 <__ieee754_pow+0x748>)
 800d50e:	2200      	movs	r2, #0
 800d510:	4682      	mov	sl, r0
 800d512:	468b      	mov	fp, r1
 800d514:	f7f2 ff56 	bl	80003c4 <__adddf3>
 800d518:	4632      	mov	r2, r6
 800d51a:	463b      	mov	r3, r7
 800d51c:	f7f2 ff52 	bl	80003c4 <__adddf3>
 800d520:	2400      	movs	r4, #0
 800d522:	460d      	mov	r5, r1
 800d524:	4622      	mov	r2, r4
 800d526:	460b      	mov	r3, r1
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f3 f900 	bl	8000730 <__aeabi_dmul>
 800d530:	4b5d      	ldr	r3, [pc, #372]	; (800d6a8 <__ieee754_pow+0x748>)
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	2200      	movs	r2, #0
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 ff40 	bl	80003c0 <__aeabi_dsub>
 800d540:	4652      	mov	r2, sl
 800d542:	465b      	mov	r3, fp
 800d544:	f7f2 ff3c 	bl	80003c0 <__aeabi_dsub>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4630      	mov	r0, r6
 800d54e:	4639      	mov	r1, r7
 800d550:	f7f2 ff36 	bl	80003c0 <__aeabi_dsub>
 800d554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d558:	f7f3 f8ea 	bl	8000730 <__aeabi_dmul>
 800d55c:	4622      	mov	r2, r4
 800d55e:	4606      	mov	r6, r0
 800d560:	460f      	mov	r7, r1
 800d562:	462b      	mov	r3, r5
 800d564:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d568:	f7f3 f8e2 	bl	8000730 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4630      	mov	r0, r6
 800d572:	4639      	mov	r1, r7
 800d574:	f7f2 ff26 	bl	80003c4 <__adddf3>
 800d578:	4606      	mov	r6, r0
 800d57a:	460f      	mov	r7, r1
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4640      	mov	r0, r8
 800d582:	4649      	mov	r1, r9
 800d584:	f7f2 ff1e 	bl	80003c4 <__adddf3>
 800d588:	2400      	movs	r4, #0
 800d58a:	a33b      	add	r3, pc, #236	; (adr r3, 800d678 <__ieee754_pow+0x718>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	4620      	mov	r0, r4
 800d592:	460d      	mov	r5, r1
 800d594:	f7f3 f8cc 	bl	8000730 <__aeabi_dmul>
 800d598:	4642      	mov	r2, r8
 800d59a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d59e:	464b      	mov	r3, r9
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	f7f2 ff0c 	bl	80003c0 <__aeabi_dsub>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f7f2 ff06 	bl	80003c0 <__aeabi_dsub>
 800d5b4:	a332      	add	r3, pc, #200	; (adr r3, 800d680 <__ieee754_pow+0x720>)
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	f7f3 f8b9 	bl	8000730 <__aeabi_dmul>
 800d5be:	a332      	add	r3, pc, #200	; (adr r3, 800d688 <__ieee754_pow+0x728>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	460f      	mov	r7, r1
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f7f3 f8b0 	bl	8000730 <__aeabi_dmul>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	f7f2 fef4 	bl	80003c4 <__adddf3>
 800d5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5de:	4b33      	ldr	r3, [pc, #204]	; (800d6ac <__ieee754_pow+0x74c>)
 800d5e0:	4413      	add	r3, r2
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f2 feed 	bl	80003c4 <__adddf3>
 800d5ea:	4680      	mov	r8, r0
 800d5ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d5ee:	4689      	mov	r9, r1
 800d5f0:	f7f3 f834 	bl	800065c <__aeabi_i2d>
 800d5f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5f6:	4b2e      	ldr	r3, [pc, #184]	; (800d6b0 <__ieee754_pow+0x750>)
 800d5f8:	4413      	add	r3, r2
 800d5fa:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d5fe:	4604      	mov	r4, r0
 800d600:	460d      	mov	r5, r1
 800d602:	4642      	mov	r2, r8
 800d604:	464b      	mov	r3, r9
 800d606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d60a:	f7f2 fedb 	bl	80003c4 <__adddf3>
 800d60e:	4632      	mov	r2, r6
 800d610:	463b      	mov	r3, r7
 800d612:	f7f2 fed7 	bl	80003c4 <__adddf3>
 800d616:	4622      	mov	r2, r4
 800d618:	462b      	mov	r3, r5
 800d61a:	f7f2 fed3 	bl	80003c4 <__adddf3>
 800d61e:	f04f 0a00 	mov.w	sl, #0
 800d622:	4622      	mov	r2, r4
 800d624:	462b      	mov	r3, r5
 800d626:	4650      	mov	r0, sl
 800d628:	468b      	mov	fp, r1
 800d62a:	f7f2 fec9 	bl	80003c0 <__aeabi_dsub>
 800d62e:	4632      	mov	r2, r6
 800d630:	463b      	mov	r3, r7
 800d632:	f7f2 fec5 	bl	80003c0 <__aeabi_dsub>
 800d636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d63a:	f7f2 fec1 	bl	80003c0 <__aeabi_dsub>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4640      	mov	r0, r8
 800d644:	4649      	mov	r1, r9
 800d646:	e60d      	b.n	800d264 <__ieee754_pow+0x304>
 800d648:	4a454eef 	.word	0x4a454eef
 800d64c:	3fca7e28 	.word	0x3fca7e28
 800d650:	93c9db65 	.word	0x93c9db65
 800d654:	3fcd864a 	.word	0x3fcd864a
 800d658:	a91d4101 	.word	0xa91d4101
 800d65c:	3fd17460 	.word	0x3fd17460
 800d660:	518f264d 	.word	0x518f264d
 800d664:	3fd55555 	.word	0x3fd55555
 800d668:	db6fabff 	.word	0xdb6fabff
 800d66c:	3fdb6db6 	.word	0x3fdb6db6
 800d670:	33333303 	.word	0x33333303
 800d674:	3fe33333 	.word	0x3fe33333
 800d678:	e0000000 	.word	0xe0000000
 800d67c:	3feec709 	.word	0x3feec709
 800d680:	dc3a03fd 	.word	0xdc3a03fd
 800d684:	3feec709 	.word	0x3feec709
 800d688:	145b01f5 	.word	0x145b01f5
 800d68c:	be3e2fe0 	.word	0xbe3e2fe0
 800d690:	7ff00000 	.word	0x7ff00000
 800d694:	43400000 	.word	0x43400000
 800d698:	0003988e 	.word	0x0003988e
 800d69c:	000bb679 	.word	0x000bb679
 800d6a0:	0800f090 	.word	0x0800f090
 800d6a4:	3ff00000 	.word	0x3ff00000
 800d6a8:	40080000 	.word	0x40080000
 800d6ac:	0800f0b0 	.word	0x0800f0b0
 800d6b0:	0800f0a0 	.word	0x0800f0a0
 800d6b4:	2601      	movs	r6, #1
 800d6b6:	e66a      	b.n	800d38e <__ieee754_pow+0x42e>
 800d6b8:	a39d      	add	r3, pc, #628	; (adr r3, 800d930 <__ieee754_pow+0x9d0>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f2 fe7f 	bl	80003c4 <__adddf3>
 800d6c6:	4622      	mov	r2, r4
 800d6c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	4650      	mov	r0, sl
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	f7f2 fe75 	bl	80003c0 <__aeabi_dsub>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6de:	f7f3 fab7 	bl	8000c50 <__aeabi_dcmpgt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f47f ae07 	bne.w	800d2f6 <__ieee754_pow+0x396>
 800d6e8:	4aa3      	ldr	r2, [pc, #652]	; (800d978 <__ieee754_pow+0xa18>)
 800d6ea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	f340 8101 	ble.w	800d8f6 <__ieee754_pow+0x996>
 800d6f4:	151b      	asrs	r3, r3, #20
 800d6f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d6fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d6fe:	fa4a f303 	asr.w	r3, sl, r3
 800d702:	4433      	add	r3, r6
 800d704:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d708:	4f9c      	ldr	r7, [pc, #624]	; (800d97c <__ieee754_pow+0xa1c>)
 800d70a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d70e:	4117      	asrs	r7, r2
 800d710:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d714:	2000      	movs	r0, #0
 800d716:	ea23 0107 	bic.w	r1, r3, r7
 800d71a:	f1c2 0214 	rsb	r2, r2, #20
 800d71e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d722:	fa4a fa02 	asr.w	sl, sl, r2
 800d726:	2e00      	cmp	r6, #0
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	4620      	mov	r0, r4
 800d72e:	4629      	mov	r1, r5
 800d730:	bfb8      	it	lt
 800d732:	f1ca 0a00 	rsblt	sl, sl, #0
 800d736:	f7f2 fe43 	bl	80003c0 <__aeabi_dsub>
 800d73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d73e:	4642      	mov	r2, r8
 800d740:	464b      	mov	r3, r9
 800d742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d746:	f7f2 fe3d 	bl	80003c4 <__adddf3>
 800d74a:	2400      	movs	r4, #0
 800d74c:	a37a      	add	r3, pc, #488	; (adr r3, 800d938 <__ieee754_pow+0x9d8>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4620      	mov	r0, r4
 800d754:	460d      	mov	r5, r1
 800d756:	f7f2 ffeb 	bl	8000730 <__aeabi_dmul>
 800d75a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d75e:	4606      	mov	r6, r0
 800d760:	460f      	mov	r7, r1
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f2 fe2b 	bl	80003c0 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4640      	mov	r0, r8
 800d770:	4649      	mov	r1, r9
 800d772:	f7f2 fe25 	bl	80003c0 <__aeabi_dsub>
 800d776:	a372      	add	r3, pc, #456	; (adr r3, 800d940 <__ieee754_pow+0x9e0>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 ffd8 	bl	8000730 <__aeabi_dmul>
 800d780:	a371      	add	r3, pc, #452	; (adr r3, 800d948 <__ieee754_pow+0x9e8>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	4680      	mov	r8, r0
 800d788:	4689      	mov	r9, r1
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f2 ffcf 	bl	8000730 <__aeabi_dmul>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	4640      	mov	r0, r8
 800d798:	4649      	mov	r1, r9
 800d79a:	f7f2 fe13 	bl	80003c4 <__adddf3>
 800d79e:	4604      	mov	r4, r0
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	4639      	mov	r1, r7
 800d7aa:	f7f2 fe0b 	bl	80003c4 <__adddf3>
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	4680      	mov	r8, r0
 800d7b4:	4689      	mov	r9, r1
 800d7b6:	f7f2 fe03 	bl	80003c0 <__aeabi_dsub>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f2 fdfd 	bl	80003c0 <__aeabi_dsub>
 800d7c6:	4642      	mov	r2, r8
 800d7c8:	4606      	mov	r6, r0
 800d7ca:	460f      	mov	r7, r1
 800d7cc:	464b      	mov	r3, r9
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	f7f2 ffad 	bl	8000730 <__aeabi_dmul>
 800d7d6:	a35e      	add	r3, pc, #376	; (adr r3, 800d950 <__ieee754_pow+0x9f0>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	4604      	mov	r4, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	f7f2 ffa6 	bl	8000730 <__aeabi_dmul>
 800d7e4:	a35c      	add	r3, pc, #368	; (adr r3, 800d958 <__ieee754_pow+0x9f8>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	f7f2 fde9 	bl	80003c0 <__aeabi_dsub>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	f7f2 ff9d 	bl	8000730 <__aeabi_dmul>
 800d7f6:	a35a      	add	r3, pc, #360	; (adr r3, 800d960 <__ieee754_pow+0xa00>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f2 fde2 	bl	80003c4 <__adddf3>
 800d800:	4622      	mov	r2, r4
 800d802:	462b      	mov	r3, r5
 800d804:	f7f2 ff94 	bl	8000730 <__aeabi_dmul>
 800d808:	a357      	add	r3, pc, #348	; (adr r3, 800d968 <__ieee754_pow+0xa08>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f2 fdd7 	bl	80003c0 <__aeabi_dsub>
 800d812:	4622      	mov	r2, r4
 800d814:	462b      	mov	r3, r5
 800d816:	f7f2 ff8b 	bl	8000730 <__aeabi_dmul>
 800d81a:	a355      	add	r3, pc, #340	; (adr r3, 800d970 <__ieee754_pow+0xa10>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	f7f2 fdd0 	bl	80003c4 <__adddf3>
 800d824:	4622      	mov	r2, r4
 800d826:	462b      	mov	r3, r5
 800d828:	f7f2 ff82 	bl	8000730 <__aeabi_dmul>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	4640      	mov	r0, r8
 800d832:	4649      	mov	r1, r9
 800d834:	f7f2 fdc4 	bl	80003c0 <__aeabi_dsub>
 800d838:	4604      	mov	r4, r0
 800d83a:	460d      	mov	r5, r1
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	f7f2 ff74 	bl	8000730 <__aeabi_dmul>
 800d848:	2200      	movs	r2, #0
 800d84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d84e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d852:	4620      	mov	r0, r4
 800d854:	4629      	mov	r1, r5
 800d856:	f7f2 fdb3 	bl	80003c0 <__aeabi_dsub>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d862:	f7f3 f88f 	bl	8000984 <__aeabi_ddiv>
 800d866:	4632      	mov	r2, r6
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	463b      	mov	r3, r7
 800d86e:	4640      	mov	r0, r8
 800d870:	4649      	mov	r1, r9
 800d872:	f7f2 ff5d 	bl	8000730 <__aeabi_dmul>
 800d876:	4632      	mov	r2, r6
 800d878:	463b      	mov	r3, r7
 800d87a:	f7f2 fda3 	bl	80003c4 <__adddf3>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	4620      	mov	r0, r4
 800d884:	4629      	mov	r1, r5
 800d886:	f7f2 fd9b 	bl	80003c0 <__aeabi_dsub>
 800d88a:	4642      	mov	r2, r8
 800d88c:	464b      	mov	r3, r9
 800d88e:	f7f2 fd97 	bl	80003c0 <__aeabi_dsub>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	2000      	movs	r0, #0
 800d898:	4939      	ldr	r1, [pc, #228]	; (800d980 <__ieee754_pow+0xa20>)
 800d89a:	f7f2 fd91 	bl	80003c0 <__aeabi_dsub>
 800d89e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d8a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d8a6:	da29      	bge.n	800d8fc <__ieee754_pow+0x99c>
 800d8a8:	4652      	mov	r2, sl
 800d8aa:	f001 f885 	bl	800e9b8 <scalbn>
 800d8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8b2:	f7ff bbfe 	b.w	800d0b2 <__ieee754_pow+0x152>
 800d8b6:	4b33      	ldr	r3, [pc, #204]	; (800d984 <__ieee754_pow+0xa24>)
 800d8b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d8bc:	429f      	cmp	r7, r3
 800d8be:	f77f af13 	ble.w	800d6e8 <__ieee754_pow+0x788>
 800d8c2:	4b31      	ldr	r3, [pc, #196]	; (800d988 <__ieee754_pow+0xa28>)
 800d8c4:	440b      	add	r3, r1
 800d8c6:	4303      	orrs	r3, r0
 800d8c8:	d009      	beq.n	800d8de <__ieee754_pow+0x97e>
 800d8ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f7f3 f99f 	bl	8000c14 <__aeabi_dcmplt>
 800d8d6:	3800      	subs	r0, #0
 800d8d8:	bf18      	it	ne
 800d8da:	2001      	movne	r0, #1
 800d8dc:	e453      	b.n	800d186 <__ieee754_pow+0x226>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	f7f2 fd6d 	bl	80003c0 <__aeabi_dsub>
 800d8e6:	4642      	mov	r2, r8
 800d8e8:	464b      	mov	r3, r9
 800d8ea:	f7f3 f9a7 	bl	8000c3c <__aeabi_dcmpge>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f43f aefa 	beq.w	800d6e8 <__ieee754_pow+0x788>
 800d8f4:	e7e9      	b.n	800d8ca <__ieee754_pow+0x96a>
 800d8f6:	f04f 0a00 	mov.w	sl, #0
 800d8fa:	e720      	b.n	800d73e <__ieee754_pow+0x7de>
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	e7d6      	b.n	800d8ae <__ieee754_pow+0x94e>
 800d900:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d980 <__ieee754_pow+0xa20>
 800d904:	f04f 0b00 	mov.w	fp, #0
 800d908:	f7ff bbba 	b.w	800d080 <__ieee754_pow+0x120>
 800d90c:	f04f 0b00 	mov.w	fp, #0
 800d910:	f04f 0c00 	mov.w	ip, #0
 800d914:	f7ff bbb4 	b.w	800d080 <__ieee754_pow+0x120>
 800d918:	4640      	mov	r0, r8
 800d91a:	4649      	mov	r1, r9
 800d91c:	f7ff bb3d 	b.w	800cf9a <__ieee754_pow+0x3a>
 800d920:	9200      	str	r2, [sp, #0]
 800d922:	f7ff bb89 	b.w	800d038 <__ieee754_pow+0xd8>
 800d926:	2300      	movs	r3, #0
 800d928:	f7ff bb73 	b.w	800d012 <__ieee754_pow+0xb2>
 800d92c:	f3af 8000 	nop.w
 800d930:	652b82fe 	.word	0x652b82fe
 800d934:	3c971547 	.word	0x3c971547
 800d938:	00000000 	.word	0x00000000
 800d93c:	3fe62e43 	.word	0x3fe62e43
 800d940:	fefa39ef 	.word	0xfefa39ef
 800d944:	3fe62e42 	.word	0x3fe62e42
 800d948:	0ca86c39 	.word	0x0ca86c39
 800d94c:	be205c61 	.word	0xbe205c61
 800d950:	72bea4d0 	.word	0x72bea4d0
 800d954:	3e663769 	.word	0x3e663769
 800d958:	c5d26bf1 	.word	0xc5d26bf1
 800d95c:	3ebbbd41 	.word	0x3ebbbd41
 800d960:	af25de2c 	.word	0xaf25de2c
 800d964:	3f11566a 	.word	0x3f11566a
 800d968:	16bebd93 	.word	0x16bebd93
 800d96c:	3f66c16c 	.word	0x3f66c16c
 800d970:	5555553e 	.word	0x5555553e
 800d974:	3fc55555 	.word	0x3fc55555
 800d978:	3fe00000 	.word	0x3fe00000
 800d97c:	000fffff 	.word	0x000fffff
 800d980:	3ff00000 	.word	0x3ff00000
 800d984:	4090cbff 	.word	0x4090cbff
 800d988:	3f6f3400 	.word	0x3f6f3400
 800d98c:	00000000 	.word	0x00000000

0800d990 <__ieee754_rem_pio2>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	4614      	mov	r4, r2
 800d996:	4ac4      	ldr	r2, [pc, #784]	; (800dca8 <__ieee754_rem_pio2+0x318>)
 800d998:	b08d      	sub	sp, #52	; 0x34
 800d99a:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d99e:	4592      	cmp	sl, r2
 800d9a0:	9104      	str	r1, [sp, #16]
 800d9a2:	dc07      	bgt.n	800d9b4 <__ieee754_rem_pio2+0x24>
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e9c4 0100 	strd	r0, r1, [r4]
 800d9ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d9b0:	2500      	movs	r5, #0
 800d9b2:	e024      	b.n	800d9fe <__ieee754_rem_pio2+0x6e>
 800d9b4:	4abd      	ldr	r2, [pc, #756]	; (800dcac <__ieee754_rem_pio2+0x31c>)
 800d9b6:	4592      	cmp	sl, r2
 800d9b8:	dc72      	bgt.n	800daa0 <__ieee754_rem_pio2+0x110>
 800d9ba:	9b04      	ldr	r3, [sp, #16]
 800d9bc:	4dbc      	ldr	r5, [pc, #752]	; (800dcb0 <__ieee754_rem_pio2+0x320>)
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	a3ab      	add	r3, pc, #684	; (adr r3, 800dc70 <__ieee754_rem_pio2+0x2e0>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	dd36      	ble.n	800da36 <__ieee754_rem_pio2+0xa6>
 800d9c8:	f7f2 fcfa 	bl	80003c0 <__aeabi_dsub>
 800d9cc:	45aa      	cmp	sl, r5
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	460f      	mov	r7, r1
 800d9d2:	d018      	beq.n	800da06 <__ieee754_rem_pio2+0x76>
 800d9d4:	a3a8      	add	r3, pc, #672	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x2e8>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 fcf1 	bl	80003c0 <__aeabi_dsub>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	e9c4 2300 	strd	r2, r3, [r4]
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	4639      	mov	r1, r7
 800d9ea:	f7f2 fce9 	bl	80003c0 <__aeabi_dsub>
 800d9ee:	a3a2      	add	r3, pc, #648	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x2e8>)
 800d9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f4:	f7f2 fce4 	bl	80003c0 <__aeabi_dsub>
 800d9f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9fc:	2501      	movs	r5, #1
 800d9fe:	4628      	mov	r0, r5
 800da00:	b00d      	add	sp, #52	; 0x34
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	a39e      	add	r3, pc, #632	; (adr r3, 800dc80 <__ieee754_rem_pio2+0x2f0>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f2 fcd8 	bl	80003c0 <__aeabi_dsub>
 800da10:	a39d      	add	r3, pc, #628	; (adr r3, 800dc88 <__ieee754_rem_pio2+0x2f8>)
 800da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da16:	4606      	mov	r6, r0
 800da18:	460f      	mov	r7, r1
 800da1a:	f7f2 fcd1 	bl	80003c0 <__aeabi_dsub>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	e9c4 2300 	strd	r2, r3, [r4]
 800da26:	4630      	mov	r0, r6
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f2 fcc9 	bl	80003c0 <__aeabi_dsub>
 800da2e:	a396      	add	r3, pc, #600	; (adr r3, 800dc88 <__ieee754_rem_pio2+0x2f8>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	e7de      	b.n	800d9f4 <__ieee754_rem_pio2+0x64>
 800da36:	f7f2 fcc5 	bl	80003c4 <__adddf3>
 800da3a:	45aa      	cmp	sl, r5
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	d016      	beq.n	800da70 <__ieee754_rem_pio2+0xe0>
 800da42:	a38d      	add	r3, pc, #564	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x2e8>)
 800da44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da48:	f7f2 fcbc 	bl	80003c4 <__adddf3>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	e9c4 2300 	strd	r2, r3, [r4]
 800da54:	4630      	mov	r0, r6
 800da56:	4639      	mov	r1, r7
 800da58:	f7f2 fcb2 	bl	80003c0 <__aeabi_dsub>
 800da5c:	a386      	add	r3, pc, #536	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x2e8>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f2 fcaf 	bl	80003c4 <__adddf3>
 800da66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800da6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800da6e:	e7c6      	b.n	800d9fe <__ieee754_rem_pio2+0x6e>
 800da70:	a383      	add	r3, pc, #524	; (adr r3, 800dc80 <__ieee754_rem_pio2+0x2f0>)
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f7f2 fca5 	bl	80003c4 <__adddf3>
 800da7a:	a383      	add	r3, pc, #524	; (adr r3, 800dc88 <__ieee754_rem_pio2+0x2f8>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	4606      	mov	r6, r0
 800da82:	460f      	mov	r7, r1
 800da84:	f7f2 fc9e 	bl	80003c4 <__adddf3>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	e9c4 2300 	strd	r2, r3, [r4]
 800da90:	4630      	mov	r0, r6
 800da92:	4639      	mov	r1, r7
 800da94:	f7f2 fc94 	bl	80003c0 <__aeabi_dsub>
 800da98:	a37b      	add	r3, pc, #492	; (adr r3, 800dc88 <__ieee754_rem_pio2+0x2f8>)
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	e7e0      	b.n	800da62 <__ieee754_rem_pio2+0xd2>
 800daa0:	4a84      	ldr	r2, [pc, #528]	; (800dcb4 <__ieee754_rem_pio2+0x324>)
 800daa2:	4592      	cmp	sl, r2
 800daa4:	f300 80d5 	bgt.w	800dc52 <__ieee754_rem_pio2+0x2c2>
 800daa8:	f000 fefc 	bl	800e8a4 <fabs>
 800daac:	a378      	add	r3, pc, #480	; (adr r3, 800dc90 <__ieee754_rem_pio2+0x300>)
 800daae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab2:	4606      	mov	r6, r0
 800dab4:	460f      	mov	r7, r1
 800dab6:	f7f2 fe3b 	bl	8000730 <__aeabi_dmul>
 800daba:	4b7f      	ldr	r3, [pc, #508]	; (800dcb8 <__ieee754_rem_pio2+0x328>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	f7f2 fc81 	bl	80003c4 <__adddf3>
 800dac2:	f7f3 f8e5 	bl	8000c90 <__aeabi_d2iz>
 800dac6:	4605      	mov	r5, r0
 800dac8:	f7f2 fdc8 	bl	800065c <__aeabi_i2d>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dad4:	a366      	add	r3, pc, #408	; (adr r3, 800dc70 <__ieee754_rem_pio2+0x2e0>)
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	f7f2 fe29 	bl	8000730 <__aeabi_dmul>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4630      	mov	r0, r6
 800dae4:	4639      	mov	r1, r7
 800dae6:	f7f2 fc6b 	bl	80003c0 <__aeabi_dsub>
 800daea:	a363      	add	r3, pc, #396	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x2e8>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	4680      	mov	r8, r0
 800daf2:	4689      	mov	r9, r1
 800daf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf8:	f7f2 fe1a 	bl	8000730 <__aeabi_dmul>
 800dafc:	2d1f      	cmp	r5, #31
 800dafe:	4606      	mov	r6, r0
 800db00:	460f      	mov	r7, r1
 800db02:	dc0e      	bgt.n	800db22 <__ieee754_rem_pio2+0x192>
 800db04:	4b6d      	ldr	r3, [pc, #436]	; (800dcbc <__ieee754_rem_pio2+0x32c>)
 800db06:	1e6a      	subs	r2, r5, #1
 800db08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0c:	4553      	cmp	r3, sl
 800db0e:	d008      	beq.n	800db22 <__ieee754_rem_pio2+0x192>
 800db10:	4632      	mov	r2, r6
 800db12:	463b      	mov	r3, r7
 800db14:	4640      	mov	r0, r8
 800db16:	4649      	mov	r1, r9
 800db18:	f7f2 fc52 	bl	80003c0 <__aeabi_dsub>
 800db1c:	e9c4 0100 	strd	r0, r1, [r4]
 800db20:	e013      	b.n	800db4a <__ieee754_rem_pio2+0x1ba>
 800db22:	463b      	mov	r3, r7
 800db24:	4632      	mov	r2, r6
 800db26:	4640      	mov	r0, r8
 800db28:	4649      	mov	r1, r9
 800db2a:	f7f2 fc49 	bl	80003c0 <__aeabi_dsub>
 800db2e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800db32:	9305      	str	r3, [sp, #20]
 800db34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db38:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800db3c:	f1ba 0f10 	cmp.w	sl, #16
 800db40:	dc1f      	bgt.n	800db82 <__ieee754_rem_pio2+0x1f2>
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	e9c4 2300 	strd	r2, r3, [r4]
 800db4a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800db4e:	4640      	mov	r0, r8
 800db50:	4653      	mov	r3, sl
 800db52:	4649      	mov	r1, r9
 800db54:	f7f2 fc34 	bl	80003c0 <__aeabi_dsub>
 800db58:	4632      	mov	r2, r6
 800db5a:	463b      	mov	r3, r7
 800db5c:	f7f2 fc30 	bl	80003c0 <__aeabi_dsub>
 800db60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db64:	460b      	mov	r3, r1
 800db66:	9904      	ldr	r1, [sp, #16]
 800db68:	2900      	cmp	r1, #0
 800db6a:	4602      	mov	r2, r0
 800db6c:	f6bf af47 	bge.w	800d9fe <__ieee754_rem_pio2+0x6e>
 800db70:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800db74:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800db78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db7c:	60e3      	str	r3, [r4, #12]
 800db7e:	426d      	negs	r5, r5
 800db80:	e73d      	b.n	800d9fe <__ieee754_rem_pio2+0x6e>
 800db82:	a33f      	add	r3, pc, #252	; (adr r3, 800dc80 <__ieee754_rem_pio2+0x2f0>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db8c:	f7f2 fdd0 	bl	8000730 <__aeabi_dmul>
 800db90:	4606      	mov	r6, r0
 800db92:	460f      	mov	r7, r1
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 fc10 	bl	80003c0 <__aeabi_dsub>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	4640      	mov	r0, r8
 800dbaa:	4649      	mov	r1, r9
 800dbac:	f7f2 fc08 	bl	80003c0 <__aeabi_dsub>
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	f7f2 fc04 	bl	80003c0 <__aeabi_dsub>
 800dbb8:	a333      	add	r3, pc, #204	; (adr r3, 800dc88 <__ieee754_rem_pio2+0x2f8>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbc6:	f7f2 fdb3 	bl	8000730 <__aeabi_dmul>
 800dbca:	4632      	mov	r2, r6
 800dbcc:	463b      	mov	r3, r7
 800dbce:	f7f2 fbf7 	bl	80003c0 <__aeabi_dsub>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460f      	mov	r7, r1
 800dbda:	4650      	mov	r0, sl
 800dbdc:	4659      	mov	r1, fp
 800dbde:	f7f2 fbef 	bl	80003c0 <__aeabi_dsub>
 800dbe2:	9a05      	ldr	r2, [sp, #20]
 800dbe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b31      	cmp	r3, #49	; 0x31
 800dbec:	dc06      	bgt.n	800dbfc <__ieee754_rem_pio2+0x26c>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	e9c4 2300 	strd	r2, r3, [r4]
 800dbf6:	46d0      	mov	r8, sl
 800dbf8:	46d9      	mov	r9, fp
 800dbfa:	e7a6      	b.n	800db4a <__ieee754_rem_pio2+0x1ba>
 800dbfc:	a326      	add	r3, pc, #152	; (adr r3, 800dc98 <__ieee754_rem_pio2+0x308>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc06:	f7f2 fd93 	bl	8000730 <__aeabi_dmul>
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	460f      	mov	r7, r1
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4650      	mov	r0, sl
 800dc14:	4659      	mov	r1, fp
 800dc16:	f7f2 fbd3 	bl	80003c0 <__aeabi_dsub>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4680      	mov	r8, r0
 800dc20:	4689      	mov	r9, r1
 800dc22:	4650      	mov	r0, sl
 800dc24:	4659      	mov	r1, fp
 800dc26:	f7f2 fbcb 	bl	80003c0 <__aeabi_dsub>
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	f7f2 fbc7 	bl	80003c0 <__aeabi_dsub>
 800dc32:	a31b      	add	r3, pc, #108	; (adr r3, 800dca0 <__ieee754_rem_pio2+0x310>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	4606      	mov	r6, r0
 800dc3a:	460f      	mov	r7, r1
 800dc3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc40:	f7f2 fd76 	bl	8000730 <__aeabi_dmul>
 800dc44:	4632      	mov	r2, r6
 800dc46:	463b      	mov	r3, r7
 800dc48:	f7f2 fbba 	bl	80003c0 <__aeabi_dsub>
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	460f      	mov	r7, r1
 800dc50:	e75e      	b.n	800db10 <__ieee754_rem_pio2+0x180>
 800dc52:	4a1b      	ldr	r2, [pc, #108]	; (800dcc0 <__ieee754_rem_pio2+0x330>)
 800dc54:	4592      	cmp	sl, r2
 800dc56:	dd35      	ble.n	800dcc4 <__ieee754_rem_pio2+0x334>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	f7f2 fbb0 	bl	80003c0 <__aeabi_dsub>
 800dc60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc64:	e9c4 0100 	strd	r0, r1, [r4]
 800dc68:	e6a2      	b.n	800d9b0 <__ieee754_rem_pio2+0x20>
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w
 800dc70:	54400000 	.word	0x54400000
 800dc74:	3ff921fb 	.word	0x3ff921fb
 800dc78:	1a626331 	.word	0x1a626331
 800dc7c:	3dd0b461 	.word	0x3dd0b461
 800dc80:	1a600000 	.word	0x1a600000
 800dc84:	3dd0b461 	.word	0x3dd0b461
 800dc88:	2e037073 	.word	0x2e037073
 800dc8c:	3ba3198a 	.word	0x3ba3198a
 800dc90:	6dc9c883 	.word	0x6dc9c883
 800dc94:	3fe45f30 	.word	0x3fe45f30
 800dc98:	2e000000 	.word	0x2e000000
 800dc9c:	3ba3198a 	.word	0x3ba3198a
 800dca0:	252049c1 	.word	0x252049c1
 800dca4:	397b839a 	.word	0x397b839a
 800dca8:	3fe921fb 	.word	0x3fe921fb
 800dcac:	4002d97b 	.word	0x4002d97b
 800dcb0:	3ff921fb 	.word	0x3ff921fb
 800dcb4:	413921fb 	.word	0x413921fb
 800dcb8:	3fe00000 	.word	0x3fe00000
 800dcbc:	0800f0c0 	.word	0x0800f0c0
 800dcc0:	7fefffff 	.word	0x7fefffff
 800dcc4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800dcc8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dccc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800dcd0:	460f      	mov	r7, r1
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	f7f2 ffdc 	bl	8000c90 <__aeabi_d2iz>
 800dcd8:	f7f2 fcc0 	bl	800065c <__aeabi_i2d>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4630      	mov	r0, r6
 800dce2:	4639      	mov	r1, r7
 800dce4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dce8:	f7f2 fb6a 	bl	80003c0 <__aeabi_dsub>
 800dcec:	4b22      	ldr	r3, [pc, #136]	; (800dd78 <__ieee754_rem_pio2+0x3e8>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f7f2 fd1e 	bl	8000730 <__aeabi_dmul>
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	f7f2 ffca 	bl	8000c90 <__aeabi_d2iz>
 800dcfc:	f7f2 fcae 	bl	800065c <__aeabi_i2d>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd0c:	f7f2 fb58 	bl	80003c0 <__aeabi_dsub>
 800dd10:	4b19      	ldr	r3, [pc, #100]	; (800dd78 <__ieee754_rem_pio2+0x3e8>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	f7f2 fd0c 	bl	8000730 <__aeabi_dmul>
 800dd18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dd1c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800dd20:	f04f 0803 	mov.w	r8, #3
 800dd24:	2600      	movs	r6, #0
 800dd26:	2700      	movs	r7, #0
 800dd28:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	463b      	mov	r3, r7
 800dd30:	46c2      	mov	sl, r8
 800dd32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dd36:	f7f2 ff63 	bl	8000c00 <__aeabi_dcmpeq>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d1f4      	bne.n	800dd28 <__ieee754_rem_pio2+0x398>
 800dd3e:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <__ieee754_rem_pio2+0x3ec>)
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	2302      	movs	r3, #2
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	462a      	mov	r2, r5
 800dd48:	4653      	mov	r3, sl
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	a806      	add	r0, sp, #24
 800dd4e:	f000 f985 	bl	800e05c <__kernel_rem_pio2>
 800dd52:	9b04      	ldr	r3, [sp, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	4605      	mov	r5, r0
 800dd58:	f6bf ae51 	bge.w	800d9fe <__ieee754_rem_pio2+0x6e>
 800dd5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800dd60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd64:	e9c4 2300 	strd	r2, r3, [r4]
 800dd68:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800dd6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd70:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800dd74:	e703      	b.n	800db7e <__ieee754_rem_pio2+0x1ee>
 800dd76:	bf00      	nop
 800dd78:	41700000 	.word	0x41700000
 800dd7c:	0800f140 	.word	0x0800f140

0800dd80 <__ieee754_sqrt>:
 800dd80:	f8df c154 	ldr.w	ip, [pc, #340]	; 800ded8 <__ieee754_sqrt+0x158>
 800dd84:	ea3c 0c01 	bics.w	ip, ip, r1
 800dd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8c:	460a      	mov	r2, r1
 800dd8e:	4606      	mov	r6, r0
 800dd90:	460d      	mov	r5, r1
 800dd92:	460c      	mov	r4, r1
 800dd94:	4607      	mov	r7, r0
 800dd96:	4603      	mov	r3, r0
 800dd98:	d10f      	bne.n	800ddba <__ieee754_sqrt+0x3a>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	f7f2 fcc7 	bl	8000730 <__aeabi_dmul>
 800dda2:	4602      	mov	r2, r0
 800dda4:	460b      	mov	r3, r1
 800dda6:	4630      	mov	r0, r6
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7f2 fb0b 	bl	80003c4 <__adddf3>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	dc0e      	bgt.n	800dddc <__ieee754_sqrt+0x5c>
 800ddbe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ddc2:	ea5c 0707 	orrs.w	r7, ip, r7
 800ddc6:	d0f4      	beq.n	800ddb2 <__ieee754_sqrt+0x32>
 800ddc8:	b141      	cbz	r1, 800dddc <__ieee754_sqrt+0x5c>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	f7f2 faf7 	bl	80003c0 <__aeabi_dsub>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	f7f2 fdd5 	bl	8000984 <__aeabi_ddiv>
 800ddda:	e7e8      	b.n	800ddae <__ieee754_sqrt+0x2e>
 800dddc:	1521      	asrs	r1, r4, #20
 800ddde:	d074      	beq.n	800deca <__ieee754_sqrt+0x14a>
 800dde0:	07cc      	lsls	r4, r1, #31
 800dde2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dde6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ddea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ddee:	bf5e      	ittt	pl
 800ddf0:	0fd9      	lsrpl	r1, r3, #31
 800ddf2:	005b      	lslpl	r3, r3, #1
 800ddf4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800ddf8:	2400      	movs	r4, #0
 800ddfa:	0fd9      	lsrs	r1, r3, #31
 800ddfc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800de00:	107f      	asrs	r7, r7, #1
 800de02:	005b      	lsls	r3, r3, #1
 800de04:	2516      	movs	r5, #22
 800de06:	4620      	mov	r0, r4
 800de08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de0c:	1846      	adds	r6, r0, r1
 800de0e:	4296      	cmp	r6, r2
 800de10:	bfde      	ittt	le
 800de12:	1b92      	suble	r2, r2, r6
 800de14:	1870      	addle	r0, r6, r1
 800de16:	1864      	addle	r4, r4, r1
 800de18:	0052      	lsls	r2, r2, #1
 800de1a:	3d01      	subs	r5, #1
 800de1c:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de20:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800de24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de28:	d1f0      	bne.n	800de0c <__ieee754_sqrt+0x8c>
 800de2a:	4629      	mov	r1, r5
 800de2c:	f04f 0e20 	mov.w	lr, #32
 800de30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800de34:	4282      	cmp	r2, r0
 800de36:	eb06 0c05 	add.w	ip, r6, r5
 800de3a:	dc02      	bgt.n	800de42 <__ieee754_sqrt+0xc2>
 800de3c:	d113      	bne.n	800de66 <__ieee754_sqrt+0xe6>
 800de3e:	459c      	cmp	ip, r3
 800de40:	d811      	bhi.n	800de66 <__ieee754_sqrt+0xe6>
 800de42:	f1bc 0f00 	cmp.w	ip, #0
 800de46:	eb0c 0506 	add.w	r5, ip, r6
 800de4a:	da43      	bge.n	800ded4 <__ieee754_sqrt+0x154>
 800de4c:	2d00      	cmp	r5, #0
 800de4e:	db41      	blt.n	800ded4 <__ieee754_sqrt+0x154>
 800de50:	f100 0801 	add.w	r8, r0, #1
 800de54:	1a12      	subs	r2, r2, r0
 800de56:	459c      	cmp	ip, r3
 800de58:	bf88      	it	hi
 800de5a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800de5e:	eba3 030c 	sub.w	r3, r3, ip
 800de62:	4431      	add	r1, r6
 800de64:	4640      	mov	r0, r8
 800de66:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800de6a:	f1be 0e01 	subs.w	lr, lr, #1
 800de6e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800de72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de76:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800de7a:	d1db      	bne.n	800de34 <__ieee754_sqrt+0xb4>
 800de7c:	4313      	orrs	r3, r2
 800de7e:	d006      	beq.n	800de8e <__ieee754_sqrt+0x10e>
 800de80:	1c48      	adds	r0, r1, #1
 800de82:	bf13      	iteet	ne
 800de84:	3101      	addne	r1, #1
 800de86:	3401      	addeq	r4, #1
 800de88:	4671      	moveq	r1, lr
 800de8a:	f021 0101 	bicne.w	r1, r1, #1
 800de8e:	1063      	asrs	r3, r4, #1
 800de90:	0849      	lsrs	r1, r1, #1
 800de92:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de96:	07e2      	lsls	r2, r4, #31
 800de98:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de9c:	bf48      	it	mi
 800de9e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800dea2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dea6:	460e      	mov	r6, r1
 800dea8:	e783      	b.n	800ddb2 <__ieee754_sqrt+0x32>
 800deaa:	0ada      	lsrs	r2, r3, #11
 800deac:	3815      	subs	r0, #21
 800deae:	055b      	lsls	r3, r3, #21
 800deb0:	2a00      	cmp	r2, #0
 800deb2:	d0fa      	beq.n	800deaa <__ieee754_sqrt+0x12a>
 800deb4:	02d5      	lsls	r5, r2, #11
 800deb6:	d50a      	bpl.n	800dece <__ieee754_sqrt+0x14e>
 800deb8:	f1c1 0420 	rsb	r4, r1, #32
 800debc:	fa23 f404 	lsr.w	r4, r3, r4
 800dec0:	1e4d      	subs	r5, r1, #1
 800dec2:	408b      	lsls	r3, r1
 800dec4:	4322      	orrs	r2, r4
 800dec6:	1b41      	subs	r1, r0, r5
 800dec8:	e78a      	b.n	800dde0 <__ieee754_sqrt+0x60>
 800deca:	4608      	mov	r0, r1
 800decc:	e7f0      	b.n	800deb0 <__ieee754_sqrt+0x130>
 800dece:	0052      	lsls	r2, r2, #1
 800ded0:	3101      	adds	r1, #1
 800ded2:	e7ef      	b.n	800deb4 <__ieee754_sqrt+0x134>
 800ded4:	4680      	mov	r8, r0
 800ded6:	e7bd      	b.n	800de54 <__ieee754_sqrt+0xd4>
 800ded8:	7ff00000 	.word	0x7ff00000
 800dedc:	00000000 	.word	0x00000000

0800dee0 <__kernel_cos>:
 800dee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dee8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800deec:	e9cd 2300 	strd	r2, r3, [sp]
 800def0:	4680      	mov	r8, r0
 800def2:	460f      	mov	r7, r1
 800def4:	da04      	bge.n	800df00 <__kernel_cos+0x20>
 800def6:	f7f2 fecb 	bl	8000c90 <__aeabi_d2iz>
 800defa:	2800      	cmp	r0, #0
 800defc:	f000 8086 	beq.w	800e00c <__kernel_cos+0x12c>
 800df00:	4642      	mov	r2, r8
 800df02:	463b      	mov	r3, r7
 800df04:	4640      	mov	r0, r8
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 fc12 	bl	8000730 <__aeabi_dmul>
 800df0c:	4b4e      	ldr	r3, [pc, #312]	; (800e048 <__kernel_cos+0x168>)
 800df0e:	2200      	movs	r2, #0
 800df10:	4604      	mov	r4, r0
 800df12:	460d      	mov	r5, r1
 800df14:	f7f2 fc0c 	bl	8000730 <__aeabi_dmul>
 800df18:	a33f      	add	r3, pc, #252	; (adr r3, 800e018 <__kernel_cos+0x138>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	4682      	mov	sl, r0
 800df20:	468b      	mov	fp, r1
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 fc03 	bl	8000730 <__aeabi_dmul>
 800df2a:	a33d      	add	r3, pc, #244	; (adr r3, 800e020 <__kernel_cos+0x140>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 fa48 	bl	80003c4 <__adddf3>
 800df34:	4622      	mov	r2, r4
 800df36:	462b      	mov	r3, r5
 800df38:	f7f2 fbfa 	bl	8000730 <__aeabi_dmul>
 800df3c:	a33a      	add	r3, pc, #232	; (adr r3, 800e028 <__kernel_cos+0x148>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 fa3d 	bl	80003c0 <__aeabi_dsub>
 800df46:	4622      	mov	r2, r4
 800df48:	462b      	mov	r3, r5
 800df4a:	f7f2 fbf1 	bl	8000730 <__aeabi_dmul>
 800df4e:	a338      	add	r3, pc, #224	; (adr r3, 800e030 <__kernel_cos+0x150>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 fa36 	bl	80003c4 <__adddf3>
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	f7f2 fbe8 	bl	8000730 <__aeabi_dmul>
 800df60:	a335      	add	r3, pc, #212	; (adr r3, 800e038 <__kernel_cos+0x158>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 fa2b 	bl	80003c0 <__aeabi_dsub>
 800df6a:	4622      	mov	r2, r4
 800df6c:	462b      	mov	r3, r5
 800df6e:	f7f2 fbdf 	bl	8000730 <__aeabi_dmul>
 800df72:	a333      	add	r3, pc, #204	; (adr r3, 800e040 <__kernel_cos+0x160>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 fa24 	bl	80003c4 <__adddf3>
 800df7c:	4622      	mov	r2, r4
 800df7e:	462b      	mov	r3, r5
 800df80:	f7f2 fbd6 	bl	8000730 <__aeabi_dmul>
 800df84:	4622      	mov	r2, r4
 800df86:	462b      	mov	r3, r5
 800df88:	f7f2 fbd2 	bl	8000730 <__aeabi_dmul>
 800df8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	4640      	mov	r0, r8
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 fbca 	bl	8000730 <__aeabi_dmul>
 800df9c:	460b      	mov	r3, r1
 800df9e:	4602      	mov	r2, r0
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7f2 fa0c 	bl	80003c0 <__aeabi_dsub>
 800dfa8:	4b28      	ldr	r3, [pc, #160]	; (800e04c <__kernel_cos+0x16c>)
 800dfaa:	429e      	cmp	r6, r3
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	dc0e      	bgt.n	800dfd0 <__kernel_cos+0xf0>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	4659      	mov	r1, fp
 800dfba:	f7f2 fa01 	bl	80003c0 <__aeabi_dsub>
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4923      	ldr	r1, [pc, #140]	; (800e050 <__kernel_cos+0x170>)
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	f7f2 f9fb 	bl	80003c0 <__aeabi_dsub>
 800dfca:	b003      	add	sp, #12
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	4b20      	ldr	r3, [pc, #128]	; (800e054 <__kernel_cos+0x174>)
 800dfd2:	491f      	ldr	r1, [pc, #124]	; (800e050 <__kernel_cos+0x170>)
 800dfd4:	429e      	cmp	r6, r3
 800dfd6:	bfcc      	ite	gt
 800dfd8:	4d1f      	ldrgt	r5, [pc, #124]	; (800e058 <__kernel_cos+0x178>)
 800dfda:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800dfde:	2400      	movs	r4, #0
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	462b      	mov	r3, r5
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f7f2 f9eb 	bl	80003c0 <__aeabi_dsub>
 800dfea:	4622      	mov	r2, r4
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	462b      	mov	r3, r5
 800dff2:	4650      	mov	r0, sl
 800dff4:	4659      	mov	r1, fp
 800dff6:	f7f2 f9e3 	bl	80003c0 <__aeabi_dsub>
 800dffa:	4642      	mov	r2, r8
 800dffc:	464b      	mov	r3, r9
 800dffe:	f7f2 f9df 	bl	80003c0 <__aeabi_dsub>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	e7dc      	b.n	800dfc6 <__kernel_cos+0xe6>
 800e00c:	4910      	ldr	r1, [pc, #64]	; (800e050 <__kernel_cos+0x170>)
 800e00e:	2000      	movs	r0, #0
 800e010:	e7db      	b.n	800dfca <__kernel_cos+0xea>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	be8838d4 	.word	0xbe8838d4
 800e01c:	bda8fae9 	.word	0xbda8fae9
 800e020:	bdb4b1c4 	.word	0xbdb4b1c4
 800e024:	3e21ee9e 	.word	0x3e21ee9e
 800e028:	809c52ad 	.word	0x809c52ad
 800e02c:	3e927e4f 	.word	0x3e927e4f
 800e030:	19cb1590 	.word	0x19cb1590
 800e034:	3efa01a0 	.word	0x3efa01a0
 800e038:	16c15177 	.word	0x16c15177
 800e03c:	3f56c16c 	.word	0x3f56c16c
 800e040:	5555554c 	.word	0x5555554c
 800e044:	3fa55555 	.word	0x3fa55555
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	3fd33332 	.word	0x3fd33332
 800e050:	3ff00000 	.word	0x3ff00000
 800e054:	3fe90000 	.word	0x3fe90000
 800e058:	3fd20000 	.word	0x3fd20000

0800e05c <__kernel_rem_pio2>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e064:	f112 0f14 	cmn.w	r2, #20
 800e068:	9308      	str	r3, [sp, #32]
 800e06a:	9106      	str	r1, [sp, #24]
 800e06c:	4bb5      	ldr	r3, [pc, #724]	; (800e344 <__kernel_rem_pio2+0x2e8>)
 800e06e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e070:	9009      	str	r0, [sp, #36]	; 0x24
 800e072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e076:	9302      	str	r3, [sp, #8]
 800e078:	9b08      	ldr	r3, [sp, #32]
 800e07a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e07e:	bfa8      	it	ge
 800e080:	1ed4      	subge	r4, r2, #3
 800e082:	9307      	str	r3, [sp, #28]
 800e084:	bfb2      	itee	lt
 800e086:	2400      	movlt	r4, #0
 800e088:	2318      	movge	r3, #24
 800e08a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e08e:	f06f 0317 	mvn.w	r3, #23
 800e092:	fb04 3303 	mla	r3, r4, r3, r3
 800e096:	eb03 0b02 	add.w	fp, r3, r2
 800e09a:	9a07      	ldr	r2, [sp, #28]
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	eb03 0802 	add.w	r8, r3, r2
 800e0a2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e0a4:	1aa7      	subs	r7, r4, r2
 800e0a6:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0aa:	ae20      	add	r6, sp, #128	; 0x80
 800e0ac:	2500      	movs	r5, #0
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4545      	cmp	r5, r8
 800e0b4:	dd14      	ble.n	800e0e0 <__kernel_rem_pio2+0x84>
 800e0b6:	9a08      	ldr	r2, [sp, #32]
 800e0b8:	ab20      	add	r3, sp, #128	; 0x80
 800e0ba:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800e0be:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800e0c2:	f04f 0800 	mov.w	r8, #0
 800e0c6:	9b02      	ldr	r3, [sp, #8]
 800e0c8:	4598      	cmp	r8, r3
 800e0ca:	dc36      	bgt.n	800e13a <__kernel_rem_pio2+0xde>
 800e0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f1a3 0908 	sub.w	r9, r3, #8
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e9cd 2300 	strd	r2, r3, [sp]
 800e0da:	462f      	mov	r7, r5
 800e0dc:	2600      	movs	r6, #0
 800e0de:	e01f      	b.n	800e120 <__kernel_rem_pio2+0xc4>
 800e0e0:	42ef      	cmn	r7, r5
 800e0e2:	d40b      	bmi.n	800e0fc <__kernel_rem_pio2+0xa0>
 800e0e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0e8:	e9cd 2300 	strd	r2, r3, [sp]
 800e0ec:	f7f2 fab6 	bl	800065c <__aeabi_i2d>
 800e0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0f8:	3501      	adds	r5, #1
 800e0fa:	e7da      	b.n	800e0b2 <__kernel_rem_pio2+0x56>
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4619      	mov	r1, r3
 800e100:	e7f8      	b.n	800e0f4 <__kernel_rem_pio2+0x98>
 800e102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e106:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e10a:	f7f2 fb11 	bl	8000730 <__aeabi_dmul>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e116:	f7f2 f955 	bl	80003c4 <__adddf3>
 800e11a:	e9cd 0100 	strd	r0, r1, [sp]
 800e11e:	3601      	adds	r6, #1
 800e120:	9b07      	ldr	r3, [sp, #28]
 800e122:	429e      	cmp	r6, r3
 800e124:	f1a7 0708 	sub.w	r7, r7, #8
 800e128:	ddeb      	ble.n	800e102 <__kernel_rem_pio2+0xa6>
 800e12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12e:	f108 0801 	add.w	r8, r8, #1
 800e132:	e8ea 2302 	strd	r2, r3, [sl], #8
 800e136:	3508      	adds	r5, #8
 800e138:	e7c5      	b.n	800e0c6 <__kernel_rem_pio2+0x6a>
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	9e02      	ldr	r6, [sp, #8]
 800e13e:	aa0c      	add	r2, sp, #48	; 0x30
 800e140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e144:	930b      	str	r3, [sp, #44]	; 0x2c
 800e146:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e148:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e14c:	930a      	str	r3, [sp, #40]	; 0x28
 800e14e:	ab98      	add	r3, sp, #608	; 0x260
 800e150:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e154:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e158:	ab70      	add	r3, sp, #448	; 0x1c0
 800e15a:	af0c      	add	r7, sp, #48	; 0x30
 800e15c:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800e160:	46d0      	mov	r8, sl
 800e162:	9700      	str	r7, [sp, #0]
 800e164:	46b1      	mov	r9, r6
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	f1a8 0808 	sub.w	r8, r8, #8
 800e16e:	dc71      	bgt.n	800e254 <__kernel_rem_pio2+0x1f8>
 800e170:	465a      	mov	r2, fp
 800e172:	4620      	mov	r0, r4
 800e174:	4629      	mov	r1, r5
 800e176:	f000 fc1f 	bl	800e9b8 <scalbn>
 800e17a:	2200      	movs	r2, #0
 800e17c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e180:	4604      	mov	r4, r0
 800e182:	460d      	mov	r5, r1
 800e184:	f7f2 fad4 	bl	8000730 <__aeabi_dmul>
 800e188:	f000 fb96 	bl	800e8b8 <floor>
 800e18c:	4b6e      	ldr	r3, [pc, #440]	; (800e348 <__kernel_rem_pio2+0x2ec>)
 800e18e:	2200      	movs	r2, #0
 800e190:	f7f2 face 	bl	8000730 <__aeabi_dmul>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f2 f910 	bl	80003c0 <__aeabi_dsub>
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	f7f2 fd74 	bl	8000c90 <__aeabi_d2iz>
 800e1a8:	9004      	str	r0, [sp, #16]
 800e1aa:	f7f2 fa57 	bl	800065c <__aeabi_i2d>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	f7f2 f903 	bl	80003c0 <__aeabi_dsub>
 800e1ba:	f1bb 0f00 	cmp.w	fp, #0
 800e1be:	4680      	mov	r8, r0
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	dd70      	ble.n	800e2a6 <__kernel_rem_pio2+0x24a>
 800e1c4:	1e72      	subs	r2, r6, #1
 800e1c6:	ab0c      	add	r3, sp, #48	; 0x30
 800e1c8:	9c04      	ldr	r4, [sp, #16]
 800e1ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1ce:	f1cb 0118 	rsb	r1, fp, #24
 800e1d2:	fa40 f301 	asr.w	r3, r0, r1
 800e1d6:	441c      	add	r4, r3
 800e1d8:	408b      	lsls	r3, r1
 800e1da:	1ac0      	subs	r0, r0, r3
 800e1dc:	ab0c      	add	r3, sp, #48	; 0x30
 800e1de:	9404      	str	r4, [sp, #16]
 800e1e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e1e4:	f1cb 0317 	rsb	r3, fp, #23
 800e1e8:	fa40 f303 	asr.w	r3, r0, r3
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	9b00      	ldr	r3, [sp, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd66      	ble.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e1f4:	9b04      	ldr	r3, [sp, #16]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	4614      	mov	r4, r2
 800e1fe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e202:	4296      	cmp	r6, r2
 800e204:	f300 80ac 	bgt.w	800e360 <__kernel_rem_pio2+0x304>
 800e208:	f1bb 0f00 	cmp.w	fp, #0
 800e20c:	dd07      	ble.n	800e21e <__kernel_rem_pio2+0x1c2>
 800e20e:	f1bb 0f01 	cmp.w	fp, #1
 800e212:	f000 80b4 	beq.w	800e37e <__kernel_rem_pio2+0x322>
 800e216:	f1bb 0f02 	cmp.w	fp, #2
 800e21a:	f000 80ba 	beq.w	800e392 <__kernel_rem_pio2+0x336>
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d14e      	bne.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e224:	4642      	mov	r2, r8
 800e226:	464b      	mov	r3, r9
 800e228:	4948      	ldr	r1, [pc, #288]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e22a:	2000      	movs	r0, #0
 800e22c:	f7f2 f8c8 	bl	80003c0 <__aeabi_dsub>
 800e230:	4680      	mov	r8, r0
 800e232:	4689      	mov	r9, r1
 800e234:	2c00      	cmp	r4, #0
 800e236:	d044      	beq.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e238:	465a      	mov	r2, fp
 800e23a:	4944      	ldr	r1, [pc, #272]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e23c:	2000      	movs	r0, #0
 800e23e:	f000 fbbb 	bl	800e9b8 <scalbn>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f2 f8b9 	bl	80003c0 <__aeabi_dsub>
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	e036      	b.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e254:	4b3e      	ldr	r3, [pc, #248]	; (800e350 <__kernel_rem_pio2+0x2f4>)
 800e256:	2200      	movs	r2, #0
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f7f2 fa68 	bl	8000730 <__aeabi_dmul>
 800e260:	f7f2 fd16 	bl	8000c90 <__aeabi_d2iz>
 800e264:	f7f2 f9fa 	bl	800065c <__aeabi_i2d>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e270:	4b38      	ldr	r3, [pc, #224]	; (800e354 <__kernel_rem_pio2+0x2f8>)
 800e272:	2200      	movs	r2, #0
 800e274:	f7f2 fa5c 	bl	8000730 <__aeabi_dmul>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 f89e 	bl	80003c0 <__aeabi_dsub>
 800e284:	f7f2 fd04 	bl	8000c90 <__aeabi_d2iz>
 800e288:	9b00      	ldr	r3, [sp, #0]
 800e28a:	f843 0b04 	str.w	r0, [r3], #4
 800e28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e298:	f7f2 f894 	bl	80003c4 <__adddf3>
 800e29c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	e75f      	b.n	800e166 <__kernel_rem_pio2+0x10a>
 800e2a6:	d105      	bne.n	800e2b4 <__kernel_rem_pio2+0x258>
 800e2a8:	1e73      	subs	r3, r6, #1
 800e2aa:	aa0c      	add	r2, sp, #48	; 0x30
 800e2ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2b0:	15c3      	asrs	r3, r0, #23
 800e2b2:	e79b      	b.n	800e1ec <__kernel_rem_pio2+0x190>
 800e2b4:	4b28      	ldr	r3, [pc, #160]	; (800e358 <__kernel_rem_pio2+0x2fc>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f7f2 fcc0 	bl	8000c3c <__aeabi_dcmpge>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d13e      	bne.n	800e33e <__kernel_rem_pio2+0x2e2>
 800e2c0:	9000      	str	r0, [sp, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	f7f2 fc99 	bl	8000c00 <__aeabi_dcmpeq>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f000 80b1 	beq.w	800e436 <__kernel_rem_pio2+0x3da>
 800e2d4:	1e74      	subs	r4, r6, #1
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	2200      	movs	r2, #0
 800e2da:	9902      	ldr	r1, [sp, #8]
 800e2dc:	428b      	cmp	r3, r1
 800e2de:	da5f      	bge.n	800e3a0 <__kernel_rem_pio2+0x344>
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	d074      	beq.n	800e3ce <__kernel_rem_pio2+0x372>
 800e2e4:	ab0c      	add	r3, sp, #48	; 0x30
 800e2e6:	f1ab 0b18 	sub.w	fp, fp, #24
 800e2ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 809f 	beq.w	800e432 <__kernel_rem_pio2+0x3d6>
 800e2f4:	465a      	mov	r2, fp
 800e2f6:	4915      	ldr	r1, [pc, #84]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e2f8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800e350 <__kernel_rem_pio2+0x2f4>
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	f000 fb5b 	bl	800e9b8 <scalbn>
 800e302:	ab70      	add	r3, sp, #448	; 0x1c0
 800e304:	4606      	mov	r6, r0
 800e306:	460f      	mov	r7, r1
 800e308:	00e5      	lsls	r5, r4, #3
 800e30a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e30e:	46a2      	mov	sl, r4
 800e310:	f04f 0800 	mov.w	r8, #0
 800e314:	f1ba 0f00 	cmp.w	sl, #0
 800e318:	f280 80c3 	bge.w	800e4a2 <__kernel_rem_pio2+0x446>
 800e31c:	4626      	mov	r6, r4
 800e31e:	2e00      	cmp	r6, #0
 800e320:	f2c0 80f5 	blt.w	800e50e <__kernel_rem_pio2+0x4b2>
 800e324:	4b0d      	ldr	r3, [pc, #52]	; (800e35c <__kernel_rem_pio2+0x300>)
 800e326:	9307      	str	r3, [sp, #28]
 800e328:	ab70      	add	r3, sp, #448	; 0x1c0
 800e32a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e32e:	f04f 0a00 	mov.w	sl, #0
 800e332:	f04f 0b00 	mov.w	fp, #0
 800e336:	f04f 0800 	mov.w	r8, #0
 800e33a:	1ba7      	subs	r7, r4, r6
 800e33c:	e0db      	b.n	800e4f6 <__kernel_rem_pio2+0x49a>
 800e33e:	2302      	movs	r3, #2
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	e757      	b.n	800e1f4 <__kernel_rem_pio2+0x198>
 800e344:	0800f288 	.word	0x0800f288
 800e348:	40200000 	.word	0x40200000
 800e34c:	3ff00000 	.word	0x3ff00000
 800e350:	3e700000 	.word	0x3e700000
 800e354:	41700000 	.word	0x41700000
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	0800f248 	.word	0x0800f248
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	b944      	cbnz	r4, 800e376 <__kernel_rem_pio2+0x31a>
 800e364:	b11b      	cbz	r3, 800e36e <__kernel_rem_pio2+0x312>
 800e366:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e36a:	603b      	str	r3, [r7, #0]
 800e36c:	2301      	movs	r3, #1
 800e36e:	3201      	adds	r2, #1
 800e370:	3704      	adds	r7, #4
 800e372:	461c      	mov	r4, r3
 800e374:	e745      	b.n	800e202 <__kernel_rem_pio2+0x1a6>
 800e376:	1acb      	subs	r3, r1, r3
 800e378:	603b      	str	r3, [r7, #0]
 800e37a:	4623      	mov	r3, r4
 800e37c:	e7f7      	b.n	800e36e <__kernel_rem_pio2+0x312>
 800e37e:	1e72      	subs	r2, r6, #1
 800e380:	ab0c      	add	r3, sp, #48	; 0x30
 800e382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e386:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e38a:	a90c      	add	r1, sp, #48	; 0x30
 800e38c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e390:	e745      	b.n	800e21e <__kernel_rem_pio2+0x1c2>
 800e392:	1e72      	subs	r2, r6, #1
 800e394:	ab0c      	add	r3, sp, #48	; 0x30
 800e396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e39e:	e7f4      	b.n	800e38a <__kernel_rem_pio2+0x32e>
 800e3a0:	a90c      	add	r1, sp, #48	; 0x30
 800e3a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	e796      	b.n	800e2da <__kernel_rem_pio2+0x27e>
 800e3ac:	3401      	adds	r4, #1
 800e3ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	d0fa      	beq.n	800e3ac <__kernel_rem_pio2+0x350>
 800e3b6:	9b08      	ldr	r3, [sp, #32]
 800e3b8:	18f5      	adds	r5, r6, r3
 800e3ba:	ab20      	add	r3, sp, #128	; 0x80
 800e3bc:	f106 0801 	add.w	r8, r6, #1
 800e3c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e3c4:	4434      	add	r4, r6
 800e3c6:	4544      	cmp	r4, r8
 800e3c8:	da04      	bge.n	800e3d4 <__kernel_rem_pio2+0x378>
 800e3ca:	4626      	mov	r6, r4
 800e3cc:	e6bf      	b.n	800e14e <__kernel_rem_pio2+0xf2>
 800e3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3d0:	2401      	movs	r4, #1
 800e3d2:	e7ec      	b.n	800e3ae <__kernel_rem_pio2+0x352>
 800e3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e3da:	f7f2 f93f 	bl	800065c <__aeabi_i2d>
 800e3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e0:	9504      	str	r5, [sp, #16]
 800e3e2:	e9c5 0100 	strd	r0, r1, [r5]
 800e3e6:	3b08      	subs	r3, #8
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	f04f 0900 	mov.w	r9, #0
 800e3ee:	2600      	movs	r6, #0
 800e3f0:	2700      	movs	r7, #0
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	4599      	cmp	r9, r3
 800e3f6:	dd05      	ble.n	800e404 <__kernel_rem_pio2+0x3a8>
 800e3f8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800e3fc:	f108 0801 	add.w	r8, r8, #1
 800e400:	3508      	adds	r5, #8
 800e402:	e7e0      	b.n	800e3c6 <__kernel_rem_pio2+0x36a>
 800e404:	9900      	ldr	r1, [sp, #0]
 800e406:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e40a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800e40e:	9100      	str	r1, [sp, #0]
 800e410:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800e414:	f8cd c010 	str.w	ip, [sp, #16]
 800e418:	f7f2 f98a 	bl	8000730 <__aeabi_dmul>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4630      	mov	r0, r6
 800e422:	4639      	mov	r1, r7
 800e424:	f7f1 ffce 	bl	80003c4 <__adddf3>
 800e428:	f109 0901 	add.w	r9, r9, #1
 800e42c:	4606      	mov	r6, r0
 800e42e:	460f      	mov	r7, r1
 800e430:	e7df      	b.n	800e3f2 <__kernel_rem_pio2+0x396>
 800e432:	3c01      	subs	r4, #1
 800e434:	e756      	b.n	800e2e4 <__kernel_rem_pio2+0x288>
 800e436:	f1cb 0200 	rsb	r2, fp, #0
 800e43a:	4640      	mov	r0, r8
 800e43c:	4649      	mov	r1, r9
 800e43e:	f000 fabb 	bl	800e9b8 <scalbn>
 800e442:	4ba5      	ldr	r3, [pc, #660]	; (800e6d8 <__kernel_rem_pio2+0x67c>)
 800e444:	2200      	movs	r2, #0
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f2 fbf7 	bl	8000c3c <__aeabi_dcmpge>
 800e44e:	b1f8      	cbz	r0, 800e490 <__kernel_rem_pio2+0x434>
 800e450:	4ba2      	ldr	r3, [pc, #648]	; (800e6dc <__kernel_rem_pio2+0x680>)
 800e452:	2200      	movs	r2, #0
 800e454:	4620      	mov	r0, r4
 800e456:	4629      	mov	r1, r5
 800e458:	f7f2 f96a 	bl	8000730 <__aeabi_dmul>
 800e45c:	f7f2 fc18 	bl	8000c90 <__aeabi_d2iz>
 800e460:	4607      	mov	r7, r0
 800e462:	f7f2 f8fb 	bl	800065c <__aeabi_i2d>
 800e466:	4b9c      	ldr	r3, [pc, #624]	; (800e6d8 <__kernel_rem_pio2+0x67c>)
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f961 	bl	8000730 <__aeabi_dmul>
 800e46e:	460b      	mov	r3, r1
 800e470:	4602      	mov	r2, r0
 800e472:	4629      	mov	r1, r5
 800e474:	4620      	mov	r0, r4
 800e476:	f7f1 ffa3 	bl	80003c0 <__aeabi_dsub>
 800e47a:	f7f2 fc09 	bl	8000c90 <__aeabi_d2iz>
 800e47e:	1c74      	adds	r4, r6, #1
 800e480:	ab0c      	add	r3, sp, #48	; 0x30
 800e482:	f10b 0b18 	add.w	fp, fp, #24
 800e486:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e48a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800e48e:	e731      	b.n	800e2f4 <__kernel_rem_pio2+0x298>
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f2 fbfc 	bl	8000c90 <__aeabi_d2iz>
 800e498:	ab0c      	add	r3, sp, #48	; 0x30
 800e49a:	4634      	mov	r4, r6
 800e49c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e4a0:	e728      	b.n	800e2f4 <__kernel_rem_pio2+0x298>
 800e4a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e4a8:	f7f2 f8d8 	bl	800065c <__aeabi_i2d>
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	463b      	mov	r3, r7
 800e4b0:	f7f2 f93e 	bl	8000730 <__aeabi_dmul>
 800e4b4:	4642      	mov	r2, r8
 800e4b6:	e86b 0102 	strd	r0, r1, [fp], #-8
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	4630      	mov	r0, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f7f2 f936 	bl	8000730 <__aeabi_dmul>
 800e4c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	460f      	mov	r7, r1
 800e4cc:	e722      	b.n	800e314 <__kernel_rem_pio2+0x2b8>
 800e4ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e4d2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800e4d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e4da:	f8cd c01c 	str.w	ip, [sp, #28]
 800e4de:	f7f2 f927 	bl	8000730 <__aeabi_dmul>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4650      	mov	r0, sl
 800e4e8:	4659      	mov	r1, fp
 800e4ea:	f7f1 ff6b 	bl	80003c4 <__adddf3>
 800e4ee:	f108 0801 	add.w	r8, r8, #1
 800e4f2:	4682      	mov	sl, r0
 800e4f4:	468b      	mov	fp, r1
 800e4f6:	9b02      	ldr	r3, [sp, #8]
 800e4f8:	4598      	cmp	r8, r3
 800e4fa:	dc01      	bgt.n	800e500 <__kernel_rem_pio2+0x4a4>
 800e4fc:	45b8      	cmp	r8, r7
 800e4fe:	dde6      	ble.n	800e4ce <__kernel_rem_pio2+0x472>
 800e500:	ab48      	add	r3, sp, #288	; 0x120
 800e502:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e506:	e9c7 ab00 	strd	sl, fp, [r7]
 800e50a:	3e01      	subs	r6, #1
 800e50c:	e707      	b.n	800e31e <__kernel_rem_pio2+0x2c2>
 800e50e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e510:	2b02      	cmp	r3, #2
 800e512:	dc09      	bgt.n	800e528 <__kernel_rem_pio2+0x4cc>
 800e514:	2b00      	cmp	r3, #0
 800e516:	dc32      	bgt.n	800e57e <__kernel_rem_pio2+0x522>
 800e518:	d05a      	beq.n	800e5d0 <__kernel_rem_pio2+0x574>
 800e51a:	9b04      	ldr	r3, [sp, #16]
 800e51c:	f003 0007 	and.w	r0, r3, #7
 800e520:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	d1f5      	bne.n	800e51a <__kernel_rem_pio2+0x4be>
 800e52e:	ab48      	add	r3, sp, #288	; 0x120
 800e530:	441d      	add	r5, r3
 800e532:	46aa      	mov	sl, r5
 800e534:	46a3      	mov	fp, r4
 800e536:	f1bb 0f00 	cmp.w	fp, #0
 800e53a:	dc76      	bgt.n	800e62a <__kernel_rem_pio2+0x5ce>
 800e53c:	46aa      	mov	sl, r5
 800e53e:	46a3      	mov	fp, r4
 800e540:	f1bb 0f01 	cmp.w	fp, #1
 800e544:	f300 8090 	bgt.w	800e668 <__kernel_rem_pio2+0x60c>
 800e548:	2700      	movs	r7, #0
 800e54a:	463e      	mov	r6, r7
 800e54c:	2c01      	cmp	r4, #1
 800e54e:	f300 80aa 	bgt.w	800e6a6 <__kernel_rem_pio2+0x64a>
 800e552:	9b00      	ldr	r3, [sp, #0]
 800e554:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800e558:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 80ac 	bne.w	800e6ba <__kernel_rem_pio2+0x65e>
 800e562:	4603      	mov	r3, r0
 800e564:	9806      	ldr	r0, [sp, #24]
 800e566:	462a      	mov	r2, r5
 800e568:	e9c0 2300 	strd	r2, r3, [r0]
 800e56c:	4622      	mov	r2, r4
 800e56e:	460b      	mov	r3, r1
 800e570:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e574:	463a      	mov	r2, r7
 800e576:	4633      	mov	r3, r6
 800e578:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e57c:	e7cd      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e57e:	ab48      	add	r3, sp, #288	; 0x120
 800e580:	2000      	movs	r0, #0
 800e582:	441d      	add	r5, r3
 800e584:	46a0      	mov	r8, r4
 800e586:	4601      	mov	r1, r0
 800e588:	f1b8 0f00 	cmp.w	r8, #0
 800e58c:	da3a      	bge.n	800e604 <__kernel_rem_pio2+0x5a8>
 800e58e:	9b00      	ldr	r3, [sp, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d03e      	beq.n	800e612 <__kernel_rem_pio2+0x5b6>
 800e594:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800e598:	462b      	mov	r3, r5
 800e59a:	9d06      	ldr	r5, [sp, #24]
 800e59c:	4602      	mov	r2, r0
 800e59e:	e9c5 2300 	strd	r2, r3, [r5]
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e5a8:	f7f1 ff0a 	bl	80003c0 <__aeabi_dsub>
 800e5ac:	ad48      	add	r5, sp, #288	; 0x120
 800e5ae:	4684      	mov	ip, r0
 800e5b0:	460f      	mov	r7, r1
 800e5b2:	2601      	movs	r6, #1
 800e5b4:	42b4      	cmp	r4, r6
 800e5b6:	f105 0508 	add.w	r5, r5, #8
 800e5ba:	da2c      	bge.n	800e616 <__kernel_rem_pio2+0x5ba>
 800e5bc:	9b00      	ldr	r3, [sp, #0]
 800e5be:	b10b      	cbz	r3, 800e5c4 <__kernel_rem_pio2+0x568>
 800e5c0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e5c4:	9906      	ldr	r1, [sp, #24]
 800e5c6:	4662      	mov	r2, ip
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e5ce:	e7a4      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e5d0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800e5d2:	ab48      	add	r3, sp, #288	; 0x120
 800e5d4:	441d      	add	r5, r3
 800e5d6:	4637      	mov	r7, r6
 800e5d8:	2c00      	cmp	r4, #0
 800e5da:	da09      	bge.n	800e5f0 <__kernel_rem_pio2+0x594>
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	b10b      	cbz	r3, 800e5e4 <__kernel_rem_pio2+0x588>
 800e5e0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e5e4:	9906      	ldr	r1, [sp, #24]
 800e5e6:	4632      	mov	r2, r6
 800e5e8:	463b      	mov	r3, r7
 800e5ea:	e9c1 2300 	strd	r2, r3, [r1]
 800e5ee:	e794      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4639      	mov	r1, r7
 800e5f4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e5f8:	f7f1 fee4 	bl	80003c4 <__adddf3>
 800e5fc:	3c01      	subs	r4, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	e7e9      	b.n	800e5d8 <__kernel_rem_pio2+0x57c>
 800e604:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e608:	f7f1 fedc 	bl	80003c4 <__adddf3>
 800e60c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e610:	e7ba      	b.n	800e588 <__kernel_rem_pio2+0x52c>
 800e612:	460d      	mov	r5, r1
 800e614:	e7c0      	b.n	800e598 <__kernel_rem_pio2+0x53c>
 800e616:	4660      	mov	r0, ip
 800e618:	4639      	mov	r1, r7
 800e61a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e61e:	f7f1 fed1 	bl	80003c4 <__adddf3>
 800e622:	3601      	adds	r6, #1
 800e624:	4684      	mov	ip, r0
 800e626:	460f      	mov	r7, r1
 800e628:	e7c4      	b.n	800e5b4 <__kernel_rem_pio2+0x558>
 800e62a:	e9da 6700 	ldrd	r6, r7, [sl]
 800e62e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800e632:	4632      	mov	r2, r6
 800e634:	463b      	mov	r3, r7
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f1 fec3 	bl	80003c4 <__adddf3>
 800e63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4640      	mov	r0, r8
 800e648:	4649      	mov	r1, r9
 800e64a:	f7f1 feb9 	bl	80003c0 <__aeabi_dsub>
 800e64e:	4632      	mov	r2, r6
 800e650:	463b      	mov	r3, r7
 800e652:	f7f1 feb7 	bl	80003c4 <__adddf3>
 800e656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e65a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800e65e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e662:	e9ca 2300 	strd	r2, r3, [sl]
 800e666:	e766      	b.n	800e536 <__kernel_rem_pio2+0x4da>
 800e668:	e9da 8900 	ldrd	r8, r9, [sl]
 800e66c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800e670:	4642      	mov	r2, r8
 800e672:	464b      	mov	r3, r9
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f1 fea4 	bl	80003c4 <__adddf3>
 800e67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f1 fe9a 	bl	80003c0 <__aeabi_dsub>
 800e68c:	4642      	mov	r2, r8
 800e68e:	464b      	mov	r3, r9
 800e690:	f7f1 fe98 	bl	80003c4 <__adddf3>
 800e694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e698:	e86a 0102 	strd	r0, r1, [sl], #-8
 800e69c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e6a0:	e9ca 2300 	strd	r2, r3, [sl]
 800e6a4:	e74c      	b.n	800e540 <__kernel_rem_pio2+0x4e4>
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e6ae:	f7f1 fe89 	bl	80003c4 <__adddf3>
 800e6b2:	3c01      	subs	r4, #1
 800e6b4:	4607      	mov	r7, r0
 800e6b6:	460e      	mov	r6, r1
 800e6b8:	e748      	b.n	800e54c <__kernel_rem_pio2+0x4f0>
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e6c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e6c8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800e6cc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800e6d0:	601d      	str	r5, [r3, #0]
 800e6d2:	615e      	str	r6, [r3, #20]
 800e6d4:	e721      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e6d6:	bf00      	nop
 800e6d8:	41700000 	.word	0x41700000
 800e6dc:	3e700000 	.word	0x3e700000

0800e6e0 <__kernel_sin>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e6ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e6f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e6f4:	4682      	mov	sl, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	da03      	bge.n	800e702 <__kernel_sin+0x22>
 800e6fa:	f7f2 fac9 	bl	8000c90 <__aeabi_d2iz>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d050      	beq.n	800e7a4 <__kernel_sin+0xc4>
 800e702:	4652      	mov	r2, sl
 800e704:	4623      	mov	r3, r4
 800e706:	4650      	mov	r0, sl
 800e708:	4621      	mov	r1, r4
 800e70a:	f7f2 f811 	bl	8000730 <__aeabi_dmul>
 800e70e:	4606      	mov	r6, r0
 800e710:	460f      	mov	r7, r1
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	4650      	mov	r0, sl
 800e718:	4621      	mov	r1, r4
 800e71a:	f7f2 f809 	bl	8000730 <__aeabi_dmul>
 800e71e:	a33e      	add	r3, pc, #248	; (adr r3, 800e818 <__kernel_sin+0x138>)
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	4630      	mov	r0, r6
 800e72a:	4639      	mov	r1, r7
 800e72c:	f7f2 f800 	bl	8000730 <__aeabi_dmul>
 800e730:	a33b      	add	r3, pc, #236	; (adr r3, 800e820 <__kernel_sin+0x140>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f1 fe43 	bl	80003c0 <__aeabi_dsub>
 800e73a:	4632      	mov	r2, r6
 800e73c:	463b      	mov	r3, r7
 800e73e:	f7f1 fff7 	bl	8000730 <__aeabi_dmul>
 800e742:	a339      	add	r3, pc, #228	; (adr r3, 800e828 <__kernel_sin+0x148>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	f7f1 fe3c 	bl	80003c4 <__adddf3>
 800e74c:	4632      	mov	r2, r6
 800e74e:	463b      	mov	r3, r7
 800e750:	f7f1 ffee 	bl	8000730 <__aeabi_dmul>
 800e754:	a336      	add	r3, pc, #216	; (adr r3, 800e830 <__kernel_sin+0x150>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	f7f1 fe31 	bl	80003c0 <__aeabi_dsub>
 800e75e:	4632      	mov	r2, r6
 800e760:	463b      	mov	r3, r7
 800e762:	f7f1 ffe5 	bl	8000730 <__aeabi_dmul>
 800e766:	a334      	add	r3, pc, #208	; (adr r3, 800e838 <__kernel_sin+0x158>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 fe2a 	bl	80003c4 <__adddf3>
 800e770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e774:	b9dd      	cbnz	r5, 800e7ae <__kernel_sin+0xce>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4630      	mov	r0, r6
 800e77c:	4639      	mov	r1, r7
 800e77e:	f7f1 ffd7 	bl	8000730 <__aeabi_dmul>
 800e782:	a32f      	add	r3, pc, #188	; (adr r3, 800e840 <__kernel_sin+0x160>)
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	f7f1 fe1a 	bl	80003c0 <__aeabi_dsub>
 800e78c:	4642      	mov	r2, r8
 800e78e:	464b      	mov	r3, r9
 800e790:	f7f1 ffce 	bl	8000730 <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4650      	mov	r0, sl
 800e79a:	4621      	mov	r1, r4
 800e79c:	f7f1 fe12 	bl	80003c4 <__adddf3>
 800e7a0:	4682      	mov	sl, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	b006      	add	sp, #24
 800e7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b2:	4b25      	ldr	r3, [pc, #148]	; (800e848 <__kernel_sin+0x168>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f7f1 ffbb 	bl	8000730 <__aeabi_dmul>
 800e7ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	f7f1 ffb3 	bl	8000730 <__aeabi_dmul>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7d2:	f7f1 fdf5 	bl	80003c0 <__aeabi_dsub>
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	f7f1 ffa9 	bl	8000730 <__aeabi_dmul>
 800e7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7e2:	f7f1 fded 	bl	80003c0 <__aeabi_dsub>
 800e7e6:	a316      	add	r3, pc, #88	; (adr r3, 800e840 <__kernel_sin+0x160>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460f      	mov	r7, r1
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	f7f1 ff9c 	bl	8000730 <__aeabi_dmul>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f1 fde0 	bl	80003c4 <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4650      	mov	r0, sl
 800e80a:	4621      	mov	r1, r4
 800e80c:	f7f1 fdd8 	bl	80003c0 <__aeabi_dsub>
 800e810:	e7c6      	b.n	800e7a0 <__kernel_sin+0xc0>
 800e812:	bf00      	nop
 800e814:	f3af 8000 	nop.w
 800e818:	5acfd57c 	.word	0x5acfd57c
 800e81c:	3de5d93a 	.word	0x3de5d93a
 800e820:	8a2b9ceb 	.word	0x8a2b9ceb
 800e824:	3e5ae5e6 	.word	0x3e5ae5e6
 800e828:	57b1fe7d 	.word	0x57b1fe7d
 800e82c:	3ec71de3 	.word	0x3ec71de3
 800e830:	19c161d5 	.word	0x19c161d5
 800e834:	3f2a01a0 	.word	0x3f2a01a0
 800e838:	1110f8a6 	.word	0x1110f8a6
 800e83c:	3f811111 	.word	0x3f811111
 800e840:	55555549 	.word	0x55555549
 800e844:	3fc55555 	.word	0x3fc55555
 800e848:	3fe00000 	.word	0x3fe00000

0800e84c <with_errno>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	4616      	mov	r6, r2
 800e854:	f7f9 fb70 	bl	8007f38 <__errno>
 800e858:	4629      	mov	r1, r5
 800e85a:	6006      	str	r6, [r0, #0]
 800e85c:	4620      	mov	r0, r4
 800e85e:	bd70      	pop	{r4, r5, r6, pc}

0800e860 <xflow>:
 800e860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e862:	4615      	mov	r5, r2
 800e864:	461c      	mov	r4, r3
 800e866:	b180      	cbz	r0, 800e88a <xflow+0x2a>
 800e868:	4610      	mov	r0, r2
 800e86a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e86e:	e9cd 0100 	strd	r0, r1, [sp]
 800e872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e876:	4628      	mov	r0, r5
 800e878:	4621      	mov	r1, r4
 800e87a:	f7f1 ff59 	bl	8000730 <__aeabi_dmul>
 800e87e:	2222      	movs	r2, #34	; 0x22
 800e880:	b003      	add	sp, #12
 800e882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e886:	f7ff bfe1 	b.w	800e84c <with_errno>
 800e88a:	4610      	mov	r0, r2
 800e88c:	4619      	mov	r1, r3
 800e88e:	e7ee      	b.n	800e86e <xflow+0xe>

0800e890 <__math_uflow>:
 800e890:	2200      	movs	r2, #0
 800e892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e896:	f7ff bfe3 	b.w	800e860 <xflow>

0800e89a <__math_oflow>:
 800e89a:	2200      	movs	r2, #0
 800e89c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e8a0:	f7ff bfde 	b.w	800e860 <xflow>

0800e8a4 <fabs>:
 800e8a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8a8:	4770      	bx	lr

0800e8aa <finite>:
 800e8aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e8ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e8b2:	0fc0      	lsrs	r0, r0, #31
 800e8b4:	4770      	bx	lr
	...

0800e8b8 <floor>:
 800e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e8c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e8c4:	2e13      	cmp	r6, #19
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4607      	mov	r7, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	dc33      	bgt.n	800e93a <floor+0x82>
 800e8d2:	2e00      	cmp	r6, #0
 800e8d4:	da14      	bge.n	800e900 <floor+0x48>
 800e8d6:	a334      	add	r3, pc, #208	; (adr r3, 800e9a8 <floor+0xf0>)
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	f7f1 fd72 	bl	80003c4 <__adddf3>
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	f7f2 f9b4 	bl	8000c50 <__aeabi_dcmpgt>
 800e8e8:	b138      	cbz	r0, 800e8fa <floor+0x42>
 800e8ea:	2c00      	cmp	r4, #0
 800e8ec:	da58      	bge.n	800e9a0 <floor+0xe8>
 800e8ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e8f2:	431d      	orrs	r5, r3
 800e8f4:	d001      	beq.n	800e8fa <floor+0x42>
 800e8f6:	4c2e      	ldr	r4, [pc, #184]	; (800e9b0 <floor+0xf8>)
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	4623      	mov	r3, r4
 800e8fc:	462f      	mov	r7, r5
 800e8fe:	e025      	b.n	800e94c <floor+0x94>
 800e900:	4a2c      	ldr	r2, [pc, #176]	; (800e9b4 <floor+0xfc>)
 800e902:	fa42 f806 	asr.w	r8, r2, r6
 800e906:	ea01 0208 	and.w	r2, r1, r8
 800e90a:	4302      	orrs	r2, r0
 800e90c:	d01e      	beq.n	800e94c <floor+0x94>
 800e90e:	a326      	add	r3, pc, #152	; (adr r3, 800e9a8 <floor+0xf0>)
 800e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e914:	f7f1 fd56 	bl	80003c4 <__adddf3>
 800e918:	2200      	movs	r2, #0
 800e91a:	2300      	movs	r3, #0
 800e91c:	f7f2 f998 	bl	8000c50 <__aeabi_dcmpgt>
 800e920:	2800      	cmp	r0, #0
 800e922:	d0ea      	beq.n	800e8fa <floor+0x42>
 800e924:	2c00      	cmp	r4, #0
 800e926:	bfbe      	ittt	lt
 800e928:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e92c:	fa43 f606 	asrlt.w	r6, r3, r6
 800e930:	19a4      	addlt	r4, r4, r6
 800e932:	ea24 0408 	bic.w	r4, r4, r8
 800e936:	2500      	movs	r5, #0
 800e938:	e7df      	b.n	800e8fa <floor+0x42>
 800e93a:	2e33      	cmp	r6, #51	; 0x33
 800e93c:	dd0a      	ble.n	800e954 <floor+0x9c>
 800e93e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e942:	d103      	bne.n	800e94c <floor+0x94>
 800e944:	f7f1 fd3e 	bl	80003c4 <__adddf3>
 800e948:	4607      	mov	r7, r0
 800e94a:	460b      	mov	r3, r1
 800e94c:	4638      	mov	r0, r7
 800e94e:	4619      	mov	r1, r3
 800e950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e954:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e95c:	fa22 f808 	lsr.w	r8, r2, r8
 800e960:	ea18 0f00 	tst.w	r8, r0
 800e964:	d0f2      	beq.n	800e94c <floor+0x94>
 800e966:	a310      	add	r3, pc, #64	; (adr r3, 800e9a8 <floor+0xf0>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	f7f1 fd2a 	bl	80003c4 <__adddf3>
 800e970:	2200      	movs	r2, #0
 800e972:	2300      	movs	r3, #0
 800e974:	f7f2 f96c 	bl	8000c50 <__aeabi_dcmpgt>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0be      	beq.n	800e8fa <floor+0x42>
 800e97c:	2c00      	cmp	r4, #0
 800e97e:	da02      	bge.n	800e986 <floor+0xce>
 800e980:	2e14      	cmp	r6, #20
 800e982:	d103      	bne.n	800e98c <floor+0xd4>
 800e984:	3401      	adds	r4, #1
 800e986:	ea25 0508 	bic.w	r5, r5, r8
 800e98a:	e7b6      	b.n	800e8fa <floor+0x42>
 800e98c:	2301      	movs	r3, #1
 800e98e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e992:	fa03 f606 	lsl.w	r6, r3, r6
 800e996:	4435      	add	r5, r6
 800e998:	42bd      	cmp	r5, r7
 800e99a:	bf38      	it	cc
 800e99c:	18e4      	addcc	r4, r4, r3
 800e99e:	e7f2      	b.n	800e986 <floor+0xce>
 800e9a0:	2500      	movs	r5, #0
 800e9a2:	462c      	mov	r4, r5
 800e9a4:	e7a9      	b.n	800e8fa <floor+0x42>
 800e9a6:	bf00      	nop
 800e9a8:	8800759c 	.word	0x8800759c
 800e9ac:	7e37e43c 	.word	0x7e37e43c
 800e9b0:	bff00000 	.word	0xbff00000
 800e9b4:	000fffff 	.word	0x000fffff

0800e9b8 <scalbn>:
 800e9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e9be:	4604      	mov	r4, r0
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	4617      	mov	r7, r2
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	b996      	cbnz	r6, 800e9ee <scalbn+0x36>
 800e9c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9cc:	4303      	orrs	r3, r0
 800e9ce:	d039      	beq.n	800ea44 <scalbn+0x8c>
 800e9d0:	4b33      	ldr	r3, [pc, #204]	; (800eaa0 <scalbn+0xe8>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f7f1 feac 	bl	8000730 <__aeabi_dmul>
 800e9d8:	4b32      	ldr	r3, [pc, #200]	; (800eaa4 <scalbn+0xec>)
 800e9da:	429f      	cmp	r7, r3
 800e9dc:	4604      	mov	r4, r0
 800e9de:	460d      	mov	r5, r1
 800e9e0:	da0f      	bge.n	800ea02 <scalbn+0x4a>
 800e9e2:	a32b      	add	r3, pc, #172	; (adr r3, 800ea90 <scalbn+0xd8>)
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f7f1 fea2 	bl	8000730 <__aeabi_dmul>
 800e9ec:	e006      	b.n	800e9fc <scalbn+0x44>
 800e9ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e9f2:	4296      	cmp	r6, r2
 800e9f4:	d10a      	bne.n	800ea0c <scalbn+0x54>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	f7f1 fce4 	bl	80003c4 <__adddf3>
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	460d      	mov	r5, r1
 800ea00:	e020      	b.n	800ea44 <scalbn+0x8c>
 800ea02:	460b      	mov	r3, r1
 800ea04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ea08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ea0c:	19b9      	adds	r1, r7, r6
 800ea0e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ea12:	4291      	cmp	r1, r2
 800ea14:	dd0e      	ble.n	800ea34 <scalbn+0x7c>
 800ea16:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ea1a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ea1e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ea22:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ea26:	a31c      	add	r3, pc, #112	; (adr r3, 800ea98 <scalbn+0xe0>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	481e      	ldr	r0, [pc, #120]	; (800eaa8 <scalbn+0xf0>)
 800ea2e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ea32:	e7d9      	b.n	800e9e8 <scalbn+0x30>
 800ea34:	2900      	cmp	r1, #0
 800ea36:	dd08      	ble.n	800ea4a <scalbn+0x92>
 800ea38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ea44:	4620      	mov	r0, r4
 800ea46:	4629      	mov	r1, r5
 800ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ea4e:	da12      	bge.n	800ea76 <scalbn+0xbe>
 800ea50:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea54:	429f      	cmp	r7, r3
 800ea56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ea5a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800ea5e:	dcdc      	bgt.n	800ea1a <scalbn+0x62>
 800ea60:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ea64:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ea68:	a309      	add	r3, pc, #36	; (adr r3, 800ea90 <scalbn+0xd8>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	480f      	ldr	r0, [pc, #60]	; (800eaac <scalbn+0xf4>)
 800ea70:	f041 011f 	orr.w	r1, r1, #31
 800ea74:	e7b8      	b.n	800e9e8 <scalbn+0x30>
 800ea76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea7a:	3136      	adds	r1, #54	; 0x36
 800ea7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ea84:	4620      	mov	r0, r4
 800ea86:	4b0a      	ldr	r3, [pc, #40]	; (800eab0 <scalbn+0xf8>)
 800ea88:	4629      	mov	r1, r5
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	e7ac      	b.n	800e9e8 <scalbn+0x30>
 800ea8e:	bf00      	nop
 800ea90:	c2f8f359 	.word	0xc2f8f359
 800ea94:	01a56e1f 	.word	0x01a56e1f
 800ea98:	8800759c 	.word	0x8800759c
 800ea9c:	7e37e43c 	.word	0x7e37e43c
 800eaa0:	43500000 	.word	0x43500000
 800eaa4:	ffff3cb0 	.word	0xffff3cb0
 800eaa8:	8800759c 	.word	0x8800759c
 800eaac:	c2f8f359 	.word	0xc2f8f359
 800eab0:	3c900000 	.word	0x3c900000

0800eab4 <_init>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	bf00      	nop
 800eab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaba:	bc08      	pop	{r3}
 800eabc:	469e      	mov	lr, r3
 800eabe:	4770      	bx	lr

0800eac0 <_fini>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr
